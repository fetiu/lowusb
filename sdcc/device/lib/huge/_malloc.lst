                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:25 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _malloc
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_first_memheader
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
      000000                         33 _malloc_sloc0_1_0:
      000000                         34 	.ds 2
                                     35 ;--------------------------------------------------------
                                     36 ; overlayable items in internal ram 
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; indirectly addressable internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area ISEG    (DATA)
                                     42 ;--------------------------------------------------------
                                     43 ; absolute internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area IABS    (ABS,DATA)
                                     46 	.area IABS    (ABS,DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; bit data
                                     49 ;--------------------------------------------------------
                                     50 	.area BSEG    (BIT)
                                     51 ;--------------------------------------------------------
                                     52 ; paged external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area PSEG    (PAG,XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XSEG    (XDATA)
      000000                         59 _init_dynamic_memory_heap_1_6:
      000000                         60 	.ds 2
      000002                         61 _init_dynamic_memory_size_1_6:
      000002                         62 	.ds 2
      000004                         63 _malloc_size_1_8:
      000004                         64 	.ds 2
      000006                         65 _malloc_current_header_1_9:
      000006                         66 	.ds 2
      000008                         67 _malloc_ret_1_9:
      000008                         68 	.ds 2
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; external initialized ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
      000000                         77 __sdcc_first_memheader::
      000000                         78 	.ds 2
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'init_dynamic_memory'
                                    107 ;------------------------------------------------------------
                                    108 ;heap                      Allocated with name '_init_dynamic_memory_heap_1_6'
                                    109 ;size                      Allocated with name '_init_dynamic_memory_size_1_6'
                                    110 ;------------------------------------------------------------
                                    111 ;	_malloc.c:166: static void init_dynamic_memory(void)
                                    112 ;	-----------------------------------------
                                    113 ;	 function init_dynamic_memory
                                    114 ;	-----------------------------------------
      000000                        115 _init_dynamic_memory:
                           000007   116 	ar7 = 0x07
                           000006   117 	ar6 = 0x06
                           000005   118 	ar5 = 0x05
                           000004   119 	ar4 = 0x04
                           000003   120 	ar3 = 0x03
                           000002   121 	ar2 = 0x02
                           000001   122 	ar1 = 0x01
                           000000   123 	ar0 = 0x00
                                    124 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
      000000 90r00r00         [24]  125 	mov	dptr,#_init_dynamic_memory_heap_1_6
      000003 74r00            [12]  126 	mov	a,#__sdcc_heap
      000005 F0               [24]  127 	movx	@dptr,a
      000006 74s00            [12]  128 	mov	a,#(__sdcc_heap >> 8)
      000008 A3               [24]  129 	inc	dptr
      000009 F0               [24]  130 	movx	@dptr,a
                                    131 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
      00000A 90r00r00         [24]  132 	mov	dptr,#__sdcc_heap_size
      00000D E4               [12]  133 	clr	a
      00000E 93               [24]  134 	movc	a,@a+dptr
      00000F FE               [12]  135 	mov	r6,a
      000010 74 01            [12]  136 	mov	a,#0x01
      000012 93               [24]  137 	movc	a,@a+dptr
      000013 FF               [12]  138 	mov	r7,a
      000014 90r00r02         [24]  139 	mov	dptr,#_init_dynamic_memory_size_1_6
      000017 EE               [12]  140 	mov	a,r6
      000018 F0               [24]  141 	movx	@dptr,a
      000019 EF               [12]  142 	mov	a,r7
      00001A A3               [24]  143 	inc	dptr
      00001B F0               [24]  144 	movx	@dptr,a
                                    145 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
      00001C 74r00            [12]  146 	mov	a,#__sdcc_heap
      00001E 44s00            [12]  147 	orl	a,#(__sdcc_heap >> 8)
      000020 70 1A            [24]  148 	jnz	00102$
                                    149 ;	_malloc.c:173: heap++;
      000022 90r00r00         [24]  150 	mov	dptr,#_init_dynamic_memory_heap_1_6
      000025 74 01            [12]  151 	mov	a,#0x01
      000027 24r00            [12]  152 	add	a,#__sdcc_heap
      000029 F0               [24]  153 	movx	@dptr,a
      00002A E4               [12]  154 	clr	a
      00002B 34s00            [12]  155 	addc	a,#(__sdcc_heap >> 8)
      00002D A3               [24]  156 	inc	dptr
      00002E F0               [24]  157 	movx	@dptr,a
                                    158 ;	_malloc.c:174: size--;
      00002F 1E               [12]  159 	dec	r6
      000030 BE FF 01         [24]  160 	cjne	r6,#0xFF,00109$
      000033 1F               [12]  161 	dec	r7
      000034                        162 00109$:
      000034 90r00r02         [24]  163 	mov	dptr,#_init_dynamic_memory_size_1_6
      000037 EE               [12]  164 	mov	a,r6
      000038 F0               [24]  165 	movx	@dptr,a
      000039 EF               [12]  166 	mov	a,r7
      00003A A3               [24]  167 	inc	dptr
      00003B F0               [24]  168 	movx	@dptr,a
      00003C                        169 00102$:
                                    170 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
      00003C 90r00r00         [24]  171 	mov	dptr,#_init_dynamic_memory_heap_1_6
      00003F E0               [24]  172 	movx	a,@dptr
      000040 FE               [12]  173 	mov	r6,a
      000041 A3               [24]  174 	inc	dptr
      000042 E0               [24]  175 	movx	a,@dptr
      000043 FF               [12]  176 	mov	r7,a
      000044 8E 04            [24]  177 	mov	ar4,r6
      000046 8F 05            [24]  178 	mov	ar5,r7
      000048 90r00r00         [24]  179 	mov	dptr,#__sdcc_first_memheader
      00004B EC               [12]  180 	mov	a,r4
      00004C F0               [24]  181 	movx	@dptr,a
      00004D ED               [12]  182 	mov	a,r5
      00004E A3               [24]  183 	inc	dptr
      00004F F0               [24]  184 	movx	@dptr,a
                                    185 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
      000050 90r00r02         [24]  186 	mov	dptr,#_init_dynamic_memory_size_1_6
      000053 E0               [24]  187 	movx	a,@dptr
      000054 FA               [12]  188 	mov	r2,a
      000055 A3               [24]  189 	inc	dptr
      000056 E0               [24]  190 	movx	a,@dptr
      000057 FB               [12]  191 	mov	r3,a
      000058 EA               [12]  192 	mov	a,r2
      000059 2E               [12]  193 	add	a,r6
      00005A FE               [12]  194 	mov	r6,a
      00005B EB               [12]  195 	mov	a,r3
      00005C 3F               [12]  196 	addc	a,r7
      00005D FF               [12]  197 	mov	r7,a
      00005E EE               [12]  198 	mov	a,r6
      00005F 24 FE            [12]  199 	add	a,#0xFE
      000061 FE               [12]  200 	mov	r6,a
      000062 EF               [12]  201 	mov	a,r7
      000063 34 FF            [12]  202 	addc	a,#0xFF
      000065 FF               [12]  203 	mov	r7,a
      000066 8C 82            [24]  204 	mov	dpl,r4
      000068 8D 83            [24]  205 	mov	dph,r5
      00006A EE               [12]  206 	mov	a,r6
      00006B F0               [24]  207 	movx	@dptr,a
      00006C EF               [12]  208 	mov	a,r7
      00006D A3               [24]  209 	inc	dptr
      00006E F0               [24]  210 	movx	@dptr,a
                                    211 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
      00006F 8E 82            [24]  212 	mov	dpl,r6
      000071 8F 83            [24]  213 	mov	dph,r7
      000073 E4               [12]  214 	clr	a
      000074 F0               [24]  215 	movx	@dptr,a
      000075 A3               [24]  216 	inc	dptr
      000076 F0               [24]  217 	movx	@dptr,a
                                    218 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
      000077 8C 82            [24]  219 	mov	dpl,r4
      000079 8D 83            [24]  220 	mov	dph,r5
      00007B A3               [24]  221 	inc	dptr
      00007C A3               [24]  222 	inc	dptr
      00007D F0               [24]  223 	movx	@dptr,a
      00007E A3               [24]  224 	inc	dptr
      00007F F0               [24]  225 	movx	@dptr,a
      000080 02r00r00         [24]  226 	ljmp	__sdcc_banked_ret
                                    227 ;------------------------------------------------------------
                                    228 ;Allocation info for local variables in function 'malloc'
                                    229 ;------------------------------------------------------------
                                    230 ;sloc0                     Allocated with name '_malloc_sloc0_1_0'
                                    231 ;size                      Allocated with name '_malloc_size_1_8'
                                    232 ;current_header            Allocated with name '_malloc_current_header_1_9'
                                    233 ;new_header                Allocated with name '_malloc_new_header_1_9'
                                    234 ;ret                       Allocated with name '_malloc_ret_1_9'
                                    235 ;------------------------------------------------------------
                                    236 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                                    237 ;	-----------------------------------------
                                    238 ;	 function malloc
                                    239 ;	-----------------------------------------
      000083                        240 _malloc:
      000083 AF 83            [24]  241 	mov	r7,dph
      000085 E5 82            [12]  242 	mov	a,dpl
      000087 90r00r04         [24]  243 	mov	dptr,#_malloc_size_1_8
      00008A F0               [24]  244 	movx	@dptr,a
      00008B EF               [12]  245 	mov	a,r7
      00008C A3               [24]  246 	inc	dptr
      00008D F0               [24]  247 	movx	@dptr,a
                                    248 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
      00008E 90r00r04         [24]  249 	mov	dptr,#_malloc_size_1_8
      000091 E0               [24]  250 	movx	a,@dptr
      000092 FE               [12]  251 	mov	r6,a
      000093 A3               [24]  252 	inc	dptr
      000094 E0               [24]  253 	movx	a,@dptr
      000095 FF               [12]  254 	mov	r7,a
      000096 C3               [12]  255 	clr	c
      000097 74 FB            [12]  256 	mov	a,#0xFB
      000099 9E               [12]  257 	subb	a,r6
      00009A 74 FF            [12]  258 	mov	a,#0xFF
      00009C 9F               [12]  259 	subb	a,r7
      00009D 50 06            [24]  260 	jnc	00102$
                                    261 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
      00009F 90 00 00         [24]  262 	mov	dptr,#0x0000
      0000A2 02r01rCD         [24]  263 	ljmp	00117$
      0000A5                        264 00102$:
                                    265 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
      0000A5 90r00r04         [24]  266 	mov	dptr,#_malloc_size_1_8
      0000A8 74 04            [12]  267 	mov	a,#0x04
      0000AA 2E               [12]  268 	add	a,r6
      0000AB F0               [24]  269 	movx	@dptr,a
      0000AC E4               [12]  270 	clr	a
      0000AD 3F               [12]  271 	addc	a,r7
      0000AE A3               [24]  272 	inc	dptr
      0000AF F0               [24]  273 	movx	@dptr,a
                                    274 ;	_malloc.c:193: if (!_sdcc_first_memheader)
      0000B0 90r00r00         [24]  275 	mov	dptr,#__sdcc_first_memheader
      0000B3 E0               [24]  276 	movx	a,@dptr
      0000B4 F5 F0            [12]  277 	mov	b,a
      0000B6 A3               [24]  278 	inc	dptr
      0000B7 E0               [24]  279 	movx	a,@dptr
      0000B8 45 F0            [12]  280 	orl	a,b
      0000BA 70 09            [24]  281 	jnz	00104$
                                    282 ;	_malloc.c:194: init_dynamic_memory();
      0000BC 78r00            [12]  283 	mov	r0,#_init_dynamic_memory
      0000BE 79s00            [12]  284 	mov	r1,#(_init_dynamic_memory >> 8)
      0000C0 7As00            [12]  285 	mov	r2,#(_init_dynamic_memory >> 16)
      0000C2 12r00r00         [24]  286 	lcall	__sdcc_banked_call
      0000C5                        287 00104$:
                                    288 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
      0000C5 90r00r00         [24]  289 	mov	dptr,#__sdcc_first_memheader
      0000C8 E0               [24]  290 	movx	a,@dptr
      0000C9 FE               [12]  291 	mov	r6,a
      0000CA A3               [24]  292 	inc	dptr
      0000CB E0               [24]  293 	movx	a,@dptr
      0000CC FF               [12]  294 	mov	r7,a
      0000CD 90r00r06         [24]  295 	mov	dptr,#_malloc_current_header_1_9
      0000D0 EE               [12]  296 	mov	a,r6
      0000D1 F0               [24]  297 	movx	@dptr,a
      0000D2 EF               [12]  298 	mov	a,r7
      0000D3 A3               [24]  299 	inc	dptr
      0000D4 F0               [24]  300 	movx	@dptr,a
                                    301 ;	_malloc.c:199: while (1)
      0000D5 90r00r04         [24]  302 	mov	dptr,#_malloc_size_1_8
      0000D8 E0               [24]  303 	movx	a,@dptr
      0000D9 FE               [12]  304 	mov	r6,a
      0000DA A3               [24]  305 	inc	dptr
      0000DB E0               [24]  306 	movx	a,@dptr
      0000DC FF               [12]  307 	mov	r7,a
      0000DD                        308 00110$:
                                    309 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
      0000DD 90r00r06         [24]  310 	mov	dptr,#_malloc_current_header_1_9
      0000E0 E0               [24]  311 	movx	a,@dptr
      0000E1 FC               [12]  312 	mov	r4,a
      0000E2 A3               [24]  313 	inc	dptr
      0000E3 E0               [24]  314 	movx	a,@dptr
      0000E4 FD               [12]  315 	mov	r5,a
      0000E5 8C 82            [24]  316 	mov	dpl,r4
      0000E7 8D 83            [24]  317 	mov	dph,r5
      0000E9 E0               [24]  318 	movx	a,@dptr
      0000EA FA               [12]  319 	mov	r2,a
      0000EB A3               [24]  320 	inc	dptr
      0000EC E0               [24]  321 	movx	a,@dptr
      0000ED FB               [12]  322 	mov	r3,a
      0000EE 8A*00            [24]  323 	mov	_malloc_sloc0_1_0,r2
      0000F0 8B*01            [24]  324 	mov	(_malloc_sloc0_1_0 + 1),r3
                                    325 ;	_malloc.c:210: ((unsigned int)current_header) -
      0000F2 8C 00            [24]  326 	mov	ar0,r4
      0000F4 8D 01            [24]  327 	mov	ar1,r5
      0000F6 E5*00            [12]  328 	mov	a,_malloc_sloc0_1_0
      0000F8 C3               [12]  329 	clr	c
      0000F9 98               [12]  330 	subb	a,r0
      0000FA F5*00            [12]  331 	mov	_malloc_sloc0_1_0,a
      0000FC E5*01            [12]  332 	mov	a,(_malloc_sloc0_1_0 + 1)
      0000FE 99               [12]  333 	subb	a,r1
      0000FF F5*01            [12]  334 	mov	(_malloc_sloc0_1_0 + 1),a
                                    335 ;	_malloc.c:211: current_header->len) >= size)
      000101 8C 82            [24]  336 	mov	dpl,r4
      000103 8D 83            [24]  337 	mov	dph,r5
      000105 A3               [24]  338 	inc	dptr
      000106 A3               [24]  339 	inc	dptr
      000107 E0               [24]  340 	movx	a,@dptr
      000108 F8               [12]  341 	mov	r0,a
      000109 A3               [24]  342 	inc	dptr
      00010A E0               [24]  343 	movx	a,@dptr
      00010B F9               [12]  344 	mov	r1,a
      00010C E5*00            [12]  345 	mov	a,_malloc_sloc0_1_0
      00010E C3               [12]  346 	clr	c
      00010F 98               [12]  347 	subb	a,r0
      000110 F8               [12]  348 	mov	r0,a
      000111 E5*01            [12]  349 	mov	a,(_malloc_sloc0_1_0 + 1)
      000113 99               [12]  350 	subb	a,r1
      000114 F9               [12]  351 	mov	r1,a
      000115 C3               [12]  352 	clr	c
      000116 E8               [12]  353 	mov	a,r0
      000117 9E               [12]  354 	subb	a,r6
      000118 E9               [12]  355 	mov	a,r1
      000119 9F               [12]  356 	subb	a,r7
      00011A 40 11            [24]  357 	jc	00106$
                                    358 ;	_malloc.c:213: ret = current_header->mem;
      00011C 74 04            [12]  359 	mov	a,#0x04
      00011E 2C               [12]  360 	add	a,r4
      00011F FC               [12]  361 	mov	r4,a
      000120 E4               [12]  362 	clr	a
      000121 3D               [12]  363 	addc	a,r5
      000122 FD               [12]  364 	mov	r5,a
      000123 90r00r08         [24]  365 	mov	dptr,#_malloc_ret_1_9
      000126 EC               [12]  366 	mov	a,r4
      000127 F0               [24]  367 	movx	@dptr,a
      000128 ED               [12]  368 	mov	a,r5
      000129 A3               [24]  369 	inc	dptr
      00012A F0               [24]  370 	movx	@dptr,a
                                    371 ;	_malloc.c:214: break;
      00012B 80 23            [24]  372 	sjmp	00111$
      00012D                        373 00106$:
                                    374 ;	_malloc.c:216: current_header = current_header->next;    //else try next
      00012D 90r00r06         [24]  375 	mov	dptr,#_malloc_current_header_1_9
      000130 EA               [12]  376 	mov	a,r2
      000131 F0               [24]  377 	movx	@dptr,a
      000132 EB               [12]  378 	mov	a,r3
      000133 A3               [24]  379 	inc	dptr
      000134 F0               [24]  380 	movx	@dptr,a
                                    381 ;	_malloc.c:217: if (!current_header->next)
      000135 90r00r06         [24]  382 	mov	dptr,#_malloc_current_header_1_9
      000138 E0               [24]  383 	movx	a,@dptr
      000139 FC               [12]  384 	mov	r4,a
      00013A A3               [24]  385 	inc	dptr
      00013B E0               [24]  386 	movx	a,@dptr
      00013C FD               [12]  387 	mov	r5,a
      00013D 8C 82            [24]  388 	mov	dpl,r4
      00013F 8D 83            [24]  389 	mov	dph,r5
      000141 E0               [24]  390 	movx	a,@dptr
      000142 FC               [12]  391 	mov	r4,a
      000143 A3               [24]  392 	inc	dptr
      000144 E0               [24]  393 	movx	a,@dptr
      000145 FD               [12]  394 	mov	r5,a
      000146 4C               [12]  395 	orl	a,r4
      000147 70 94            [24]  396 	jnz	00110$
                                    397 ;	_malloc.c:219: ret = (void __xdata *) NULL;
      000149 90r00r08         [24]  398 	mov	dptr,#_malloc_ret_1_9
      00014C E4               [12]  399 	clr	a
      00014D F0               [24]  400 	movx	@dptr,a
      00014E A3               [24]  401 	inc	dptr
      00014F F0               [24]  402 	movx	@dptr,a
                                    403 ;	_malloc.c:220: break;
      000150                        404 00111$:
                                    405 ;	_malloc.c:223: if (ret)
      000150 90r00r08         [24]  406 	mov	dptr,#_malloc_ret_1_9
      000153 E0               [24]  407 	movx	a,@dptr
      000154 F5 F0            [12]  408 	mov	b,a
      000156 A3               [24]  409 	inc	dptr
      000157 E0               [24]  410 	movx	a,@dptr
      000158 45 F0            [12]  411 	orl	a,b
      00015A 60 65            [24]  412 	jz	00116$
                                    413 ;	_malloc.c:225: if (!current_header->len)
      00015C 90r00r06         [24]  414 	mov	dptr,#_malloc_current_header_1_9
      00015F E0               [24]  415 	movx	a,@dptr
      000160 FC               [12]  416 	mov	r4,a
      000161 A3               [24]  417 	inc	dptr
      000162 E0               [24]  418 	movx	a,@dptr
      000163 FD               [12]  419 	mov	r5,a
      000164 74 02            [12]  420 	mov	a,#0x02
      000166 2C               [12]  421 	add	a,r4
      000167 FA               [12]  422 	mov	r2,a
      000168 E4               [12]  423 	clr	a
      000169 3D               [12]  424 	addc	a,r5
      00016A FB               [12]  425 	mov	r3,a
      00016B 8A 82            [24]  426 	mov	dpl,r2
      00016D 8B 83            [24]  427 	mov	dph,r3
      00016F E0               [24]  428 	movx	a,@dptr
      000170 F8               [12]  429 	mov	r0,a
      000171 A3               [24]  430 	inc	dptr
      000172 E0               [24]  431 	movx	a,@dptr
      000173 F9               [12]  432 	mov	r1,a
      000174 48               [12]  433 	orl	a,r0
      000175 70 0B            [24]  434 	jnz	00113$
                                    435 ;	_malloc.c:227: current_header->len = size; //for first allocation
      000177 8A 82            [24]  436 	mov	dpl,r2
      000179 8B 83            [24]  437 	mov	dph,r3
      00017B EE               [12]  438 	mov	a,r6
      00017C F0               [24]  439 	movx	@dptr,a
      00017D EF               [12]  440 	mov	a,r7
      00017E A3               [24]  441 	inc	dptr
      00017F F0               [24]  442 	movx	@dptr,a
      000180 80 3F            [24]  443 	sjmp	00116$
      000182                        444 00113$:
                                    445 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
      000182 8C 02            [24]  446 	mov	ar2,r4
      000184 8D 03            [24]  447 	mov	ar3,r5
      000186 E8               [12]  448 	mov	a,r0
      000187 2A               [12]  449 	add	a,r2
      000188 F8               [12]  450 	mov	r0,a
      000189 E9               [12]  451 	mov	a,r1
      00018A 3B               [12]  452 	addc	a,r3
      00018B F9               [12]  453 	mov	r1,a
                                    454 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
      00018C 8C 82            [24]  455 	mov	dpl,r4
      00018E 8D 83            [24]  456 	mov	dph,r5
      000190 E0               [24]  457 	movx	a,@dptr
      000191 FA               [12]  458 	mov	r2,a
      000192 A3               [24]  459 	inc	dptr
      000193 E0               [24]  460 	movx	a,@dptr
      000194 FB               [12]  461 	mov	r3,a
      000195 88 82            [24]  462 	mov	dpl,r0
      000197 89 83            [24]  463 	mov	dph,r1
      000199 EA               [12]  464 	mov	a,r2
      00019A F0               [24]  465 	movx	@dptr,a
      00019B EB               [12]  466 	mov	a,r3
      00019C A3               [24]  467 	inc	dptr
      00019D F0               [24]  468 	movx	@dptr,a
                                    469 ;	_malloc.c:233: current_header->next  = new_header;
      00019E 8C 82            [24]  470 	mov	dpl,r4
      0001A0 8D 83            [24]  471 	mov	dph,r5
      0001A2 E8               [12]  472 	mov	a,r0
      0001A3 F0               [24]  473 	movx	@dptr,a
      0001A4 E9               [12]  474 	mov	a,r1
      0001A5 A3               [24]  475 	inc	dptr
      0001A6 F0               [24]  476 	movx	@dptr,a
                                    477 ;	_malloc.c:234: new_header->len  = size; //mark as used
      0001A7 88 82            [24]  478 	mov	dpl,r0
      0001A9 89 83            [24]  479 	mov	dph,r1
      0001AB A3               [24]  480 	inc	dptr
      0001AC A3               [24]  481 	inc	dptr
      0001AD EE               [12]  482 	mov	a,r6
      0001AE F0               [24]  483 	movx	@dptr,a
      0001AF EF               [12]  484 	mov	a,r7
      0001B0 A3               [24]  485 	inc	dptr
      0001B1 F0               [24]  486 	movx	@dptr,a
                                    487 ;	_malloc.c:235: ret = new_header->mem;
      0001B2 74 04            [12]  488 	mov	a,#0x04
      0001B4 28               [12]  489 	add	a,r0
      0001B5 F8               [12]  490 	mov	r0,a
      0001B6 E4               [12]  491 	clr	a
      0001B7 39               [12]  492 	addc	a,r1
      0001B8 F9               [12]  493 	mov	r1,a
      0001B9 90r00r08         [24]  494 	mov	dptr,#_malloc_ret_1_9
      0001BC E8               [12]  495 	mov	a,r0
      0001BD F0               [24]  496 	movx	@dptr,a
      0001BE E9               [12]  497 	mov	a,r1
      0001BF A3               [24]  498 	inc	dptr
      0001C0 F0               [24]  499 	movx	@dptr,a
      0001C1                        500 00116$:
                                    501 ;	_malloc.c:239: return ret;
      0001C1 90r00r08         [24]  502 	mov	dptr,#_malloc_ret_1_9
      0001C4 E0               [24]  503 	movx	a,@dptr
      0001C5 FE               [12]  504 	mov	r6,a
      0001C6 A3               [24]  505 	inc	dptr
      0001C7 E0               [24]  506 	movx	a,@dptr
      0001C8 FF               [12]  507 	mov	r7,a
      0001C9 8E 82            [24]  508 	mov	dpl,r6
      0001CB 8F 83            [24]  509 	mov	dph,r7
      0001CD                        510 00117$:
      0001CD 02r00r00         [24]  511 	ljmp	__sdcc_banked_ret
                                    512 	.area CSEG    (CODE)
                                    513 	.area CONST   (CODE)
                                    514 	.area XINIT   (CODE)
      000000                        515 __xinit___sdcc_first_memheader:
      000000 00 00                  516 	.byte #0x00,#0x00
                                    517 	.area CABS    (ABS,CODE)
