                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:57 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 	.globl _toupper
                                     14 	.globl _isspace
                                     15 	.globl _atof
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable bit register bank
                                     33 ;--------------------------------------------------------
                                     34 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         35 bits:
      000000                         36 	.ds 1
                           008000    37 	b0 = bits[0]
                           008100    38 	b1 = bits[1]
                           008200    39 	b2 = bits[2]
                           008300    40 	b3 = bits[3]
                           008400    41 	b4 = bits[4]
                           008500    42 	b5 = bits[5]
                           008600    43 	b6 = bits[6]
                           008700    44 	b7 = bits[7]
                                     45 ;--------------------------------------------------------
                                     46 ; internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DSEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in internal ram 
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; indirectly addressable internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area ISEG    (DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area IABS    (ABS,DATA)
                                     60 	.area IABS    (ABS,DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; bit data
                                     63 ;--------------------------------------------------------
                                     64 	.area BSEG    (BIT)
                                     65 ;--------------------------------------------------------
                                     66 ; paged external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area PSEG    (PAG,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XSEG    (XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XABS    (ABS,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; external initialized ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XISEG   (XDATA)
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT0 (CODE)
                                     83 	.area GSINIT1 (CODE)
                                     84 	.area GSINIT2 (CODE)
                                     85 	.area GSINIT3 (CODE)
                                     86 	.area GSINIT4 (CODE)
                                     87 	.area GSINIT5 (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area CSEG    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area HOME    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; code
                                    105 ;--------------------------------------------------------
                                    106 	.area CSEG    (CODE)
                                    107 ;------------------------------------------------------------
                                    108 ;Allocation info for local variables in function 'atof'
                                    109 ;------------------------------------------------------------
                                    110 ;s                         Allocated to registers r5 r3 r2 
                                    111 ;value                     Allocated to stack - _bp +8
                                    112 ;fraction                  Allocated to stack - _bp +12
                                    113 ;iexp                      Allocated to registers r6 
                                    114 ;sign                      Allocated to registers b0 
                                    115 ;sloc0                     Allocated to stack - _bp +1
                                    116 ;sloc1                     Allocated to stack - _bp +4
                                    117 ;------------------------------------------------------------
                                    118 ;	_atof.c:33: float atof(const char * s)
                                    119 ;	-----------------------------------------
                                    120 ;	 function atof
                                    121 ;	-----------------------------------------
      000000                        122 _atof:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 E5 81            [12]  132 	mov	a,sp
      000004 F5*00            [12]  133 	mov	_bp,a
      000006 24 0F            [12]  134 	add	a,#0x0F
      000008 F5 81            [12]  135 	mov	sp,a
      00000A AD 82            [24]  136 	mov	r5,dpl
      00000C AB 83            [24]  137 	mov	r3,dph
      00000E AA F0            [24]  138 	mov	r2,b
                                    139 ;	_atof.c:40: while (isspace(*s)) s++;
      000010 A8*00            [24]  140 	mov	r0,_bp
      000012 08               [12]  141 	inc	r0
      000013 A6 05            [24]  142 	mov	@r0,ar5
      000015 08               [12]  143 	inc	r0
      000016 A6 03            [24]  144 	mov	@r0,ar3
      000018 08               [12]  145 	inc	r0
      000019 A6 02            [24]  146 	mov	@r0,ar2
      00001B                        147 00101$:
      00001B A8*00            [24]  148 	mov	r0,_bp
      00001D 08               [12]  149 	inc	r0
      00001E 86 82            [24]  150 	mov	dpl,@r0
      000020 08               [12]  151 	inc	r0
      000021 86 83            [24]  152 	mov	dph,@r0
      000023 08               [12]  153 	inc	r0
      000024 86 F0            [24]  154 	mov	b,@r0
      000026 12r00r00         [24]  155 	lcall	__gptrget
      000029 FC               [12]  156 	mov	r4,a
      00002A 33               [12]  157 	rlc	a
      00002B 95 E0            [12]  158 	subb	a,acc
      00002D FB               [12]  159 	mov	r3,a
      00002E 8C 82            [24]  160 	mov	dpl,r4
      000030 8B 83            [24]  161 	mov	dph,r3
      000032 12r00r00         [24]  162 	lcall	_isspace
      000035 E5 82            [12]  163 	mov	a,dpl
      000037 85 83 F0         [24]  164 	mov	b,dph
      00003A 45 F0            [12]  165 	orl	a,b
      00003C 60 0B            [24]  166 	jz	00145$
      00003E A8*00            [24]  167 	mov	r0,_bp
      000040 08               [12]  168 	inc	r0
      000041 06               [12]  169 	inc	@r0
      000042 B6 00 02         [24]  170 	cjne	@r0,#0x00,00177$
      000045 08               [12]  171 	inc	r0
      000046 06               [12]  172 	inc	@r0
      000047                        173 00177$:
      000047 80 D2            [24]  174 	sjmp	00101$
      000049                        175 00145$:
      000049 A8*00            [24]  176 	mov	r0,_bp
      00004B 08               [12]  177 	inc	r0
      00004C 86 05            [24]  178 	mov	ar5,@r0
      00004E 08               [12]  179 	inc	r0
      00004F 86 03            [24]  180 	mov	ar3,@r0
      000051 08               [12]  181 	inc	r0
      000052 86 02            [24]  182 	mov	ar2,@r0
                                    183 ;	_atof.c:43: if (*s == '-')
      000054 A8*00            [24]  184 	mov	r0,_bp
      000056 08               [12]  185 	inc	r0
      000057 86 82            [24]  186 	mov	dpl,@r0
      000059 08               [12]  187 	inc	r0
      00005A 86 83            [24]  188 	mov	dph,@r0
      00005C 08               [12]  189 	inc	r0
      00005D 86 F0            [24]  190 	mov	b,@r0
      00005F 12r00r00         [24]  191 	lcall	__gptrget
      000062 FC               [12]  192 	mov	r4,a
      000063 BC 2D 12         [24]  193 	cjne	r4,#0x2D,00107$
                                    194 ;	_atof.c:45: sign=1;
      000066 D2*00            [12]  195 	setb	b0
                                    196 ;	_atof.c:46: s++;
      000068 A8*00            [24]  197 	mov	r0,_bp
      00006A 08               [12]  198 	inc	r0
      00006B 74 01            [12]  199 	mov	a,#0x01
      00006D 26               [12]  200 	add	a,@r0
      00006E FD               [12]  201 	mov	r5,a
      00006F E4               [12]  202 	clr	a
      000070 08               [12]  203 	inc	r0
      000071 36               [12]  204 	addc	a,@r0
      000072 FB               [12]  205 	mov	r3,a
      000073 08               [12]  206 	inc	r0
      000074 86 02            [24]  207 	mov	ar2,@r0
      000076 80 13            [24]  208 	sjmp	00108$
      000078                        209 00107$:
                                    210 ;	_atof.c:50: sign=0;
      000078 C2*00            [12]  211 	clr	b0
                                    212 ;	_atof.c:51: if (*s == '+') s++;
      00007A BC 2B 0E         [24]  213 	cjne	r4,#0x2B,00108$
      00007D A8*00            [24]  214 	mov	r0,_bp
      00007F 08               [12]  215 	inc	r0
      000080 74 01            [12]  216 	mov	a,#0x01
      000082 26               [12]  217 	add	a,@r0
      000083 FD               [12]  218 	mov	r5,a
      000084 E4               [12]  219 	clr	a
      000085 08               [12]  220 	inc	r0
      000086 36               [12]  221 	addc	a,@r0
      000087 FB               [12]  222 	mov	r3,a
      000088 08               [12]  223 	inc	r0
      000089 86 02            [24]  224 	mov	ar2,@r0
      00008B                        225 00108$:
                                    226 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00008B E5*00            [12]  227 	mov	a,_bp
      00008D 24 08            [12]  228 	add	a,#0x08
      00008F F8               [12]  229 	mov	r0,a
      000090 E4               [12]  230 	clr	a
      000091 F6               [12]  231 	mov	@r0,a
      000092 08               [12]  232 	inc	r0
      000093 F6               [12]  233 	mov	@r0,a
      000094 08               [12]  234 	inc	r0
      000095 F6               [12]  235 	mov	@r0,a
      000096 08               [12]  236 	inc	r0
      000097 F6               [12]  237 	mov	@r0,a
      000098 A8*00            [24]  238 	mov	r0,_bp
      00009A 08               [12]  239 	inc	r0
      00009B A6 05            [24]  240 	mov	@r0,ar5
      00009D 08               [12]  241 	inc	r0
      00009E A6 03            [24]  242 	mov	@r0,ar3
      0000A0 08               [12]  243 	inc	r0
      0000A1 A6 02            [24]  244 	mov	@r0,ar2
      0000A3                        245 00124$:
      0000A3 A8*00            [24]  246 	mov	r0,_bp
      0000A5 08               [12]  247 	inc	r0
      0000A6 86 82            [24]  248 	mov	dpl,@r0
      0000A8 08               [12]  249 	inc	r0
      0000A9 86 83            [24]  250 	mov	dph,@r0
      0000AB 08               [12]  251 	inc	r0
      0000AC 86 F0            [24]  252 	mov	b,@r0
      0000AE 12r00r00         [24]  253 	lcall	__gptrget
      0000B1 FC               [12]  254 	mov	r4,a
      0000B2 33               [12]  255 	rlc	a
      0000B3 95 E0            [12]  256 	subb	a,acc
      0000B5 FB               [12]  257 	mov	r3,a
      0000B6 8C 82            [24]  258 	mov	dpl,r4
      0000B8 8B 83            [24]  259 	mov	dph,r3
      0000BA C0*00            [24]  260 	push	bits
      0000BC 12r00r00         [24]  261 	lcall	_isdigit
      0000BF E5 82            [12]  262 	mov	a,dpl
      0000C1 85 83 F0         [24]  263 	mov	b,dph
      0000C4 D0*00            [24]  264 	pop	bits
      0000C6 45 F0            [12]  265 	orl	a,b
      0000C8 70 03            [24]  266 	jnz	00182$
      0000CA 02r01r7A         [24]  267 	ljmp	00146$
      0000CD                        268 00182$:
                                    269 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000CD C0*00            [24]  270 	push	bits
      0000CF E5*00            [12]  271 	mov	a,_bp
      0000D1 24 08            [12]  272 	add	a,#0x08
      0000D3 F8               [12]  273 	mov	r0,a
      0000D4 E6               [12]  274 	mov	a,@r0
      0000D5 C0 E0            [24]  275 	push	acc
      0000D7 08               [12]  276 	inc	r0
      0000D8 E6               [12]  277 	mov	a,@r0
      0000D9 C0 E0            [24]  278 	push	acc
      0000DB 08               [12]  279 	inc	r0
      0000DC E6               [12]  280 	mov	a,@r0
      0000DD C0 E0            [24]  281 	push	acc
      0000DF 08               [12]  282 	inc	r0
      0000E0 E6               [12]  283 	mov	a,@r0
      0000E1 C0 E0            [24]  284 	push	acc
      0000E3 90 00 00         [24]  285 	mov	dptr,#0x0000
      0000E6 75 F0 20         [24]  286 	mov	b,#0x20
      0000E9 74 41            [12]  287 	mov	a,#0x41
      0000EB 12r00r00         [24]  288 	lcall	___fsmul
      0000EE C8               [12]  289 	xch	a,r0
      0000EF E5*00            [12]  290 	mov	a,_bp
      0000F1 24 04            [12]  291 	add	a,#0x04
      0000F3 C8               [12]  292 	xch	a,r0
      0000F4 A6 82            [24]  293 	mov	@r0,dpl
      0000F6 08               [12]  294 	inc	r0
      0000F7 A6 83            [24]  295 	mov	@r0,dph
      0000F9 08               [12]  296 	inc	r0
      0000FA A6 F0            [24]  297 	mov	@r0,b
      0000FC 08               [12]  298 	inc	r0
      0000FD F6               [12]  299 	mov	@r0,a
      0000FE E5 81            [12]  300 	mov	a,sp
      000100 24 FC            [12]  301 	add	a,#0xfc
      000102 F5 81            [12]  302 	mov	sp,a
      000104 D0*00            [24]  303 	pop	bits
      000106 A8*00            [24]  304 	mov	r0,_bp
      000108 08               [12]  305 	inc	r0
      000109 86 82            [24]  306 	mov	dpl,@r0
      00010B 08               [12]  307 	inc	r0
      00010C 86 83            [24]  308 	mov	dph,@r0
      00010E 08               [12]  309 	inc	r0
      00010F 86 F0            [24]  310 	mov	b,@r0
      000111 12r00r00         [24]  311 	lcall	__gptrget
      000114 FE               [12]  312 	mov	r6,a
      000115 A3               [24]  313 	inc	dptr
      000116 18               [12]  314 	dec	r0
      000117 18               [12]  315 	dec	r0
      000118 A6 82            [24]  316 	mov	@r0,dpl
      00011A 08               [12]  317 	inc	r0
      00011B A6 83            [24]  318 	mov	@r0,dph
      00011D EE               [12]  319 	mov	a,r6
      00011E 33               [12]  320 	rlc	a
      00011F 95 E0            [12]  321 	subb	a,acc
      000121 FD               [12]  322 	mov	r5,a
      000122 EE               [12]  323 	mov	a,r6
      000123 24 D0            [12]  324 	add	a,#0xD0
      000125 FE               [12]  325 	mov	r6,a
      000126 ED               [12]  326 	mov	a,r5
      000127 34 FF            [12]  327 	addc	a,#0xFF
      000129 FD               [12]  328 	mov	r5,a
      00012A 8E 82            [24]  329 	mov	dpl,r6
      00012C 8D 83            [24]  330 	mov	dph,r5
      00012E C0*00            [24]  331 	push	bits
      000130 12r00r00         [24]  332 	lcall	___sint2fs
      000133 AC 82            [24]  333 	mov	r4,dpl
      000135 AD 83            [24]  334 	mov	r5,dph
      000137 AE F0            [24]  335 	mov	r6,b
      000139 FF               [12]  336 	mov	r7,a
      00013A D0*00            [24]  337 	pop	bits
      00013C C0*00            [24]  338 	push	bits
      00013E C0 04            [24]  339 	push	ar4
      000140 C0 05            [24]  340 	push	ar5
      000142 C0 06            [24]  341 	push	ar6
      000144 C0 07            [24]  342 	push	ar7
      000146 E5*00            [12]  343 	mov	a,_bp
      000148 24 04            [12]  344 	add	a,#0x04
      00014A F8               [12]  345 	mov	r0,a
      00014B 86 82            [24]  346 	mov	dpl,@r0
      00014D 08               [12]  347 	inc	r0
      00014E 86 83            [24]  348 	mov	dph,@r0
      000150 08               [12]  349 	inc	r0
      000151 86 F0            [24]  350 	mov	b,@r0
      000153 08               [12]  351 	inc	r0
      000154 E6               [12]  352 	mov	a,@r0
      000155 12r00r00         [24]  353 	lcall	___fsadd
      000158 AC 82            [24]  354 	mov	r4,dpl
      00015A AD 83            [24]  355 	mov	r5,dph
      00015C AE F0            [24]  356 	mov	r6,b
      00015E FF               [12]  357 	mov	r7,a
      00015F E5 81            [12]  358 	mov	a,sp
      000161 24 FC            [12]  359 	add	a,#0xfc
      000163 F5 81            [12]  360 	mov	sp,a
      000165 D0*00            [24]  361 	pop	bits
      000167 E5*00            [12]  362 	mov	a,_bp
      000169 24 08            [12]  363 	add	a,#0x08
      00016B F8               [12]  364 	mov	r0,a
      00016C A6 04            [24]  365 	mov	@r0,ar4
      00016E 08               [12]  366 	inc	r0
      00016F A6 05            [24]  367 	mov	@r0,ar5
      000171 08               [12]  368 	inc	r0
      000172 A6 06            [24]  369 	mov	@r0,ar6
      000174 08               [12]  370 	inc	r0
      000175 A6 07            [24]  371 	mov	@r0,ar7
                                    372 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      000177 02r00rA3         [24]  373 	ljmp	00124$
      00017A                        374 00146$:
      00017A A8*00            [24]  375 	mov	r0,_bp
      00017C 08               [12]  376 	inc	r0
      00017D 86 05            [24]  377 	mov	ar5,@r0
      00017F 08               [12]  378 	inc	r0
      000180 86 03            [24]  379 	mov	ar3,@r0
      000182 08               [12]  380 	inc	r0
      000183 86 02            [24]  381 	mov	ar2,@r0
                                    382 ;	_atof.c:61: if (*s == '.')
      000185 A8*00            [24]  383 	mov	r0,_bp
      000187 08               [12]  384 	inc	r0
      000188 86 82            [24]  385 	mov	dpl,@r0
      00018A 08               [12]  386 	inc	r0
      00018B 86 83            [24]  387 	mov	dph,@r0
      00018D 08               [12]  388 	inc	r0
      00018E 86 F0            [24]  389 	mov	b,@r0
      000190 12r00r00         [24]  390 	lcall	__gptrget
      000193 FF               [12]  391 	mov	r7,a
      000194 BF 2E 02         [24]  392 	cjne	r7,#0x2E,00183$
      000197 80 03            [24]  393 	sjmp	00184$
      000199                        394 00183$:
      000199 02r02rE5         [24]  395 	ljmp	00112$
      00019C                        396 00184$:
                                    397 ;	_atof.c:63: s++;
      00019C A8*00            [24]  398 	mov	r0,_bp
      00019E 08               [12]  399 	inc	r0
      00019F 74 01            [12]  400 	mov	a,#0x01
      0001A1 26               [12]  401 	add	a,@r0
      0001A2 FD               [12]  402 	mov	r5,a
      0001A3 E4               [12]  403 	clr	a
      0001A4 08               [12]  404 	inc	r0
      0001A5 36               [12]  405 	addc	a,@r0
      0001A6 FB               [12]  406 	mov	r3,a
      0001A7 08               [12]  407 	inc	r0
      0001A8 86 02            [24]  408 	mov	ar2,@r0
                                    409 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0001AA E5*00            [12]  410 	mov	a,_bp
      0001AC 24 0C            [12]  411 	add	a,#0x0c
      0001AE F8               [12]  412 	mov	r0,a
      0001AF 76 CD            [12]  413 	mov	@r0,#0xCD
      0001B1 08               [12]  414 	inc	r0
      0001B2 76 CC            [12]  415 	mov	@r0,#0xCC
      0001B4 08               [12]  416 	inc	r0
      0001B5 76 CC            [12]  417 	mov	@r0,#0xCC
      0001B7 08               [12]  418 	inc	r0
      0001B8 76 3D            [12]  419 	mov	@r0,#0x3D
      0001BA E5*00            [12]  420 	mov	a,_bp
      0001BC 24 04            [12]  421 	add	a,#0x04
      0001BE F8               [12]  422 	mov	r0,a
      0001BF A6 05            [24]  423 	mov	@r0,ar5
      0001C1 08               [12]  424 	inc	r0
      0001C2 A6 03            [24]  425 	mov	@r0,ar3
      0001C4 08               [12]  426 	inc	r0
      0001C5 A6 02            [24]  427 	mov	@r0,ar2
      0001C7                        428 00127$:
      0001C7 E5*00            [12]  429 	mov	a,_bp
      0001C9 24 04            [12]  430 	add	a,#0x04
      0001CB F8               [12]  431 	mov	r0,a
      0001CC 86 82            [24]  432 	mov	dpl,@r0
      0001CE 08               [12]  433 	inc	r0
      0001CF 86 83            [24]  434 	mov	dph,@r0
      0001D1 08               [12]  435 	inc	r0
      0001D2 86 F0            [24]  436 	mov	b,@r0
      0001D4 12r00r00         [24]  437 	lcall	__gptrget
      0001D7 FE               [12]  438 	mov	r6,a
      0001D8 33               [12]  439 	rlc	a
      0001D9 95 E0            [12]  440 	subb	a,acc
      0001DB FD               [12]  441 	mov	r5,a
      0001DC 8E 82            [24]  442 	mov	dpl,r6
      0001DE 8D 83            [24]  443 	mov	dph,r5
      0001E0 C0*00            [24]  444 	push	bits
      0001E2 12r00r00         [24]  445 	lcall	_isdigit
      0001E5 E5 82            [12]  446 	mov	a,dpl
      0001E7 85 83 F0         [24]  447 	mov	b,dph
      0001EA D0*00            [24]  448 	pop	bits
      0001EC 45 F0            [12]  449 	orl	a,b
      0001EE 70 03            [24]  450 	jnz	00185$
      0001F0 02r02rD8         [24]  451 	ljmp	00147$
      0001F3                        452 00185$:
                                    453 ;	_atof.c:66: value+=(*s-'0')*fraction;
      0001F3 E5*00            [12]  454 	mov	a,_bp
      0001F5 24 04            [12]  455 	add	a,#0x04
      0001F7 F8               [12]  456 	mov	r0,a
      0001F8 86 82            [24]  457 	mov	dpl,@r0
      0001FA 08               [12]  458 	inc	r0
      0001FB 86 83            [24]  459 	mov	dph,@r0
      0001FD 08               [12]  460 	inc	r0
      0001FE 86 F0            [24]  461 	mov	b,@r0
      000200 12r00r00         [24]  462 	lcall	__gptrget
      000203 FE               [12]  463 	mov	r6,a
      000204 A3               [24]  464 	inc	dptr
      000205 18               [12]  465 	dec	r0
      000206 18               [12]  466 	dec	r0
      000207 A6 82            [24]  467 	mov	@r0,dpl
      000209 08               [12]  468 	inc	r0
      00020A A6 83            [24]  469 	mov	@r0,dph
      00020C EE               [12]  470 	mov	a,r6
      00020D 33               [12]  471 	rlc	a
      00020E 95 E0            [12]  472 	subb	a,acc
      000210 FD               [12]  473 	mov	r5,a
      000211 EE               [12]  474 	mov	a,r6
      000212 24 D0            [12]  475 	add	a,#0xD0
      000214 FE               [12]  476 	mov	r6,a
      000215 ED               [12]  477 	mov	a,r5
      000216 34 FF            [12]  478 	addc	a,#0xFF
      000218 FD               [12]  479 	mov	r5,a
      000219 8E 82            [24]  480 	mov	dpl,r6
      00021B 8D 83            [24]  481 	mov	dph,r5
      00021D C0*00            [24]  482 	push	bits
      00021F 12r00r00         [24]  483 	lcall	___sint2fs
      000222 AC 82            [24]  484 	mov	r4,dpl
      000224 AD 83            [24]  485 	mov	r5,dph
      000226 AE F0            [24]  486 	mov	r6,b
      000228 FF               [12]  487 	mov	r7,a
      000229 D0*00            [24]  488 	pop	bits
      00022B C0*00            [24]  489 	push	bits
      00022D E5*00            [12]  490 	mov	a,_bp
      00022F 24 0C            [12]  491 	add	a,#0x0c
      000231 F8               [12]  492 	mov	r0,a
      000232 E6               [12]  493 	mov	a,@r0
      000233 C0 E0            [24]  494 	push	acc
      000235 08               [12]  495 	inc	r0
      000236 E6               [12]  496 	mov	a,@r0
      000237 C0 E0            [24]  497 	push	acc
      000239 08               [12]  498 	inc	r0
      00023A E6               [12]  499 	mov	a,@r0
      00023B C0 E0            [24]  500 	push	acc
      00023D 08               [12]  501 	inc	r0
      00023E E6               [12]  502 	mov	a,@r0
      00023F C0 E0            [24]  503 	push	acc
      000241 8C 82            [24]  504 	mov	dpl,r4
      000243 8D 83            [24]  505 	mov	dph,r5
      000245 8E F0            [24]  506 	mov	b,r6
      000247 EF               [12]  507 	mov	a,r7
      000248 12r00r00         [24]  508 	lcall	___fsmul
      00024B AC 82            [24]  509 	mov	r4,dpl
      00024D AD 83            [24]  510 	mov	r5,dph
      00024F AE F0            [24]  511 	mov	r6,b
      000251 FF               [12]  512 	mov	r7,a
      000252 E5 81            [12]  513 	mov	a,sp
      000254 24 FC            [12]  514 	add	a,#0xfc
      000256 F5 81            [12]  515 	mov	sp,a
      000258 D0*00            [24]  516 	pop	bits
      00025A C0*00            [24]  517 	push	bits
      00025C C0 04            [24]  518 	push	ar4
      00025E C0 05            [24]  519 	push	ar5
      000260 C0 06            [24]  520 	push	ar6
      000262 C0 07            [24]  521 	push	ar7
      000264 E5*00            [12]  522 	mov	a,_bp
      000266 24 08            [12]  523 	add	a,#0x08
      000268 F8               [12]  524 	mov	r0,a
      000269 86 82            [24]  525 	mov	dpl,@r0
      00026B 08               [12]  526 	inc	r0
      00026C 86 83            [24]  527 	mov	dph,@r0
      00026E 08               [12]  528 	inc	r0
      00026F 86 F0            [24]  529 	mov	b,@r0
      000271 08               [12]  530 	inc	r0
      000272 E6               [12]  531 	mov	a,@r0
      000273 12r00r00         [24]  532 	lcall	___fsadd
      000276 AC 82            [24]  533 	mov	r4,dpl
      000278 AD 83            [24]  534 	mov	r5,dph
      00027A AE F0            [24]  535 	mov	r6,b
      00027C FF               [12]  536 	mov	r7,a
      00027D E5 81            [12]  537 	mov	a,sp
      00027F 24 FC            [12]  538 	add	a,#0xfc
      000281 F5 81            [12]  539 	mov	sp,a
      000283 D0*00            [24]  540 	pop	bits
      000285 E5*00            [12]  541 	mov	a,_bp
      000287 24 08            [12]  542 	add	a,#0x08
      000289 F8               [12]  543 	mov	r0,a
      00028A A6 04            [24]  544 	mov	@r0,ar4
      00028C 08               [12]  545 	inc	r0
      00028D A6 05            [24]  546 	mov	@r0,ar5
      00028F 08               [12]  547 	inc	r0
      000290 A6 06            [24]  548 	mov	@r0,ar6
      000292 08               [12]  549 	inc	r0
      000293 A6 07            [24]  550 	mov	@r0,ar7
                                    551 ;	_atof.c:67: fraction*=0.1;
      000295 C0*00            [24]  552 	push	bits
      000297 E5*00            [12]  553 	mov	a,_bp
      000299 24 0C            [12]  554 	add	a,#0x0c
      00029B F8               [12]  555 	mov	r0,a
      00029C E6               [12]  556 	mov	a,@r0
      00029D C0 E0            [24]  557 	push	acc
      00029F 08               [12]  558 	inc	r0
      0002A0 E6               [12]  559 	mov	a,@r0
      0002A1 C0 E0            [24]  560 	push	acc
      0002A3 08               [12]  561 	inc	r0
      0002A4 E6               [12]  562 	mov	a,@r0
      0002A5 C0 E0            [24]  563 	push	acc
      0002A7 08               [12]  564 	inc	r0
      0002A8 E6               [12]  565 	mov	a,@r0
      0002A9 C0 E0            [24]  566 	push	acc
      0002AB 90 CC CD         [24]  567 	mov	dptr,#0xCCCD
      0002AE 75 F0 CC         [24]  568 	mov	b,#0xCC
      0002B1 74 3D            [12]  569 	mov	a,#0x3D
      0002B3 12r00r00         [24]  570 	lcall	___fsmul
      0002B6 AC 82            [24]  571 	mov	r4,dpl
      0002B8 AD 83            [24]  572 	mov	r5,dph
      0002BA AE F0            [24]  573 	mov	r6,b
      0002BC FF               [12]  574 	mov	r7,a
      0002BD E5 81            [12]  575 	mov	a,sp
      0002BF 24 FC            [12]  576 	add	a,#0xfc
      0002C1 F5 81            [12]  577 	mov	sp,a
      0002C3 D0*00            [24]  578 	pop	bits
      0002C5 E5*00            [12]  579 	mov	a,_bp
      0002C7 24 0C            [12]  580 	add	a,#0x0c
      0002C9 F8               [12]  581 	mov	r0,a
      0002CA A6 04            [24]  582 	mov	@r0,ar4
      0002CC 08               [12]  583 	inc	r0
      0002CD A6 05            [24]  584 	mov	@r0,ar5
      0002CF 08               [12]  585 	inc	r0
      0002D0 A6 06            [24]  586 	mov	@r0,ar6
      0002D2 08               [12]  587 	inc	r0
      0002D3 A6 07            [24]  588 	mov	@r0,ar7
                                    589 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002D5 02r01rC7         [24]  590 	ljmp	00127$
      0002D8                        591 00147$:
      0002D8 E5*00            [12]  592 	mov	a,_bp
      0002DA 24 04            [12]  593 	add	a,#0x04
      0002DC F8               [12]  594 	mov	r0,a
      0002DD 86 05            [24]  595 	mov	ar5,@r0
      0002DF 08               [12]  596 	inc	r0
      0002E0 86 03            [24]  597 	mov	ar3,@r0
      0002E2 08               [12]  598 	inc	r0
      0002E3 86 02            [24]  599 	mov	ar2,@r0
      0002E5                        600 00112$:
                                    601 ;	_atof.c:72: if (toupper(*s)=='E')
      0002E5 8D 82            [24]  602 	mov	dpl,r5
      0002E7 8B 83            [24]  603 	mov	dph,r3
      0002E9 8A F0            [24]  604 	mov	b,r2
      0002EB 12r00r00         [24]  605 	lcall	__gptrget
      0002EE FF               [12]  606 	mov	r7,a
      0002EF 33               [12]  607 	rlc	a
      0002F0 95 E0            [12]  608 	subb	a,acc
      0002F2 FE               [12]  609 	mov	r6,a
      0002F3 8F 82            [24]  610 	mov	dpl,r7
      0002F5 8E 83            [24]  611 	mov	dph,r6
      0002F7 C0 05            [24]  612 	push	ar5
      0002F9 C0 03            [24]  613 	push	ar3
      0002FB C0 02            [24]  614 	push	ar2
      0002FD C0*00            [24]  615 	push	bits
      0002FF 12r00r00         [24]  616 	lcall	_toupper
      000302 AE 82            [24]  617 	mov	r6,dpl
      000304 AF 83            [24]  618 	mov	r7,dph
      000306 D0*00            [24]  619 	pop	bits
      000308 D0 02            [24]  620 	pop	ar2
      00030A D0 03            [24]  621 	pop	ar3
      00030C D0 05            [24]  622 	pop	ar5
      00030E BE 45 05         [24]  623 	cjne	r6,#0x45,00186$
      000311 BF 00 02         [24]  624 	cjne	r7,#0x00,00186$
      000314 80 03            [24]  625 	sjmp	00187$
      000316                        626 00186$:
      000316 02r03rC8         [24]  627 	ljmp	00120$
      000319                        628 00187$:
                                    629 ;	_atof.c:74: s++;
      000319 0D               [12]  630 	inc	r5
      00031A BD 00 01         [24]  631 	cjne	r5,#0x00,00188$
      00031D 0B               [12]  632 	inc	r3
      00031E                        633 00188$:
                                    634 ;	_atof.c:75: iexp=(signed char)atoi(s);
      00031E 8D 82            [24]  635 	mov	dpl,r5
      000320 8B 83            [24]  636 	mov	dph,r3
      000322 8A F0            [24]  637 	mov	b,r2
      000324 C0*00            [24]  638 	push	bits
      000326 12r00r00         [24]  639 	lcall	_atoi
      000329 AE 82            [24]  640 	mov	r6,dpl
      00032B AF 83            [24]  641 	mov	r7,dph
      00032D D0*00            [24]  642 	pop	bits
                                    643 ;	_atof.c:77: while(iexp!=0)
      00032F                        644 00116$:
      00032F EE               [12]  645 	mov	a,r6
      000330 70 03            [24]  646 	jnz	00189$
      000332 02r03rC8         [24]  647 	ljmp	00120$
      000335                        648 00189$:
                                    649 ;	_atof.c:79: if(iexp<0)
      000335 EE               [12]  650 	mov	a,r6
      000336 30 E7 47         [24]  651 	jnb	acc.7,00114$
                                    652 ;	_atof.c:81: value*=0.1;
      000339 C0 06            [24]  653 	push	ar6
      00033B C0*00            [24]  654 	push	bits
      00033D E5*00            [12]  655 	mov	a,_bp
      00033F 24 08            [12]  656 	add	a,#0x08
      000341 F8               [12]  657 	mov	r0,a
      000342 E6               [12]  658 	mov	a,@r0
      000343 C0 E0            [24]  659 	push	acc
      000345 08               [12]  660 	inc	r0
      000346 E6               [12]  661 	mov	a,@r0
      000347 C0 E0            [24]  662 	push	acc
      000349 08               [12]  663 	inc	r0
      00034A E6               [12]  664 	mov	a,@r0
      00034B C0 E0            [24]  665 	push	acc
      00034D 08               [12]  666 	inc	r0
      00034E E6               [12]  667 	mov	a,@r0
      00034F C0 E0            [24]  668 	push	acc
      000351 90 CC CD         [24]  669 	mov	dptr,#0xCCCD
      000354 75 F0 CC         [24]  670 	mov	b,#0xCC
      000357 74 3D            [12]  671 	mov	a,#0x3D
      000359 12r00r00         [24]  672 	lcall	___fsmul
      00035C AB 82            [24]  673 	mov	r3,dpl
      00035E AC 83            [24]  674 	mov	r4,dph
      000360 AD F0            [24]  675 	mov	r5,b
      000362 FF               [12]  676 	mov	r7,a
      000363 E5 81            [12]  677 	mov	a,sp
      000365 24 FC            [12]  678 	add	a,#0xfc
      000367 F5 81            [12]  679 	mov	sp,a
      000369 D0*00            [24]  680 	pop	bits
      00036B D0 06            [24]  681 	pop	ar6
      00036D E5*00            [12]  682 	mov	a,_bp
      00036F 24 08            [12]  683 	add	a,#0x08
      000371 F8               [12]  684 	mov	r0,a
      000372 A6 03            [24]  685 	mov	@r0,ar3
      000374 08               [12]  686 	inc	r0
      000375 A6 04            [24]  687 	mov	@r0,ar4
      000377 08               [12]  688 	inc	r0
      000378 A6 05            [24]  689 	mov	@r0,ar5
      00037A 08               [12]  690 	inc	r0
      00037B A6 07            [24]  691 	mov	@r0,ar7
                                    692 ;	_atof.c:82: iexp++;
      00037D 0E               [12]  693 	inc	r6
      00037E 80 AF            [24]  694 	sjmp	00116$
      000380                        695 00114$:
                                    696 ;	_atof.c:86: value*=10.0;
      000380 C0 06            [24]  697 	push	ar6
      000382 C0*00            [24]  698 	push	bits
      000384 E5*00            [12]  699 	mov	a,_bp
      000386 24 08            [12]  700 	add	a,#0x08
      000388 F8               [12]  701 	mov	r0,a
      000389 E6               [12]  702 	mov	a,@r0
      00038A C0 E0            [24]  703 	push	acc
      00038C 08               [12]  704 	inc	r0
      00038D E6               [12]  705 	mov	a,@r0
      00038E C0 E0            [24]  706 	push	acc
      000390 08               [12]  707 	inc	r0
      000391 E6               [12]  708 	mov	a,@r0
      000392 C0 E0            [24]  709 	push	acc
      000394 08               [12]  710 	inc	r0
      000395 E6               [12]  711 	mov	a,@r0
      000396 C0 E0            [24]  712 	push	acc
      000398 90 00 00         [24]  713 	mov	dptr,#0x0000
      00039B 75 F0 20         [24]  714 	mov	b,#0x20
      00039E 74 41            [12]  715 	mov	a,#0x41
      0003A0 12r00r00         [24]  716 	lcall	___fsmul
      0003A3 AB 82            [24]  717 	mov	r3,dpl
      0003A5 AC 83            [24]  718 	mov	r4,dph
      0003A7 AD F0            [24]  719 	mov	r5,b
      0003A9 FF               [12]  720 	mov	r7,a
      0003AA E5 81            [12]  721 	mov	a,sp
      0003AC 24 FC            [12]  722 	add	a,#0xfc
      0003AE F5 81            [12]  723 	mov	sp,a
      0003B0 D0*00            [24]  724 	pop	bits
      0003B2 D0 06            [24]  725 	pop	ar6
      0003B4 E5*00            [12]  726 	mov	a,_bp
      0003B6 24 08            [12]  727 	add	a,#0x08
      0003B8 F8               [12]  728 	mov	r0,a
      0003B9 A6 03            [24]  729 	mov	@r0,ar3
      0003BB 08               [12]  730 	inc	r0
      0003BC A6 04            [24]  731 	mov	@r0,ar4
      0003BE 08               [12]  732 	inc	r0
      0003BF A6 05            [24]  733 	mov	@r0,ar5
      0003C1 08               [12]  734 	inc	r0
      0003C2 A6 07            [24]  735 	mov	@r0,ar7
                                    736 ;	_atof.c:87: iexp--;
      0003C4 1E               [12]  737 	dec	r6
      0003C5 02r03r2F         [24]  738 	ljmp	00116$
      0003C8                        739 00120$:
                                    740 ;	_atof.c:93: if(sign) value*=-1.0;
      0003C8 30*00 12         [24]  741 	jnb	b0,00122$
      0003CB E5*00            [12]  742 	mov	a,_bp
      0003CD 24 08            [12]  743 	add	a,#0x08
      0003CF F8               [12]  744 	mov	r0,a
      0003D0 E6               [12]  745 	mov	a,@r0
      0003D1 F6               [12]  746 	mov	@r0,a
      0003D2 08               [12]  747 	inc	r0
      0003D3 E6               [12]  748 	mov	a,@r0
      0003D4 F6               [12]  749 	mov	@r0,a
      0003D5 08               [12]  750 	inc	r0
      0003D6 E6               [12]  751 	mov	a,@r0
      0003D7 F6               [12]  752 	mov	@r0,a
      0003D8 08               [12]  753 	inc	r0
      0003D9 E6               [12]  754 	mov	a,@r0
      0003DA B2 E7            [12]  755 	cpl	acc.7
      0003DC F6               [12]  756 	mov	@r0,a
      0003DD                        757 00122$:
                                    758 ;	_atof.c:94: return (value);
      0003DD E5*00            [12]  759 	mov	a,_bp
      0003DF 24 08            [12]  760 	add	a,#0x08
      0003E1 F8               [12]  761 	mov	r0,a
      0003E2 86 82            [24]  762 	mov	dpl,@r0
      0003E4 08               [12]  763 	inc	r0
      0003E5 86 83            [24]  764 	mov	dph,@r0
      0003E7 08               [12]  765 	inc	r0
      0003E8 86 F0            [24]  766 	mov	b,@r0
      0003EA 08               [12]  767 	inc	r0
      0003EB E6               [12]  768 	mov	a,@r0
      0003EC 85*00 81         [24]  769 	mov	sp,_bp
      0003EF D0*00            [24]  770 	pop	_bp
      0003F1 22               [24]  771 	ret
                                    772 	.area CSEG    (CODE)
                                    773 	.area CONST   (CODE)
                                    774 	.area XINIT   (CODE)
                                    775 	.area CABS    (ABS,CODE)
