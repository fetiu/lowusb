                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:06 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _realloc
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_find_memheader
                                     13 	.globl _memmove
                                     14 	.globl _memcpy
                                     15 	.globl _free
                                     16 	.globl _malloc
                                     17 	.globl _realloc
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; special function bits
                                     25 ;--------------------------------------------------------
                                     26 	.area RSEG    (ABS,DATA)
      000000                         27 	.org 0x0000
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable register banks
                                     30 ;--------------------------------------------------------
                                     31 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         32 	.ds 8
                                     33 ;--------------------------------------------------------
                                     34 ; internal ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DSEG    (DATA)
                                     37 ;--------------------------------------------------------
                                     38 ; overlayable items in internal ram 
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; indirectly addressable internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area ISEG    (DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; absolute internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area IABS    (ABS,DATA)
                                     48 	.area IABS    (ABS,DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; bit data
                                     51 ;--------------------------------------------------------
                                     52 	.area BSEG    (BIT)
                                     53 ;--------------------------------------------------------
                                     54 ; paged external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area PSEG    (PAG,XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XSEG    (XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XABS    (ABS,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; external initialized ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XISEG   (XDATA)
                                     69 	.area HOME    (CODE)
                                     70 	.area GSINIT0 (CODE)
                                     71 	.area GSINIT1 (CODE)
                                     72 	.area GSINIT2 (CODE)
                                     73 	.area GSINIT3 (CODE)
                                     74 	.area GSINIT4 (CODE)
                                     75 	.area GSINIT5 (CODE)
                                     76 	.area GSINIT  (CODE)
                                     77 	.area GSFINAL (CODE)
                                     78 	.area CSEG    (CODE)
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; Home
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area HOME    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; code
                                     93 ;--------------------------------------------------------
                                     94 	.area CSEG    (CODE)
                                     95 ;------------------------------------------------------------
                                     96 ;Allocation info for local variables in function 'realloc'
                                     97 ;------------------------------------------------------------
                                     98 ;size                      Allocated to stack - _bp -4
                                     99 ;p                         Allocated to stack - _bp +3
                                    100 ;pthis                     Allocated to stack - _bp +6
                                    101 ;pnew                      Allocated to stack - _bp +8
                                    102 ;ret                       Allocated to stack - _bp +10
                                    103 ;sloc0                     Allocated to stack - _bp +1
                                    104 ;------------------------------------------------------------
                                    105 ;	_realloc.c:84: void __xdata * realloc (void * p, size_t size)
                                    106 ;	-----------------------------------------
                                    107 ;	 function realloc
                                    108 ;	-----------------------------------------
      000000                        109 _realloc:
                           000007   110 	ar7 = 0x07
                           000006   111 	ar6 = 0x06
                           000005   112 	ar5 = 0x05
                           000004   113 	ar4 = 0x04
                           000003   114 	ar3 = 0x03
                           000002   115 	ar2 = 0x02
                           000001   116 	ar1 = 0x01
                           000000   117 	ar0 = 0x00
      000000 C0*00            [24]  118 	push	_bp
      000002 E5 81            [12]  119 	mov	a,sp
      000004 F5*00            [12]  120 	mov	_bp,a
      000006 24 0B            [12]  121 	add	a,#0x0B
      000008 F5 81            [12]  122 	mov	sp,a
      00000A A8*00            [24]  123 	mov	r0,_bp
      00000C 08               [12]  124 	inc	r0
      00000D 08               [12]  125 	inc	r0
      00000E 08               [12]  126 	inc	r0
      00000F A6 82            [24]  127 	mov	@r0,dpl
      000011 08               [12]  128 	inc	r0
      000012 A6 83            [24]  129 	mov	@r0,dph
      000014 08               [12]  130 	inc	r0
      000015 A6 F0            [24]  131 	mov	@r0,b
                                    132 ;	_realloc.c:142: }
      000017 D3               [12]  133 	setb	c
      000018 10 AF 01         [24]  134 	jbc	ea,00136$
      00001B C3               [12]  135 	clr	c
      00001C                        136 00136$:
      00001C C0 D0            [24]  137 	push	psw
                                    138 ;	_realloc.c:92: pthis = _sdcc_find_memheader(p);
      00001E E5*00            [12]  139 	mov	a,_bp
      000020 24 03            [12]  140 	add	a,#0x03
      000022 F8               [12]  141 	mov	r0,a
      000023 86 03            [24]  142 	mov	ar3,@r0
      000025 08               [12]  143 	inc	r0
      000026 86 04            [24]  144 	mov	ar4,@r0
      000028 8B 82            [24]  145 	mov	dpl,r3
      00002A 8C 83            [24]  146 	mov	dph,r4
      00002C 12r00r00         [24]  147 	lcall	__sdcc_find_memheader
      00002F AB 82            [24]  148 	mov	r3,dpl
      000031 AC 83            [24]  149 	mov	r4,dph
      000033 E5*00            [12]  150 	mov	a,_bp
      000035 24 06            [12]  151 	add	a,#0x06
      000037 F8               [12]  152 	mov	r0,a
      000038 A6 03            [24]  153 	mov	@r0,ar3
      00003A 08               [12]  154 	inc	r0
      00003B A6 04            [24]  155 	mov	@r0,ar4
                                    156 ;	_realloc.c:93: if (pthis)
      00003D E5*00            [12]  157 	mov	a,_bp
      00003F 24 06            [12]  158 	add	a,#0x06
      000041 F8               [12]  159 	mov	r0,a
      000042 E6               [12]  160 	mov	a,@r0
      000043 08               [12]  161 	inc	r0
      000044 46               [12]  162 	orl	a,@r0
      000045 70 03            [24]  163 	jnz	00137$
      000047 02r02r41         [24]  164 	ljmp	00114$
      00004A                        165 00137$:
                                    166 ;	_realloc.c:95: if (size > (0xFFFF-HEADER_SIZE))
      00004A E5*00            [12]  167 	mov	a,_bp
      00004C 24 FC            [12]  168 	add	a,#0xfc
      00004E F8               [12]  169 	mov	r0,a
      00004F C3               [12]  170 	clr	c
      000050 74 FB            [12]  171 	mov	a,#0xFB
      000052 96               [12]  172 	subb	a,@r0
      000053 74 FF            [12]  173 	mov	a,#0xFF
      000055 08               [12]  174 	inc	r0
      000056 96               [12]  175 	subb	a,@r0
      000057 50 0C            [24]  176 	jnc	00111$
                                    177 ;	_realloc.c:97: ret = (void __xdata *) NULL; //To prevent overflow in next line
      000059 E5*00            [12]  178 	mov	a,_bp
      00005B 24 0A            [12]  179 	add	a,#0x0a
      00005D F8               [12]  180 	mov	r0,a
      00005E E4               [12]  181 	clr	a
      00005F F6               [12]  182 	mov	@r0,a
      000060 08               [12]  183 	inc	r0
      000061 F6               [12]  184 	mov	@r0,a
      000062 02r02r5C         [24]  185 	ljmp	00115$
      000065                        186 00111$:
                                    187 ;	_realloc.c:101: size += HEADER_SIZE; //We need a memory for header too
      000065 E5*00            [12]  188 	mov	a,_bp
      000067 24 FC            [12]  189 	add	a,#0xfc
      000069 F8               [12]  190 	mov	r0,a
      00006A 74 04            [12]  191 	mov	a,#0x04
      00006C 26               [12]  192 	add	a,@r0
      00006D F6               [12]  193 	mov	@r0,a
      00006E E4               [12]  194 	clr	a
      00006F 08               [12]  195 	inc	r0
      000070 36               [12]  196 	addc	a,@r0
      000071 F6               [12]  197 	mov	@r0,a
                                    198 ;	_realloc.c:103: if ((((unsigned int)pthis->next) - ((unsigned int)pthis)) >= size)
      000072 E5*00            [12]  199 	mov	a,_bp
      000074 24 06            [12]  200 	add	a,#0x06
      000076 F8               [12]  201 	mov	r0,a
      000077 86 82            [24]  202 	mov	dpl,@r0
      000079 08               [12]  203 	inc	r0
      00007A 86 83            [24]  204 	mov	dph,@r0
      00007C E0               [24]  205 	movx	a,@dptr
      00007D FA               [12]  206 	mov	r2,a
      00007E A3               [24]  207 	inc	dptr
      00007F E0               [24]  208 	movx	a,@dptr
      000080 FF               [12]  209 	mov	r7,a
      000081 8A 05            [24]  210 	mov	ar5,r2
      000083 8F 06            [24]  211 	mov	ar6,r7
      000085 E5*00            [12]  212 	mov	a,_bp
      000087 24 06            [12]  213 	add	a,#0x06
      000089 F8               [12]  214 	mov	r0,a
      00008A 86 03            [24]  215 	mov	ar3,@r0
      00008C 08               [12]  216 	inc	r0
      00008D 86 04            [24]  217 	mov	ar4,@r0
      00008F ED               [12]  218 	mov	a,r5
      000090 C3               [12]  219 	clr	c
      000091 9B               [12]  220 	subb	a,r3
      000092 FD               [12]  221 	mov	r5,a
      000093 EE               [12]  222 	mov	a,r6
      000094 9C               [12]  223 	subb	a,r4
      000095 FE               [12]  224 	mov	r6,a
      000096 E5*00            [12]  225 	mov	a,_bp
      000098 24 FC            [12]  226 	add	a,#0xfc
      00009A F8               [12]  227 	mov	r0,a
      00009B C3               [12]  228 	clr	c
      00009C ED               [12]  229 	mov	a,r5
      00009D 96               [12]  230 	subb	a,@r0
      00009E EE               [12]  231 	mov	a,r6
      00009F 08               [12]  232 	inc	r0
      0000A0 96               [12]  233 	subb	a,@r0
      0000A1 40 2A            [24]  234 	jc	00108$
                                    235 ;	_realloc.c:105: pthis->len = size;
      0000A3 E5*00            [12]  236 	mov	a,_bp
      0000A5 24 06            [12]  237 	add	a,#0x06
      0000A7 F8               [12]  238 	mov	r0,a
      0000A8 86 82            [24]  239 	mov	dpl,@r0
      0000AA 08               [12]  240 	inc	r0
      0000AB 86 83            [24]  241 	mov	dph,@r0
      0000AD A3               [24]  242 	inc	dptr
      0000AE A3               [24]  243 	inc	dptr
      0000AF E5*00            [12]  244 	mov	a,_bp
      0000B1 24 FC            [12]  245 	add	a,#0xfc
      0000B3 F8               [12]  246 	mov	r0,a
      0000B4 E6               [12]  247 	mov	a,@r0
      0000B5 F0               [24]  248 	movx	@dptr,a
      0000B6 08               [12]  249 	inc	r0
      0000B7 E6               [12]  250 	mov	a,@r0
      0000B8 A3               [24]  251 	inc	dptr
      0000B9 F0               [24]  252 	movx	@dptr,a
                                    253 ;	_realloc.c:106: ret = p;
      0000BA E5*00            [12]  254 	mov	a,_bp
      0000BC 24 03            [12]  255 	add	a,#0x03
      0000BE F8               [12]  256 	mov	r0,a
      0000BF E5*00            [12]  257 	mov	a,_bp
      0000C1 24 0A            [12]  258 	add	a,#0x0a
      0000C3 F9               [12]  259 	mov	r1,a
      0000C4 E6               [12]  260 	mov	a,@r0
      0000C5 F7               [12]  261 	mov	@r1,a
      0000C6 08               [12]  262 	inc	r0
      0000C7 09               [12]  263 	inc	r1
      0000C8 E6               [12]  264 	mov	a,@r0
      0000C9 F7               [12]  265 	mov	@r1,a
      0000CA 02r02r5C         [24]  266 	ljmp	00115$
      0000CD                        267 00108$:
                                    268 ;	_realloc.c:110: if ((_sdcc_prev_memheader) &&
      0000CD 90r00r00         [24]  269 	mov	dptr,#__sdcc_prev_memheader
      0000D0 E0               [24]  270 	movx	a,@dptr
      0000D1 FD               [12]  271 	mov	r5,a
      0000D2 A3               [24]  272 	inc	dptr
      0000D3 E0               [24]  273 	movx	a,@dptr
      0000D4 FE               [12]  274 	mov	r6,a
      0000D5 4D               [12]  275 	orl	a,r5
      0000D6 70 03            [24]  276 	jnz	00140$
      0000D8 02r01rA8         [24]  277 	ljmp	00104$
      0000DB                        278 00140$:
                                    279 ;	_realloc.c:111: ((((unsigned int)pthis->next) -
                                    280 ;	_realloc.c:112: ((unsigned int)_sdcc_prev_memheader) -
      0000DB 8D 03            [24]  281 	mov	ar3,r5
      0000DD 8E 04            [24]  282 	mov	ar4,r6
      0000DF EA               [12]  283 	mov	a,r2
      0000E0 C3               [12]  284 	clr	c
      0000E1 9B               [12]  285 	subb	a,r3
      0000E2 FA               [12]  286 	mov	r2,a
      0000E3 EF               [12]  287 	mov	a,r7
      0000E4 9C               [12]  288 	subb	a,r4
      0000E5 FF               [12]  289 	mov	r7,a
                                    290 ;	_realloc.c:113: _sdcc_prev_memheader->len) >= size))
      0000E6 8D 82            [24]  291 	mov	dpl,r5
      0000E8 8E 83            [24]  292 	mov	dph,r6
      0000EA A3               [24]  293 	inc	dptr
      0000EB A3               [24]  294 	inc	dptr
      0000EC E0               [24]  295 	movx	a,@dptr
      0000ED FB               [12]  296 	mov	r3,a
      0000EE A3               [24]  297 	inc	dptr
      0000EF E0               [24]  298 	movx	a,@dptr
      0000F0 FC               [12]  299 	mov	r4,a
      0000F1 EA               [12]  300 	mov	a,r2
      0000F2 C3               [12]  301 	clr	c
      0000F3 9B               [12]  302 	subb	a,r3
      0000F4 FA               [12]  303 	mov	r2,a
      0000F5 EF               [12]  304 	mov	a,r7
      0000F6 9C               [12]  305 	subb	a,r4
      0000F7 FF               [12]  306 	mov	r7,a
      0000F8 E5*00            [12]  307 	mov	a,_bp
      0000FA 24 FC            [12]  308 	add	a,#0xfc
      0000FC F8               [12]  309 	mov	r0,a
      0000FD C3               [12]  310 	clr	c
      0000FE EA               [12]  311 	mov	a,r2
      0000FF 96               [12]  312 	subb	a,@r0
      000100 EF               [12]  313 	mov	a,r7
      000101 08               [12]  314 	inc	r0
      000102 96               [12]  315 	subb	a,@r0
      000103 50 03            [24]  316 	jnc	00141$
      000105 02r01rA8         [24]  317 	ljmp	00104$
      000108                        318 00141$:
                                    319 ;	_realloc.c:115: pnew = (MEMHEADER __xdata * )((char __xdata *)_sdcc_prev_memheader + _sdcc_prev_memheader->len);
      000108 8D 02            [24]  320 	mov	ar2,r5
      00010A 8E 07            [24]  321 	mov	ar7,r6
      00010C EB               [12]  322 	mov	a,r3
      00010D 2A               [12]  323 	add	a,r2
      00010E FB               [12]  324 	mov	r3,a
      00010F EC               [12]  325 	mov	a,r4
      000110 3F               [12]  326 	addc	a,r7
      000111 FC               [12]  327 	mov	r4,a
      000112 E5*00            [12]  328 	mov	a,_bp
      000114 24 08            [12]  329 	add	a,#0x08
      000116 F8               [12]  330 	mov	r0,a
      000117 A6 03            [24]  331 	mov	@r0,ar3
      000119 08               [12]  332 	inc	r0
      00011A A6 04            [24]  333 	mov	@r0,ar4
                                    334 ;	_realloc.c:116: _sdcc_prev_memheader->next = pnew;
      00011C 8D 82            [24]  335 	mov	dpl,r5
      00011E 8E 83            [24]  336 	mov	dph,r6
      000120 E5*00            [12]  337 	mov	a,_bp
      000122 24 08            [12]  338 	add	a,#0x08
      000124 F8               [12]  339 	mov	r0,a
      000125 E6               [12]  340 	mov	a,@r0
      000126 F0               [24]  341 	movx	@dptr,a
      000127 08               [12]  342 	inc	r0
      000128 E6               [12]  343 	mov	a,@r0
      000129 A3               [24]  344 	inc	dptr
      00012A F0               [24]  345 	movx	@dptr,a
                                    346 ;	_realloc.c:122: memmove(pnew, pthis, pthis->len);
      00012B E5*00            [12]  347 	mov	a,_bp
      00012D 24 06            [12]  348 	add	a,#0x06
      00012F F8               [12]  349 	mov	r0,a
      000130 86 82            [24]  350 	mov	dpl,@r0
      000132 08               [12]  351 	inc	r0
      000133 86 83            [24]  352 	mov	dph,@r0
      000135 A3               [24]  353 	inc	dptr
      000136 A3               [24]  354 	inc	dptr
      000137 A8*00            [24]  355 	mov	r0,_bp
      000139 08               [12]  356 	inc	r0
      00013A E0               [24]  357 	movx	a,@dptr
      00013B F6               [12]  358 	mov	@r0,a
      00013C A3               [24]  359 	inc	dptr
      00013D E0               [24]  360 	movx	a,@dptr
      00013E 08               [12]  361 	inc	r0
      00013F F6               [12]  362 	mov	@r0,a
      000140 E5*00            [12]  363 	mov	a,_bp
      000142 24 06            [12]  364 	add	a,#0x06
      000144 F8               [12]  365 	mov	r0,a
      000145 86 02            [24]  366 	mov	ar2,@r0
      000147 08               [12]  367 	inc	r0
      000148 86 04            [24]  368 	mov	ar4,@r0
      00014A 7D 00            [12]  369 	mov	r5,#0x00
      00014C E5*00            [12]  370 	mov	a,_bp
      00014E 24 08            [12]  371 	add	a,#0x08
      000150 F8               [12]  372 	mov	r0,a
      000151 86 03            [24]  373 	mov	ar3,@r0
      000153 08               [12]  374 	inc	r0
      000154 86 06            [24]  375 	mov	ar6,@r0
      000156 7F 00            [12]  376 	mov	r7,#0x00
      000158 A8*00            [24]  377 	mov	r0,_bp
      00015A 08               [12]  378 	inc	r0
      00015B E6               [12]  379 	mov	a,@r0
      00015C C0 E0            [24]  380 	push	acc
      00015E 08               [12]  381 	inc	r0
      00015F E6               [12]  382 	mov	a,@r0
      000160 C0 E0            [24]  383 	push	acc
      000162 C0 02            [24]  384 	push	ar2
      000164 C0 04            [24]  385 	push	ar4
      000166 C0 05            [24]  386 	push	ar5
      000168 8B 82            [24]  387 	mov	dpl,r3
      00016A 8E 83            [24]  388 	mov	dph,r6
      00016C 8F F0            [24]  389 	mov	b,r7
      00016E 12r00r00         [24]  390 	lcall	_memmove
      000171 E5 81            [12]  391 	mov	a,sp
      000173 24 FB            [12]  392 	add	a,#0xfb
      000175 F5 81            [12]  393 	mov	sp,a
                                    394 ;	_realloc.c:123: pnew->len = size;
      000177 E5*00            [12]  395 	mov	a,_bp
      000179 24 08            [12]  396 	add	a,#0x08
      00017B F8               [12]  397 	mov	r0,a
      00017C 86 82            [24]  398 	mov	dpl,@r0
      00017E 08               [12]  399 	inc	r0
      00017F 86 83            [24]  400 	mov	dph,@r0
      000181 A3               [24]  401 	inc	dptr
      000182 A3               [24]  402 	inc	dptr
      000183 E5*00            [12]  403 	mov	a,_bp
      000185 24 FC            [12]  404 	add	a,#0xfc
      000187 F8               [12]  405 	mov	r0,a
      000188 E6               [12]  406 	mov	a,@r0
      000189 F0               [24]  407 	movx	@dptr,a
      00018A 08               [12]  408 	inc	r0
      00018B E6               [12]  409 	mov	a,@r0
      00018C A3               [24]  410 	inc	dptr
      00018D F0               [24]  411 	movx	@dptr,a
                                    412 ;	_realloc.c:124: ret = MEM(pnew);
      00018E E5*00            [12]  413 	mov	a,_bp
      000190 24 08            [12]  414 	add	a,#0x08
      000192 F8               [12]  415 	mov	r0,a
      000193 74 04            [12]  416 	mov	a,#0x04
      000195 26               [12]  417 	add	a,@r0
      000196 FE               [12]  418 	mov	r6,a
      000197 E4               [12]  419 	clr	a
      000198 08               [12]  420 	inc	r0
      000199 36               [12]  421 	addc	a,@r0
      00019A FF               [12]  422 	mov	r7,a
      00019B E5*00            [12]  423 	mov	a,_bp
      00019D 24 0A            [12]  424 	add	a,#0x0a
      00019F F8               [12]  425 	mov	r0,a
      0001A0 A6 06            [24]  426 	mov	@r0,ar6
      0001A2 08               [12]  427 	inc	r0
      0001A3 A6 07            [24]  428 	mov	@r0,ar7
      0001A5 02r02r5C         [24]  429 	ljmp	00115$
      0001A8                        430 00104$:
                                    431 ;	_realloc.c:128: ret = malloc(size - HEADER_SIZE);
      0001A8 E5*00            [12]  432 	mov	a,_bp
      0001AA 24 FC            [12]  433 	add	a,#0xfc
      0001AC F8               [12]  434 	mov	r0,a
      0001AD E6               [12]  435 	mov	a,@r0
      0001AE 24 FC            [12]  436 	add	a,#0xFC
      0001B0 FE               [12]  437 	mov	r6,a
      0001B1 08               [12]  438 	inc	r0
      0001B2 E6               [12]  439 	mov	a,@r0
      0001B3 34 FF            [12]  440 	addc	a,#0xFF
      0001B5 FF               [12]  441 	mov	r7,a
      0001B6 8E 82            [24]  442 	mov	dpl,r6
      0001B8 8F 83            [24]  443 	mov	dph,r7
      0001BA 12r00r00         [24]  444 	lcall	_malloc
      0001BD AE 82            [24]  445 	mov	r6,dpl
      0001BF AF 83            [24]  446 	mov	r7,dph
      0001C1 E5*00            [12]  447 	mov	a,_bp
      0001C3 24 0A            [12]  448 	add	a,#0x0a
      0001C5 F8               [12]  449 	mov	r0,a
      0001C6 A6 06            [24]  450 	mov	@r0,ar6
      0001C8 08               [12]  451 	inc	r0
      0001C9 A6 07            [24]  452 	mov	@r0,ar7
                                    453 ;	_realloc.c:129: if (ret)
      0001CB E5*00            [12]  454 	mov	a,_bp
      0001CD 24 0A            [12]  455 	add	a,#0x0a
      0001CF F8               [12]  456 	mov	r0,a
      0001D0 E6               [12]  457 	mov	a,@r0
      0001D1 08               [12]  458 	inc	r0
      0001D2 46               [12]  459 	orl	a,@r0
      0001D3 70 03            [24]  460 	jnz	00142$
      0001D5 02r02r5C         [24]  461 	ljmp	00115$
      0001D8                        462 00142$:
                                    463 ;	_realloc.c:131: memcpy(ret, MEM(pthis), pthis->len - HEADER_SIZE);
      0001D8 E5*00            [12]  464 	mov	a,_bp
      0001DA 24 06            [12]  465 	add	a,#0x06
      0001DC F8               [12]  466 	mov	r0,a
      0001DD 86 82            [24]  467 	mov	dpl,@r0
      0001DF 08               [12]  468 	inc	r0
      0001E0 86 83            [24]  469 	mov	dph,@r0
      0001E2 A3               [24]  470 	inc	dptr
      0001E3 A3               [24]  471 	inc	dptr
      0001E4 E0               [24]  472 	movx	a,@dptr
      0001E5 FE               [12]  473 	mov	r6,a
      0001E6 A3               [24]  474 	inc	dptr
      0001E7 E0               [24]  475 	movx	a,@dptr
      0001E8 FF               [12]  476 	mov	r7,a
      0001E9 A8*00            [24]  477 	mov	r0,_bp
      0001EB 08               [12]  478 	inc	r0
      0001EC EE               [12]  479 	mov	a,r6
      0001ED 24 FC            [12]  480 	add	a,#0xFC
      0001EF F6               [12]  481 	mov	@r0,a
      0001F0 EF               [12]  482 	mov	a,r7
      0001F1 34 FF            [12]  483 	addc	a,#0xFF
      0001F3 08               [12]  484 	inc	r0
      0001F4 F6               [12]  485 	mov	@r0,a
      0001F5 E5*00            [12]  486 	mov	a,_bp
      0001F7 24 06            [12]  487 	add	a,#0x06
      0001F9 F8               [12]  488 	mov	r0,a
      0001FA 74 04            [12]  489 	mov	a,#0x04
      0001FC 26               [12]  490 	add	a,@r0
      0001FD FC               [12]  491 	mov	r4,a
      0001FE E4               [12]  492 	clr	a
      0001FF 08               [12]  493 	inc	r0
      000200 36               [12]  494 	addc	a,@r0
      000201 FD               [12]  495 	mov	r5,a
      000202 7B 00            [12]  496 	mov	r3,#0x00
      000204 E5*00            [12]  497 	mov	a,_bp
      000206 24 0A            [12]  498 	add	a,#0x0a
      000208 F8               [12]  499 	mov	r0,a
      000209 86 02            [24]  500 	mov	ar2,@r0
      00020B 08               [12]  501 	inc	r0
      00020C 86 06            [24]  502 	mov	ar6,@r0
      00020E 7F 00            [12]  503 	mov	r7,#0x00
      000210 A8*00            [24]  504 	mov	r0,_bp
      000212 08               [12]  505 	inc	r0
      000213 E6               [12]  506 	mov	a,@r0
      000214 C0 E0            [24]  507 	push	acc
      000216 08               [12]  508 	inc	r0
      000217 E6               [12]  509 	mov	a,@r0
      000218 C0 E0            [24]  510 	push	acc
      00021A C0 04            [24]  511 	push	ar4
      00021C C0 05            [24]  512 	push	ar5
      00021E C0 03            [24]  513 	push	ar3
      000220 8A 82            [24]  514 	mov	dpl,r2
      000222 8E 83            [24]  515 	mov	dph,r6
      000224 8F F0            [24]  516 	mov	b,r7
      000226 12r00r00         [24]  517 	lcall	_memcpy
      000229 E5 81            [12]  518 	mov	a,sp
      00022B 24 FB            [12]  519 	add	a,#0xfb
      00022D F5 81            [12]  520 	mov	sp,a
                                    521 ;	_realloc.c:132: free(p);
      00022F E5*00            [12]  522 	mov	a,_bp
      000231 24 03            [12]  523 	add	a,#0x03
      000233 F8               [12]  524 	mov	r0,a
      000234 86 82            [24]  525 	mov	dpl,@r0
      000236 08               [12]  526 	inc	r0
      000237 86 83            [24]  527 	mov	dph,@r0
      000239 08               [12]  528 	inc	r0
      00023A 86 F0            [24]  529 	mov	b,@r0
      00023C 12r00r00         [24]  530 	lcall	_free
      00023F 80 1B            [24]  531 	sjmp	00115$
      000241                        532 00114$:
                                    533 ;	_realloc.c:140: ret = malloc(size);
      000241 E5*00            [12]  534 	mov	a,_bp
      000243 24 FC            [12]  535 	add	a,#0xfc
      000245 F8               [12]  536 	mov	r0,a
      000246 86 82            [24]  537 	mov	dpl,@r0
      000248 08               [12]  538 	inc	r0
      000249 86 83            [24]  539 	mov	dph,@r0
      00024B 12r00r00         [24]  540 	lcall	_malloc
      00024E AE 82            [24]  541 	mov	r6,dpl
      000250 AF 83            [24]  542 	mov	r7,dph
      000252 E5*00            [12]  543 	mov	a,_bp
      000254 24 0A            [12]  544 	add	a,#0x0a
      000256 F8               [12]  545 	mov	r0,a
      000257 A6 06            [24]  546 	mov	@r0,ar6
      000259 08               [12]  547 	inc	r0
      00025A A6 07            [24]  548 	mov	@r0,ar7
      00025C                        549 00115$:
      00025C D0 D0            [24]  550 	pop	psw
      00025E 92 AF            [24]  551 	mov	ea,c
                                    552 ;	_realloc.c:143: return ret;
      000260 E5*00            [12]  553 	mov	a,_bp
      000262 24 0A            [12]  554 	add	a,#0x0a
      000264 F8               [12]  555 	mov	r0,a
      000265 86 82            [24]  556 	mov	dpl,@r0
      000267 08               [12]  557 	inc	r0
      000268 86 83            [24]  558 	mov	dph,@r0
      00026A 85*00 81         [24]  559 	mov	sp,_bp
      00026D D0*00            [24]  560 	pop	_bp
      00026F 22               [24]  561 	ret
                                    562 	.area CSEG    (CODE)
                                    563 	.area CONST   (CODE)
                                    564 	.area XINIT   (CODE)
                                    565 	.area CABS    (ABS,CODE)
