                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:01 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +5
                                    110 ;y                         Allocated to registers r2 r3 r6 r7 
                                    111 ;w                         Allocated to registers r7 r6 r4 r3 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b1 
                                    114 ;sloc0                     Allocated to stack - _bp +1
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(float x, bool iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C8               [12]  131 	xch	a,r0
      000006 E5 81            [12]  132 	mov	a,sp
      000008 24 0C            [12]  133 	add	a,#0x0C
      00000A F5 81            [12]  134 	mov	sp,a
      00000C E5*00            [12]  135 	mov	a,_bp
      00000E 24 05            [12]  136 	add	a,#0x05
      000010 C8               [12]  137 	xch	a,r0
      000011 A6 82            [24]  138 	mov	@r0,dpl
      000013 08               [12]  139 	inc	r0
      000014 A6 83            [24]  140 	mov	@r0,dph
      000016 08               [12]  141 	inc	r0
      000017 A6 F0            [24]  142 	mov	@r0,b
      000019 08               [12]  143 	inc	r0
      00001A F6               [12]  144 	mov	@r0,a
                                    145 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      00001B C0*00            [24]  146 	push	bits
      00001D E4               [12]  147 	clr	a
      00001E C0 E0            [24]  148 	push	acc
      000020 C0 E0            [24]  149 	push	acc
      000022 C0 E0            [24]  150 	push	acc
      000024 C0 E0            [24]  151 	push	acc
      000026 E5*00            [12]  152 	mov	a,_bp
      000028 24 05            [12]  153 	add	a,#0x05
      00002A F8               [12]  154 	mov	r0,a
      00002B 86 82            [24]  155 	mov	dpl,@r0
      00002D 08               [12]  156 	inc	r0
      00002E 86 83            [24]  157 	mov	dph,@r0
      000030 08               [12]  158 	inc	r0
      000031 86 F0            [24]  159 	mov	b,@r0
      000033 08               [12]  160 	inc	r0
      000034 E6               [12]  161 	mov	a,@r0
      000035 12r00r00         [24]  162 	lcall	___fslt
      000038 AB 82            [24]  163 	mov	r3,dpl
      00003A E5 81            [12]  164 	mov	a,sp
      00003C 24 FC            [12]  165 	add	a,#0xfc
      00003E F5 81            [12]  166 	mov	sp,a
      000040 D0*00            [24]  167 	pop	bits
      000042 EB               [12]  168 	mov	a,r3
      000043 60 1A            [24]  169 	jz	00102$
      000045 E5*00            [12]  170 	mov	a,_bp
      000047 24 05            [12]  171 	add	a,#0x05
      000049 F8               [12]  172 	mov	r0,a
      00004A 86 04            [24]  173 	mov	ar4,@r0
      00004C 08               [12]  174 	inc	r0
      00004D 86 05            [24]  175 	mov	ar5,@r0
      00004F 08               [12]  176 	inc	r0
      000050 86 06            [24]  177 	mov	ar6,@r0
      000052 08               [12]  178 	inc	r0
      000053 E6               [12]  179 	mov	a,@r0
      000054 B2 E7            [12]  180 	cpl	acc.7
      000056 FF               [12]  181 	mov	r7,a
      000057 8C 02            [24]  182 	mov	ar2,r4
      000059 8D 03            [24]  183 	mov	ar3,r5
      00005B D2*00            [12]  184 	setb	b1
      00005D 80 12            [24]  185 	sjmp	00103$
      00005F                        186 00102$:
                                    187 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00005F E5*00            [12]  188 	mov	a,_bp
      000061 24 05            [12]  189 	add	a,#0x05
      000063 F8               [12]  190 	mov	r0,a
      000064 86 02            [24]  191 	mov	ar2,@r0
      000066 08               [12]  192 	inc	r0
      000067 86 03            [24]  193 	mov	ar3,@r0
      000069 08               [12]  194 	inc	r0
      00006A 86 06            [24]  195 	mov	ar6,@r0
      00006C 08               [12]  196 	inc	r0
      00006D 86 07            [24]  197 	mov	ar7,@r0
      00006F C2*00            [12]  198 	clr	b1
      000071                        199 00103$:
                                    200 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      000071 C0 07            [24]  201 	push	ar7
      000073 C0 06            [24]  202 	push	ar6
      000075 C0 03            [24]  203 	push	ar3
      000077 C0 02            [24]  204 	push	ar2
      000079 C0*00            [24]  205 	push	bits
      00007B E4               [12]  206 	clr	a
      00007C C0 E0            [24]  207 	push	acc
      00007E C0 E0            [24]  208 	push	acc
      000080 74 80            [12]  209 	mov	a,#0x80
      000082 C0 E0            [24]  210 	push	acc
      000084 74 3F            [12]  211 	mov	a,#0x3F
      000086 C0 E0            [24]  212 	push	acc
      000088 8A 82            [24]  213 	mov	dpl,r2
      00008A 8B 83            [24]  214 	mov	dph,r3
      00008C 8E F0            [24]  215 	mov	b,r6
      00008E EF               [12]  216 	mov	a,r7
      00008F 12r00r00         [24]  217 	lcall	___fsgt
      000092 AD 82            [24]  218 	mov	r5,dpl
      000094 E5 81            [12]  219 	mov	a,sp
      000096 24 FC            [12]  220 	add	a,#0xfc
      000098 F5 81            [12]  221 	mov	sp,a
      00009A D0*00            [24]  222 	pop	bits
      00009C D0 02            [24]  223 	pop	ar2
      00009E D0 03            [24]  224 	pop	ar3
      0000A0 D0 06            [24]  225 	pop	ar6
      0000A2 D0 07            [24]  226 	pop	ar7
      0000A4 ED               [12]  227 	mov	a,r5
      0000A5 70 06            [24]  228 	jnz	00117$
      0000A7 20*00 03         [24]  229 	jb	b0,00146$
      0000AA 02r02rE4         [24]  230 	ljmp	00118$
      0000AD                        231 00146$:
      0000AD                        232 00117$:
                                    233 ;	sincoshf.c:66: if(y>YBAR)
      0000AD C0 07            [24]  234 	push	ar7
      0000AF C0 06            [24]  235 	push	ar6
      0000B1 C0 03            [24]  236 	push	ar3
      0000B3 C0 02            [24]  237 	push	ar2
      0000B5 C0*00            [24]  238 	push	bits
      0000B7 E4               [12]  239 	clr	a
      0000B8 C0 E0            [24]  240 	push	acc
      0000BA C0 E0            [24]  241 	push	acc
      0000BC 74 10            [12]  242 	mov	a,#0x10
      0000BE C0 E0            [24]  243 	push	acc
      0000C0 74 41            [12]  244 	mov	a,#0x41
      0000C2 C0 E0            [24]  245 	push	acc
      0000C4 8A 82            [24]  246 	mov	dpl,r2
      0000C6 8B 83            [24]  247 	mov	dph,r3
      0000C8 8E F0            [24]  248 	mov	b,r6
      0000CA EF               [12]  249 	mov	a,r7
      0000CB 12r00r00         [24]  250 	lcall	___fsgt
      0000CE AD 82            [24]  251 	mov	r5,dpl
      0000D0 E5 81            [12]  252 	mov	a,sp
      0000D2 24 FC            [12]  253 	add	a,#0xfc
      0000D4 F5 81            [12]  254 	mov	sp,a
      0000D6 D0*00            [24]  255 	pop	bits
      0000D8 D0 02            [24]  256 	pop	ar2
      0000DA D0 03            [24]  257 	pop	ar3
      0000DC D0 06            [24]  258 	pop	ar6
      0000DE D0 07            [24]  259 	pop	ar7
      0000E0 ED               [12]  260 	mov	a,r5
      0000E1 70 03            [24]  261 	jnz	00147$
      0000E3 02r01rFA         [24]  262 	ljmp	00110$
      0000E6                        263 00147$:
                                    264 ;	sincoshf.c:68: w=y-K1;
      0000E6 C0*00            [24]  265 	push	bits
      0000E8 E4               [12]  266 	clr	a
      0000E9 C0 E0            [24]  267 	push	acc
      0000EB 74 73            [12]  268 	mov	a,#0x73
      0000ED C0 E0            [24]  269 	push	acc
      0000EF 74 31            [12]  270 	mov	a,#0x31
      0000F1 C0 E0            [24]  271 	push	acc
      0000F3 74 3F            [12]  272 	mov	a,#0x3F
      0000F5 C0 E0            [24]  273 	push	acc
      0000F7 8A 82            [24]  274 	mov	dpl,r2
      0000F9 8B 83            [24]  275 	mov	dph,r3
      0000FB 8E F0            [24]  276 	mov	b,r6
      0000FD EF               [12]  277 	mov	a,r7
      0000FE 12r00r00         [24]  278 	lcall	___fssub
      000101 AF 82            [24]  279 	mov	r7,dpl
      000103 AE 83            [24]  280 	mov	r6,dph
      000105 AC F0            [24]  281 	mov	r4,b
      000107 FD               [12]  282 	mov	r5,a
      000108 E5 81            [12]  283 	mov	a,sp
      00010A 24 FC            [12]  284 	add	a,#0xfc
      00010C F5 81            [12]  285 	mov	sp,a
      00010E D0*00            [24]  286 	pop	bits
      000110 8D 03            [24]  287 	mov	ar3,r5
                                    288 ;	sincoshf.c:69: if (w>WMAX)
      000112 C0 07            [24]  289 	push	ar7
      000114 C0 06            [24]  290 	push	ar6
      000116 C0 04            [24]  291 	push	ar4
      000118 C0 03            [24]  292 	push	ar3
      00011A C0*00            [24]  293 	push	bits
      00011C 74 CF            [12]  294 	mov	a,#0xCF
      00011E C0 E0            [24]  295 	push	acc
      000120 74 BD            [12]  296 	mov	a,#0xBD
      000122 C0 E0            [24]  297 	push	acc
      000124 74 33            [12]  298 	mov	a,#0x33
      000126 C0 E0            [24]  299 	push	acc
      000128 74 42            [12]  300 	mov	a,#0x42
      00012A C0 E0            [24]  301 	push	acc
      00012C 8F 82            [24]  302 	mov	dpl,r7
      00012E 8E 83            [24]  303 	mov	dph,r6
      000130 8C F0            [24]  304 	mov	b,r4
      000132 EB               [12]  305 	mov	a,r3
      000133 12r00r00         [24]  306 	lcall	___fsgt
      000136 AD 82            [24]  307 	mov	r5,dpl
      000138 E5 81            [12]  308 	mov	a,sp
      00013A 24 FC            [12]  309 	add	a,#0xfc
      00013C F5 81            [12]  310 	mov	sp,a
      00013E D0*00            [24]  311 	pop	bits
      000140 D0 03            [24]  312 	pop	ar3
      000142 D0 04            [24]  313 	pop	ar4
      000144 D0 06            [24]  314 	pop	ar6
      000146 D0 07            [24]  315 	pop	ar7
      000148 ED               [12]  316 	mov	a,r5
      000149 60 1C            [24]  317 	jz	00105$
                                    318 ;	sincoshf.c:71: errno=ERANGE;
      00014B 90r00r00         [24]  319 	mov	dptr,#_errno
      00014E 74 22            [12]  320 	mov	a,#0x22
      000150 F0               [24]  321 	movx	@dptr,a
      000151 E4               [12]  322 	clr	a
      000152 A3               [24]  323 	inc	dptr
      000153 F0               [24]  324 	movx	@dptr,a
                                    325 ;	sincoshf.c:72: z=HUGE_VALF;
      000154 E5*00            [12]  326 	mov	a,_bp
      000156 24 09            [12]  327 	add	a,#0x09
      000158 F8               [12]  328 	mov	r0,a
      000159 76 FF            [12]  329 	mov	@r0,#0xFF
      00015B 08               [12]  330 	inc	r0
      00015C 76 FF            [12]  331 	mov	@r0,#0xFF
      00015E 08               [12]  332 	inc	r0
      00015F 76 7F            [12]  333 	mov	@r0,#0x7F
      000161 08               [12]  334 	inc	r0
      000162 76 7F            [12]  335 	mov	@r0,#0x7F
      000164 02r02rC9         [24]  336 	ljmp	00111$
      000167                        337 00105$:
                                    338 ;	sincoshf.c:76: z=expf(w);
      000167 8F 82            [24]  339 	mov	dpl,r7
      000169 8E 83            [24]  340 	mov	dph,r6
      00016B 8C F0            [24]  341 	mov	b,r4
      00016D EB               [12]  342 	mov	a,r3
      00016E C0*00            [24]  343 	push	bits
      000170 12r00r00         [24]  344 	lcall	_expf
      000173 AF 82            [24]  345 	mov	r7,dpl
      000175 AE 83            [24]  346 	mov	r6,dph
      000177 AD F0            [24]  347 	mov	r5,b
      000179 FC               [12]  348 	mov	r4,a
      00017A D0*00            [24]  349 	pop	bits
      00017C E5*00            [12]  350 	mov	a,_bp
      00017E 24 09            [12]  351 	add	a,#0x09
      000180 F8               [12]  352 	mov	r0,a
      000181 A6 07            [24]  353 	mov	@r0,ar7
      000183 08               [12]  354 	inc	r0
      000184 A6 06            [24]  355 	mov	@r0,ar6
      000186 08               [12]  356 	inc	r0
      000187 A6 05            [24]  357 	mov	@r0,ar5
      000189 08               [12]  358 	inc	r0
      00018A A6 04            [24]  359 	mov	@r0,ar4
                                    360 ;	sincoshf.c:77: z+=K3*z;
      00018C C0*00            [24]  361 	push	bits
      00018E E5*00            [12]  362 	mov	a,_bp
      000190 24 09            [12]  363 	add	a,#0x09
      000192 F8               [12]  364 	mov	r0,a
      000193 E6               [12]  365 	mov	a,@r0
      000194 C0 E0            [24]  366 	push	acc
      000196 08               [12]  367 	inc	r0
      000197 E6               [12]  368 	mov	a,@r0
      000198 C0 E0            [24]  369 	push	acc
      00019A 08               [12]  370 	inc	r0
      00019B E6               [12]  371 	mov	a,@r0
      00019C C0 E0            [24]  372 	push	acc
      00019E 08               [12]  373 	inc	r0
      00019F E6               [12]  374 	mov	a,@r0
      0001A0 C0 E0            [24]  375 	push	acc
      0001A2 90 08 97         [24]  376 	mov	dptr,#0x0897
      0001A5 75 F0 68         [24]  377 	mov	b,#0x68
      0001A8 74 37            [12]  378 	mov	a,#0x37
      0001AA 12r00r00         [24]  379 	lcall	___fsmul
      0001AD AF 82            [24]  380 	mov	r7,dpl
      0001AF AE 83            [24]  381 	mov	r6,dph
      0001B1 AD F0            [24]  382 	mov	r5,b
      0001B3 FC               [12]  383 	mov	r4,a
      0001B4 E5 81            [12]  384 	mov	a,sp
      0001B6 24 FC            [12]  385 	add	a,#0xfc
      0001B8 F5 81            [12]  386 	mov	sp,a
      0001BA D0*00            [24]  387 	pop	bits
      0001BC C0*00            [24]  388 	push	bits
      0001BE C0 07            [24]  389 	push	ar7
      0001C0 C0 06            [24]  390 	push	ar6
      0001C2 C0 05            [24]  391 	push	ar5
      0001C4 C0 04            [24]  392 	push	ar4
      0001C6 E5*00            [12]  393 	mov	a,_bp
      0001C8 24 09            [12]  394 	add	a,#0x09
      0001CA F8               [12]  395 	mov	r0,a
      0001CB 86 82            [24]  396 	mov	dpl,@r0
      0001CD 08               [12]  397 	inc	r0
      0001CE 86 83            [24]  398 	mov	dph,@r0
      0001D0 08               [12]  399 	inc	r0
      0001D1 86 F0            [24]  400 	mov	b,@r0
      0001D3 08               [12]  401 	inc	r0
      0001D4 E6               [12]  402 	mov	a,@r0
      0001D5 12r00r00         [24]  403 	lcall	___fsadd
      0001D8 AF 82            [24]  404 	mov	r7,dpl
      0001DA AE 83            [24]  405 	mov	r6,dph
      0001DC AD F0            [24]  406 	mov	r5,b
      0001DE FC               [12]  407 	mov	r4,a
      0001DF E5 81            [12]  408 	mov	a,sp
      0001E1 24 FC            [12]  409 	add	a,#0xfc
      0001E3 F5 81            [12]  410 	mov	sp,a
      0001E5 D0*00            [24]  411 	pop	bits
      0001E7 E5*00            [12]  412 	mov	a,_bp
      0001E9 24 09            [12]  413 	add	a,#0x09
      0001EB F8               [12]  414 	mov	r0,a
      0001EC A6 07            [24]  415 	mov	@r0,ar7
      0001EE 08               [12]  416 	inc	r0
      0001EF A6 06            [24]  417 	mov	@r0,ar6
      0001F1 08               [12]  418 	inc	r0
      0001F2 A6 05            [24]  419 	mov	@r0,ar5
      0001F4 08               [12]  420 	inc	r0
      0001F5 A6 04            [24]  421 	mov	@r0,ar4
      0001F7 02r02rC9         [24]  422 	ljmp	00111$
      0001FA                        423 00110$:
                                    424 ;	sincoshf.c:82: z=expf(y);
      0001FA 8A 82            [24]  425 	mov	dpl,r2
      0001FC 8B 83            [24]  426 	mov	dph,r3
      0001FE 8E F0            [24]  427 	mov	b,r6
      000200 EF               [12]  428 	mov	a,r7
      000201 C0*00            [24]  429 	push	bits
      000203 12r00r00         [24]  430 	lcall	_expf
      000206 AF 82            [24]  431 	mov	r7,dpl
      000208 AE 83            [24]  432 	mov	r6,dph
      00020A AD F0            [24]  433 	mov	r5,b
      00020C FC               [12]  434 	mov	r4,a
      00020D D0*00            [24]  435 	pop	bits
      00020F E5*00            [12]  436 	mov	a,_bp
      000211 24 09            [12]  437 	add	a,#0x09
      000213 F8               [12]  438 	mov	r0,a
      000214 A6 07            [24]  439 	mov	@r0,ar7
      000216 08               [12]  440 	inc	r0
      000217 A6 06            [24]  441 	mov	@r0,ar6
      000219 08               [12]  442 	inc	r0
      00021A A6 05            [24]  443 	mov	@r0,ar5
      00021C 08               [12]  444 	inc	r0
      00021D A6 04            [24]  445 	mov	@r0,ar4
                                    446 ;	sincoshf.c:83: w=1.0/z;
      00021F C0*00            [24]  447 	push	bits
      000221 E5*00            [12]  448 	mov	a,_bp
      000223 24 09            [12]  449 	add	a,#0x09
      000225 F8               [12]  450 	mov	r0,a
      000226 E6               [12]  451 	mov	a,@r0
      000227 C0 E0            [24]  452 	push	acc
      000229 08               [12]  453 	inc	r0
      00022A E6               [12]  454 	mov	a,@r0
      00022B C0 E0            [24]  455 	push	acc
      00022D 08               [12]  456 	inc	r0
      00022E E6               [12]  457 	mov	a,@r0
      00022F C0 E0            [24]  458 	push	acc
      000231 08               [12]  459 	inc	r0
      000232 E6               [12]  460 	mov	a,@r0
      000233 C0 E0            [24]  461 	push	acc
      000235 90 00 00         [24]  462 	mov	dptr,#0x0000
      000238 75 F0 80         [24]  463 	mov	b,#0x80
      00023B 74 3F            [12]  464 	mov	a,#0x3F
      00023D 12r00r00         [24]  465 	lcall	___fsdiv
      000240 A8*00            [24]  466 	mov	r0,_bp
      000242 08               [12]  467 	inc	r0
      000243 A6 82            [24]  468 	mov	@r0,dpl
      000245 08               [12]  469 	inc	r0
      000246 A6 83            [24]  470 	mov	@r0,dph
      000248 08               [12]  471 	inc	r0
      000249 A6 F0            [24]  472 	mov	@r0,b
      00024B 08               [12]  473 	inc	r0
      00024C F6               [12]  474 	mov	@r0,a
      00024D E5 81            [12]  475 	mov	a,sp
      00024F 24 FC            [12]  476 	add	a,#0xfc
      000251 F5 81            [12]  477 	mov	sp,a
      000253 D0*00            [24]  478 	pop	bits
      000255 A8*00            [24]  479 	mov	r0,_bp
      000257 08               [12]  480 	inc	r0
      000258 86 07            [24]  481 	mov	ar7,@r0
      00025A 08               [12]  482 	inc	r0
      00025B 86 06            [24]  483 	mov	ar6,@r0
      00025D 08               [12]  484 	inc	r0
      00025E 86 04            [24]  485 	mov	ar4,@r0
      000260 08               [12]  486 	inc	r0
      000261 86 03            [24]  487 	mov	ar3,@r0
                                    488 ;	sincoshf.c:84: if(!iscosh) w=-w;
      000263 20*00 04         [24]  489 	jb	b0,00108$
      000266 EB               [12]  490 	mov	a,r3
      000267 B2 E7            [12]  491 	cpl	acc.7
      000269 FB               [12]  492 	mov	r3,a
      00026A                        493 00108$:
                                    494 ;	sincoshf.c:85: z=(z+w)*0.5;
      00026A C0*00            [24]  495 	push	bits
      00026C C0 07            [24]  496 	push	ar7
      00026E C0 06            [24]  497 	push	ar6
      000270 C0 04            [24]  498 	push	ar4
      000272 C0 03            [24]  499 	push	ar3
      000274 E5*00            [12]  500 	mov	a,_bp
      000276 24 09            [12]  501 	add	a,#0x09
      000278 F8               [12]  502 	mov	r0,a
      000279 86 82            [24]  503 	mov	dpl,@r0
      00027B 08               [12]  504 	inc	r0
      00027C 86 83            [24]  505 	mov	dph,@r0
      00027E 08               [12]  506 	inc	r0
      00027F 86 F0            [24]  507 	mov	b,@r0
      000281 08               [12]  508 	inc	r0
      000282 E6               [12]  509 	mov	a,@r0
      000283 12r00r00         [24]  510 	lcall	___fsadd
      000286 AF 82            [24]  511 	mov	r7,dpl
      000288 AE 83            [24]  512 	mov	r6,dph
      00028A AD F0            [24]  513 	mov	r5,b
      00028C FC               [12]  514 	mov	r4,a
      00028D E5 81            [12]  515 	mov	a,sp
      00028F 24 FC            [12]  516 	add	a,#0xfc
      000291 F5 81            [12]  517 	mov	sp,a
      000293 D0*00            [24]  518 	pop	bits
      000295 C0*00            [24]  519 	push	bits
      000297 C0 07            [24]  520 	push	ar7
      000299 C0 06            [24]  521 	push	ar6
      00029B C0 05            [24]  522 	push	ar5
      00029D C0 04            [24]  523 	push	ar4
      00029F 90 00 00         [24]  524 	mov	dptr,#(0x00&0x00ff)
      0002A2 E4               [12]  525 	clr	a
      0002A3 F5 F0            [12]  526 	mov	b,a
      0002A5 74 3F            [12]  527 	mov	a,#0x3F
      0002A7 12r00r00         [24]  528 	lcall	___fsmul
      0002AA AF 82            [24]  529 	mov	r7,dpl
      0002AC AE 83            [24]  530 	mov	r6,dph
      0002AE AD F0            [24]  531 	mov	r5,b
      0002B0 FC               [12]  532 	mov	r4,a
      0002B1 E5 81            [12]  533 	mov	a,sp
      0002B3 24 FC            [12]  534 	add	a,#0xfc
      0002B5 F5 81            [12]  535 	mov	sp,a
      0002B7 D0*00            [24]  536 	pop	bits
      0002B9 E5*00            [12]  537 	mov	a,_bp
      0002BB 24 09            [12]  538 	add	a,#0x09
      0002BD F8               [12]  539 	mov	r0,a
      0002BE A6 07            [24]  540 	mov	@r0,ar7
      0002C0 08               [12]  541 	inc	r0
      0002C1 A6 06            [24]  542 	mov	@r0,ar6
      0002C3 08               [12]  543 	inc	r0
      0002C4 A6 05            [24]  544 	mov	@r0,ar5
      0002C6 08               [12]  545 	inc	r0
      0002C7 A6 04            [24]  546 	mov	@r0,ar4
      0002C9                        547 00111$:
                                    548 ;	sincoshf.c:87: if(sign) z=-z;
      0002C9 20*00 03         [24]  549 	jb	b1,00150$
      0002CC 02r04rA6         [24]  550 	ljmp	00119$
      0002CF                        551 00150$:
      0002CF E5*00            [12]  552 	mov	a,_bp
      0002D1 24 09            [12]  553 	add	a,#0x09
      0002D3 F8               [12]  554 	mov	r0,a
      0002D4 E6               [12]  555 	mov	a,@r0
      0002D5 F6               [12]  556 	mov	@r0,a
      0002D6 08               [12]  557 	inc	r0
      0002D7 E6               [12]  558 	mov	a,@r0
      0002D8 F6               [12]  559 	mov	@r0,a
      0002D9 08               [12]  560 	inc	r0
      0002DA E6               [12]  561 	mov	a,@r0
      0002DB F6               [12]  562 	mov	@r0,a
      0002DC 08               [12]  563 	inc	r0
      0002DD E6               [12]  564 	mov	a,@r0
      0002DE B2 E7            [12]  565 	cpl	acc.7
      0002E0 F6               [12]  566 	mov	@r0,a
      0002E1 02r04rA6         [24]  567 	ljmp	00119$
      0002E4                        568 00118$:
                                    569 ;	sincoshf.c:91: if (y<EPS)
      0002E4 E4               [12]  570 	clr	a
      0002E5 C0 E0            [24]  571 	push	acc
      0002E7 C0 E0            [24]  572 	push	acc
      0002E9 74 80            [12]  573 	mov	a,#0x80
      0002EB C0 E0            [24]  574 	push	acc
      0002ED 74 39            [12]  575 	mov	a,#0x39
      0002EF C0 E0            [24]  576 	push	acc
      0002F1 8A 82            [24]  577 	mov	dpl,r2
      0002F3 8B 83            [24]  578 	mov	dph,r3
      0002F5 8E F0            [24]  579 	mov	b,r6
      0002F7 EF               [12]  580 	mov	a,r7
      0002F8 12r00r00         [24]  581 	lcall	___fslt
      0002FB AF 82            [24]  582 	mov	r7,dpl
      0002FD E5 81            [12]  583 	mov	a,sp
      0002FF 24 FC            [12]  584 	add	a,#0xfc
      000301 F5 81            [12]  585 	mov	sp,a
      000303 EF               [12]  586 	mov	a,r7
      000304 60 1B            [24]  587 	jz	00115$
                                    588 ;	sincoshf.c:92: z=x;
      000306 E5*00            [12]  589 	mov	a,_bp
      000308 24 05            [12]  590 	add	a,#0x05
      00030A F8               [12]  591 	mov	r0,a
      00030B E5*00            [12]  592 	mov	a,_bp
      00030D 24 09            [12]  593 	add	a,#0x09
      00030F F9               [12]  594 	mov	r1,a
      000310 E6               [12]  595 	mov	a,@r0
      000311 F7               [12]  596 	mov	@r1,a
      000312 08               [12]  597 	inc	r0
      000313 09               [12]  598 	inc	r1
      000314 E6               [12]  599 	mov	a,@r0
      000315 F7               [12]  600 	mov	@r1,a
      000316 08               [12]  601 	inc	r0
      000317 09               [12]  602 	inc	r1
      000318 E6               [12]  603 	mov	a,@r0
      000319 F7               [12]  604 	mov	@r1,a
      00031A 08               [12]  605 	inc	r0
      00031B 09               [12]  606 	inc	r1
      00031C E6               [12]  607 	mov	a,@r0
      00031D F7               [12]  608 	mov	@r1,a
      00031E 02r04rA6         [24]  609 	ljmp	00119$
      000321                        610 00115$:
                                    611 ;	sincoshf.c:95: z=x*x;
      000321 E5*00            [12]  612 	mov	a,_bp
      000323 24 05            [12]  613 	add	a,#0x05
      000325 F8               [12]  614 	mov	r0,a
      000326 E6               [12]  615 	mov	a,@r0
      000327 C0 E0            [24]  616 	push	acc
      000329 08               [12]  617 	inc	r0
      00032A E6               [12]  618 	mov	a,@r0
      00032B C0 E0            [24]  619 	push	acc
      00032D 08               [12]  620 	inc	r0
      00032E E6               [12]  621 	mov	a,@r0
      00032F C0 E0            [24]  622 	push	acc
      000331 08               [12]  623 	inc	r0
      000332 E6               [12]  624 	mov	a,@r0
      000333 C0 E0            [24]  625 	push	acc
      000335 E5*00            [12]  626 	mov	a,_bp
      000337 24 05            [12]  627 	add	a,#0x05
      000339 F8               [12]  628 	mov	r0,a
      00033A 86 82            [24]  629 	mov	dpl,@r0
      00033C 08               [12]  630 	inc	r0
      00033D 86 83            [24]  631 	mov	dph,@r0
      00033F 08               [12]  632 	inc	r0
      000340 86 F0            [24]  633 	mov	b,@r0
      000342 08               [12]  634 	inc	r0
      000343 E6               [12]  635 	mov	a,@r0
      000344 12r00r00         [24]  636 	lcall	___fsmul
      000347 AC 82            [24]  637 	mov	r4,dpl
      000349 AD 83            [24]  638 	mov	r5,dph
      00034B AE F0            [24]  639 	mov	r6,b
      00034D FF               [12]  640 	mov	r7,a
      00034E E5 81            [12]  641 	mov	a,sp
      000350 24 FC            [12]  642 	add	a,#0xfc
      000352 F5 81            [12]  643 	mov	sp,a
      000354 E5*00            [12]  644 	mov	a,_bp
      000356 24 09            [12]  645 	add	a,#0x09
      000358 F8               [12]  646 	mov	r0,a
      000359 A6 04            [24]  647 	mov	@r0,ar4
      00035B 08               [12]  648 	inc	r0
      00035C A6 05            [24]  649 	mov	@r0,ar5
      00035E 08               [12]  650 	inc	r0
      00035F A6 06            [24]  651 	mov	@r0,ar6
      000361 08               [12]  652 	inc	r0
      000362 A6 07            [24]  653 	mov	@r0,ar7
                                    654 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000364 E5*00            [12]  655 	mov	a,_bp
      000366 24 09            [12]  656 	add	a,#0x09
      000368 F8               [12]  657 	mov	r0,a
      000369 E6               [12]  658 	mov	a,@r0
      00036A C0 E0            [24]  659 	push	acc
      00036C 08               [12]  660 	inc	r0
      00036D E6               [12]  661 	mov	a,@r0
      00036E C0 E0            [24]  662 	push	acc
      000370 08               [12]  663 	inc	r0
      000371 E6               [12]  664 	mov	a,@r0
      000372 C0 E0            [24]  665 	push	acc
      000374 08               [12]  666 	inc	r0
      000375 E6               [12]  667 	mov	a,@r0
      000376 C0 E0            [24]  668 	push	acc
      000378 E5*00            [12]  669 	mov	a,_bp
      00037A 24 05            [12]  670 	add	a,#0x05
      00037C F8               [12]  671 	mov	r0,a
      00037D 86 82            [24]  672 	mov	dpl,@r0
      00037F 08               [12]  673 	inc	r0
      000380 86 83            [24]  674 	mov	dph,@r0
      000382 08               [12]  675 	inc	r0
      000383 86 F0            [24]  676 	mov	b,@r0
      000385 08               [12]  677 	inc	r0
      000386 E6               [12]  678 	mov	a,@r0
      000387 12r00r00         [24]  679 	lcall	___fsmul
      00038A A8*00            [24]  680 	mov	r0,_bp
      00038C 08               [12]  681 	inc	r0
      00038D A6 82            [24]  682 	mov	@r0,dpl
      00038F 08               [12]  683 	inc	r0
      000390 A6 83            [24]  684 	mov	@r0,dph
      000392 08               [12]  685 	inc	r0
      000393 A6 F0            [24]  686 	mov	@r0,b
      000395 08               [12]  687 	inc	r0
      000396 F6               [12]  688 	mov	@r0,a
      000397 E5 81            [12]  689 	mov	a,sp
      000399 24 FC            [12]  690 	add	a,#0xfc
      00039B F5 81            [12]  691 	mov	sp,a
      00039D E5*00            [12]  692 	mov	a,_bp
      00039F 24 09            [12]  693 	add	a,#0x09
      0003A1 F8               [12]  694 	mov	r0,a
      0003A2 E6               [12]  695 	mov	a,@r0
      0003A3 C0 E0            [24]  696 	push	acc
      0003A5 08               [12]  697 	inc	r0
      0003A6 E6               [12]  698 	mov	a,@r0
      0003A7 C0 E0            [24]  699 	push	acc
      0003A9 08               [12]  700 	inc	r0
      0003AA E6               [12]  701 	mov	a,@r0
      0003AB C0 E0            [24]  702 	push	acc
      0003AD 08               [12]  703 	inc	r0
      0003AE E6               [12]  704 	mov	a,@r0
      0003AF C0 E0            [24]  705 	push	acc
      0003B1 90 E6 EA         [24]  706 	mov	dptr,#0xE6EA
      0003B4 75 F0 42         [24]  707 	mov	b,#0x42
      0003B7 74 BE            [12]  708 	mov	a,#0xBE
      0003B9 12r00r00         [24]  709 	lcall	___fsmul
      0003BC AA 82            [24]  710 	mov	r2,dpl
      0003BE AB 83            [24]  711 	mov	r3,dph
      0003C0 AE F0            [24]  712 	mov	r6,b
      0003C2 FF               [12]  713 	mov	r7,a
      0003C3 E5 81            [12]  714 	mov	a,sp
      0003C5 24 FC            [12]  715 	add	a,#0xfc
      0003C7 F5 81            [12]  716 	mov	sp,a
      0003C9 74 F0            [12]  717 	mov	a,#0xF0
      0003CB C0 E0            [24]  718 	push	acc
      0003CD 74 69            [12]  719 	mov	a,#0x69
      0003CF C0 E0            [24]  720 	push	acc
      0003D1 74 E4            [12]  721 	mov	a,#0xE4
      0003D3 C0 E0            [24]  722 	push	acc
      0003D5 74 C0            [12]  723 	mov	a,#0xC0
      0003D7 C0 E0            [24]  724 	push	acc
      0003D9 8A 82            [24]  725 	mov	dpl,r2
      0003DB 8B 83            [24]  726 	mov	dph,r3
      0003DD 8E F0            [24]  727 	mov	b,r6
      0003DF EF               [12]  728 	mov	a,r7
      0003E0 12r00r00         [24]  729 	lcall	___fsadd
      0003E3 AC 82            [24]  730 	mov	r4,dpl
      0003E5 AD 83            [24]  731 	mov	r5,dph
      0003E7 AE F0            [24]  732 	mov	r6,b
      0003E9 FF               [12]  733 	mov	r7,a
      0003EA E5 81            [12]  734 	mov	a,sp
      0003EC 24 FC            [12]  735 	add	a,#0xfc
      0003EE F5 81            [12]  736 	mov	sp,a
      0003F0 C0 04            [24]  737 	push	ar4
      0003F2 C0 05            [24]  738 	push	ar5
      0003F4 C0 06            [24]  739 	push	ar6
      0003F6 C0 07            [24]  740 	push	ar7
      0003F8 A8*00            [24]  741 	mov	r0,_bp
      0003FA 08               [12]  742 	inc	r0
      0003FB 86 82            [24]  743 	mov	dpl,@r0
      0003FD 08               [12]  744 	inc	r0
      0003FE 86 83            [24]  745 	mov	dph,@r0
      000400 08               [12]  746 	inc	r0
      000401 86 F0            [24]  747 	mov	b,@r0
      000403 08               [12]  748 	inc	r0
      000404 E6               [12]  749 	mov	a,@r0
      000405 12r00r00         [24]  750 	lcall	___fsmul
      000408 A8*00            [24]  751 	mov	r0,_bp
      00040A 08               [12]  752 	inc	r0
      00040B A6 82            [24]  753 	mov	@r0,dpl
      00040D 08               [12]  754 	inc	r0
      00040E A6 83            [24]  755 	mov	@r0,dph
      000410 08               [12]  756 	inc	r0
      000411 A6 F0            [24]  757 	mov	@r0,b
      000413 08               [12]  758 	inc	r0
      000414 F6               [12]  759 	mov	@r0,a
      000415 E5 81            [12]  760 	mov	a,sp
      000417 24 FC            [12]  761 	add	a,#0xfc
      000419 F5 81            [12]  762 	mov	sp,a
      00041B 74 93            [12]  763 	mov	a,#0x93
      00041D C0 E0            [24]  764 	push	acc
      00041F 74 4F            [12]  765 	mov	a,#0x4F
      000421 C0 E0            [24]  766 	push	acc
      000423 74 2B            [12]  767 	mov	a,#0x2B
      000425 C0 E0            [24]  768 	push	acc
      000427 74 C2            [12]  769 	mov	a,#0xC2
      000429 C0 E0            [24]  770 	push	acc
      00042B E5*00            [12]  771 	mov	a,_bp
      00042D 24 09            [12]  772 	add	a,#0x09
      00042F F8               [12]  773 	mov	r0,a
      000430 86 82            [24]  774 	mov	dpl,@r0
      000432 08               [12]  775 	inc	r0
      000433 86 83            [24]  776 	mov	dph,@r0
      000435 08               [12]  777 	inc	r0
      000436 86 F0            [24]  778 	mov	b,@r0
      000438 08               [12]  779 	inc	r0
      000439 E6               [12]  780 	mov	a,@r0
      00043A 12r00r00         [24]  781 	lcall	___fsadd
      00043D AA 82            [24]  782 	mov	r2,dpl
      00043F AB 83            [24]  783 	mov	r3,dph
      000441 AE F0            [24]  784 	mov	r6,b
      000443 FF               [12]  785 	mov	r7,a
      000444 E5 81            [12]  786 	mov	a,sp
      000446 24 FC            [12]  787 	add	a,#0xfc
      000448 F5 81            [12]  788 	mov	sp,a
      00044A C0 02            [24]  789 	push	ar2
      00044C C0 03            [24]  790 	push	ar3
      00044E C0 06            [24]  791 	push	ar6
      000450 C0 07            [24]  792 	push	ar7
      000452 A8*00            [24]  793 	mov	r0,_bp
      000454 08               [12]  794 	inc	r0
      000455 86 82            [24]  795 	mov	dpl,@r0
      000457 08               [12]  796 	inc	r0
      000458 86 83            [24]  797 	mov	dph,@r0
      00045A 08               [12]  798 	inc	r0
      00045B 86 F0            [24]  799 	mov	b,@r0
      00045D 08               [12]  800 	inc	r0
      00045E E6               [12]  801 	mov	a,@r0
      00045F 12r00r00         [24]  802 	lcall	___fsdiv
      000462 AC 82            [24]  803 	mov	r4,dpl
      000464 AD 83            [24]  804 	mov	r5,dph
      000466 AE F0            [24]  805 	mov	r6,b
      000468 FF               [12]  806 	mov	r7,a
      000469 E5 81            [12]  807 	mov	a,sp
      00046B 24 FC            [12]  808 	add	a,#0xfc
      00046D F5 81            [12]  809 	mov	sp,a
      00046F C0 04            [24]  810 	push	ar4
      000471 C0 05            [24]  811 	push	ar5
      000473 C0 06            [24]  812 	push	ar6
      000475 C0 07            [24]  813 	push	ar7
      000477 E5*00            [12]  814 	mov	a,_bp
      000479 24 05            [12]  815 	add	a,#0x05
      00047B F8               [12]  816 	mov	r0,a
      00047C 86 82            [24]  817 	mov	dpl,@r0
      00047E 08               [12]  818 	inc	r0
      00047F 86 83            [24]  819 	mov	dph,@r0
      000481 08               [12]  820 	inc	r0
      000482 86 F0            [24]  821 	mov	b,@r0
      000484 08               [12]  822 	inc	r0
      000485 E6               [12]  823 	mov	a,@r0
      000486 12r00r00         [24]  824 	lcall	___fsadd
      000489 AC 82            [24]  825 	mov	r4,dpl
      00048B AD 83            [24]  826 	mov	r5,dph
      00048D AE F0            [24]  827 	mov	r6,b
      00048F FF               [12]  828 	mov	r7,a
      000490 E5 81            [12]  829 	mov	a,sp
      000492 24 FC            [12]  830 	add	a,#0xfc
      000494 F5 81            [12]  831 	mov	sp,a
      000496 E5*00            [12]  832 	mov	a,_bp
      000498 24 09            [12]  833 	add	a,#0x09
      00049A F8               [12]  834 	mov	r0,a
      00049B A6 04            [24]  835 	mov	@r0,ar4
      00049D 08               [12]  836 	inc	r0
      00049E A6 05            [24]  837 	mov	@r0,ar5
      0004A0 08               [12]  838 	inc	r0
      0004A1 A6 06            [24]  839 	mov	@r0,ar6
      0004A3 08               [12]  840 	inc	r0
      0004A4 A6 07            [24]  841 	mov	@r0,ar7
      0004A6                        842 00119$:
                                    843 ;	sincoshf.c:99: return z;
      0004A6 E5*00            [12]  844 	mov	a,_bp
      0004A8 24 09            [12]  845 	add	a,#0x09
      0004AA F8               [12]  846 	mov	r0,a
      0004AB 86 82            [24]  847 	mov	dpl,@r0
      0004AD 08               [12]  848 	inc	r0
      0004AE 86 83            [24]  849 	mov	dph,@r0
      0004B0 08               [12]  850 	inc	r0
      0004B1 86 F0            [24]  851 	mov	b,@r0
      0004B3 08               [12]  852 	inc	r0
      0004B4 E6               [12]  853 	mov	a,@r0
      0004B5 85*00 81         [24]  854 	mov	sp,_bp
      0004B8 D0*00            [24]  855 	pop	_bp
      0004BA 22               [24]  856 	ret
                                    857 	.area CSEG    (CODE)
                                    858 	.area CONST   (CODE)
                                    859 	.area XINIT   (CODE)
                                    860 	.area CABS    (ABS,CODE)
