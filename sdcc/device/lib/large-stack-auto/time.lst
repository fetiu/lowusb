                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:08 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl ___day
                                     13 	.globl ___month
                                     14 	.globl _RtcRead
                                     15 	.globl _sprintf
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; special function bits
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable register banks
                                     34 ;--------------------------------------------------------
                                     35 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         36 	.ds 8
                                     37 ;--------------------------------------------------------
                                     38 ; internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DSEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable items in internal ram 
                                     43 ;--------------------------------------------------------
                                     44 ;--------------------------------------------------------
                                     45 ; indirectly addressable internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area ISEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; absolute internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area IABS    (ABS,DATA)
                                     52 	.area IABS    (ABS,DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; bit data
                                     55 ;--------------------------------------------------------
                                     56 	.area BSEG    (BIT)
                                     57 ;--------------------------------------------------------
                                     58 ; paged external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area PSEG    (PAG,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XSEG    (XDATA)
      000000                         65 _ascTimeBuffer:
      000000                         66 	.ds 32
      000020                         67 _lastTime:
      000020                         68 	.ds 12
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; external initialized ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT0 (CODE)
                                     79 	.area GSINIT1 (CODE)
                                     80 	.area GSINIT2 (CODE)
                                     81 	.area GSINIT3 (CODE)
                                     82 	.area GSINIT4 (CODE)
                                     83 	.area GSINIT5 (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area CSEG    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'RtcRead'
                                    105 ;------------------------------------------------------------
                                    106 ;timeptr                   Allocated to registers 
                                    107 ;------------------------------------------------------------
                                    108 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                                    109 ;	-----------------------------------------
                                    110 ;	 function RtcRead
                                    111 ;	-----------------------------------------
      000000                        112 _RtcRead:
                           000007   113 	ar7 = 0x07
                           000006   114 	ar6 = 0x06
                           000005   115 	ar5 = 0x05
                           000004   116 	ar4 = 0x04
                           000003   117 	ar3 = 0x03
                           000002   118 	ar2 = 0x02
                           000001   119 	ar1 = 0x01
                           000000   120 	ar0 = 0x00
                                    121 ;	time.c:45: return 0;
      000000 75 82 00         [24]  122 	mov	dpl,#0x00
      000003 22               [24]  123 	ret
                                    124 ;------------------------------------------------------------
                                    125 ;Allocation info for local variables in function 'time'
                                    126 ;------------------------------------------------------------
                                    127 ;timeptr                   Allocated to stack - _bp +1
                                    128 ;now                       Allocated to stack - _bp +4
                                    129 ;t                         Allocated to stack - _bp +16
                                    130 ;------------------------------------------------------------
                                    131 ;	time.c:50: time_t time(time_t *timeptr) {
                                    132 ;	-----------------------------------------
                                    133 ;	 function time
                                    134 ;	-----------------------------------------
      000004                        135 _time:
      000004 C0*00            [24]  136 	push	_bp
      000006 85 81*00         [24]  137 	mov	_bp,sp
      000009 C0 82            [24]  138 	push	dpl
      00000B C0 83            [24]  139 	push	dph
      00000D C0 F0            [24]  140 	push	b
      00000F E5 81            [12]  141 	mov	a,sp
      000011 24 10            [12]  142 	add	a,#0x10
      000013 F5 81            [12]  143 	mov	sp,a
                                    144 ;	time.c:52: time_t t=-1;
      000015 E5*00            [12]  145 	mov	a,_bp
      000017 24 10            [12]  146 	add	a,#0x10
      000019 F8               [12]  147 	mov	r0,a
      00001A 74 FF            [12]  148 	mov	a,#0xFF
      00001C F6               [12]  149 	mov	@r0,a
      00001D 08               [12]  150 	inc	r0
      00001E F6               [12]  151 	mov	@r0,a
      00001F 08               [12]  152 	inc	r0
      000020 F6               [12]  153 	mov	@r0,a
      000021 08               [12]  154 	inc	r0
      000022 F6               [12]  155 	mov	@r0,a
                                    156 ;	time.c:54: if (RtcRead(&now)) {
      000023 E5*00            [12]  157 	mov	a,_bp
      000025 24 04            [12]  158 	add	a,#0x04
      000027 FE               [12]  159 	mov	r6,a
      000028 FC               [12]  160 	mov	r4,a
      000029 7D 00            [12]  161 	mov	r5,#0x00
      00002B 7F 40            [12]  162 	mov	r7,#0x40
      00002D 8C 82            [24]  163 	mov	dpl,r4
      00002F 8D 83            [24]  164 	mov	dph,r5
      000031 8F F0            [24]  165 	mov	b,r7
      000033 C0 06            [24]  166 	push	ar6
      000035 12r00r00         [24]  167 	lcall	_RtcRead
      000038 E5 82            [12]  168 	mov	a,dpl
      00003A D0 06            [24]  169 	pop	ar6
      00003C 60 24            [24]  170 	jz	00102$
                                    171 ;	time.c:55: t=mktime(&now);
      00003E 7F 00            [12]  172 	mov	r7,#0x00
      000040 7D 40            [12]  173 	mov	r5,#0x40
      000042 8E 82            [24]  174 	mov	dpl,r6
      000044 8F 83            [24]  175 	mov	dph,r7
      000046 8D F0            [24]  176 	mov	b,r5
      000048 12r06r2F         [24]  177 	lcall	_mktime
      00004B AC 82            [24]  178 	mov	r4,dpl
      00004D AD 83            [24]  179 	mov	r5,dph
      00004F AE F0            [24]  180 	mov	r6,b
      000051 FF               [12]  181 	mov	r7,a
      000052 E5*00            [12]  182 	mov	a,_bp
      000054 24 10            [12]  183 	add	a,#0x10
      000056 F8               [12]  184 	mov	r0,a
      000057 A6 04            [24]  185 	mov	@r0,ar4
      000059 08               [12]  186 	inc	r0
      00005A A6 05            [24]  187 	mov	@r0,ar5
      00005C 08               [12]  188 	inc	r0
      00005D A6 06            [24]  189 	mov	@r0,ar6
      00005F 08               [12]  190 	inc	r0
      000060 A6 07            [24]  191 	mov	@r0,ar7
      000062                        192 00102$:
                                    193 ;	time.c:57: if (timeptr) {
      000062 A8*00            [24]  194 	mov	r0,_bp
      000064 08               [12]  195 	inc	r0
      000065 E6               [12]  196 	mov	a,@r0
      000066 08               [12]  197 	inc	r0
      000067 46               [12]  198 	orl	a,@r0
      000068 60 26            [24]  199 	jz	00104$
                                    200 ;	time.c:58: *timeptr=t;
      00006A A8*00            [24]  201 	mov	r0,_bp
      00006C 08               [12]  202 	inc	r0
      00006D 86 82            [24]  203 	mov	dpl,@r0
      00006F 08               [12]  204 	inc	r0
      000070 86 83            [24]  205 	mov	dph,@r0
      000072 08               [12]  206 	inc	r0
      000073 86 F0            [24]  207 	mov	b,@r0
      000075 E5*00            [12]  208 	mov	a,_bp
      000077 24 10            [12]  209 	add	a,#0x10
      000079 F9               [12]  210 	mov	r1,a
      00007A E7               [12]  211 	mov	a,@r1
      00007B 12r00r00         [24]  212 	lcall	__gptrput
      00007E A3               [24]  213 	inc	dptr
      00007F 09               [12]  214 	inc	r1
      000080 E7               [12]  215 	mov	a,@r1
      000081 12r00r00         [24]  216 	lcall	__gptrput
      000084 A3               [24]  217 	inc	dptr
      000085 09               [12]  218 	inc	r1
      000086 E7               [12]  219 	mov	a,@r1
      000087 12r00r00         [24]  220 	lcall	__gptrput
      00008A A3               [24]  221 	inc	dptr
      00008B 09               [12]  222 	inc	r1
      00008C E7               [12]  223 	mov	a,@r1
      00008D 12r00r00         [24]  224 	lcall	__gptrput
      000090                        225 00104$:
                                    226 ;	time.c:60: return t;
      000090 E5*00            [12]  227 	mov	a,_bp
      000092 24 10            [12]  228 	add	a,#0x10
      000094 F8               [12]  229 	mov	r0,a
      000095 86 82            [24]  230 	mov	dpl,@r0
      000097 08               [12]  231 	inc	r0
      000098 86 83            [24]  232 	mov	dph,@r0
      00009A 08               [12]  233 	inc	r0
      00009B 86 F0            [24]  234 	mov	b,@r0
      00009D 08               [12]  235 	inc	r0
      00009E E6               [12]  236 	mov	a,@r0
      00009F 85*00 81         [24]  237 	mov	sp,_bp
      0000A2 D0*00            [24]  238 	pop	_bp
      0000A4 22               [24]  239 	ret
                                    240 ;------------------------------------------------------------
                                    241 ;Allocation info for local variables in function 'CheckTime'
                                    242 ;------------------------------------------------------------
                                    243 ;timeptr                   Allocated to registers r5 r6 r7 
                                    244 ;------------------------------------------------------------
                                    245 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                                    246 ;	-----------------------------------------
                                    247 ;	 function CheckTime
                                    248 ;	-----------------------------------------
      0000A5                        249 _CheckTime:
                                    250 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      0000A5 AD 82            [24]  251 	mov	r5,dpl
      0000A7 AE 83            [24]  252 	mov	r6,dph
      0000A9 AF F0            [24]  253 	mov	r7,b
      0000AB 12r00r00         [24]  254 	lcall	__gptrget
      0000AE FC               [12]  255 	mov  r4,a
      0000AF 24 C4            [12]  256 	add	a,#0xff - 0x3B
      0000B1 50 0B            [24]  257 	jnc	00102$
      0000B3 8D 82            [24]  258 	mov	dpl,r5
      0000B5 8E 83            [24]  259 	mov	dph,r6
      0000B7 8F F0            [24]  260 	mov	b,r7
      0000B9 74 3B            [12]  261 	mov	a,#0x3B
      0000BB 12r00r00         [24]  262 	lcall	__gptrput
      0000BE                        263 00102$:
                                    264 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      0000BE 74 01            [12]  265 	mov	a,#0x01
      0000C0 2D               [12]  266 	add	a,r5
      0000C1 FA               [12]  267 	mov	r2,a
      0000C2 E4               [12]  268 	clr	a
      0000C3 3E               [12]  269 	addc	a,r6
      0000C4 FB               [12]  270 	mov	r3,a
      0000C5 8F 04            [24]  271 	mov	ar4,r7
      0000C7 8A 82            [24]  272 	mov	dpl,r2
      0000C9 8B 83            [24]  273 	mov	dph,r3
      0000CB 8C F0            [24]  274 	mov	b,r4
      0000CD 12r00r00         [24]  275 	lcall	__gptrget
      0000D0 F9               [12]  276 	mov  r1,a
      0000D1 24 C4            [12]  277 	add	a,#0xff - 0x3B
      0000D3 50 0B            [24]  278 	jnc	00104$
      0000D5 8A 82            [24]  279 	mov	dpl,r2
      0000D7 8B 83            [24]  280 	mov	dph,r3
      0000D9 8C F0            [24]  281 	mov	b,r4
      0000DB 74 3B            [12]  282 	mov	a,#0x3B
      0000DD 12r00r00         [24]  283 	lcall	__gptrput
      0000E0                        284 00104$:
                                    285 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      0000E0 74 02            [12]  286 	mov	a,#0x02
      0000E2 2D               [12]  287 	add	a,r5
      0000E3 FA               [12]  288 	mov	r2,a
      0000E4 E4               [12]  289 	clr	a
      0000E5 3E               [12]  290 	addc	a,r6
      0000E6 FB               [12]  291 	mov	r3,a
      0000E7 8F 04            [24]  292 	mov	ar4,r7
      0000E9 8A 82            [24]  293 	mov	dpl,r2
      0000EB 8B 83            [24]  294 	mov	dph,r3
      0000ED 8C F0            [24]  295 	mov	b,r4
      0000EF 12r00r00         [24]  296 	lcall	__gptrget
      0000F2 F9               [12]  297 	mov  r1,a
      0000F3 24 E8            [12]  298 	add	a,#0xff - 0x17
      0000F5 50 0B            [24]  299 	jnc	00106$
      0000F7 8A 82            [24]  300 	mov	dpl,r2
      0000F9 8B 83            [24]  301 	mov	dph,r3
      0000FB 8C F0            [24]  302 	mov	b,r4
      0000FD 74 17            [12]  303 	mov	a,#0x17
      0000FF 12r00r00         [24]  304 	lcall	__gptrput
      000102                        305 00106$:
                                    306 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      000102 74 07            [12]  307 	mov	a,#0x07
      000104 2D               [12]  308 	add	a,r5
      000105 FA               [12]  309 	mov	r2,a
      000106 E4               [12]  310 	clr	a
      000107 3E               [12]  311 	addc	a,r6
      000108 FB               [12]  312 	mov	r3,a
      000109 8F 04            [24]  313 	mov	ar4,r7
      00010B 8A 82            [24]  314 	mov	dpl,r2
      00010D 8B 83            [24]  315 	mov	dph,r3
      00010F 8C F0            [24]  316 	mov	b,r4
      000111 12r00r00         [24]  317 	lcall	__gptrget
      000114 F9               [12]  318 	mov  r1,a
      000115 24 F9            [12]  319 	add	a,#0xff - 0x06
      000117 50 0B            [24]  320 	jnc	00108$
      000119 8A 82            [24]  321 	mov	dpl,r2
      00011B 8B 83            [24]  322 	mov	dph,r3
      00011D 8C F0            [24]  323 	mov	b,r4
      00011F 74 06            [12]  324 	mov	a,#0x06
      000121 12r00r00         [24]  325 	lcall	__gptrput
      000124                        326 00108$:
                                    327 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      000124 74 03            [12]  328 	mov	a,#0x03
      000126 2D               [12]  329 	add	a,r5
      000127 FA               [12]  330 	mov	r2,a
      000128 E4               [12]  331 	clr	a
      000129 3E               [12]  332 	addc	a,r6
      00012A FB               [12]  333 	mov	r3,a
      00012B 8F 04            [24]  334 	mov	ar4,r7
      00012D 8A 82            [24]  335 	mov	dpl,r2
      00012F 8B 83            [24]  336 	mov	dph,r3
      000131 8C F0            [24]  337 	mov	b,r4
      000133 12r00r00         [24]  338 	lcall	__gptrget
      000136 F9               [12]  339 	mov	r1,a
      000137 B9 01 00         [24]  340 	cjne	r1,#0x01,00148$
      00013A                        341 00148$:
      00013A 50 0D            [24]  342 	jnc	00112$
      00013C 8A 82            [24]  343 	mov	dpl,r2
      00013E 8B 83            [24]  344 	mov	dph,r3
      000140 8C F0            [24]  345 	mov	b,r4
      000142 74 01            [12]  346 	mov	a,#0x01
      000144 12r00r00         [24]  347 	lcall	__gptrput
      000147 80 10            [24]  348 	sjmp	00113$
      000149                        349 00112$:
                                    350 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000149 E9               [12]  351 	mov	a,r1
      00014A 24 E0            [12]  352 	add	a,#0xff - 0x1F
      00014C 50 0B            [24]  353 	jnc	00113$
      00014E 8A 82            [24]  354 	mov	dpl,r2
      000150 8B 83            [24]  355 	mov	dph,r3
      000152 8C F0            [24]  356 	mov	b,r4
      000154 74 1F            [12]  357 	mov	a,#0x1F
      000156 12r00r00         [24]  358 	lcall	__gptrput
      000159                        359 00113$:
                                    360 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000159 74 04            [12]  361 	mov	a,#0x04
      00015B 2D               [12]  362 	add	a,r5
      00015C FA               [12]  363 	mov	r2,a
      00015D E4               [12]  364 	clr	a
      00015E 3E               [12]  365 	addc	a,r6
      00015F FB               [12]  366 	mov	r3,a
      000160 8F 04            [24]  367 	mov	ar4,r7
      000162 8A 82            [24]  368 	mov	dpl,r2
      000164 8B 83            [24]  369 	mov	dph,r3
      000166 8C F0            [24]  370 	mov	b,r4
      000168 12r00r00         [24]  371 	lcall	__gptrget
      00016B F9               [12]  372 	mov  r1,a
      00016C 24 F4            [12]  373 	add	a,#0xff - 0x0B
      00016E 50 0B            [24]  374 	jnc	00115$
      000170 8A 82            [24]  375 	mov	dpl,r2
      000172 8B 83            [24]  376 	mov	dph,r3
      000174 8C F0            [24]  377 	mov	b,r4
      000176 74 0B            [12]  378 	mov	a,#0x0B
      000178 12r00r00         [24]  379 	lcall	__gptrput
      00017B                        380 00115$:
                                    381 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      00017B 74 05            [12]  382 	mov	a,#0x05
      00017D 2D               [12]  383 	add	a,r5
      00017E FD               [12]  384 	mov	r5,a
      00017F E4               [12]  385 	clr	a
      000180 3E               [12]  386 	addc	a,r6
      000181 FE               [12]  387 	mov	r6,a
      000182 8D 82            [24]  388 	mov	dpl,r5
      000184 8E 83            [24]  389 	mov	dph,r6
      000186 8F F0            [24]  390 	mov	b,r7
      000188 12r00r00         [24]  391 	lcall	__gptrget
      00018B FB               [12]  392 	mov	r3,a
      00018C A3               [24]  393 	inc	dptr
      00018D 12r00r00         [24]  394 	lcall	__gptrget
      000190 FC               [12]  395 	mov	r4,a
      000191 30 E7 0E         [24]  396 	jnb	acc.7,00118$
      000194 8D 82            [24]  397 	mov	dpl,r5
      000196 8E 83            [24]  398 	mov	dph,r6
      000198 8F F0            [24]  399 	mov	b,r7
      00019A E4               [12]  400 	clr	a
      00019B 12r00r00         [24]  401 	lcall	__gptrput
      00019E A3               [24]  402 	inc	dptr
      00019F 02r00r00         [24]  403 	ljmp	__gptrput
      0001A2                        404 00118$:
      0001A2 22               [24]  405 	ret
                                    406 ;------------------------------------------------------------
                                    407 ;Allocation info for local variables in function 'asctime'
                                    408 ;------------------------------------------------------------
                                    409 ;timeptr                   Allocated to stack - _bp +1
                                    410 ;sloc0                     Allocated to stack - _bp +4
                                    411 ;sloc1                     Allocated to stack - _bp +6
                                    412 ;sloc2                     Allocated to stack - _bp +9
                                    413 ;sloc3                     Allocated to stack - _bp +9
                                    414 ;sloc4                     Allocated to stack - _bp +11
                                    415 ;sloc5                     Allocated to stack - _bp +13
                                    416 ;------------------------------------------------------------
                                    417 ;	time.c:95: char *asctime(struct tm *timeptr) {
                                    418 ;	-----------------------------------------
                                    419 ;	 function asctime
                                    420 ;	-----------------------------------------
      0001A3                        421 _asctime:
      0001A3 C0*00            [24]  422 	push	_bp
      0001A5 85 81*00         [24]  423 	mov	_bp,sp
      0001A8 C0 82            [24]  424 	push	dpl
      0001AA C0 83            [24]  425 	push	dph
      0001AC C0 F0            [24]  426 	push	b
      0001AE E5 81            [12]  427 	mov	a,sp
      0001B0 24 0C            [12]  428 	add	a,#0x0C
      0001B2 F5 81            [12]  429 	mov	sp,a
                                    430 ;	time.c:96: CheckTime(timeptr);
      0001B4 A8*00            [24]  431 	mov	r0,_bp
      0001B6 08               [12]  432 	inc	r0
      0001B7 86 82            [24]  433 	mov	dpl,@r0
      0001B9 08               [12]  434 	inc	r0
      0001BA 86 83            [24]  435 	mov	dph,@r0
      0001BC 08               [12]  436 	inc	r0
      0001BD 86 F0            [24]  437 	mov	b,@r0
      0001BF 12r00rA5         [24]  438 	lcall	_CheckTime
                                    439 ;	time.c:100: timeptr->tm_year+1900);
      0001C2 A8*00            [24]  440 	mov	r0,_bp
      0001C4 08               [12]  441 	inc	r0
      0001C5 74 05            [12]  442 	mov	a,#0x05
      0001C7 26               [12]  443 	add	a,@r0
      0001C8 FA               [12]  444 	mov	r2,a
      0001C9 E4               [12]  445 	clr	a
      0001CA 08               [12]  446 	inc	r0
      0001CB 36               [12]  447 	addc	a,@r0
      0001CC FB               [12]  448 	mov	r3,a
      0001CD 08               [12]  449 	inc	r0
      0001CE 86 04            [24]  450 	mov	ar4,@r0
      0001D0 8A 82            [24]  451 	mov	dpl,r2
      0001D2 8B 83            [24]  452 	mov	dph,r3
      0001D4 8C F0            [24]  453 	mov	b,r4
      0001D6 12r00r00         [24]  454 	lcall	__gptrget
      0001D9 FA               [12]  455 	mov	r2,a
      0001DA A3               [24]  456 	inc	dptr
      0001DB 12r00r00         [24]  457 	lcall	__gptrget
      0001DE FB               [12]  458 	mov	r3,a
      0001DF 74 6C            [12]  459 	mov	a,#0x6C
      0001E1 2A               [12]  460 	add	a,r2
      0001E2 FF               [12]  461 	mov	r7,a
      0001E3 74 07            [12]  462 	mov	a,#0x07
      0001E5 3B               [12]  463 	addc	a,r3
      0001E6 FE               [12]  464 	mov	r6,a
                                    465 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0001E7 A8*00            [24]  466 	mov	r0,_bp
      0001E9 08               [12]  467 	inc	r0
      0001EA 86 82            [24]  468 	mov	dpl,@r0
      0001EC 08               [12]  469 	inc	r0
      0001ED 86 83            [24]  470 	mov	dph,@r0
      0001EF 08               [12]  471 	inc	r0
      0001F0 86 F0            [24]  472 	mov	b,@r0
      0001F2 12r00r00         [24]  473 	lcall	__gptrget
      0001F5 FC               [12]  474 	mov	r4,a
      0001F6 E5*00            [12]  475 	mov	a,_bp
      0001F8 24 04            [12]  476 	add	a,#0x04
      0001FA F8               [12]  477 	mov	r0,a
      0001FB A6 04            [24]  478 	mov	@r0,ar4
      0001FD 08               [12]  479 	inc	r0
      0001FE 76 00            [12]  480 	mov	@r0,#0x00
      000200 A8*00            [24]  481 	mov	r0,_bp
      000202 08               [12]  482 	inc	r0
      000203 74 01            [12]  483 	mov	a,#0x01
      000205 26               [12]  484 	add	a,@r0
      000206 FD               [12]  485 	mov	r5,a
      000207 E4               [12]  486 	clr	a
      000208 08               [12]  487 	inc	r0
      000209 36               [12]  488 	addc	a,@r0
      00020A FC               [12]  489 	mov	r4,a
      00020B 08               [12]  490 	inc	r0
      00020C 86 03            [24]  491 	mov	ar3,@r0
      00020E 8D 82            [24]  492 	mov	dpl,r5
      000210 8C 83            [24]  493 	mov	dph,r4
      000212 8B F0            [24]  494 	mov	b,r3
      000214 12r00r00         [24]  495 	lcall	__gptrget
      000217 FD               [12]  496 	mov	r5,a
      000218 E5*00            [12]  497 	mov	a,_bp
      00021A 24 06            [12]  498 	add	a,#0x06
      00021C F8               [12]  499 	mov	r0,a
      00021D A6 05            [24]  500 	mov	@r0,ar5
      00021F 08               [12]  501 	inc	r0
      000220 76 00            [12]  502 	mov	@r0,#0x00
      000222 A8*00            [24]  503 	mov	r0,_bp
      000224 08               [12]  504 	inc	r0
      000225 74 02            [12]  505 	mov	a,#0x02
      000227 26               [12]  506 	add	a,@r0
      000228 FB               [12]  507 	mov	r3,a
      000229 E4               [12]  508 	clr	a
      00022A 08               [12]  509 	inc	r0
      00022B 36               [12]  510 	addc	a,@r0
      00022C FC               [12]  511 	mov	r4,a
      00022D 08               [12]  512 	inc	r0
      00022E 86 05            [24]  513 	mov	ar5,@r0
      000230 8B 82            [24]  514 	mov	dpl,r3
      000232 8C 83            [24]  515 	mov	dph,r4
      000234 8D F0            [24]  516 	mov	b,r5
      000236 12r00r00         [24]  517 	lcall	__gptrget
      000239 FB               [12]  518 	mov	r3,a
      00023A E5*00            [12]  519 	mov	a,_bp
      00023C 24 09            [12]  520 	add	a,#0x09
      00023E F8               [12]  521 	mov	r0,a
      00023F A6 03            [24]  522 	mov	@r0,ar3
      000241 08               [12]  523 	inc	r0
      000242 76 00            [12]  524 	mov	@r0,#0x00
                                    525 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      000244 A8*00            [24]  526 	mov	r0,_bp
      000246 08               [12]  527 	inc	r0
      000247 74 03            [12]  528 	mov	a,#0x03
      000249 26               [12]  529 	add	a,@r0
      00024A FA               [12]  530 	mov	r2,a
      00024B E4               [12]  531 	clr	a
      00024C 08               [12]  532 	inc	r0
      00024D 36               [12]  533 	addc	a,@r0
      00024E FC               [12]  534 	mov	r4,a
      00024F 08               [12]  535 	inc	r0
      000250 86 05            [24]  536 	mov	ar5,@r0
      000252 8A 82            [24]  537 	mov	dpl,r2
      000254 8C 83            [24]  538 	mov	dph,r4
      000256 8D F0            [24]  539 	mov	b,r5
      000258 12r00r00         [24]  540 	lcall	__gptrget
      00025B FA               [12]  541 	mov	r2,a
      00025C E5*00            [12]  542 	mov	a,_bp
      00025E 24 0B            [12]  543 	add	a,#0x0b
      000260 F8               [12]  544 	mov	r0,a
      000261 A6 02            [24]  545 	mov	@r0,ar2
      000263 08               [12]  546 	inc	r0
      000264 76 00            [12]  547 	mov	@r0,#0x00
      000266 A8*00            [24]  548 	mov	r0,_bp
      000268 08               [12]  549 	inc	r0
      000269 74 04            [12]  550 	mov	a,#0x04
      00026B 26               [12]  551 	add	a,@r0
      00026C FB               [12]  552 	mov	r3,a
      00026D E4               [12]  553 	clr	a
      00026E 08               [12]  554 	inc	r0
      00026F 36               [12]  555 	addc	a,@r0
      000270 FC               [12]  556 	mov	r4,a
      000271 08               [12]  557 	inc	r0
      000272 86 05            [24]  558 	mov	ar5,@r0
      000274 8B 82            [24]  559 	mov	dpl,r3
      000276 8C 83            [24]  560 	mov	dph,r4
      000278 8D F0            [24]  561 	mov	b,r5
      00027A 12r00r00         [24]  562 	lcall	__gptrget
      00027D 75 F0 02         [24]  563 	mov	b,#0x02
      000280 A4               [48]  564 	mul	ab
      000281 24r0C            [12]  565 	add	a,#___month
      000283 F5 82            [12]  566 	mov	dpl,a
      000285 74s00            [12]  567 	mov	a,#(___month >> 8)
      000287 35 F0            [12]  568 	addc	a,b
      000289 F5 83            [12]  569 	mov	dph,a
      00028B E4               [12]  570 	clr	a
      00028C 93               [24]  571 	movc	a,@a+dptr
      00028D FC               [12]  572 	mov	r4,a
      00028E A3               [24]  573 	inc	dptr
      00028F E4               [12]  574 	clr	a
      000290 93               [24]  575 	movc	a,@a+dptr
      000291 FD               [12]  576 	mov	r5,a
      000292 E5*00            [12]  577 	mov	a,_bp
      000294 24 0D            [12]  578 	add	a,#0x0d
      000296 F8               [12]  579 	mov	r0,a
      000297 A6 04            [24]  580 	mov	@r0,ar4
      000299 08               [12]  581 	inc	r0
      00029A A6 05            [24]  582 	mov	@r0,ar5
      00029C 08               [12]  583 	inc	r0
      00029D 76 80            [12]  584 	mov	@r0,#0x80
      00029F A8*00            [24]  585 	mov	r0,_bp
      0002A1 08               [12]  586 	inc	r0
      0002A2 74 07            [12]  587 	mov	a,#0x07
      0002A4 26               [12]  588 	add	a,@r0
      0002A5 FA               [12]  589 	mov	r2,a
      0002A6 E4               [12]  590 	clr	a
      0002A7 08               [12]  591 	inc	r0
      0002A8 36               [12]  592 	addc	a,@r0
      0002A9 FC               [12]  593 	mov	r4,a
      0002AA 08               [12]  594 	inc	r0
      0002AB 86 05            [24]  595 	mov	ar5,@r0
      0002AD 8A 82            [24]  596 	mov	dpl,r2
      0002AF 8C 83            [24]  597 	mov	dph,r4
      0002B1 8D F0            [24]  598 	mov	b,r5
      0002B3 12r00r00         [24]  599 	lcall	__gptrget
      0002B6 75 F0 02         [24]  600 	mov	b,#0x02
      0002B9 A4               [48]  601 	mul	ab
      0002BA 24r24            [12]  602 	add	a,#___day
      0002BC F5 82            [12]  603 	mov	dpl,a
      0002BE 74s00            [12]  604 	mov	a,#(___day >> 8)
      0002C0 35 F0            [12]  605 	addc	a,b
      0002C2 F5 83            [12]  606 	mov	dph,a
      0002C4 E4               [12]  607 	clr	a
      0002C5 93               [24]  608 	movc	a,@a+dptr
      0002C6 FC               [12]  609 	mov	r4,a
      0002C7 A3               [24]  610 	inc	dptr
      0002C8 E4               [12]  611 	clr	a
      0002C9 93               [24]  612 	movc	a,@a+dptr
      0002CA FD               [12]  613 	mov	r5,a
      0002CB 7B 80            [12]  614 	mov	r3,#0x80
                                    615 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      0002CD C0 07            [24]  616 	push	ar7
      0002CF C0 06            [24]  617 	push	ar6
      0002D1 E5*00            [12]  618 	mov	a,_bp
      0002D3 24 04            [12]  619 	add	a,#0x04
      0002D5 F8               [12]  620 	mov	r0,a
      0002D6 E6               [12]  621 	mov	a,@r0
      0002D7 C0 E0            [24]  622 	push	acc
      0002D9 08               [12]  623 	inc	r0
      0002DA E6               [12]  624 	mov	a,@r0
      0002DB C0 E0            [24]  625 	push	acc
      0002DD E5*00            [12]  626 	mov	a,_bp
      0002DF 24 06            [12]  627 	add	a,#0x06
      0002E1 F8               [12]  628 	mov	r0,a
      0002E2 E6               [12]  629 	mov	a,@r0
      0002E3 C0 E0            [24]  630 	push	acc
      0002E5 08               [12]  631 	inc	r0
      0002E6 E6               [12]  632 	mov	a,@r0
      0002E7 C0 E0            [24]  633 	push	acc
      0002E9 E5*00            [12]  634 	mov	a,_bp
      0002EB 24 09            [12]  635 	add	a,#0x09
      0002ED F8               [12]  636 	mov	r0,a
      0002EE E6               [12]  637 	mov	a,@r0
      0002EF C0 E0            [24]  638 	push	acc
      0002F1 08               [12]  639 	inc	r0
      0002F2 E6               [12]  640 	mov	a,@r0
      0002F3 C0 E0            [24]  641 	push	acc
      0002F5 E5*00            [12]  642 	mov	a,_bp
      0002F7 24 0B            [12]  643 	add	a,#0x0b
      0002F9 F8               [12]  644 	mov	r0,a
      0002FA E6               [12]  645 	mov	a,@r0
      0002FB C0 E0            [24]  646 	push	acc
      0002FD 08               [12]  647 	inc	r0
      0002FE E6               [12]  648 	mov	a,@r0
      0002FF C0 E0            [24]  649 	push	acc
      000301 E5*00            [12]  650 	mov	a,_bp
      000303 24 0D            [12]  651 	add	a,#0x0d
      000305 F8               [12]  652 	mov	r0,a
      000306 E6               [12]  653 	mov	a,@r0
      000307 C0 E0            [24]  654 	push	acc
      000309 08               [12]  655 	inc	r0
      00030A E6               [12]  656 	mov	a,@r0
      00030B C0 E0            [24]  657 	push	acc
      00030D 08               [12]  658 	inc	r0
      00030E E6               [12]  659 	mov	a,@r0
      00030F C0 E0            [24]  660 	push	acc
      000311 C0 04            [24]  661 	push	ar4
      000313 C0 05            [24]  662 	push	ar5
      000315 C0 03            [24]  663 	push	ar3
      000317 74r32            [12]  664 	mov	a,#___str_0
      000319 C0 E0            [24]  665 	push	acc
      00031B 74s00            [12]  666 	mov	a,#(___str_0 >> 8)
      00031D C0 E0            [24]  667 	push	acc
      00031F EB               [12]  668 	mov	a,r3
      000320 C0 E0            [24]  669 	push	acc
      000322 74r00            [12]  670 	mov	a,#_ascTimeBuffer
      000324 C0 E0            [24]  671 	push	acc
      000326 74s00            [12]  672 	mov	a,#(_ascTimeBuffer >> 8)
      000328 C0 E0            [24]  673 	push	acc
      00032A E4               [12]  674 	clr	a
      00032B C0 E0            [24]  675 	push	acc
      00032D 12r00r00         [24]  676 	lcall	_sprintf
      000330 E5 81            [12]  677 	mov	a,sp
      000332 24 EA            [12]  678 	add	a,#0xea
      000334 F5 81            [12]  679 	mov	sp,a
                                    680 ;	time.c:101: return ascTimeBuffer;
      000336 90r00r00         [24]  681 	mov	dptr,#_ascTimeBuffer
      000339 75 F0 00         [24]  682 	mov	b,#0x00
      00033C 85*00 81         [24]  683 	mov	sp,_bp
      00033F D0*00            [24]  684 	pop	_bp
      000341 22               [24]  685 	ret
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'ctime'
                                    688 ;------------------------------------------------------------
                                    689 ;timep                     Allocated to registers r5 r6 r7 
                                    690 ;------------------------------------------------------------
                                    691 ;	time.c:104: char *ctime(time_t *timep) {
                                    692 ;	-----------------------------------------
                                    693 ;	 function ctime
                                    694 ;	-----------------------------------------
      000342                        695 _ctime:
                                    696 ;	time.c:105: return asctime(localtime(timep));
      000342 12r03r48         [24]  697 	lcall	_localtime
      000345 02r01rA3         [24]  698 	ljmp	_asctime
                                    699 ;------------------------------------------------------------
                                    700 ;Allocation info for local variables in function 'localtime'
                                    701 ;------------------------------------------------------------
                                    702 ;timep                     Allocated to registers r5 r6 r7 
                                    703 ;------------------------------------------------------------
                                    704 ;	time.c:121: struct tm *localtime(time_t *timep) {
                                    705 ;	-----------------------------------------
                                    706 ;	 function localtime
                                    707 ;	-----------------------------------------
      000348                        708 _localtime:
                                    709 ;	time.c:122: return gmtime(timep);
      000348 02r03r4B         [24]  710 	ljmp	_gmtime
                                    711 ;------------------------------------------------------------
                                    712 ;Allocation info for local variables in function 'gmtime'
                                    713 ;------------------------------------------------------------
                                    714 ;timep                     Allocated to registers r5 r6 r7 
                                    715 ;epoch                     Allocated to stack - _bp +5
                                    716 ;year                      Allocated to registers r2 r3 
                                    717 ;month                     Allocated to registers r5 
                                    718 ;monthLength               Allocated to registers r4 
                                    719 ;days                      Allocated to stack - _bp +9
                                    720 ;sloc0                     Allocated to stack - _bp +1
                                    721 ;------------------------------------------------------------
                                    722 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                                    723 ;	-----------------------------------------
                                    724 ;	 function gmtime
                                    725 ;	-----------------------------------------
      00034B                        726 _gmtime:
      00034B C0*00            [24]  727 	push	_bp
      00034D E5 81            [12]  728 	mov	a,sp
      00034F F5*00            [12]  729 	mov	_bp,a
      000351 24 0C            [12]  730 	add	a,#0x0C
      000353 F5 81            [12]  731 	mov	sp,a
                                    732 ;	time.c:126: unsigned long epoch=*timep;
      000355 E5*00            [12]  733 	mov	a,_bp
      000357 24 05            [12]  734 	add	a,#0x05
      000359 F8               [12]  735 	mov	r0,a
      00035A 12r00r00         [24]  736 	lcall	__gptrget
      00035D F6               [12]  737 	mov	@r0,a
      00035E A3               [24]  738 	inc	dptr
      00035F 12r00r00         [24]  739 	lcall	__gptrget
      000362 08               [12]  740 	inc	r0
      000363 F6               [12]  741 	mov	@r0,a
      000364 A3               [24]  742 	inc	dptr
      000365 12r00r00         [24]  743 	lcall	__gptrget
      000368 08               [12]  744 	inc	r0
      000369 F6               [12]  745 	mov	@r0,a
      00036A A3               [24]  746 	inc	dptr
      00036B 12r00r00         [24]  747 	lcall	__gptrget
      00036E 08               [12]  748 	inc	r0
      00036F F6               [12]  749 	mov	@r0,a
                                    750 ;	time.c:131: lastTime.tm_sec=epoch%60;
      000370 74 3C            [12]  751 	mov	a,#0x3C
      000372 C0 E0            [24]  752 	push	acc
      000374 E4               [12]  753 	clr	a
      000375 C0 E0            [24]  754 	push	acc
      000377 C0 E0            [24]  755 	push	acc
      000379 C0 E0            [24]  756 	push	acc
      00037B E5*00            [12]  757 	mov	a,_bp
      00037D 24 05            [12]  758 	add	a,#0x05
      00037F F8               [12]  759 	mov	r0,a
      000380 86 82            [24]  760 	mov	dpl,@r0
      000382 08               [12]  761 	inc	r0
      000383 86 83            [24]  762 	mov	dph,@r0
      000385 08               [12]  763 	inc	r0
      000386 86 F0            [24]  764 	mov	b,@r0
      000388 08               [12]  765 	inc	r0
      000389 E6               [12]  766 	mov	a,@r0
      00038A 12r00r00         [24]  767 	lcall	__modulong
      00038D AA 82            [24]  768 	mov	r2,dpl
      00038F E5 81            [12]  769 	mov	a,sp
      000391 24 FC            [12]  770 	add	a,#0xfc
      000393 F5 81            [12]  771 	mov	sp,a
      000395 90r00r20         [24]  772 	mov	dptr,#_lastTime
      000398 EA               [12]  773 	mov	a,r2
      000399 F0               [24]  774 	movx	@dptr,a
                                    775 ;	time.c:132: epoch/=60; // now it is minutes
      00039A 74 3C            [12]  776 	mov	a,#0x3C
      00039C C0 E0            [24]  777 	push	acc
      00039E E4               [12]  778 	clr	a
      00039F C0 E0            [24]  779 	push	acc
      0003A1 C0 E0            [24]  780 	push	acc
      0003A3 C0 E0            [24]  781 	push	acc
      0003A5 E5*00            [12]  782 	mov	a,_bp
      0003A7 24 05            [12]  783 	add	a,#0x05
      0003A9 F8               [12]  784 	mov	r0,a
      0003AA 86 82            [24]  785 	mov	dpl,@r0
      0003AC 08               [12]  786 	inc	r0
      0003AD 86 83            [24]  787 	mov	dph,@r0
      0003AF 08               [12]  788 	inc	r0
      0003B0 86 F0            [24]  789 	mov	b,@r0
      0003B2 08               [12]  790 	inc	r0
      0003B3 E6               [12]  791 	mov	a,@r0
      0003B4 12r00r00         [24]  792 	lcall	__divulong
      0003B7 AC 82            [24]  793 	mov	r4,dpl
      0003B9 AD 83            [24]  794 	mov	r5,dph
      0003BB AE F0            [24]  795 	mov	r6,b
      0003BD FF               [12]  796 	mov	r7,a
      0003BE E5 81            [12]  797 	mov	a,sp
      0003C0 24 FC            [12]  798 	add	a,#0xfc
      0003C2 F5 81            [12]  799 	mov	sp,a
      0003C4 E5*00            [12]  800 	mov	a,_bp
      0003C6 24 05            [12]  801 	add	a,#0x05
      0003C8 F8               [12]  802 	mov	r0,a
      0003C9 A6 04            [24]  803 	mov	@r0,ar4
      0003CB 08               [12]  804 	inc	r0
      0003CC A6 05            [24]  805 	mov	@r0,ar5
      0003CE 08               [12]  806 	inc	r0
      0003CF A6 06            [24]  807 	mov	@r0,ar6
      0003D1 08               [12]  808 	inc	r0
      0003D2 A6 07            [24]  809 	mov	@r0,ar7
                                    810 ;	time.c:133: lastTime.tm_min=epoch%60;
      0003D4 74 3C            [12]  811 	mov	a,#0x3C
      0003D6 C0 E0            [24]  812 	push	acc
      0003D8 E4               [12]  813 	clr	a
      0003D9 C0 E0            [24]  814 	push	acc
      0003DB C0 E0            [24]  815 	push	acc
      0003DD C0 E0            [24]  816 	push	acc
      0003DF E5*00            [12]  817 	mov	a,_bp
      0003E1 24 05            [12]  818 	add	a,#0x05
      0003E3 F8               [12]  819 	mov	r0,a
      0003E4 86 82            [24]  820 	mov	dpl,@r0
      0003E6 08               [12]  821 	inc	r0
      0003E7 86 83            [24]  822 	mov	dph,@r0
      0003E9 08               [12]  823 	inc	r0
      0003EA 86 F0            [24]  824 	mov	b,@r0
      0003EC 08               [12]  825 	inc	r0
      0003ED E6               [12]  826 	mov	a,@r0
      0003EE 12r00r00         [24]  827 	lcall	__modulong
      0003F1 AC 82            [24]  828 	mov	r4,dpl
      0003F3 E5 81            [12]  829 	mov	a,sp
      0003F5 24 FC            [12]  830 	add	a,#0xfc
      0003F7 F5 81            [12]  831 	mov	sp,a
      0003F9 90r00r21         [24]  832 	mov	dptr,#(_lastTime + 0x0001)
      0003FC EC               [12]  833 	mov	a,r4
      0003FD F0               [24]  834 	movx	@dptr,a
                                    835 ;	time.c:134: epoch/=60; // now it is hours
      0003FE 74 3C            [12]  836 	mov	a,#0x3C
      000400 C0 E0            [24]  837 	push	acc
      000402 E4               [12]  838 	clr	a
      000403 C0 E0            [24]  839 	push	acc
      000405 C0 E0            [24]  840 	push	acc
      000407 C0 E0            [24]  841 	push	acc
      000409 E5*00            [12]  842 	mov	a,_bp
      00040B 24 05            [12]  843 	add	a,#0x05
      00040D F8               [12]  844 	mov	r0,a
      00040E 86 82            [24]  845 	mov	dpl,@r0
      000410 08               [12]  846 	inc	r0
      000411 86 83            [24]  847 	mov	dph,@r0
      000413 08               [12]  848 	inc	r0
      000414 86 F0            [24]  849 	mov	b,@r0
      000416 08               [12]  850 	inc	r0
      000417 E6               [12]  851 	mov	a,@r0
      000418 12r00r00         [24]  852 	lcall	__divulong
      00041B AC 82            [24]  853 	mov	r4,dpl
      00041D AD 83            [24]  854 	mov	r5,dph
      00041F AE F0            [24]  855 	mov	r6,b
      000421 FF               [12]  856 	mov	r7,a
      000422 E5 81            [12]  857 	mov	a,sp
      000424 24 FC            [12]  858 	add	a,#0xfc
      000426 F5 81            [12]  859 	mov	sp,a
      000428 E5*00            [12]  860 	mov	a,_bp
      00042A 24 05            [12]  861 	add	a,#0x05
      00042C F8               [12]  862 	mov	r0,a
      00042D A6 04            [24]  863 	mov	@r0,ar4
      00042F 08               [12]  864 	inc	r0
      000430 A6 05            [24]  865 	mov	@r0,ar5
      000432 08               [12]  866 	inc	r0
      000433 A6 06            [24]  867 	mov	@r0,ar6
      000435 08               [12]  868 	inc	r0
      000436 A6 07            [24]  869 	mov	@r0,ar7
                                    870 ;	time.c:135: lastTime.tm_hour=epoch%24;
      000438 74 18            [12]  871 	mov	a,#0x18
      00043A C0 E0            [24]  872 	push	acc
      00043C E4               [12]  873 	clr	a
      00043D C0 E0            [24]  874 	push	acc
      00043F C0 E0            [24]  875 	push	acc
      000441 C0 E0            [24]  876 	push	acc
      000443 E5*00            [12]  877 	mov	a,_bp
      000445 24 05            [12]  878 	add	a,#0x05
      000447 F8               [12]  879 	mov	r0,a
      000448 86 82            [24]  880 	mov	dpl,@r0
      00044A 08               [12]  881 	inc	r0
      00044B 86 83            [24]  882 	mov	dph,@r0
      00044D 08               [12]  883 	inc	r0
      00044E 86 F0            [24]  884 	mov	b,@r0
      000450 08               [12]  885 	inc	r0
      000451 E6               [12]  886 	mov	a,@r0
      000452 12r00r00         [24]  887 	lcall	__modulong
      000455 AC 82            [24]  888 	mov	r4,dpl
      000457 E5 81            [12]  889 	mov	a,sp
      000459 24 FC            [12]  890 	add	a,#0xfc
      00045B F5 81            [12]  891 	mov	sp,a
      00045D 90r00r22         [24]  892 	mov	dptr,#(_lastTime + 0x0002)
      000460 EC               [12]  893 	mov	a,r4
      000461 F0               [24]  894 	movx	@dptr,a
                                    895 ;	time.c:136: epoch/=24; // now it is days
      000462 74 18            [12]  896 	mov	a,#0x18
      000464 C0 E0            [24]  897 	push	acc
      000466 E4               [12]  898 	clr	a
      000467 C0 E0            [24]  899 	push	acc
      000469 C0 E0            [24]  900 	push	acc
      00046B C0 E0            [24]  901 	push	acc
      00046D E5*00            [12]  902 	mov	a,_bp
      00046F 24 05            [12]  903 	add	a,#0x05
      000471 F8               [12]  904 	mov	r0,a
      000472 86 82            [24]  905 	mov	dpl,@r0
      000474 08               [12]  906 	inc	r0
      000475 86 83            [24]  907 	mov	dph,@r0
      000477 08               [12]  908 	inc	r0
      000478 86 F0            [24]  909 	mov	b,@r0
      00047A 08               [12]  910 	inc	r0
      00047B E6               [12]  911 	mov	a,@r0
      00047C 12r00r00         [24]  912 	lcall	__divulong
      00047F AC 82            [24]  913 	mov	r4,dpl
      000481 AD 83            [24]  914 	mov	r5,dph
      000483 AE F0            [24]  915 	mov	r6,b
      000485 FF               [12]  916 	mov	r7,a
      000486 E5 81            [12]  917 	mov	a,sp
      000488 24 FC            [12]  918 	add	a,#0xfc
      00048A F5 81            [12]  919 	mov	sp,a
      00048C E5*00            [12]  920 	mov	a,_bp
      00048E 24 05            [12]  921 	add	a,#0x05
      000490 F8               [12]  922 	mov	r0,a
      000491 A6 04            [24]  923 	mov	@r0,ar4
      000493 08               [12]  924 	inc	r0
      000494 A6 05            [24]  925 	mov	@r0,ar5
      000496 08               [12]  926 	inc	r0
      000497 A6 06            [24]  927 	mov	@r0,ar6
      000499 08               [12]  928 	inc	r0
      00049A A6 07            [24]  929 	mov	@r0,ar7
                                    930 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
      00049C E5*00            [12]  931 	mov	a,_bp
      00049E 24 05            [12]  932 	add	a,#0x05
      0004A0 F8               [12]  933 	mov	r0,a
      0004A1 74 04            [12]  934 	mov	a,#0x04
      0004A3 26               [12]  935 	add	a,@r0
      0004A4 FC               [12]  936 	mov	r4,a
      0004A5 E4               [12]  937 	clr	a
      0004A6 08               [12]  938 	inc	r0
      0004A7 36               [12]  939 	addc	a,@r0
      0004A8 FD               [12]  940 	mov	r5,a
      0004A9 E4               [12]  941 	clr	a
      0004AA 08               [12]  942 	inc	r0
      0004AB 36               [12]  943 	addc	a,@r0
      0004AC FE               [12]  944 	mov	r6,a
      0004AD E4               [12]  945 	clr	a
      0004AE 08               [12]  946 	inc	r0
      0004AF 36               [12]  947 	addc	a,@r0
      0004B0 FF               [12]  948 	mov	r7,a
      0004B1 74 07            [12]  949 	mov	a,#0x07
      0004B3 C0 E0            [24]  950 	push	acc
      0004B5 E4               [12]  951 	clr	a
      0004B6 C0 E0            [24]  952 	push	acc
      0004B8 C0 E0            [24]  953 	push	acc
      0004BA C0 E0            [24]  954 	push	acc
      0004BC 8C 82            [24]  955 	mov	dpl,r4
      0004BE 8D 83            [24]  956 	mov	dph,r5
      0004C0 8E F0            [24]  957 	mov	b,r6
      0004C2 EF               [12]  958 	mov	a,r7
      0004C3 12r00r00         [24]  959 	lcall	__modulong
      0004C6 AC 82            [24]  960 	mov	r4,dpl
      0004C8 AD 83            [24]  961 	mov	r5,dph
      0004CA AE F0            [24]  962 	mov	r6,b
      0004CC FF               [12]  963 	mov	r7,a
      0004CD E5 81            [12]  964 	mov	a,sp
      0004CF 24 FC            [12]  965 	add	a,#0xfc
      0004D1 F5 81            [12]  966 	mov	sp,a
      0004D3 90r00r27         [24]  967 	mov	dptr,#(_lastTime + 0x0007)
      0004D6 EC               [12]  968 	mov	a,r4
      0004D7 F0               [24]  969 	movx	@dptr,a
                                    970 ;	time.c:140: days=0;
      0004D8 E5*00            [12]  971 	mov	a,_bp
      0004DA 24 09            [12]  972 	add	a,#0x09
      0004DC F8               [12]  973 	mov	r0,a
      0004DD E4               [12]  974 	clr	a
      0004DE F6               [12]  975 	mov	@r0,a
      0004DF 08               [12]  976 	inc	r0
      0004E0 F6               [12]  977 	mov	@r0,a
      0004E1 08               [12]  978 	inc	r0
      0004E2 F6               [12]  979 	mov	@r0,a
      0004E3 08               [12]  980 	inc	r0
      0004E4 F6               [12]  981 	mov	@r0,a
                                    982 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      0004E5 7A B2            [12]  983 	mov	r2,#0xB2
      0004E7 7B 07            [12]  984 	mov	r3,#0x07
      0004E9                        985 00101$:
      0004E9 74 03            [12]  986 	mov	a,#0x03
      0004EB 5A               [12]  987 	anl	a,r2
      0004EC FE               [12]  988 	mov	r6,a
      0004ED 7F 00            [12]  989 	mov	r7,#0x00
      0004EF 4F               [12]  990 	orl	a,r7
      0004F0 70 06            [24]  991 	jnz	00118$
      0004F2 7E 6E            [12]  992 	mov	r6,#0x6E
      0004F4 7F 01            [12]  993 	mov	r7,#0x01
      0004F6 80 04            [24]  994 	sjmp	00119$
      0004F8                        995 00118$:
      0004F8 7E 6D            [12]  996 	mov	r6,#0x6D
      0004FA 7F 01            [12]  997 	mov	r7,#0x01
      0004FC                        998 00119$:
      0004FC EF               [12]  999 	mov	a,r7
      0004FD 33               [12] 1000 	rlc	a
      0004FE 95 E0            [12] 1001 	subb	a,acc
      000500 FD               [12] 1002 	mov	r5,a
      000501 FC               [12] 1003 	mov	r4,a
      000502 E5*00            [12] 1004 	mov	a,_bp
      000504 24 09            [12] 1005 	add	a,#0x09
      000506 F8               [12] 1006 	mov	r0,a
      000507 EE               [12] 1007 	mov	a,r6
      000508 26               [12] 1008 	add	a,@r0
      000509 FE               [12] 1009 	mov	r6,a
      00050A EF               [12] 1010 	mov	a,r7
      00050B 08               [12] 1011 	inc	r0
      00050C 36               [12] 1012 	addc	a,@r0
      00050D FF               [12] 1013 	mov	r7,a
      00050E ED               [12] 1014 	mov	a,r5
      00050F 08               [12] 1015 	inc	r0
      000510 36               [12] 1016 	addc	a,@r0
      000511 FD               [12] 1017 	mov	r5,a
      000512 EC               [12] 1018 	mov	a,r4
      000513 08               [12] 1019 	inc	r0
      000514 36               [12] 1020 	addc	a,@r0
      000515 FC               [12] 1021 	mov	r4,a
      000516 E5*00            [12] 1022 	mov	a,_bp
      000518 24 09            [12] 1023 	add	a,#0x09
      00051A F8               [12] 1024 	mov	r0,a
      00051B A6 06            [24] 1025 	mov	@r0,ar6
      00051D 08               [12] 1026 	inc	r0
      00051E A6 07            [24] 1027 	mov	@r0,ar7
      000520 08               [12] 1028 	inc	r0
      000521 A6 05            [24] 1029 	mov	@r0,ar5
      000523 08               [12] 1030 	inc	r0
      000524 A6 04            [24] 1031 	mov	@r0,ar4
      000526 E5*00            [12] 1032 	mov	a,_bp
      000528 24 05            [12] 1033 	add	a,#0x05
      00052A F8               [12] 1034 	mov	r0,a
      00052B C3               [12] 1035 	clr	c
      00052C E6               [12] 1036 	mov	a,@r0
      00052D 9E               [12] 1037 	subb	a,r6
      00052E 08               [12] 1038 	inc	r0
      00052F E6               [12] 1039 	mov	a,@r0
      000530 9F               [12] 1040 	subb	a,r7
      000531 08               [12] 1041 	inc	r0
      000532 E6               [12] 1042 	mov	a,@r0
      000533 9D               [12] 1043 	subb	a,r5
      000534 08               [12] 1044 	inc	r0
      000535 E6               [12] 1045 	mov	a,@r0
      000536 9C               [12] 1046 	subb	a,r4
      000537 40 07            [24] 1047 	jc	00103$
                                   1048 ;	time.c:142: year++;
      000539 0A               [12] 1049 	inc	r2
      00053A BA 00 AC         [24] 1050 	cjne	r2,#0x00,00101$
      00053D 0B               [12] 1051 	inc	r3
      00053E 80 A9            [24] 1052 	sjmp	00101$
      000540                       1053 00103$:
                                   1054 ;	time.c:144: lastTime.tm_year=year-1900;
      000540 EA               [12] 1055 	mov	a,r2
      000541 24 94            [12] 1056 	add	a,#0x94
      000543 FE               [12] 1057 	mov	r6,a
      000544 EB               [12] 1058 	mov	a,r3
      000545 34 F8            [12] 1059 	addc	a,#0xF8
      000547 FF               [12] 1060 	mov	r7,a
      000548 90r00r25         [24] 1061 	mov	dptr,#(_lastTime + 0x0005)
      00054B EE               [12] 1062 	mov	a,r6
      00054C F0               [24] 1063 	movx	@dptr,a
      00054D EF               [12] 1064 	mov	a,r7
      00054E A3               [24] 1065 	inc	dptr
      00054F F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
      000550 74 03            [12] 1068 	mov	a,#0x03
      000552 5A               [12] 1069 	anl	a,r2
      000553 FE               [12] 1070 	mov	r6,a
      000554 7F 00            [12] 1071 	mov	r7,#0x00
      000556 4F               [12] 1072 	orl	a,r7
      000557 70 06            [24] 1073 	jnz	00120$
      000559 7C 6E            [12] 1074 	mov	r4,#0x6E
      00055B 7D 01            [12] 1075 	mov	r5,#0x01
      00055D 80 04            [24] 1076 	sjmp	00121$
      00055F                       1077 00120$:
      00055F 7C 6D            [12] 1078 	mov	r4,#0x6D
      000561 7D 01            [12] 1079 	mov	r5,#0x01
      000563                       1080 00121$:
      000563 ED               [12] 1081 	mov	a,r5
      000564 33               [12] 1082 	rlc	a
      000565 95 E0            [12] 1083 	subb	a,acc
      000567 FB               [12] 1084 	mov	r3,a
      000568 FA               [12] 1085 	mov	r2,a
      000569 E5*00            [12] 1086 	mov	a,_bp
      00056B 24 09            [12] 1087 	add	a,#0x09
      00056D F8               [12] 1088 	mov	r0,a
      00056E E6               [12] 1089 	mov	a,@r0
      00056F C3               [12] 1090 	clr	c
      000570 9C               [12] 1091 	subb	a,r4
      000571 F6               [12] 1092 	mov	@r0,a
      000572 08               [12] 1093 	inc	r0
      000573 E6               [12] 1094 	mov	a,@r0
      000574 9D               [12] 1095 	subb	a,r5
      000575 F6               [12] 1096 	mov	@r0,a
      000576 08               [12] 1097 	inc	r0
      000577 E6               [12] 1098 	mov	a,@r0
      000578 9B               [12] 1099 	subb	a,r3
      000579 F6               [12] 1100 	mov	@r0,a
      00057A 08               [12] 1101 	inc	r0
      00057B E6               [12] 1102 	mov	a,@r0
      00057C 9A               [12] 1103 	subb	a,r2
      00057D F6               [12] 1104 	mov	@r0,a
                                   1105 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
      00057E E5*00            [12] 1106 	mov	a,_bp
      000580 24 05            [12] 1107 	add	a,#0x05
      000582 F8               [12] 1108 	mov	r0,a
      000583 E5*00            [12] 1109 	mov	a,_bp
      000585 24 09            [12] 1110 	add	a,#0x09
      000587 F9               [12] 1111 	mov	r1,a
      000588 E6               [12] 1112 	mov	a,@r0
      000589 C3               [12] 1113 	clr	c
      00058A 97               [12] 1114 	subb	a,@r1
      00058B F6               [12] 1115 	mov	@r0,a
      00058C 08               [12] 1116 	inc	r0
      00058D E6               [12] 1117 	mov	a,@r0
      00058E 09               [12] 1118 	inc	r1
      00058F 97               [12] 1119 	subb	a,@r1
      000590 F6               [12] 1120 	mov	@r0,a
      000591 08               [12] 1121 	inc	r0
      000592 E6               [12] 1122 	mov	a,@r0
      000593 09               [12] 1123 	inc	r1
      000594 97               [12] 1124 	subb	a,@r1
      000595 F6               [12] 1125 	mov	@r0,a
      000596 08               [12] 1126 	inc	r0
      000597 E6               [12] 1127 	mov	a,@r0
      000598 09               [12] 1128 	inc	r1
      000599 97               [12] 1129 	subb	a,@r1
      00059A F6               [12] 1130 	mov	@r0,a
                                   1131 ;	time.c:148: lastTime.tm_yday=epoch;
      00059B E5*00            [12] 1132 	mov	a,_bp
      00059D 24 05            [12] 1133 	add	a,#0x05
      00059F F8               [12] 1134 	mov	r0,a
      0005A0 86 04            [24] 1135 	mov	ar4,@r0
      0005A2 08               [12] 1136 	inc	r0
      0005A3 86 05            [24] 1137 	mov	ar5,@r0
      0005A5 90r00r28         [24] 1138 	mov	dptr,#(_lastTime + 0x0008)
      0005A8 EC               [12] 1139 	mov	a,r4
      0005A9 F0               [24] 1140 	movx	@dptr,a
      0005AA ED               [12] 1141 	mov	a,r5
      0005AB A3               [24] 1142 	inc	dptr
      0005AC F0               [24] 1143 	movx	@dptr,a
                                   1144 ;	time.c:153: for (month=0; month<12; month++) {
      0005AD 7D 00            [12] 1145 	mov	r5,#0x00
      0005AF                       1146 00114$:
                                   1147 ;	time.c:154: if (month==1) { // februari
      0005AF BD 01 0C         [24] 1148 	cjne	r5,#0x01,00108$
                                   1149 ;	time.c:155: if (LEAP_YEAR(year)) {
      0005B2 EE               [12] 1150 	mov	a,r6
      0005B3 4F               [12] 1151 	orl	a,r7
      0005B4 70 04            [24] 1152 	jnz	00105$
                                   1153 ;	time.c:156: monthLength=29;
      0005B6 7C 1D            [12] 1154 	mov	r4,#0x1D
      0005B8 80 0A            [24] 1155 	sjmp	00109$
      0005BA                       1156 00105$:
                                   1157 ;	time.c:158: monthLength=28;
      0005BA 7C 1C            [12] 1158 	mov	r4,#0x1C
      0005BC 80 06            [24] 1159 	sjmp	00109$
      0005BE                       1160 00108$:
                                   1161 ;	time.c:161: monthLength = monthDays[month];
      0005BE ED               [12] 1162 	mov	a,r5
      0005BF 90r00r00         [24] 1163 	mov	dptr,#_monthDays
      0005C2 93               [24] 1164 	movc	a,@a+dptr
      0005C3 FC               [12] 1165 	mov	r4,a
      0005C4                       1166 00109$:
                                   1167 ;	time.c:164: if (epoch>=monthLength) {
      0005C4 A8*00            [24] 1168 	mov	r0,_bp
      0005C6 08               [12] 1169 	inc	r0
      0005C7 A6 04            [24] 1170 	mov	@r0,ar4
      0005C9 08               [12] 1171 	inc	r0
      0005CA 76 00            [12] 1172 	mov	@r0,#0x00
      0005CC 08               [12] 1173 	inc	r0
      0005CD 76 00            [12] 1174 	mov	@r0,#0x00
      0005CF 08               [12] 1175 	inc	r0
      0005D0 76 00            [12] 1176 	mov	@r0,#0x00
      0005D2 E5*00            [12] 1177 	mov	a,_bp
      0005D4 24 05            [12] 1178 	add	a,#0x05
      0005D6 F8               [12] 1179 	mov	r0,a
      0005D7 A9*00            [24] 1180 	mov	r1,_bp
      0005D9 09               [12] 1181 	inc	r1
      0005DA C3               [12] 1182 	clr	c
      0005DB E6               [12] 1183 	mov	a,@r0
      0005DC 97               [12] 1184 	subb	a,@r1
      0005DD 08               [12] 1185 	inc	r0
      0005DE E6               [12] 1186 	mov	a,@r0
      0005DF 09               [12] 1187 	inc	r1
      0005E0 97               [12] 1188 	subb	a,@r1
      0005E1 08               [12] 1189 	inc	r0
      0005E2 E6               [12] 1190 	mov	a,@r0
      0005E3 09               [12] 1191 	inc	r1
      0005E4 97               [12] 1192 	subb	a,@r1
      0005E5 08               [12] 1193 	inc	r0
      0005E6 E6               [12] 1194 	mov	a,@r0
      0005E7 09               [12] 1195 	inc	r1
      0005E8 97               [12] 1196 	subb	a,@r1
      0005E9 40 21            [24] 1197 	jc	00113$
                                   1198 ;	time.c:165: epoch-=monthLength;
      0005EB E5*00            [12] 1199 	mov	a,_bp
      0005ED 24 05            [12] 1200 	add	a,#0x05
      0005EF F8               [12] 1201 	mov	r0,a
      0005F0 A9*00            [24] 1202 	mov	r1,_bp
      0005F2 09               [12] 1203 	inc	r1
      0005F3 E6               [12] 1204 	mov	a,@r0
      0005F4 C3               [12] 1205 	clr	c
      0005F5 97               [12] 1206 	subb	a,@r1
      0005F6 F6               [12] 1207 	mov	@r0,a
      0005F7 08               [12] 1208 	inc	r0
      0005F8 E6               [12] 1209 	mov	a,@r0
      0005F9 09               [12] 1210 	inc	r1
      0005FA 97               [12] 1211 	subb	a,@r1
      0005FB F6               [12] 1212 	mov	@r0,a
      0005FC 08               [12] 1213 	inc	r0
      0005FD E6               [12] 1214 	mov	a,@r0
      0005FE 09               [12] 1215 	inc	r1
      0005FF 97               [12] 1216 	subb	a,@r1
      000600 F6               [12] 1217 	mov	@r0,a
      000601 08               [12] 1218 	inc	r0
      000602 E6               [12] 1219 	mov	a,@r0
      000603 09               [12] 1220 	inc	r1
      000604 97               [12] 1221 	subb	a,@r1
      000605 F6               [12] 1222 	mov	@r0,a
                                   1223 ;	time.c:153: for (month=0; month<12; month++) {
      000606 0D               [12] 1224 	inc	r5
      000607 BD 0C 00         [24] 1225 	cjne	r5,#0x0C,00156$
      00060A                       1226 00156$:
      00060A 40 A3            [24] 1227 	jc	00114$
      00060C                       1228 00113$:
                                   1229 ;	time.c:170: lastTime.tm_mon=month;
      00060C 90r00r24         [24] 1230 	mov	dptr,#(_lastTime + 0x0004)
      00060F ED               [12] 1231 	mov	a,r5
      000610 F0               [24] 1232 	movx	@dptr,a
                                   1233 ;	time.c:171: lastTime.tm_mday=epoch+1;
      000611 E5*00            [12] 1234 	mov	a,_bp
      000613 24 05            [12] 1235 	add	a,#0x05
      000615 F8               [12] 1236 	mov	r0,a
      000616 86 04            [24] 1237 	mov	ar4,@r0
      000618 0C               [12] 1238 	inc	r4
      000619 90r00r23         [24] 1239 	mov	dptr,#(_lastTime + 0x0003)
      00061C EC               [12] 1240 	mov	a,r4
      00061D F0               [24] 1241 	movx	@dptr,a
                                   1242 ;	time.c:173: lastTime.tm_isdst=0;
      00061E 90r00r2A         [24] 1243 	mov	dptr,#(_lastTime + 0x000a)
      000621 E4               [12] 1244 	clr	a
      000622 F0               [24] 1245 	movx	@dptr,a
                                   1246 ;	time.c:175: return &lastTime;
      000623 90r00r20         [24] 1247 	mov	dptr,#_lastTime
      000626 75 F0 00         [24] 1248 	mov	b,#0x00
      000629 85*00 81         [24] 1249 	mov	sp,_bp
      00062C D0*00            [24] 1250 	pop	_bp
      00062E 22               [24] 1251 	ret
                                   1252 ;------------------------------------------------------------
                                   1253 ;Allocation info for local variables in function 'mktime'
                                   1254 ;------------------------------------------------------------
                                   1255 ;timeptr                   Allocated to stack - _bp +1
                                   1256 ;year                      Allocated to stack - _bp +4
                                   1257 ;month                     Allocated to stack - _bp +6
                                   1258 ;i                         Allocated to stack - _bp +8
                                   1259 ;seconds                   Allocated to stack - _bp +10
                                   1260 ;------------------------------------------------------------
                                   1261 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                                   1262 ;	-----------------------------------------
                                   1263 ;	 function mktime
                                   1264 ;	-----------------------------------------
      00062F                       1265 _mktime:
      00062F C0*00            [24] 1266 	push	_bp
      000631 85 81*00         [24] 1267 	mov	_bp,sp
      000634 C0 82            [24] 1268 	push	dpl
      000636 C0 83            [24] 1269 	push	dph
      000638 C0 F0            [24] 1270 	push	b
      00063A E5 81            [12] 1271 	mov	a,sp
      00063C 24 0A            [12] 1272 	add	a,#0x0A
      00063E F5 81            [12] 1273 	mov	sp,a
                                   1274 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      000640 A8*00            [24] 1275 	mov	r0,_bp
      000642 08               [12] 1276 	inc	r0
      000643 74 05            [12] 1277 	mov	a,#0x05
      000645 26               [12] 1278 	add	a,@r0
      000646 FA               [12] 1279 	mov	r2,a
      000647 E4               [12] 1280 	clr	a
      000648 08               [12] 1281 	inc	r0
      000649 36               [12] 1282 	addc	a,@r0
      00064A FB               [12] 1283 	mov	r3,a
      00064B 08               [12] 1284 	inc	r0
      00064C 86 04            [24] 1285 	mov	ar4,@r0
      00064E 8A 82            [24] 1286 	mov	dpl,r2
      000650 8B 83            [24] 1287 	mov	dph,r3
      000652 8C F0            [24] 1288 	mov	b,r4
      000654 12r00r00         [24] 1289 	lcall	__gptrget
      000657 FA               [12] 1290 	mov	r2,a
      000658 A3               [24] 1291 	inc	dptr
      000659 12r00r00         [24] 1292 	lcall	__gptrget
      00065C FB               [12] 1293 	mov	r3,a
      00065D E5*00            [12] 1294 	mov	a,_bp
      00065F 24 04            [12] 1295 	add	a,#0x04
      000661 F8               [12] 1296 	mov	r0,a
      000662 74 6C            [12] 1297 	mov	a,#0x6C
      000664 2A               [12] 1298 	add	a,r2
      000665 F6               [12] 1299 	mov	@r0,a
      000666 74 07            [12] 1300 	mov	a,#0x07
      000668 3B               [12] 1301 	addc	a,r3
      000669 08               [12] 1302 	inc	r0
      00066A F6               [12] 1303 	mov	@r0,a
      00066B A8*00            [24] 1304 	mov	r0,_bp
      00066D 08               [12] 1305 	inc	r0
      00066E 74 04            [12] 1306 	mov	a,#0x04
      000670 26               [12] 1307 	add	a,@r0
      000671 FA               [12] 1308 	mov	r2,a
      000672 E4               [12] 1309 	clr	a
      000673 08               [12] 1310 	inc	r0
      000674 36               [12] 1311 	addc	a,@r0
      000675 FB               [12] 1312 	mov	r3,a
      000676 08               [12] 1313 	inc	r0
      000677 86 04            [24] 1314 	mov	ar4,@r0
      000679 8A 82            [24] 1315 	mov	dpl,r2
      00067B 8B 83            [24] 1316 	mov	dph,r3
      00067D 8C F0            [24] 1317 	mov	b,r4
      00067F 12r00r00         [24] 1318 	lcall	__gptrget
      000682 FA               [12] 1319 	mov	r2,a
      000683 E5*00            [12] 1320 	mov	a,_bp
      000685 24 06            [12] 1321 	add	a,#0x06
      000687 F8               [12] 1322 	mov	r0,a
      000688 A6 02            [24] 1323 	mov	@r0,ar2
      00068A 08               [12] 1324 	inc	r0
      00068B 76 00            [12] 1325 	mov	@r0,#0x00
                                   1326 ;	time.c:183: CheckTime(timeptr);
      00068D A8*00            [24] 1327 	mov	r0,_bp
      00068F 08               [12] 1328 	inc	r0
      000690 86 82            [24] 1329 	mov	dpl,@r0
      000692 08               [12] 1330 	inc	r0
      000693 86 83            [24] 1331 	mov	dph,@r0
      000695 08               [12] 1332 	inc	r0
      000696 86 F0            [24] 1333 	mov	b,@r0
      000698 12r00rA5         [24] 1334 	lcall	_CheckTime
                                   1335 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
      00069B E5*00            [12] 1336 	mov	a,_bp
      00069D 24 04            [12] 1337 	add	a,#0x04
      00069F F8               [12] 1338 	mov	r0,a
      0006A0 E6               [12] 1339 	mov	a,@r0
      0006A1 24 4E            [12] 1340 	add	a,#0x4E
      0006A3 FB               [12] 1341 	mov	r3,a
      0006A4 08               [12] 1342 	inc	r0
      0006A5 E6               [12] 1343 	mov	a,@r0
      0006A6 34 F8            [12] 1344 	addc	a,#0xF8
      0006A8 FA               [12] 1345 	mov	r2,a
      0006A9 33               [12] 1346 	rlc	a
      0006AA 95 E0            [12] 1347 	subb	a,acc
      0006AC FC               [12] 1348 	mov	r4,a
      0006AD FF               [12] 1349 	mov	r7,a
      0006AE C0 03            [24] 1350 	push	ar3
      0006B0 C0 02            [24] 1351 	push	ar2
      0006B2 C0 04            [24] 1352 	push	ar4
      0006B4 C0 07            [24] 1353 	push	ar7
      0006B6 90 33 80         [24] 1354 	mov	dptr,#0x3380
      0006B9 75 F0 E1         [24] 1355 	mov	b,#0xE1
      0006BC 74 01            [12] 1356 	mov	a,#0x01
      0006BE 12r00r00         [24] 1357 	lcall	__mullong
      0006C1 AC 82            [24] 1358 	mov	r4,dpl
      0006C3 AD 83            [24] 1359 	mov	r5,dph
      0006C5 AE F0            [24] 1360 	mov	r6,b
      0006C7 FF               [12] 1361 	mov	r7,a
      0006C8 E5 81            [12] 1362 	mov	a,sp
      0006CA 24 FC            [12] 1363 	add	a,#0xfc
      0006CC F5 81            [12] 1364 	mov	sp,a
      0006CE E5*00            [12] 1365 	mov	a,_bp
      0006D0 24 0A            [12] 1366 	add	a,#0x0a
      0006D2 F8               [12] 1367 	mov	r0,a
      0006D3 A6 04            [24] 1368 	mov	@r0,ar4
      0006D5 08               [12] 1369 	inc	r0
      0006D6 A6 05            [24] 1370 	mov	@r0,ar5
      0006D8 08               [12] 1371 	inc	r0
      0006D9 A6 06            [24] 1372 	mov	@r0,ar6
      0006DB 08               [12] 1373 	inc	r0
      0006DC A6 07            [24] 1374 	mov	@r0,ar7
                                   1375 ;	time.c:189: for (i=1970; i<year; i++) {
      0006DE E5*00            [12] 1376 	mov	a,_bp
      0006E0 24 0A            [12] 1377 	add	a,#0x0a
      0006E2 F8               [12] 1378 	mov	r0,a
      0006E3 86 02            [24] 1379 	mov	ar2,@r0
      0006E5 08               [12] 1380 	inc	r0
      0006E6 86 03            [24] 1381 	mov	ar3,@r0
      0006E8 08               [12] 1382 	inc	r0
      0006E9 86 06            [24] 1383 	mov	ar6,@r0
      0006EB 08               [12] 1384 	inc	r0
      0006EC 86 07            [24] 1385 	mov	ar7,@r0
      0006EE E5*00            [12] 1386 	mov	a,_bp
      0006F0 24 08            [12] 1387 	add	a,#0x08
      0006F2 F8               [12] 1388 	mov	r0,a
      0006F3 76 B2            [12] 1389 	mov	@r0,#0xB2
      0006F5 08               [12] 1390 	inc	r0
      0006F6 76 07            [12] 1391 	mov	@r0,#0x07
      0006F8                       1392 00110$:
      0006F8 E5*00            [12] 1393 	mov	a,_bp
      0006FA 24 08            [12] 1394 	add	a,#0x08
      0006FC F8               [12] 1395 	mov	r0,a
      0006FD E5*00            [12] 1396 	mov	a,_bp
      0006FF 24 04            [12] 1397 	add	a,#0x04
      000701 F9               [12] 1398 	mov	r1,a
      000702 C3               [12] 1399 	clr	c
      000703 E6               [12] 1400 	mov	a,@r0
      000704 97               [12] 1401 	subb	a,@r1
      000705 08               [12] 1402 	inc	r0
      000706 E6               [12] 1403 	mov	a,@r0
      000707 64 80            [12] 1404 	xrl	a,#0x80
      000709 09               [12] 1405 	inc	r1
      00070A 87 F0            [24] 1406 	mov	b,@r1
      00070C 63 F0 80         [24] 1407 	xrl	b,#0x80
      00070F 95 F0            [12] 1408 	subb	a,b
      000711 50 4C            [24] 1409 	jnc	00124$
                                   1410 ;	time.c:190: if (LEAP_YEAR(i)) {
      000713 C0 07            [24] 1411 	push	ar7
      000715 C0 06            [24] 1412 	push	ar6
      000717 C0 03            [24] 1413 	push	ar3
      000719 C0 02            [24] 1414 	push	ar2
      00071B 74 04            [12] 1415 	mov	a,#0x04
      00071D C0 E0            [24] 1416 	push	acc
      00071F E4               [12] 1417 	clr	a
      000720 C0 E0            [24] 1418 	push	acc
      000722 E5*00            [12] 1419 	mov	a,_bp
      000724 24 08            [12] 1420 	add	a,#0x08
      000726 F8               [12] 1421 	mov	r0,a
      000727 86 82            [24] 1422 	mov	dpl,@r0
      000729 08               [12] 1423 	inc	r0
      00072A 86 83            [24] 1424 	mov	dph,@r0
      00072C 12r00r00         [24] 1425 	lcall	__modsint
      00072F AC 82            [24] 1426 	mov	r4,dpl
      000731 AD 83            [24] 1427 	mov	r5,dph
      000733 15 81            [12] 1428 	dec	sp
      000735 15 81            [12] 1429 	dec	sp
      000737 D0 02            [24] 1430 	pop	ar2
      000739 D0 03            [24] 1431 	pop	ar3
      00073B D0 06            [24] 1432 	pop	ar6
      00073D D0 07            [24] 1433 	pop	ar7
      00073F EC               [12] 1434 	mov	a,r4
      000740 4D               [12] 1435 	orl	a,r5
      000741 70 0F            [24] 1436 	jnz	00111$
                                   1437 ;	time.c:191: seconds+= 60*60*24L;
      000743 74 80            [12] 1438 	mov	a,#0x80
      000745 2A               [12] 1439 	add	a,r2
      000746 FA               [12] 1440 	mov	r2,a
      000747 74 51            [12] 1441 	mov	a,#0x51
      000749 3B               [12] 1442 	addc	a,r3
      00074A FB               [12] 1443 	mov	r3,a
      00074B 74 01            [12] 1444 	mov	a,#0x01
      00074D 3E               [12] 1445 	addc	a,r6
      00074E FE               [12] 1446 	mov	r6,a
      00074F E4               [12] 1447 	clr	a
      000750 3F               [12] 1448 	addc	a,r7
      000751 FF               [12] 1449 	mov	r7,a
      000752                       1450 00111$:
                                   1451 ;	time.c:189: for (i=1970; i<year; i++) {
      000752 E5*00            [12] 1452 	mov	a,_bp
      000754 24 08            [12] 1453 	add	a,#0x08
      000756 F8               [12] 1454 	mov	r0,a
      000757 06               [12] 1455 	inc	@r0
      000758 B6 00 02         [24] 1456 	cjne	@r0,#0x00,00142$
      00075B 08               [12] 1457 	inc	r0
      00075C 06               [12] 1458 	inc	@r0
      00075D                       1459 00142$:
      00075D 80 99            [24] 1460 	sjmp	00110$
      00075F                       1461 00124$:
      00075F E5*00            [12] 1462 	mov	a,_bp
      000761 24 0A            [12] 1463 	add	a,#0x0a
      000763 F8               [12] 1464 	mov	r0,a
      000764 A6 02            [24] 1465 	mov	@r0,ar2
      000766 08               [12] 1466 	inc	r0
      000767 A6 03            [24] 1467 	mov	@r0,ar3
      000769 08               [12] 1468 	inc	r0
      00076A A6 06            [24] 1469 	mov	@r0,ar6
      00076C 08               [12] 1470 	inc	r0
      00076D A6 07            [24] 1471 	mov	@r0,ar7
                                   1472 ;	time.c:196: for (i=0; i<month; i++) {
      00076F 74 04            [12] 1473 	mov	a,#0x04
      000771 C0 E0            [24] 1474 	push	acc
      000773 E4               [12] 1475 	clr	a
      000774 C0 E0            [24] 1476 	push	acc
      000776 E5*00            [12] 1477 	mov	a,_bp
      000778 24 04            [12] 1478 	add	a,#0x04
      00077A F8               [12] 1479 	mov	r0,a
      00077B 86 82            [24] 1480 	mov	dpl,@r0
      00077D 08               [12] 1481 	inc	r0
      00077E 86 83            [24] 1482 	mov	dph,@r0
      000780 12r00r00         [24] 1483 	lcall	__modsint
      000783 AE 82            [24] 1484 	mov	r6,dpl
      000785 AF 83            [24] 1485 	mov	r7,dph
      000787 15 81            [12] 1486 	dec	sp
      000789 15 81            [12] 1487 	dec	sp
      00078B 7C 00            [12] 1488 	mov	r4,#0x00
      00078D 7D 00            [12] 1489 	mov	r5,#0x00
      00078F                       1490 00113$:
      00078F E5*00            [12] 1491 	mov	a,_bp
      000791 24 06            [12] 1492 	add	a,#0x06
      000793 F8               [12] 1493 	mov	r0,a
      000794 C3               [12] 1494 	clr	c
      000795 EC               [12] 1495 	mov	a,r4
      000796 96               [12] 1496 	subb	a,@r0
      000797 ED               [12] 1497 	mov	a,r5
      000798 64 80            [12] 1498 	xrl	a,#0x80
      00079A 08               [12] 1499 	inc	r0
      00079B 86 F0            [24] 1500 	mov	b,@r0
      00079D 63 F0 80         [24] 1501 	xrl	b,#0x80
      0007A0 95 F0            [12] 1502 	subb	a,b
      0007A2 40 03            [24] 1503 	jc	00143$
      0007A4 02r08r28         [24] 1504 	ljmp	00108$
      0007A7                       1505 00143$:
                                   1506 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
      0007A7 BC 01 20         [24] 1507 	cjne	r4,#0x01,00105$
      0007AA BD 00 1D         [24] 1508 	cjne	r5,#0x00,00105$
      0007AD EE               [12] 1509 	mov	a,r6
      0007AE 4F               [12] 1510 	orl	a,r7
      0007AF 70 19            [24] 1511 	jnz	00105$
                                   1512 ;	time.c:198: seconds+= 60*60*24L*29;
      0007B1 E5*00            [12] 1513 	mov	a,_bp
      0007B3 24 0A            [12] 1514 	add	a,#0x0a
      0007B5 F8               [12] 1515 	mov	r0,a
      0007B6 74 80            [12] 1516 	mov	a,#0x80
      0007B8 26               [12] 1517 	add	a,@r0
      0007B9 F6               [12] 1518 	mov	@r0,a
      0007BA 74 3B            [12] 1519 	mov	a,#0x3B
      0007BC 08               [12] 1520 	inc	r0
      0007BD 36               [12] 1521 	addc	a,@r0
      0007BE F6               [12] 1522 	mov	@r0,a
      0007BF 74 26            [12] 1523 	mov	a,#0x26
      0007C1 08               [12] 1524 	inc	r0
      0007C2 36               [12] 1525 	addc	a,@r0
      0007C3 F6               [12] 1526 	mov	@r0,a
      0007C4 E4               [12] 1527 	clr	a
      0007C5 08               [12] 1528 	inc	r0
      0007C6 36               [12] 1529 	addc	a,@r0
      0007C7 F6               [12] 1530 	mov	@r0,a
      0007C8 80 56            [24] 1531 	sjmp	00114$
      0007CA                       1532 00105$:
                                   1533 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      0007CA C0 06            [24] 1534 	push	ar6
      0007CC C0 07            [24] 1535 	push	ar7
      0007CE EC               [12] 1536 	mov	a,r4
      0007CF 24r00            [12] 1537 	add	a,#_monthDays
      0007D1 F5 82            [12] 1538 	mov	dpl,a
      0007D3 ED               [12] 1539 	mov	a,r5
      0007D4 34s00            [12] 1540 	addc	a,#(_monthDays >> 8)
      0007D6 F5 83            [12] 1541 	mov	dph,a
      0007D8 E4               [12] 1542 	clr	a
      0007D9 93               [24] 1543 	movc	a,@a+dptr
      0007DA FA               [12] 1544 	mov	r2,a
      0007DB 33               [12] 1545 	rlc	a
      0007DC 95 E0            [12] 1546 	subb	a,acc
      0007DE FB               [12] 1547 	mov	r3,a
      0007DF FE               [12] 1548 	mov	r6,a
      0007E0 FF               [12] 1549 	mov	r7,a
      0007E1 C0 05            [24] 1550 	push	ar5
      0007E3 C0 04            [24] 1551 	push	ar4
      0007E5 C0 02            [24] 1552 	push	ar2
      0007E7 C0 03            [24] 1553 	push	ar3
      0007E9 C0 06            [24] 1554 	push	ar6
      0007EB C0 07            [24] 1555 	push	ar7
      0007ED 90 51 80         [24] 1556 	mov	dptr,#0x5180
      0007F0 75 F0 01         [24] 1557 	mov	b,#0x01
      0007F3 E4               [12] 1558 	clr	a
      0007F4 12r00r00         [24] 1559 	lcall	__mullong
      0007F7 AA 82            [24] 1560 	mov	r2,dpl
      0007F9 AB 83            [24] 1561 	mov	r3,dph
      0007FB AE F0            [24] 1562 	mov	r6,b
      0007FD FF               [12] 1563 	mov	r7,a
      0007FE E5 81            [12] 1564 	mov	a,sp
      000800 24 FC            [12] 1565 	add	a,#0xfc
      000802 F5 81            [12] 1566 	mov	sp,a
      000804 D0 04            [24] 1567 	pop	ar4
      000806 D0 05            [24] 1568 	pop	ar5
      000808 E5*00            [12] 1569 	mov	a,_bp
      00080A 24 0A            [12] 1570 	add	a,#0x0a
      00080C F8               [12] 1571 	mov	r0,a
      00080D EA               [12] 1572 	mov	a,r2
      00080E 26               [12] 1573 	add	a,@r0
      00080F F6               [12] 1574 	mov	@r0,a
      000810 EB               [12] 1575 	mov	a,r3
      000811 08               [12] 1576 	inc	r0
      000812 36               [12] 1577 	addc	a,@r0
      000813 F6               [12] 1578 	mov	@r0,a
      000814 EE               [12] 1579 	mov	a,r6
      000815 08               [12] 1580 	inc	r0
      000816 36               [12] 1581 	addc	a,@r0
      000817 F6               [12] 1582 	mov	@r0,a
      000818 EF               [12] 1583 	mov	a,r7
      000819 08               [12] 1584 	inc	r0
      00081A 36               [12] 1585 	addc	a,@r0
      00081B F6               [12] 1586 	mov	@r0,a
                                   1587 ;	time.c:208: return seconds;
      00081C D0 07            [24] 1588 	pop	ar7
      00081E D0 06            [24] 1589 	pop	ar6
                                   1590 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000820                       1591 00114$:
                                   1592 ;	time.c:196: for (i=0; i<month; i++) {
      000820 0C               [12] 1593 	inc	r4
      000821 BC 00 01         [24] 1594 	cjne	r4,#0x00,00147$
      000824 0D               [12] 1595 	inc	r5
      000825                       1596 00147$:
      000825 02r07r8F         [24] 1597 	ljmp	00113$
      000828                       1598 00108$:
                                   1599 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      000828 A8*00            [24] 1600 	mov	r0,_bp
      00082A 08               [12] 1601 	inc	r0
      00082B 74 03            [12] 1602 	mov	a,#0x03
      00082D 26               [12] 1603 	add	a,@r0
      00082E FD               [12] 1604 	mov	r5,a
      00082F E4               [12] 1605 	clr	a
      000830 08               [12] 1606 	inc	r0
      000831 36               [12] 1607 	addc	a,@r0
      000832 FE               [12] 1608 	mov	r6,a
      000833 08               [12] 1609 	inc	r0
      000834 86 07            [24] 1610 	mov	ar7,@r0
      000836 8D 82            [24] 1611 	mov	dpl,r5
      000838 8E 83            [24] 1612 	mov	dph,r6
      00083A 8F F0            [24] 1613 	mov	b,r7
      00083C 12r00r00         [24] 1614 	lcall	__gptrget
      00083F FD               [12] 1615 	mov	r5,a
      000840 7F 00            [12] 1616 	mov	r7,#0x00
      000842 1D               [12] 1617 	dec	r5
      000843 BD FF 01         [24] 1618 	cjne	r5,#0xFF,00148$
      000846 1F               [12] 1619 	dec	r7
      000847                       1620 00148$:
      000847 EF               [12] 1621 	mov	a,r7
      000848 33               [12] 1622 	rlc	a
      000849 95 E0            [12] 1623 	subb	a,acc
      00084B FE               [12] 1624 	mov	r6,a
      00084C FC               [12] 1625 	mov	r4,a
      00084D C0 05            [24] 1626 	push	ar5
      00084F C0 07            [24] 1627 	push	ar7
      000851 C0 06            [24] 1628 	push	ar6
      000853 C0 04            [24] 1629 	push	ar4
      000855 90 51 80         [24] 1630 	mov	dptr,#0x5180
      000858 75 F0 01         [24] 1631 	mov	b,#0x01
      00085B E4               [12] 1632 	clr	a
      00085C 12r00r00         [24] 1633 	lcall	__mullong
      00085F AC 82            [24] 1634 	mov	r4,dpl
      000861 AD 83            [24] 1635 	mov	r5,dph
      000863 AE F0            [24] 1636 	mov	r6,b
      000865 FF               [12] 1637 	mov	r7,a
      000866 E5 81            [12] 1638 	mov	a,sp
      000868 24 FC            [12] 1639 	add	a,#0xfc
      00086A F5 81            [12] 1640 	mov	sp,a
      00086C E5*00            [12] 1641 	mov	a,_bp
      00086E 24 0A            [12] 1642 	add	a,#0x0a
      000870 F8               [12] 1643 	mov	r0,a
      000871 EC               [12] 1644 	mov	a,r4
      000872 26               [12] 1645 	add	a,@r0
      000873 F6               [12] 1646 	mov	@r0,a
      000874 ED               [12] 1647 	mov	a,r5
      000875 08               [12] 1648 	inc	r0
      000876 36               [12] 1649 	addc	a,@r0
      000877 F6               [12] 1650 	mov	@r0,a
      000878 EE               [12] 1651 	mov	a,r6
      000879 08               [12] 1652 	inc	r0
      00087A 36               [12] 1653 	addc	a,@r0
      00087B F6               [12] 1654 	mov	@r0,a
      00087C EF               [12] 1655 	mov	a,r7
      00087D 08               [12] 1656 	inc	r0
      00087E 36               [12] 1657 	addc	a,@r0
      00087F F6               [12] 1658 	mov	@r0,a
                                   1659 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
      000880 A8*00            [24] 1660 	mov	r0,_bp
      000882 08               [12] 1661 	inc	r0
      000883 74 02            [12] 1662 	mov	a,#0x02
      000885 26               [12] 1663 	add	a,@r0
      000886 FD               [12] 1664 	mov	r5,a
      000887 E4               [12] 1665 	clr	a
      000888 08               [12] 1666 	inc	r0
      000889 36               [12] 1667 	addc	a,@r0
      00088A FE               [12] 1668 	mov	r6,a
      00088B 08               [12] 1669 	inc	r0
      00088C 86 07            [24] 1670 	mov	ar7,@r0
      00088E 8D 82            [24] 1671 	mov	dpl,r5
      000890 8E 83            [24] 1672 	mov	dph,r6
      000892 8F F0            [24] 1673 	mov	b,r7
      000894 12r00r00         [24] 1674 	lcall	__gptrget
      000897 FD               [12] 1675 	mov	r5,a
      000898 7F 00            [12] 1676 	mov	r7,#0x00
      00089A 7E 00            [12] 1677 	mov	r6,#0x00
      00089C 7C 00            [12] 1678 	mov	r4,#0x00
      00089E C0 05            [24] 1679 	push	ar5
      0008A0 C0 07            [24] 1680 	push	ar7
      0008A2 C0 06            [24] 1681 	push	ar6
      0008A4 C0 04            [24] 1682 	push	ar4
      0008A6 90 0E 10         [24] 1683 	mov	dptr,#0x0E10
      0008A9 E4               [12] 1684 	clr	a
      0008AA F5 F0            [12] 1685 	mov	b,a
      0008AC 12r00r00         [24] 1686 	lcall	__mullong
      0008AF AC 82            [24] 1687 	mov	r4,dpl
      0008B1 AD 83            [24] 1688 	mov	r5,dph
      0008B3 AE F0            [24] 1689 	mov	r6,b
      0008B5 FF               [12] 1690 	mov	r7,a
      0008B6 E5 81            [12] 1691 	mov	a,sp
      0008B8 24 FC            [12] 1692 	add	a,#0xfc
      0008BA F5 81            [12] 1693 	mov	sp,a
      0008BC E5*00            [12] 1694 	mov	a,_bp
      0008BE 24 0A            [12] 1695 	add	a,#0x0a
      0008C0 F8               [12] 1696 	mov	r0,a
      0008C1 EC               [12] 1697 	mov	a,r4
      0008C2 26               [12] 1698 	add	a,@r0
      0008C3 F6               [12] 1699 	mov	@r0,a
      0008C4 ED               [12] 1700 	mov	a,r5
      0008C5 08               [12] 1701 	inc	r0
      0008C6 36               [12] 1702 	addc	a,@r0
      0008C7 F6               [12] 1703 	mov	@r0,a
      0008C8 EE               [12] 1704 	mov	a,r6
      0008C9 08               [12] 1705 	inc	r0
      0008CA 36               [12] 1706 	addc	a,@r0
      0008CB F6               [12] 1707 	mov	@r0,a
      0008CC EF               [12] 1708 	mov	a,r7
      0008CD 08               [12] 1709 	inc	r0
      0008CE 36               [12] 1710 	addc	a,@r0
      0008CF F6               [12] 1711 	mov	@r0,a
                                   1712 ;	time.c:206: seconds+= timeptr->tm_min*60;
      0008D0 A8*00            [24] 1713 	mov	r0,_bp
      0008D2 08               [12] 1714 	inc	r0
      0008D3 74 01            [12] 1715 	mov	a,#0x01
      0008D5 26               [12] 1716 	add	a,@r0
      0008D6 FD               [12] 1717 	mov	r5,a
      0008D7 E4               [12] 1718 	clr	a
      0008D8 08               [12] 1719 	inc	r0
      0008D9 36               [12] 1720 	addc	a,@r0
      0008DA FE               [12] 1721 	mov	r6,a
      0008DB 08               [12] 1722 	inc	r0
      0008DC 86 07            [24] 1723 	mov	ar7,@r0
      0008DE 8D 82            [24] 1724 	mov	dpl,r5
      0008E0 8E 83            [24] 1725 	mov	dph,r6
      0008E2 8F F0            [24] 1726 	mov	b,r7
      0008E4 12r00r00         [24] 1727 	lcall	__gptrget
      0008E7 75 F0 3C         [24] 1728 	mov	b,#0x3C
      0008EA A4               [48] 1729 	mul	ab
      0008EB FD               [12] 1730 	mov	r5,a
      0008EC E5 F0            [12] 1731 	mov	a,b
      0008EE FF               [12] 1732 	mov	r7,a
      0008EF 33               [12] 1733 	rlc	a
      0008F0 95 E0            [12] 1734 	subb	a,acc
      0008F2 FE               [12] 1735 	mov	r6,a
      0008F3 FC               [12] 1736 	mov	r4,a
      0008F4 E5*00            [12] 1737 	mov	a,_bp
      0008F6 24 0A            [12] 1738 	add	a,#0x0a
      0008F8 F8               [12] 1739 	mov	r0,a
      0008F9 ED               [12] 1740 	mov	a,r5
      0008FA 26               [12] 1741 	add	a,@r0
      0008FB F6               [12] 1742 	mov	@r0,a
      0008FC EF               [12] 1743 	mov	a,r7
      0008FD 08               [12] 1744 	inc	r0
      0008FE 36               [12] 1745 	addc	a,@r0
      0008FF F6               [12] 1746 	mov	@r0,a
      000900 EE               [12] 1747 	mov	a,r6
      000901 08               [12] 1748 	inc	r0
      000902 36               [12] 1749 	addc	a,@r0
      000903 F6               [12] 1750 	mov	@r0,a
      000904 EC               [12] 1751 	mov	a,r4
      000905 08               [12] 1752 	inc	r0
      000906 36               [12] 1753 	addc	a,@r0
      000907 F6               [12] 1754 	mov	@r0,a
                                   1755 ;	time.c:207: seconds+= timeptr->tm_sec;
      000908 A8*00            [24] 1756 	mov	r0,_bp
      00090A 08               [12] 1757 	inc	r0
      00090B 86 82            [24] 1758 	mov	dpl,@r0
      00090D 08               [12] 1759 	inc	r0
      00090E 86 83            [24] 1760 	mov	dph,@r0
      000910 08               [12] 1761 	inc	r0
      000911 86 F0            [24] 1762 	mov	b,@r0
      000913 12r00r00         [24] 1763 	lcall	__gptrget
      000916 FF               [12] 1764 	mov	r7,a
      000917 E4               [12] 1765 	clr	a
      000918 FE               [12] 1766 	mov	r6,a
      000919 33               [12] 1767 	rlc	a
      00091A 95 E0            [12] 1768 	subb	a,acc
      00091C FD               [12] 1769 	mov	r5,a
      00091D FC               [12] 1770 	mov	r4,a
      00091E E5*00            [12] 1771 	mov	a,_bp
      000920 24 0A            [12] 1772 	add	a,#0x0a
      000922 F8               [12] 1773 	mov	r0,a
      000923 EF               [12] 1774 	mov	a,r7
      000924 26               [12] 1775 	add	a,@r0
      000925 F6               [12] 1776 	mov	@r0,a
      000926 EE               [12] 1777 	mov	a,r6
      000927 08               [12] 1778 	inc	r0
      000928 36               [12] 1779 	addc	a,@r0
      000929 F6               [12] 1780 	mov	@r0,a
      00092A ED               [12] 1781 	mov	a,r5
      00092B 08               [12] 1782 	inc	r0
      00092C 36               [12] 1783 	addc	a,@r0
      00092D F6               [12] 1784 	mov	@r0,a
      00092E EC               [12] 1785 	mov	a,r4
      00092F 08               [12] 1786 	inc	r0
      000930 36               [12] 1787 	addc	a,@r0
      000931 F6               [12] 1788 	mov	@r0,a
                                   1789 ;	time.c:208: return seconds;
      000932 E5*00            [12] 1790 	mov	a,_bp
      000934 24 0A            [12] 1791 	add	a,#0x0a
      000936 F8               [12] 1792 	mov	r0,a
      000937 86 82            [24] 1793 	mov	dpl,@r0
      000939 08               [12] 1794 	inc	r0
      00093A 86 83            [24] 1795 	mov	dph,@r0
      00093C 08               [12] 1796 	inc	r0
      00093D 86 F0            [24] 1797 	mov	b,@r0
      00093F 08               [12] 1798 	inc	r0
      000940 E6               [12] 1799 	mov	a,@r0
      000941 85*00 81         [24] 1800 	mov	sp,_bp
      000944 D0*00            [24] 1801 	pop	_bp
      000946 22               [24] 1802 	ret
                                   1803 	.area CSEG    (CODE)
                                   1804 	.area CONST   (CODE)
      000000                       1805 _monthDays:
      000000 1F                    1806 	.db #0x1F	;  31
      000001 1C                    1807 	.db #0x1C	;  28
      000002 1F                    1808 	.db #0x1F	;  31
      000003 1E                    1809 	.db #0x1E	;  30
      000004 1F                    1810 	.db #0x1F	;  31
      000005 1E                    1811 	.db #0x1E	;  30
      000006 1F                    1812 	.db #0x1F	;  31
      000007 1F                    1813 	.db #0x1F	;  31
      000008 1E                    1814 	.db #0x1E	;  30
      000009 1F                    1815 	.db #0x1F	;  31
      00000A 1E                    1816 	.db #0x1E	;  30
      00000B 1F                    1817 	.db #0x1F	;  31
      00000C                       1818 ___month:
      00000Cr51s00                 1819 	.byte __str_1,(__str_1 >> 8)
      00000Er55s00                 1820 	.byte __str_2,(__str_2 >> 8)
      000010r59s00                 1821 	.byte __str_3,(__str_3 >> 8)
      000012r5Ds00                 1822 	.byte __str_4,(__str_4 >> 8)
      000014r61s00                 1823 	.byte __str_5,(__str_5 >> 8)
      000016r65s00                 1824 	.byte __str_6,(__str_6 >> 8)
      000018r69s00                 1825 	.byte __str_7,(__str_7 >> 8)
      00001Ar6Ds00                 1826 	.byte __str_8,(__str_8 >> 8)
      00001Cr71s00                 1827 	.byte __str_9,(__str_9 >> 8)
      00001Er75s00                 1828 	.byte __str_10,(__str_10 >> 8)
      000020r79s00                 1829 	.byte __str_11,(__str_11 >> 8)
      000022r7Ds00                 1830 	.byte __str_12,(__str_12 >> 8)
      000024                       1831 ___day:
      000024r81s00                 1832 	.byte __str_13,(__str_13 >> 8)
      000026r85s00                 1833 	.byte __str_14,(__str_14 >> 8)
      000028r89s00                 1834 	.byte __str_15,(__str_15 >> 8)
      00002Ar8Ds00                 1835 	.byte __str_16,(__str_16 >> 8)
      00002Cr91s00                 1836 	.byte __str_17,(__str_17 >> 8)
      00002Er95s00                 1837 	.byte __str_18,(__str_18 >> 8)
      000030r99s00                 1838 	.byte __str_19,(__str_19 >> 8)
      000032                       1839 ___str_0:
      000032 25 73 20 25 73 20 25  1840 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                    1841 	.db 0x0A
      000050 00                    1842 	.db 0x00
      000051                       1843 __str_1:
      000051 4A 61 6E              1844 	.ascii "Jan"
      000054 00                    1845 	.db 0x00
      000055                       1846 __str_2:
      000055 46 65 62              1847 	.ascii "Feb"
      000058 00                    1848 	.db 0x00
      000059                       1849 __str_3:
      000059 4D 61 72              1850 	.ascii "Mar"
      00005C 00                    1851 	.db 0x00
      00005D                       1852 __str_4:
      00005D 41 70 72              1853 	.ascii "Apr"
      000060 00                    1854 	.db 0x00
      000061                       1855 __str_5:
      000061 4D 61 79              1856 	.ascii "May"
      000064 00                    1857 	.db 0x00
      000065                       1858 __str_6:
      000065 4A 75 6E              1859 	.ascii "Jun"
      000068 00                    1860 	.db 0x00
      000069                       1861 __str_7:
      000069 4A 75 6C              1862 	.ascii "Jul"
      00006C 00                    1863 	.db 0x00
      00006D                       1864 __str_8:
      00006D 41 75 67              1865 	.ascii "Aug"
      000070 00                    1866 	.db 0x00
      000071                       1867 __str_9:
      000071 53 65 70              1868 	.ascii "Sep"
      000074 00                    1869 	.db 0x00
      000075                       1870 __str_10:
      000075 4F 63 74              1871 	.ascii "Oct"
      000078 00                    1872 	.db 0x00
      000079                       1873 __str_11:
      000079 4E 6F 76              1874 	.ascii "Nov"
      00007C 00                    1875 	.db 0x00
      00007D                       1876 __str_12:
      00007D 44 65 63              1877 	.ascii "Dec"
      000080 00                    1878 	.db 0x00
      000081                       1879 __str_13:
      000081 53 75 6E              1880 	.ascii "Sun"
      000084 00                    1881 	.db 0x00
      000085                       1882 __str_14:
      000085 4D 6F 6E              1883 	.ascii "Mon"
      000088 00                    1884 	.db 0x00
      000089                       1885 __str_15:
      000089 54 75 65              1886 	.ascii "Tue"
      00008C 00                    1887 	.db 0x00
      00008D                       1888 __str_16:
      00008D 57 65 64              1889 	.ascii "Wed"
      000090 00                    1890 	.db 0x00
      000091                       1891 __str_17:
      000091 54 68 75              1892 	.ascii "Thu"
      000094 00                    1893 	.db 0x00
      000095                       1894 __str_18:
      000095 46 72 69              1895 	.ascii "Fri"
      000098 00                    1896 	.db 0x00
      000099                       1897 __str_19:
      000099 53 61 74              1898 	.ascii "Sat"
      00009C 00                    1899 	.db 0x00
                                   1900 	.area XINIT   (CODE)
                                   1901 	.area CABS    (ABS,CODE)
