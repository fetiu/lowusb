                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:07 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'output_digit'
                                    107 ;------------------------------------------------------------
                                    108 ;output_char               Allocated to stack - _bp -4
                                    109 ;p                         Allocated to stack - _bp -7
                                    110 ;lower_case                Allocated to registers b0 
                                    111 ;n                         Allocated to registers r7 
                                    112 ;c                         Allocated to registers r7 
                                    113 ;------------------------------------------------------------
                                    114 ;	printf_large.c:116: output_digit (unsigned char n, bool lower_case, pfn_outputchar output_char, void* p)
                                    115 ;	-----------------------------------------
                                    116 ;	 function output_digit
                                    117 ;	-----------------------------------------
      000000                        118 _output_digit:
                           000007   119 	ar7 = 0x07
                           000006   120 	ar6 = 0x06
                           000005   121 	ar5 = 0x05
                           000004   122 	ar4 = 0x04
                           000003   123 	ar3 = 0x03
                           000002   124 	ar2 = 0x02
                           000001   125 	ar1 = 0x01
                           000000   126 	ar0 = 0x00
      000000 C0*00            [24]  127 	push	_bp
      000002 85 81*00         [24]  128 	mov	_bp,sp
      000005 AF 82            [24]  129 	mov	r7,dpl
                                    130 ;	printf_large.c:118: register unsigned char c = n + (unsigned char)'0';
      000007 74 30            [12]  131 	mov	a,#0x30
      000009 2F               [12]  132 	add	a,r7
                                    133 ;	printf_large.c:120: if (c > (unsigned char)'9')
      00000A FF               [12]  134 	mov  r7,a
      00000B 24 C6            [12]  135 	add	a,#0xff - 0x39
      00000D 50 0B            [24]  136 	jnc	00104$
                                    137 ;	printf_large.c:122: c += (unsigned char)('A' - '0' - 10);
      00000F 74 07            [12]  138 	mov	a,#0x07
      000011 2F               [12]  139 	add	a,r7
      000012 FF               [12]  140 	mov	r7,a
                                    141 ;	printf_large.c:123: if (lower_case)
      000013 30*00 04         [24]  142 	jnb	b0,00104$
                                    143 ;	printf_large.c:124: c += (unsigned char)('a' - 'A');
      000016 74 20            [12]  144 	mov	a,#0x20
      000018 2F               [12]  145 	add	a,r7
      000019 FF               [12]  146 	mov	r7,a
      00001A                        147 00104$:
                                    148 ;	printf_large.c:126: output_char( c, p );
      00001A E5*00            [12]  149 	mov	a,_bp
      00001C 24 F9            [12]  150 	add	a,#0xf9
      00001E F8               [12]  151 	mov	r0,a
      00001F E6               [12]  152 	mov	a,@r0
      000020 C0 E0            [24]  153 	push	acc
      000022 08               [12]  154 	inc	r0
      000023 E6               [12]  155 	mov	a,@r0
      000024 C0 E0            [24]  156 	push	acc
      000026 08               [12]  157 	inc	r0
      000027 E6               [12]  158 	mov	a,@r0
      000028 C0 E0            [24]  159 	push	acc
      00002A 12r00r2F         [24]  160 	lcall	00115$
      00002D 80 0F            [24]  161 	sjmp	00116$
      00002F                        162 00115$:
      00002F E5*00            [12]  163 	mov	a,_bp
      000031 24 FC            [12]  164 	add	a,#0xfc
      000033 F8               [12]  165 	mov	r0,a
      000034 E6               [12]  166 	mov	a,@r0
      000035 C0 E0            [24]  167 	push	acc
      000037 08               [12]  168 	inc	r0
      000038 E6               [12]  169 	mov	a,@r0
      000039 C0 E0            [24]  170 	push	acc
      00003B 8F 82            [24]  171 	mov	dpl,r7
      00003D 22               [24]  172 	ret
      00003E                        173 00116$:
      00003E 15 81            [12]  174 	dec	sp
      000040 15 81            [12]  175 	dec	sp
      000042 15 81            [12]  176 	dec	sp
      000044 D0*00            [24]  177 	pop	_bp
      000046 22               [24]  178 	ret
                                    179 ;------------------------------------------------------------
                                    180 ;Allocation info for local variables in function 'output_2digits'
                                    181 ;------------------------------------------------------------
                                    182 ;output_char               Allocated to stack - _bp -4
                                    183 ;p                         Allocated to stack - _bp -7
                                    184 ;lower_case                Allocated to registers b0 
                                    185 ;b                         Allocated to registers r7 
                                    186 ;------------------------------------------------------------
                                    187 ;	printf_large.c:149: output_2digits (unsigned char b, bool lower_case, pfn_outputchar output_char, void* p)
                                    188 ;	-----------------------------------------
                                    189 ;	 function output_2digits
                                    190 ;	-----------------------------------------
      000047                        191 _output_2digits:
      000047 C0*00            [24]  192 	push	_bp
      000049 85 81*00         [24]  193 	mov	_bp,sp
                                    194 ;	printf_large.c:151: output_digit( b>>4,   lower_case, output_char, p );
      00004C E5 82            [12]  195 	mov	a,dpl
      00004E FF               [12]  196 	mov	r7,a
      00004F C4               [12]  197 	swap	a
      000050 54 0F            [12]  198 	anl	a,#0x0F
      000052 FE               [12]  199 	mov	r6,a
      000053 C0 07            [24]  200 	push	ar7
      000055 C0*00            [24]  201 	push	bits
      000057 E5*00            [12]  202 	mov	a,_bp
      000059 24 F9            [12]  203 	add	a,#0xf9
      00005B F8               [12]  204 	mov	r0,a
      00005C E6               [12]  205 	mov	a,@r0
      00005D C0 E0            [24]  206 	push	acc
      00005F 08               [12]  207 	inc	r0
      000060 E6               [12]  208 	mov	a,@r0
      000061 C0 E0            [24]  209 	push	acc
      000063 08               [12]  210 	inc	r0
      000064 E6               [12]  211 	mov	a,@r0
      000065 C0 E0            [24]  212 	push	acc
      000067 E5*00            [12]  213 	mov	a,_bp
      000069 24 FC            [12]  214 	add	a,#0xfc
      00006B F8               [12]  215 	mov	r0,a
      00006C E6               [12]  216 	mov	a,@r0
      00006D C0 E0            [24]  217 	push	acc
      00006F 08               [12]  218 	inc	r0
      000070 E6               [12]  219 	mov	a,@r0
      000071 C0 E0            [24]  220 	push	acc
      000073 A2*00            [12]  221 	mov	c,b0
      000075 92 F0            [24]  222 	mov	b[0],c
      000077 85 F0*00         [24]  223 	mov	bits,b
      00007A 8E 82            [24]  224 	mov	dpl,r6
      00007C 12r00r00         [24]  225 	lcall	_output_digit
      00007F E5 81            [12]  226 	mov	a,sp
      000081 24 FB            [12]  227 	add	a,#0xfb
      000083 F5 81            [12]  228 	mov	sp,a
      000085 D0*00            [24]  229 	pop	bits
      000087 D0 07            [24]  230 	pop	ar7
                                    231 ;	printf_large.c:152: output_digit( b&0x0F, lower_case, output_char, p );
      000089 53 07 0F         [24]  232 	anl	ar7,#0x0F
      00008C E5*00            [12]  233 	mov	a,_bp
      00008E 24 F9            [12]  234 	add	a,#0xf9
      000090 F8               [12]  235 	mov	r0,a
      000091 E6               [12]  236 	mov	a,@r0
      000092 C0 E0            [24]  237 	push	acc
      000094 08               [12]  238 	inc	r0
      000095 E6               [12]  239 	mov	a,@r0
      000096 C0 E0            [24]  240 	push	acc
      000098 08               [12]  241 	inc	r0
      000099 E6               [12]  242 	mov	a,@r0
      00009A C0 E0            [24]  243 	push	acc
      00009C E5*00            [12]  244 	mov	a,_bp
      00009E 24 FC            [12]  245 	add	a,#0xfc
      0000A0 F8               [12]  246 	mov	r0,a
      0000A1 E6               [12]  247 	mov	a,@r0
      0000A2 C0 E0            [24]  248 	push	acc
      0000A4 08               [12]  249 	inc	r0
      0000A5 E6               [12]  250 	mov	a,@r0
      0000A6 C0 E0            [24]  251 	push	acc
      0000A8 A2*00            [12]  252 	mov	c,b0
      0000AA 92 F0            [24]  253 	mov	b[0],c
      0000AC 85 F0*00         [24]  254 	mov	bits,b
      0000AF 8F 82            [24]  255 	mov	dpl,r7
      0000B1 12r00r00         [24]  256 	lcall	_output_digit
      0000B4 E5 81            [12]  257 	mov	a,sp
      0000B6 24 FB            [12]  258 	add	a,#0xfb
      0000B8 F5 81            [12]  259 	mov	sp,a
      0000BA D0*00            [24]  260 	pop	_bp
      0000BC 22               [24]  261 	ret
                                    262 ;------------------------------------------------------------
                                    263 ;Allocation info for local variables in function 'calculate_digit'
                                    264 ;------------------------------------------------------------
                                    265 ;radix                     Allocated to stack - _bp -3
                                    266 ;value                     Allocated to registers r1 
                                    267 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    268 ;pb4                       Allocated to registers r0 
                                    269 ;i                         Allocated to registers r3 
                                    270 ;sloc0                     Allocated to stack - _bp +8
                                    271 ;------------------------------------------------------------
                                    272 ;	printf_large.c:168: calculate_digit (value_t _AUTOMEM * value, unsigned char radix)
                                    273 ;	-----------------------------------------
                                    274 ;	 function calculate_digit
                                    275 ;	-----------------------------------------
      0000BD                        276 _calculate_digit:
      0000BD C0*00            [24]  277 	push	_bp
      0000BF 85 81*00         [24]  278 	mov	_bp,sp
      0000C2 A9 82            [24]  279 	mov	r1,dpl
                                    280 ;	printf_large.c:170: unsigned long ul = value->ul;
      0000C4 87 04            [24]  281 	mov	ar4,@r1
      0000C6 09               [12]  282 	inc	r1
      0000C7 87 05            [24]  283 	mov	ar5,@r1
      0000C9 09               [12]  284 	inc	r1
      0000CA 87 06            [24]  285 	mov	ar6,@r1
      0000CC 09               [12]  286 	inc	r1
      0000CD 87 07            [24]  287 	mov	ar7,@r1
      0000CF 19               [12]  288 	dec	r1
      0000D0 19               [12]  289 	dec	r1
      0000D1 19               [12]  290 	dec	r1
                                    291 ;	printf_large.c:171: unsigned char _AUTOMEM * pb4 = &value->byte[4];
      0000D2 74 04            [12]  292 	mov	a,#0x04
      0000D4 29               [12]  293 	add	a,r1
      0000D5 F8               [12]  294 	mov	r0,a
                                    295 ;	printf_large.c:172: unsigned char i = 32;
      0000D6 7B 20            [12]  296 	mov	r3,#0x20
                                    297 ;	printf_large.c:174: do
      0000D8                        298 00103$:
                                    299 ;	printf_large.c:176: *pb4 = (*pb4 << 1) | ((ul >> 31) & 0x01);
      0000D8 C0 03            [24]  300 	push	ar3
      0000DA E6               [12]  301 	mov	a,@r0
      0000DB 26               [12]  302 	add	a,@r0
      0000DC FA               [12]  303 	mov	r2,a
      0000DD EF               [12]  304 	mov	a,r7
      0000DE 23               [12]  305 	rl	a
      0000DF 54 01            [12]  306 	anl	a,#0x01
      0000E1 FB               [12]  307 	mov	r3,a
      0000E2 EA               [12]  308 	mov	a,r2
      0000E3 42 03            [12]  309 	orl	ar3,a
      0000E5 A6 03            [24]  310 	mov	@r0,ar3
                                    311 ;	printf_large.c:177: ul <<= 1;
      0000E7 EC               [12]  312 	mov	a,r4
      0000E8 2C               [12]  313 	add	a,r4
      0000E9 FC               [12]  314 	mov	r4,a
      0000EA ED               [12]  315 	mov	a,r5
      0000EB 33               [12]  316 	rlc	a
      0000EC FD               [12]  317 	mov	r5,a
      0000ED EE               [12]  318 	mov	a,r6
      0000EE 33               [12]  319 	rlc	a
      0000EF FE               [12]  320 	mov	r6,a
      0000F0 EF               [12]  321 	mov	a,r7
      0000F1 33               [12]  322 	rlc	a
      0000F2 FF               [12]  323 	mov	r7,a
                                    324 ;	printf_large.c:179: if (radix <= *pb4 )
      0000F3 86 02            [24]  325 	mov	ar2,@r0
      0000F5 C0 00            [24]  326 	push	ar0
      0000F7 E5*00            [12]  327 	mov	a,_bp
      0000F9 24 FD            [12]  328 	add	a,#0xfd
      0000FB F8               [12]  329 	mov	r0,a
      0000FC C3               [12]  330 	clr	c
      0000FD EA               [12]  331 	mov	a,r2
      0000FE 96               [12]  332 	subb	a,@r0
      0000FF D0 00            [24]  333 	pop	ar0
      000101 D0 03            [24]  334 	pop	ar3
      000103 40 12            [24]  335 	jc	00104$
                                    336 ;	printf_large.c:181: *pb4 -= radix;
      000105 C0 00            [24]  337 	push	ar0
      000107 E5*00            [12]  338 	mov	a,_bp
      000109 24 FD            [12]  339 	add	a,#0xfd
      00010B F8               [12]  340 	mov	r0,a
      00010C EA               [12]  341 	mov	a,r2
      00010D C3               [12]  342 	clr	c
      00010E 96               [12]  343 	subb	a,@r0
      00010F FA               [12]  344 	mov	r2,a
      000110 D0 00            [24]  345 	pop	ar0
      000112 A6 02            [24]  346 	mov	@r0,ar2
                                    347 ;	printf_large.c:182: ul |= 1;
      000114 43 04 01         [24]  348 	orl	ar4,#0x01
      000117                        349 00104$:
                                    350 ;	printf_large.c:184: } while (--i);
      000117 EB               [12]  351 	mov	a,r3
      000118 14               [12]  352 	dec	a
      000119 FA               [12]  353 	mov	r2,a
      00011A FB               [12]  354 	mov	r3,a
      00011B 70 BB            [24]  355 	jnz	00103$
                                    356 ;	printf_large.c:185: value->ul = ul;
      00011D A7 04            [24]  357 	mov	@r1,ar4
      00011F 09               [12]  358 	inc	r1
      000120 A7 05            [24]  359 	mov	@r1,ar5
      000122 09               [12]  360 	inc	r1
      000123 A7 06            [24]  361 	mov	@r1,ar6
      000125 09               [12]  362 	inc	r1
      000126 A7 07            [24]  363 	mov	@r1,ar7
      000128 D0*00            [24]  364 	pop	_bp
      00012A 22               [24]  365 	ret
                                    366 ;------------------------------------------------------------
                                    367 ;Allocation info for local variables in function '_print_format'
                                    368 ;------------------------------------------------------------
                                    369 ;pvoid                     Allocated to stack - _bp -5
                                    370 ;format                    Allocated to stack - _bp -8
                                    371 ;ap                        Allocated to stack - _bp -9
                                    372 ;pfn                       Allocated to stack - _bp +2
                                    373 ;left_justify              Allocated to registers b0 
                                    374 ;zero_padding              Allocated to registers b1 
                                    375 ;prefix_sign               Allocated to registers b2 
                                    376 ;prefix_space              Allocated to registers b3 
                                    377 ;signed_argument           Allocated to registers b4 
                                    378 ;char_argument             Allocated to registers b5 
                                    379 ;long_argument             Allocated to registers b6 
                                    380 ;float_argument            Allocated to registers b7 
                                    381 ;lower_case                Allocated to stack - _bp +16
                                    382 ;value                     Allocated to stack - _bp +17
                                    383 ;charsOutputted            Allocated to stack - _bp +11
                                    384 ;lsd                       Allocated to registers b5 
                                    385 ;radix                     Allocated to stack - _bp +22
                                    386 ;width                     Allocated to stack - _bp +23
                                    387 ;decimals                  Allocated to registers r4 
                                    388 ;length                    Allocated to stack - _bp +24
                                    389 ;c                         Allocated to registers r5 
                                    390 ;memtype                   Allocated to registers r7 
                                    391 ;store                     Allocated to stack - _bp +25
                                    392 ;pstore                    Allocated to registers r3 
                                    393 ;sloc0                     Allocated to stack - _bp +4
                                    394 ;sloc1                     Allocated to stack - _bp +5
                                    395 ;sloc2                     Allocated to stack - _bp +1
                                    396 ;sloc3                     Allocated to stack - _bp +8
                                    397 ;sloc4                     Allocated to stack - _bp +9
                                    398 ;sloc5                     Allocated to stack - _bp +11
                                    399 ;sloc6                     Allocated to stack - _bp +13
                                    400 ;------------------------------------------------------------
                                    401 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    402 ;	-----------------------------------------
                                    403 ;	 function _print_format
                                    404 ;	-----------------------------------------
      00012B                        405 __print_format:
      00012B C0*00            [24]  406 	push	_bp
      00012D E5 81            [12]  407 	mov	a,sp
      00012F F5*00            [12]  408 	mov	_bp,a
      000131 24 1E            [12]  409 	add	a,#0x1E
      000133 F5 81            [12]  410 	mov	sp,a
      000135 A8*00            [24]  411 	mov	r0,_bp
      000137 08               [12]  412 	inc	r0
      000138 08               [12]  413 	inc	r0
      000139 A6 82            [24]  414 	mov	@r0,dpl
      00013B 08               [12]  415 	inc	r0
      00013C A6 83            [24]  416 	mov	@r0,dph
                                    417 ;	printf_large.c:466: charsOutputted = 0;
      00013E E5*00            [12]  418 	mov	a,_bp
      000140 24 0B            [12]  419 	add	a,#0x0b
      000142 F8               [12]  420 	mov	r0,a
      000143 E4               [12]  421 	clr	a
      000144 F6               [12]  422 	mov	@r0,a
      000145 08               [12]  423 	inc	r0
      000146 F6               [12]  424 	mov	@r0,a
                                    425 ;	printf_large.c:475: while( c=*format++ )
      000147 E5*00            [12]  426 	mov	a,_bp
      000149 24 04            [12]  427 	add	a,#0x04
      00014B F8               [12]  428 	mov	r0,a
      00014C E5*00            [12]  429 	mov	a,_bp
      00014E 24 11            [12]  430 	add	a,#0x11
      000150 F6               [12]  431 	mov	@r0,a
      000151 E5*00            [12]  432 	mov	a,_bp
      000153 24 19            [12]  433 	add	a,#0x19
      000155 C8               [12]  434 	xch	a,r0
      000156 E5*00            [12]  435 	mov	a,_bp
      000158 24 08            [12]  436 	add	a,#0x08
      00015A C8               [12]  437 	xch	a,r0
      00015B 24 05            [12]  438 	add	a,#0x05
      00015D F6               [12]  439 	mov	@r0,a
      00015E E5*00            [12]  440 	mov	a,_bp
      000160 24 11            [12]  441 	add	a,#0x11
      000162 F8               [12]  442 	mov	r0,a
      000163 24 04            [12]  443 	add	a,#0x04
      000165 FA               [12]  444 	mov	r2,a
      000166                        445 00243$:
      000166 E5*00            [12]  446 	mov	a,_bp
      000168 24 F8            [12]  447 	add	a,#0xf8
      00016A F9               [12]  448 	mov	r1,a
      00016B 87 06            [24]  449 	mov	ar6,@r1
      00016D 09               [12]  450 	inc	r1
      00016E 87 05            [24]  451 	mov	ar5,@r1
      000170 09               [12]  452 	inc	r1
      000171 87 04            [24]  453 	mov	ar4,@r1
      000173 8E 82            [24]  454 	mov	dpl,r6
      000175 8D 83            [24]  455 	mov	dph,r5
      000177 8C F0            [24]  456 	mov	b,r4
      000179 12r00r00         [24]  457 	lcall	__gptrget
      00017C FF               [12]  458 	mov	r7,a
      00017D E5*00            [12]  459 	mov	a,_bp
      00017F 24 F8            [12]  460 	add	a,#0xf8
      000181 F9               [12]  461 	mov	r1,a
      000182 74 01            [12]  462 	mov	a,#0x01
      000184 2E               [12]  463 	add	a,r6
      000185 F7               [12]  464 	mov	@r1,a
      000186 E4               [12]  465 	clr	a
      000187 3D               [12]  466 	addc	a,r5
      000188 09               [12]  467 	inc	r1
      000189 F7               [12]  468 	mov	@r1,a
      00018A 09               [12]  469 	inc	r1
      00018B A7 04            [24]  470 	mov	@r1,ar4
      00018D EF               [12]  471 	mov	a,r7
      00018E FD               [12]  472 	mov	r5,a
      00018F 70 03            [24]  473 	jnz	00500$
      000191 02r0Fr4E         [24]  474 	ljmp	00245$
      000194                        475 00500$:
                                    476 ;	printf_large.c:477: if ( c=='%' )
      000194 BD 25 02         [24]  477 	cjne	r5,#0x25,00501$
      000197 80 03            [24]  478 	sjmp	00502$
      000199                        479 00501$:
      000199 02r0Fr0F         [24]  480 	ljmp	00241$
      00019C                        481 00502$:
                                    482 ;	printf_large.c:479: left_justify    = 0;
      00019C C2*00            [12]  483 	clr	b0
                                    484 ;	printf_large.c:480: zero_padding    = 0;
      00019E C2*00            [12]  485 	clr	b1
                                    486 ;	printf_large.c:481: prefix_sign     = 0;
      0001A0 C2*00            [12]  487 	clr	b2
                                    488 ;	printf_large.c:482: prefix_space    = 0;
      0001A2 C2*00            [12]  489 	clr	b3
                                    490 ;	printf_large.c:483: signed_argument = 0;
      0001A4 C2*00            [12]  491 	clr	b4
                                    492 ;	printf_large.c:484: char_argument   = 0;
      0001A6 C2*00            [12]  493 	clr	b5
                                    494 ;	printf_large.c:485: long_argument   = 0;
      0001A8 C2*00            [12]  495 	clr	b6
                                    496 ;	printf_large.c:486: float_argument  = 0;
      0001AA C2*00            [12]  497 	clr	b7
                                    498 ;	printf_large.c:487: radix           = 0;
      0001AC E5*00            [12]  499 	mov	a,_bp
      0001AE 24 16            [12]  500 	add	a,#0x16
      0001B0 F9               [12]  501 	mov	r1,a
      0001B1 77 00            [12]  502 	mov	@r1,#0x00
                                    503 ;	printf_large.c:488: width           = 0;
      0001B3 E5*00            [12]  504 	mov	a,_bp
      0001B5 24 17            [12]  505 	add	a,#0x17
      0001B7 F9               [12]  506 	mov	r1,a
      0001B8 77 00            [12]  507 	mov	@r1,#0x00
                                    508 ;	printf_large.c:489: decimals        = -1;
      0001BA 7C FF            [12]  509 	mov	r4,#0xFF
                                    510 ;	printf_large.c:491: get_conversion_spec:
      0001BC E5*00            [12]  511 	mov	a,_bp
      0001BE 24 F8            [12]  512 	add	a,#0xf8
      0001C0 F9               [12]  513 	mov	r1,a
      0001C1 C0 00            [24]  514 	push	ar0
      0001C3 E5*00            [12]  515 	mov	a,_bp
      0001C5 24 05            [12]  516 	add	a,#0x05
      0001C7 F8               [12]  517 	mov	r0,a
      0001C8 E7               [12]  518 	mov	a,@r1
      0001C9 F6               [12]  519 	mov	@r0,a
      0001CA 09               [12]  520 	inc	r1
      0001CB 08               [12]  521 	inc	r0
      0001CC E7               [12]  522 	mov	a,@r1
      0001CD F6               [12]  523 	mov	@r0,a
      0001CE 09               [12]  524 	inc	r1
      0001CF 08               [12]  525 	inc	r0
      0001D0 E7               [12]  526 	mov	a,@r1
      0001D1 F6               [12]  527 	mov	@r0,a
      0001D2 D0 00            [24]  528 	pop	ar0
      0001D4                        529 00101$:
                                    530 ;	printf_large.c:493: c = *format++;
      0001D4 E5*00            [12]  531 	mov	a,_bp
      0001D6 24 05            [12]  532 	add	a,#0x05
      0001D8 F9               [12]  533 	mov	r1,a
      0001D9 87 82            [24]  534 	mov	dpl,@r1
      0001DB 09               [12]  535 	inc	r1
      0001DC 87 83            [24]  536 	mov	dph,@r1
      0001DE 09               [12]  537 	inc	r1
      0001DF 87 F0            [24]  538 	mov	b,@r1
      0001E1 12r00r00         [24]  539 	lcall	__gptrget
      0001E4 FD               [12]  540 	mov	r5,a
      0001E5 A3               [24]  541 	inc	dptr
      0001E6 19               [12]  542 	dec	r1
      0001E7 19               [12]  543 	dec	r1
      0001E8 A7 82            [24]  544 	mov	@r1,dpl
      0001EA 09               [12]  545 	inc	r1
      0001EB A7 83            [24]  546 	mov	@r1,dph
      0001ED E5*00            [12]  547 	mov	a,_bp
      0001EF 24 05            [12]  548 	add	a,#0x05
      0001F1 F9               [12]  549 	mov	r1,a
      0001F2 C0 00            [24]  550 	push	ar0
      0001F4 E5*00            [12]  551 	mov	a,_bp
      0001F6 24 F8            [12]  552 	add	a,#0xf8
      0001F8 F8               [12]  553 	mov	r0,a
      0001F9 E7               [12]  554 	mov	a,@r1
      0001FA F6               [12]  555 	mov	@r0,a
      0001FB 09               [12]  556 	inc	r1
      0001FC 08               [12]  557 	inc	r0
      0001FD E7               [12]  558 	mov	a,@r1
      0001FE F6               [12]  559 	mov	@r0,a
      0001FF 09               [12]  560 	inc	r1
      000200 08               [12]  561 	inc	r0
      000201 E7               [12]  562 	mov	a,@r1
      000202 F6               [12]  563 	mov	@r0,a
      000203 D0 00            [24]  564 	pop	ar0
                                    565 ;	printf_large.c:495: if (c=='%')
      000205 BD 25 3F         [24]  566 	cjne	r5,#0x25,00103$
                                    567 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000208 C0 02            [24]  568 	push	ar2
      00020A C0 00            [24]  569 	push	ar0
      00020C E5*00            [12]  570 	mov	a,_bp
      00020E 24 FB            [12]  571 	add	a,#0xfb
      000210 F9               [12]  572 	mov	r1,a
      000211 E7               [12]  573 	mov	a,@r1
      000212 C0 E0            [24]  574 	push	acc
      000214 09               [12]  575 	inc	r1
      000215 E7               [12]  576 	mov	a,@r1
      000216 C0 E0            [24]  577 	push	acc
      000218 09               [12]  578 	inc	r1
      000219 E7               [12]  579 	mov	a,@r1
      00021A C0 E0            [24]  580 	push	acc
      00021C 12r02r21         [24]  581 	lcall	00505$
      00021F 80 0E            [24]  582 	sjmp	00506$
      000221                        583 00505$:
      000221 A9*00            [24]  584 	mov	r1,_bp
      000223 09               [12]  585 	inc	r1
      000224 09               [12]  586 	inc	r1
      000225 E7               [12]  587 	mov	a,@r1
      000226 C0 E0            [24]  588 	push	acc
      000228 09               [12]  589 	inc	r1
      000229 E7               [12]  590 	mov	a,@r1
      00022A C0 E0            [24]  591 	push	acc
      00022C 8D 82            [24]  592 	mov	dpl,r5
      00022E 22               [24]  593 	ret
      00022F                        594 00506$:
      00022F 15 81            [12]  595 	dec	sp
      000231 15 81            [12]  596 	dec	sp
      000233 15 81            [12]  597 	dec	sp
      000235 D0 00            [24]  598 	pop	ar0
      000237 D0 02            [24]  599 	pop	ar2
      000239 E5*00            [12]  600 	mov	a,_bp
      00023B 24 0B            [12]  601 	add	a,#0x0b
      00023D F9               [12]  602 	mov	r1,a
      00023E 07               [12]  603 	inc	@r1
      00023F B7 00 02         [24]  604 	cjne	@r1,#0x00,00507$
      000242 09               [12]  605 	inc	r1
      000243 07               [12]  606 	inc	@r1
      000244                        607 00507$:
                                    608 ;	printf_large.c:498: continue;
      000244 02r01r66         [24]  609 	ljmp	00243$
      000247                        610 00103$:
                                    611 ;	printf_large.c:501: if (isdigit(c))
      000247 8D 07            [24]  612 	mov	ar7,r5
      000249 BF 30 00         [24]  613 	cjne	r7,#0x30,00508$
      00024C                        614 00508$:
      00024C 40 3A            [24]  615 	jc	00110$
      00024E EF               [12]  616 	mov	a,r7
      00024F 24 C6            [12]  617 	add	a,#0xff - 0x39
      000251 40 35            [24]  618 	jc	00110$
                                    619 ;	printf_large.c:503: if (decimals==-1)
      000253 BC FF 25         [24]  620 	cjne	r4,#0xFF,00107$
                                    621 ;	printf_large.c:505: width = 10*width + c - '0';
      000256 E5*00            [12]  622 	mov	a,_bp
      000258 24 17            [12]  623 	add	a,#0x17
      00025A F9               [12]  624 	mov	r1,a
      00025B E7               [12]  625 	mov	a,@r1
      00025C 75 F0 0A         [24]  626 	mov	b,#0x0A
      00025F A4               [48]  627 	mul	ab
      000260 2D               [12]  628 	add	a,r5
      000261 FB               [12]  629 	mov	r3,a
      000262 E5*00            [12]  630 	mov	a,_bp
      000264 24 17            [12]  631 	add	a,#0x17
      000266 F9               [12]  632 	mov	r1,a
      000267 EB               [12]  633 	mov	a,r3
      000268 24 D0            [12]  634 	add	a,#0xD0
      00026A F7               [12]  635 	mov	@r1,a
                                    636 ;	printf_large.c:506: if (width == 0)
      00026B E5*00            [12]  637 	mov	a,_bp
      00026D 24 17            [12]  638 	add	a,#0x17
      00026F F9               [12]  639 	mov	r1,a
      000270 E7               [12]  640 	mov	a,@r1
      000271 60 03            [24]  641 	jz	00513$
      000273 02r01rD4         [24]  642 	ljmp	00101$
      000276                        643 00513$:
                                    644 ;	printf_large.c:509: zero_padding = 1;
      000276 D2*00            [12]  645 	setb	b1
      000278 02r01rD4         [24]  646 	ljmp	00101$
      00027B                        647 00107$:
                                    648 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      00027B EC               [12]  649 	mov	a,r4
      00027C 75 F0 0A         [24]  650 	mov	b,#0x0A
      00027F A4               [48]  651 	mul	ab
      000280 2D               [12]  652 	add	a,r5
      000281 FB               [12]  653 	mov	r3,a
      000282 24 D0            [12]  654 	add	a,#0xD0
      000284 FC               [12]  655 	mov	r4,a
                                    656 ;	printf_large.c:516: goto get_conversion_spec;
      000285 02r01rD4         [24]  657 	ljmp	00101$
      000288                        658 00110$:
                                    659 ;	printf_large.c:519: if (c=='.')
      000288 BD 2E 0D         [24]  660 	cjne	r5,#0x2E,00115$
                                    661 ;	printf_large.c:521: if (decimals==-1)
      00028B BC FF 02         [24]  662 	cjne	r4,#0xFF,00516$
      00028E 80 03            [24]  663 	sjmp	00517$
      000290                        664 00516$:
      000290 02r01rD4         [24]  665 	ljmp	00101$
      000293                        666 00517$:
                                    667 ;	printf_large.c:522: decimals=0;
      000293 7C 00            [12]  668 	mov	r4,#0x00
                                    669 ;	printf_large.c:525: goto get_conversion_spec;
      000295 02r01rD4         [24]  670 	ljmp	00101$
      000298                        671 00115$:
                                    672 ;	printf_large.c:528: if (islower(c))
      000298 8D 07            [24]  673 	mov	ar7,r5
      00029A BF 61 00         [24]  674 	cjne	r7,#0x61,00518$
      00029D                        675 00518$:
      00029D 40 11            [24]  676 	jc	00117$
      00029F EF               [12]  677 	mov	a,r7
      0002A0 24 85            [12]  678 	add	a,#0xff - 0x7A
      0002A2 40 0C            [24]  679 	jc	00117$
                                    680 ;	printf_large.c:530: c = toupper(c);
      0002A4 53 05 DF         [24]  681 	anl	ar5,#0xDF
                                    682 ;	printf_large.c:531: lower_case = 1;
      0002A7 E5*00            [12]  683 	mov	a,_bp
      0002A9 24 10            [12]  684 	add	a,#0x10
      0002AB F9               [12]  685 	mov	r1,a
      0002AC 77 01            [12]  686 	mov	@r1,#0x01
      0002AE 80 07            [24]  687 	sjmp	00118$
      0002B0                        688 00117$:
                                    689 ;	printf_large.c:534: lower_case = 0;
      0002B0 E5*00            [12]  690 	mov	a,_bp
      0002B2 24 10            [12]  691 	add	a,#0x10
      0002B4 F9               [12]  692 	mov	r1,a
      0002B5 77 00            [12]  693 	mov	@r1,#0x00
      0002B7                        694 00118$:
                                    695 ;	printf_large.c:536: switch( c )
      0002B7 BD 20 02         [24]  696 	cjne	r5,#0x20,00521$
      0002BA 80 6E            [24]  697 	sjmp	00122$
      0002BC                        698 00521$:
      0002BC BD 2B 02         [24]  699 	cjne	r5,#0x2B,00522$
      0002BF 80 64            [24]  700 	sjmp	00121$
      0002C1                        701 00522$:
      0002C1 BD 2D 02         [24]  702 	cjne	r5,#0x2D,00523$
      0002C4 80 5A            [24]  703 	sjmp	00120$
      0002C6                        704 00523$:
      0002C6 BD 42 02         [24]  705 	cjne	r5,#0x42,00524$
      0002C9 80 64            [24]  706 	sjmp	00123$
      0002CB                        707 00524$:
      0002CB BD 43 02         [24]  708 	cjne	r5,#0x43,00525$
      0002CE 80 69            [24]  709 	sjmp	00129$
      0002D0                        710 00525$:
      0002D0 BD 44 03         [24]  711 	cjne	r5,#0x44,00526$
      0002D3 02r08r48         [24]  712 	ljmp	00166$
      0002D6                        713 00526$:
      0002D6 BD 46 03         [24]  714 	cjne	r5,#0x46,00527$
      0002D9 02r08r6E         [24]  715 	ljmp	00170$
      0002DC                        716 00527$:
      0002DC BD 48 03         [24]  717 	cjne	r5,#0x48,00528$
      0002DF 02r01rD4         [24]  718 	ljmp	00101$
      0002E2                        719 00528$:
      0002E2 BD 49 03         [24]  720 	cjne	r5,#0x49,00529$
      0002E5 02r08r48         [24]  721 	ljmp	00166$
      0002E8                        722 00529$:
      0002E8 BD 4A 03         [24]  723 	cjne	r5,#0x4A,00530$
      0002EB 02r01rD4         [24]  724 	ljmp	00101$
      0002EE                        725 00530$:
      0002EE BD 4C 02         [24]  726 	cjne	r5,#0x4C,00531$
      0002F1 80 41            [24]  727 	sjmp	00128$
      0002F3                        728 00531$:
      0002F3 BD 4F 03         [24]  729 	cjne	r5,#0x4F,00532$
      0002F6 02r08r53         [24]  730 	ljmp	00167$
      0002F9                        731 00532$:
      0002F9 BD 50 03         [24]  732 	cjne	r5,#0x50,00533$
      0002FC 02r06r1E         [24]  733 	ljmp	00152$
      0002FF                        734 00533$:
      0002FF BD 53 03         [24]  735 	cjne	r5,#0x53,00534$
      000302 02r03rAE         [24]  736 	ljmp	00133$
      000305                        737 00534$:
      000305 BD 54 03         [24]  738 	cjne	r5,#0x54,00535$
      000308 02r01rD4         [24]  739 	ljmp	00101$
      00030B                        740 00535$:
      00030B BD 55 03         [24]  741 	cjne	r5,#0x55,00536$
      00030E 02r08r5C         [24]  742 	ljmp	00168$
      000311                        743 00536$:
      000311 BD 58 03         [24]  744 	cjne	r5,#0x58,00537$
      000314 02r08r65         [24]  745 	ljmp	00169$
      000317                        746 00537$:
      000317 BD 5A 03         [24]  747 	cjne	r5,#0x5A,00538$
      00031A 02r01rD4         [24]  748 	ljmp	00101$
      00031D                        749 00538$:
      00031D 02r08r72         [24]  750 	ljmp	00171$
                                    751 ;	printf_large.c:538: case '-':
      000320                        752 00120$:
                                    753 ;	printf_large.c:539: left_justify = 1;
      000320 D2*00            [12]  754 	setb	b0
                                    755 ;	printf_large.c:540: goto get_conversion_spec;
      000322 02r01rD4         [24]  756 	ljmp	00101$
                                    757 ;	printf_large.c:541: case '+':
      000325                        758 00121$:
                                    759 ;	printf_large.c:542: prefix_sign = 1;
      000325 D2*00            [12]  760 	setb	b2
                                    761 ;	printf_large.c:543: goto get_conversion_spec;
      000327 02r01rD4         [24]  762 	ljmp	00101$
                                    763 ;	printf_large.c:544: case ' ':
      00032A                        764 00122$:
                                    765 ;	printf_large.c:545: prefix_space = 1;
      00032A D2*00            [12]  766 	setb	b3
                                    767 ;	printf_large.c:546: goto get_conversion_spec;
      00032C 02r01rD4         [24]  768 	ljmp	00101$
                                    769 ;	printf_large.c:547: case 'B': /* byte */
      00032F                        770 00123$:
                                    771 ;	printf_large.c:548: char_argument = 1;
      00032F D2*00            [12]  772 	setb	b5
                                    773 ;	printf_large.c:549: goto get_conversion_spec;
      000331 02r01rD4         [24]  774 	ljmp	00101$
                                    775 ;	printf_large.c:556: case 'L': /* long */
      000334                        776 00128$:
                                    777 ;	printf_large.c:557: long_argument = 1;
      000334 D2*00            [12]  778 	setb	b6
                                    779 ;	printf_large.c:558: goto get_conversion_spec;
      000336 02r01rD4         [24]  780 	ljmp	00101$
                                    781 ;	printf_large.c:560: case 'C':
      000339                        782 00129$:
                                    783 ;	printf_large.c:561: if( char_argument )
      000339 30*00 15         [24]  784 	jnb	b5,00131$
                                    785 ;	printf_large.c:562: c = va_arg(ap,char);
      00033C E5*00            [12]  786 	mov	a,_bp
      00033E 24 F7            [12]  787 	add	a,#0xf7
      000340 F9               [12]  788 	mov	r1,a
      000341 E7               [12]  789 	mov	a,@r1
      000342 14               [12]  790 	dec	a
      000343 FB               [12]  791 	mov	r3,a
      000344 E5*00            [12]  792 	mov	a,_bp
      000346 24 F7            [12]  793 	add	a,#0xf7
      000348 F9               [12]  794 	mov	r1,a
      000349 A7 03            [24]  795 	mov	@r1,ar3
      00034B 8B 01            [24]  796 	mov	ar1,r3
      00034D 87 05            [24]  797 	mov	ar5,@r1
      00034F 80 1A            [24]  798 	sjmp	00132$
      000351                        799 00131$:
                                    800 ;	printf_large.c:564: c = va_arg(ap,int);
      000351 E5*00            [12]  801 	mov	a,_bp
      000353 24 F7            [12]  802 	add	a,#0xf7
      000355 F9               [12]  803 	mov	r1,a
      000356 E7               [12]  804 	mov	a,@r1
      000357 24 FE            [12]  805 	add	a,#0xFE
      000359 FB               [12]  806 	mov	r3,a
      00035A E5*00            [12]  807 	mov	a,_bp
      00035C 24 F7            [12]  808 	add	a,#0xf7
      00035E F9               [12]  809 	mov	r1,a
      00035F A7 03            [24]  810 	mov	@r1,ar3
      000361 8B 01            [24]  811 	mov	ar1,r3
      000363 87 03            [24]  812 	mov	ar3,@r1
      000365 09               [12]  813 	inc	r1
      000366 87 06            [24]  814 	mov	ar6,@r1
      000368 19               [12]  815 	dec	r1
      000369 8B 05            [24]  816 	mov	ar5,r3
                                    817 ;	printf_large.c:872: return charsOutputted;
                                    818 ;	printf_large.c:564: c = va_arg(ap,int);
      00036B                        819 00132$:
                                    820 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      00036B C0 02            [24]  821 	push	ar2
      00036D C0 00            [24]  822 	push	ar0
      00036F C0*00            [24]  823 	push	bits
      000371 E5*00            [12]  824 	mov	a,_bp
      000373 24 FB            [12]  825 	add	a,#0xfb
      000375 F9               [12]  826 	mov	r1,a
      000376 E7               [12]  827 	mov	a,@r1
      000377 C0 E0            [24]  828 	push	acc
      000379 09               [12]  829 	inc	r1
      00037A E7               [12]  830 	mov	a,@r1
      00037B C0 E0            [24]  831 	push	acc
      00037D 09               [12]  832 	inc	r1
      00037E E7               [12]  833 	mov	a,@r1
      00037F C0 E0            [24]  834 	push	acc
      000381 12r03r86         [24]  835 	lcall	00540$
      000384 80 0E            [24]  836 	sjmp	00541$
      000386                        837 00540$:
      000386 A9*00            [24]  838 	mov	r1,_bp
      000388 09               [12]  839 	inc	r1
      000389 09               [12]  840 	inc	r1
      00038A E7               [12]  841 	mov	a,@r1
      00038B C0 E0            [24]  842 	push	acc
      00038D 09               [12]  843 	inc	r1
      00038E E7               [12]  844 	mov	a,@r1
      00038F C0 E0            [24]  845 	push	acc
      000391 8D 82            [24]  846 	mov	dpl,r5
      000393 22               [24]  847 	ret
      000394                        848 00541$:
      000394 15 81            [12]  849 	dec	sp
      000396 15 81            [12]  850 	dec	sp
      000398 15 81            [12]  851 	dec	sp
      00039A D0*00            [24]  852 	pop	bits
      00039C D0 00            [24]  853 	pop	ar0
      00039E D0 02            [24]  854 	pop	ar2
      0003A0 E5*00            [12]  855 	mov	a,_bp
      0003A2 24 0B            [12]  856 	add	a,#0x0b
      0003A4 F9               [12]  857 	mov	r1,a
      0003A5 07               [12]  858 	inc	@r1
      0003A6 B7 00 02         [24]  859 	cjne	@r1,#0x00,00542$
      0003A9 09               [12]  860 	inc	r1
      0003AA 07               [12]  861 	inc	@r1
      0003AB                        862 00542$:
                                    863 ;	printf_large.c:566: break;
      0003AB 02r08rC5         [24]  864 	ljmp	00172$
                                    865 ;	printf_large.c:568: case 'S':
      0003AE                        866 00133$:
                                    867 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      0003AE E5*00            [12]  868 	mov	a,_bp
      0003B0 24 11            [12]  869 	add	a,#0x11
      0003B2 F9               [12]  870 	mov	r1,a
      0003B3 C0 00            [24]  871 	push	ar0
      0003B5 E5*00            [12]  872 	mov	a,_bp
      0003B7 24 F7            [12]  873 	add	a,#0xf7
      0003B9 F8               [12]  874 	mov	r0,a
      0003BA E6               [12]  875 	mov	a,@r0
      0003BB 24 FD            [12]  876 	add	a,#0xFD
      0003BD FE               [12]  877 	mov	r6,a
      0003BE E5*00            [12]  878 	mov	a,_bp
      0003C0 24 F7            [12]  879 	add	a,#0xf7
      0003C2 F8               [12]  880 	mov	r0,a
      0003C3 A6 06            [24]  881 	mov	@r0,ar6
      0003C5 A8 06            [24]  882 	mov	r0,ar6
      0003C7 86 03            [24]  883 	mov	ar3,@r0
      0003C9 08               [12]  884 	inc	r0
      0003CA 86 06            [24]  885 	mov	ar6,@r0
      0003CC 08               [12]  886 	inc	r0
      0003CD 86 07            [24]  887 	mov	ar7,@r0
      0003CF D0 00            [24]  888 	pop	ar0
      0003D1 A7 03            [24]  889 	mov	@r1,ar3
      0003D3 09               [12]  890 	inc	r1
      0003D4 A7 06            [24]  891 	mov	@r1,ar6
      0003D6 09               [12]  892 	inc	r1
      0003D7 A7 07            [24]  893 	mov	@r1,ar7
      0003D9 19               [12]  894 	dec	r1
      0003DA 19               [12]  895 	dec	r1
                                    896 ;	printf_large.c:582: length = strlen(PTR);
      0003DB 8B 82            [24]  897 	mov	dpl,r3
      0003DD 8E 83            [24]  898 	mov	dph,r6
      0003DF 8F F0            [24]  899 	mov	b,r7
      0003E1 C0 04            [24]  900 	push	ar4
      0003E3 C0 02            [24]  901 	push	ar2
      0003E5 C0 01            [24]  902 	push	ar1
      0003E7 C0 00            [24]  903 	push	ar0
      0003E9 C0*00            [24]  904 	push	bits
      0003EB 12r00r00         [24]  905 	lcall	_strlen
      0003EE AE 82            [24]  906 	mov	r6,dpl
      0003F0 AF 83            [24]  907 	mov	r7,dph
      0003F2 D0*00            [24]  908 	pop	bits
      0003F4 D0 00            [24]  909 	pop	ar0
      0003F6 D0 01            [24]  910 	pop	ar1
      0003F8 D0 02            [24]  911 	pop	ar2
      0003FA D0 04            [24]  912 	pop	ar4
      0003FC C0 00            [24]  913 	push	ar0
      0003FE A8*00            [24]  914 	mov	r0,_bp
      000400 08               [12]  915 	inc	r0
      000401 A6 06            [24]  916 	mov	@r0,ar6
      000403 D0 00            [24]  917 	pop	ar0
                                    918 ;	printf_large.c:584: if ( decimals == -1 )
      000405 BC FF 09         [24]  919 	cjne	r4,#0xFF,00135$
                                    920 ;	printf_large.c:586: decimals = length;
      000408 C0 00            [24]  921 	push	ar0
      00040A A8*00            [24]  922 	mov	r0,_bp
      00040C 08               [12]  923 	inc	r0
      00040D 86 04            [24]  924 	mov	ar4,@r0
      00040F D0 00            [24]  925 	pop	ar0
      000411                        926 00135$:
                                    927 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000411 30*00 03         [24]  928 	jnb	b0,00545$
      000414 02r04rC8         [24]  929 	ljmp	00289$
      000417                        930 00545$:
      000417 C0 00            [24]  931 	push	ar0
      000419 A8*00            [24]  932 	mov	r0,_bp
      00041B 08               [12]  933 	inc	r0
      00041C C0 01            [24]  934 	push	ar1
      00041E E5*00            [12]  935 	mov	a,_bp
      000420 24 17            [12]  936 	add	a,#0x17
      000422 F9               [12]  937 	mov	r1,a
      000423 C3               [12]  938 	clr	c
      000424 E6               [12]  939 	mov	a,@r0
      000425 97               [12]  940 	subb	a,@r1
      000426 D0 01            [24]  941 	pop	ar1
      000428 D0 00            [24]  942 	pop	ar0
      00042A 40 03            [24]  943 	jc	00546$
      00042C 02r04rC8         [24]  944 	ljmp	00289$
      00042F                        945 00546$:
                                    946 ;	printf_large.c:590: width -= length;
      00042F C0 00            [24]  947 	push	ar0
      000431 E5*00            [12]  948 	mov	a,_bp
      000433 24 17            [12]  949 	add	a,#0x17
      000435 F8               [12]  950 	mov	r0,a
      000436 C0 01            [24]  951 	push	ar1
      000438 A9*00            [24]  952 	mov	r1,_bp
      00043A 09               [12]  953 	inc	r1
      00043B E6               [12]  954 	mov	a,@r0
      00043C C3               [12]  955 	clr	c
      00043D 97               [12]  956 	subb	a,@r1
      00043E F6               [12]  957 	mov	@r0,a
      00043F D0 01            [24]  958 	pop	ar1
                                    959 ;	printf_large.c:591: while( width-- != 0 )
      000441 E5*00            [12]  960 	mov	a,_bp
      000443 24 0B            [12]  961 	add	a,#0x0b
      000445 F8               [12]  962 	mov	r0,a
      000446 86 06            [24]  963 	mov	ar6,@r0
      000448 08               [12]  964 	inc	r0
      000449 86 07            [24]  965 	mov	ar7,@r0
      00044B E5*00            [12]  966 	mov	a,_bp
      00044D 24 17            [12]  967 	add	a,#0x17
      00044F F8               [12]  968 	mov	r0,a
      000450 86 05            [24]  969 	mov	ar5,@r0
      000452 D0 00            [24]  970 	pop	ar0
      000454                        971 00136$:
      000454 8D 03            [24]  972 	mov	ar3,r5
      000456 1D               [12]  973 	dec	r5
      000457 EB               [12]  974 	mov	a,r3
      000458 60 59            [24]  975 	jz	00329$
                                    976 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      00045A C0 07            [24]  977 	push	ar7
      00045C C0 06            [24]  978 	push	ar6
      00045E C0 05            [24]  979 	push	ar5
      000460 C0 04            [24]  980 	push	ar4
      000462 C0 02            [24]  981 	push	ar2
      000464 C0 01            [24]  982 	push	ar1
      000466 C0 00            [24]  983 	push	ar0
      000468 C0*00            [24]  984 	push	bits
      00046A 85 00 F0         [24]  985 	mov	b,ar0
      00046D E5*00            [12]  986 	mov	a,_bp
      00046F 24 FB            [12]  987 	add	a,#0xfb
      000471 F8               [12]  988 	mov	r0,a
      000472 E6               [12]  989 	mov	a,@r0
      000473 C0 E0            [24]  990 	push	acc
      000475 08               [12]  991 	inc	r0
      000476 E6               [12]  992 	mov	a,@r0
      000477 C0 E0            [24]  993 	push	acc
      000479 08               [12]  994 	inc	r0
      00047A E6               [12]  995 	mov	a,@r0
      00047B C0 E0            [24]  996 	push	acc
      00047D A8 F0            [24]  997 	mov	r0,b
      00047F 12r04r84         [24]  998 	lcall	00548$
      000482 80 12            [24]  999 	sjmp	00549$
      000484                       1000 00548$:
      000484 85 00 F0         [24] 1001 	mov	b,ar0
      000487 A8*00            [24] 1002 	mov	r0,_bp
      000489 08               [12] 1003 	inc	r0
      00048A 08               [12] 1004 	inc	r0
      00048B E6               [12] 1005 	mov	a,@r0
      00048C C0 E0            [24] 1006 	push	acc
      00048E 08               [12] 1007 	inc	r0
      00048F E6               [12] 1008 	mov	a,@r0
      000490 C0 E0            [24] 1009 	push	acc
      000492 75 82 20         [24] 1010 	mov	dpl,#0x20
      000495 22               [24] 1011 	ret
      000496                       1012 00549$:
      000496 15 81            [12] 1013 	dec	sp
      000498 15 81            [12] 1014 	dec	sp
      00049A 15 81            [12] 1015 	dec	sp
      00049C D0*00            [24] 1016 	pop	bits
      00049E D0 00            [24] 1017 	pop	ar0
      0004A0 D0 01            [24] 1018 	pop	ar1
      0004A2 D0 02            [24] 1019 	pop	ar2
      0004A4 D0 04            [24] 1020 	pop	ar4
      0004A6 D0 05            [24] 1021 	pop	ar5
      0004A8 D0 06            [24] 1022 	pop	ar6
      0004AA D0 07            [24] 1023 	pop	ar7
      0004AC 0E               [12] 1024 	inc	r6
                                   1025 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      0004AD BE 00 A4         [24] 1026 	cjne	r6,#0x00,00136$
      0004B0 0F               [12] 1027 	inc	r7
      0004B1 80 A1            [24] 1028 	sjmp	00136$
      0004B3                       1029 00329$:
      0004B3 C0 00            [24] 1030 	push	ar0
      0004B5 E5*00            [12] 1031 	mov	a,_bp
      0004B7 24 0B            [12] 1032 	add	a,#0x0b
      0004B9 F8               [12] 1033 	mov	r0,a
      0004BA A6 06            [24] 1034 	mov	@r0,ar6
      0004BC 08               [12] 1035 	inc	r0
      0004BD A6 07            [24] 1036 	mov	@r0,ar7
      0004BF E5*00            [12] 1037 	mov	a,_bp
      0004C1 24 17            [12] 1038 	add	a,#0x17
      0004C3 F8               [12] 1039 	mov	r0,a
      0004C4 A6 05            [24] 1040 	mov	@r0,ar5
      0004C6 D0 00            [24] 1041 	pop	ar0
      0004C8                       1042 00289$:
      0004C8 C0 00            [24] 1043 	push	ar0
      0004CA E5*00            [12] 1044 	mov	a,_bp
      0004CC 24 0B            [12] 1045 	add	a,#0x0b
      0004CE F8               [12] 1046 	mov	r0,a
      0004CF C0 01            [24] 1047 	push	ar1
      0004D1 E5*00            [12] 1048 	mov	a,_bp
      0004D3 24 09            [12] 1049 	add	a,#0x09
      0004D5 F9               [12] 1050 	mov	r1,a
      0004D6 E6               [12] 1051 	mov	a,@r0
      0004D7 F7               [12] 1052 	mov	@r1,a
      0004D8 08               [12] 1053 	inc	r0
      0004D9 09               [12] 1054 	inc	r1
      0004DA E6               [12] 1055 	mov	a,@r0
      0004DB F7               [12] 1056 	mov	@r1,a
      0004DC D0 01            [24] 1057 	pop	ar1
      0004DE D0 00            [24] 1058 	pop	ar0
      0004E0                       1059 00143$:
      0004E0 87 03            [24] 1060 	mov	ar3,@r1
      0004E2 09               [12] 1061 	inc	r1
      0004E3 87 06            [24] 1062 	mov	ar6,@r1
      0004E5 09               [12] 1063 	inc	r1
      0004E6 87 07            [24] 1064 	mov	ar7,@r1
      0004E8 19               [12] 1065 	dec	r1
      0004E9 19               [12] 1066 	dec	r1
      0004EA 8B 82            [24] 1067 	mov	dpl,r3
      0004EC 8E 83            [24] 1068 	mov	dph,r6
      0004EE 8F F0            [24] 1069 	mov	b,r7
      0004F0 12r00r00         [24] 1070 	lcall	__gptrget
      0004F3 FB               [12] 1071 	mov	r3,a
      0004F4 FD               [12] 1072 	mov	r5,a
      0004F5 70 03            [24] 1073 	jnz	00551$
      0004F7 02r05r7D         [24] 1074 	ljmp	00330$
      0004FA                       1075 00551$:
      0004FA 8C 07            [24] 1076 	mov	ar7,r4
      0004FC 1C               [12] 1077 	dec	r4
      0004FD C3               [12] 1078 	clr	c
      0004FE 74 80            [12] 1079 	mov	a,#(0x00 ^ 0x80)
      000500 8F F0            [24] 1080 	mov	b,r7
      000502 63 F0 80         [24] 1081 	xrl	b,#0x80
      000505 95 F0            [12] 1082 	subb	a,b
      000507 50 74            [24] 1083 	jnc	00330$
                                   1084 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000509 C0 00            [24] 1085 	push	ar0
      00050B C0 04            [24] 1086 	push	ar4
      00050D C0 02            [24] 1087 	push	ar2
      00050F C0 01            [24] 1088 	push	ar1
      000511 C0 00            [24] 1089 	push	ar0
      000513 C0*00            [24] 1090 	push	bits
      000515 85 00 F0         [24] 1091 	mov	b,ar0
      000518 E5*00            [12] 1092 	mov	a,_bp
      00051A 24 FB            [12] 1093 	add	a,#0xfb
      00051C F8               [12] 1094 	mov	r0,a
      00051D E6               [12] 1095 	mov	a,@r0
      00051E C0 E0            [24] 1096 	push	acc
      000520 08               [12] 1097 	inc	r0
      000521 E6               [12] 1098 	mov	a,@r0
      000522 C0 E0            [24] 1099 	push	acc
      000524 08               [12] 1100 	inc	r0
      000525 E6               [12] 1101 	mov	a,@r0
      000526 C0 E0            [24] 1102 	push	acc
      000528 A8 F0            [24] 1103 	mov	r0,b
      00052A 12r05r2F         [24] 1104 	lcall	00553$
      00052D 80 11            [24] 1105 	sjmp	00554$
      00052F                       1106 00553$:
      00052F 85 00 F0         [24] 1107 	mov	b,ar0
      000532 A8*00            [24] 1108 	mov	r0,_bp
      000534 08               [12] 1109 	inc	r0
      000535 08               [12] 1110 	inc	r0
      000536 E6               [12] 1111 	mov	a,@r0
      000537 C0 E0            [24] 1112 	push	acc
      000539 08               [12] 1113 	inc	r0
      00053A E6               [12] 1114 	mov	a,@r0
      00053B C0 E0            [24] 1115 	push	acc
      00053D 8D 82            [24] 1116 	mov	dpl,r5
      00053F 22               [24] 1117 	ret
      000540                       1118 00554$:
      000540 15 81            [12] 1119 	dec	sp
      000542 15 81            [12] 1120 	dec	sp
      000544 15 81            [12] 1121 	dec	sp
      000546 D0*00            [24] 1122 	pop	bits
      000548 D0 00            [24] 1123 	pop	ar0
      00054A D0 01            [24] 1124 	pop	ar1
      00054C D0 02            [24] 1125 	pop	ar2
      00054E D0 04            [24] 1126 	pop	ar4
      000550 C0 00            [24] 1127 	push	ar0
      000552 E5*00            [12] 1128 	mov	a,_bp
      000554 24 09            [12] 1129 	add	a,#0x09
      000556 F8               [12] 1130 	mov	r0,a
      000557 06               [12] 1131 	inc	@r0
      000558 B6 00 02         [24] 1132 	cjne	@r0,#0x00,00555$
      00055B 08               [12] 1133 	inc	r0
      00055C 06               [12] 1134 	inc	@r0
      00055D                       1135 00555$:
      00055D D0 00            [24] 1136 	pop	ar0
                                   1137 ;	printf_large.c:600: PTR++;
      00055F 87 03            [24] 1138 	mov	ar3,@r1
      000561 09               [12] 1139 	inc	r1
      000562 87 06            [24] 1140 	mov	ar6,@r1
      000564 09               [12] 1141 	inc	r1
      000565 87 07            [24] 1142 	mov	ar7,@r1
      000567 19               [12] 1143 	dec	r1
      000568 19               [12] 1144 	dec	r1
      000569 0B               [12] 1145 	inc	r3
      00056A BB 00 01         [24] 1146 	cjne	r3,#0x00,00556$
      00056D 0E               [12] 1147 	inc	r6
      00056E                       1148 00556$:
      00056E A7 03            [24] 1149 	mov	@r1,ar3
      000570 09               [12] 1150 	inc	r1
      000571 A7 06            [24] 1151 	mov	@r1,ar6
      000573 09               [12] 1152 	inc	r1
      000574 A7 07            [24] 1153 	mov	@r1,ar7
      000576 19               [12] 1154 	dec	r1
      000577 19               [12] 1155 	dec	r1
      000578 D0 00            [24] 1156 	pop	ar0
      00057A 02r04rE0         [24] 1157 	ljmp	00143$
      00057D                       1158 00330$:
      00057D E5*00            [12] 1159 	mov	a,_bp
      00057F 24 09            [12] 1160 	add	a,#0x09
      000581 F9               [12] 1161 	mov	r1,a
      000582 C0 00            [24] 1162 	push	ar0
      000584 E5*00            [12] 1163 	mov	a,_bp
      000586 24 0B            [12] 1164 	add	a,#0x0b
      000588 F8               [12] 1165 	mov	r0,a
      000589 E7               [12] 1166 	mov	a,@r1
      00058A F6               [12] 1167 	mov	@r0,a
      00058B 09               [12] 1168 	inc	r1
      00058C 08               [12] 1169 	inc	r0
      00058D E7               [12] 1170 	mov	a,@r1
      00058E F6               [12] 1171 	mov	@r0,a
      00058F D0 00            [24] 1172 	pop	ar0
                                   1173 ;	printf_large.c:603: if ( left_justify && (length < width))
      000591 20*00 03         [24] 1174 	jb	b0,00557$
      000594 02r08rC5         [24] 1175 	ljmp	00172$
      000597                       1176 00557$:
      000597 A9*00            [24] 1177 	mov	r1,_bp
      000599 09               [12] 1178 	inc	r1
      00059A C0 00            [24] 1179 	push	ar0
      00059C E5*00            [12] 1180 	mov	a,_bp
      00059E 24 17            [12] 1181 	add	a,#0x17
      0005A0 F8               [12] 1182 	mov	r0,a
      0005A1 C3               [12] 1183 	clr	c
      0005A2 E7               [12] 1184 	mov	a,@r1
      0005A3 96               [12] 1185 	subb	a,@r0
      0005A4 D0 00            [24] 1186 	pop	ar0
      0005A6 40 03            [24] 1187 	jc	00558$
      0005A8 02r08rC5         [24] 1188 	ljmp	00172$
      0005AB                       1189 00558$:
                                   1190 ;	printf_large.c:605: width -= length;
      0005AB E5*00            [12] 1191 	mov	a,_bp
      0005AD 24 17            [12] 1192 	add	a,#0x17
      0005AF F9               [12] 1193 	mov	r1,a
      0005B0 C0 00            [24] 1194 	push	ar0
      0005B2 A8*00            [24] 1195 	mov	r0,_bp
      0005B4 08               [12] 1196 	inc	r0
      0005B5 E7               [12] 1197 	mov	a,@r1
      0005B6 C3               [12] 1198 	clr	c
      0005B7 96               [12] 1199 	subb	a,@r0
      0005B8 F7               [12] 1200 	mov	@r1,a
      0005B9 D0 00            [24] 1201 	pop	ar0
                                   1202 ;	printf_large.c:606: while( width-- != 0 )
      0005BB E5*00            [12] 1203 	mov	a,_bp
      0005BD 24 09            [12] 1204 	add	a,#0x09
      0005BF F9               [12] 1205 	mov	r1,a
      0005C0 87 06            [24] 1206 	mov	ar6,@r1
      0005C2 09               [12] 1207 	inc	r1
      0005C3 87 05            [24] 1208 	mov	ar5,@r1
      0005C5 E5*00            [12] 1209 	mov	a,_bp
      0005C7 24 17            [12] 1210 	add	a,#0x17
      0005C9 F9               [12] 1211 	mov	r1,a
      0005CA 87 03            [24] 1212 	mov	ar3,@r1
      0005CC                       1213 00146$:
      0005CC 8B 07            [24] 1214 	mov	ar7,r3
      0005CE 1B               [12] 1215 	dec	r3
      0005CF EF               [12] 1216 	mov	a,r7
      0005D0 70 03            [24] 1217 	jnz	00559$
      0005D2 02r08rB4         [24] 1218 	ljmp	00331$
      0005D5                       1219 00559$:
                                   1220 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      0005D5 C0 06            [24] 1221 	push	ar6
      0005D7 C0 05            [24] 1222 	push	ar5
      0005D9 C0 03            [24] 1223 	push	ar3
      0005DB C0 02            [24] 1224 	push	ar2
      0005DD C0 00            [24] 1225 	push	ar0
      0005DF C0*00            [24] 1226 	push	bits
      0005E1 E5*00            [12] 1227 	mov	a,_bp
      0005E3 24 FB            [12] 1228 	add	a,#0xfb
      0005E5 F9               [12] 1229 	mov	r1,a
      0005E6 E7               [12] 1230 	mov	a,@r1
      0005E7 C0 E0            [24] 1231 	push	acc
      0005E9 09               [12] 1232 	inc	r1
      0005EA E7               [12] 1233 	mov	a,@r1
      0005EB C0 E0            [24] 1234 	push	acc
      0005ED 09               [12] 1235 	inc	r1
      0005EE E7               [12] 1236 	mov	a,@r1
      0005EF C0 E0            [24] 1237 	push	acc
      0005F1 12r05rF6         [24] 1238 	lcall	00560$
      0005F4 80 0F            [24] 1239 	sjmp	00561$
      0005F6                       1240 00560$:
      0005F6 A9*00            [24] 1241 	mov	r1,_bp
      0005F8 09               [12] 1242 	inc	r1
      0005F9 09               [12] 1243 	inc	r1
      0005FA E7               [12] 1244 	mov	a,@r1
      0005FB C0 E0            [24] 1245 	push	acc
      0005FD 09               [12] 1246 	inc	r1
      0005FE E7               [12] 1247 	mov	a,@r1
      0005FF C0 E0            [24] 1248 	push	acc
      000601 75 82 20         [24] 1249 	mov	dpl,#0x20
      000604 22               [24] 1250 	ret
      000605                       1251 00561$:
      000605 15 81            [12] 1252 	dec	sp
      000607 15 81            [12] 1253 	dec	sp
      000609 15 81            [12] 1254 	dec	sp
      00060B D0*00            [24] 1255 	pop	bits
      00060D D0 00            [24] 1256 	pop	ar0
      00060F D0 02            [24] 1257 	pop	ar2
      000611 D0 03            [24] 1258 	pop	ar3
      000613 D0 05            [24] 1259 	pop	ar5
      000615 D0 06            [24] 1260 	pop	ar6
      000617 0E               [12] 1261 	inc	r6
                                   1262 ;	printf_large.c:613: case 'P':
      000618 BE 00 B1         [24] 1263 	cjne	r6,#0x00,00146$
      00061B 0D               [12] 1264 	inc	r5
      00061C 80 AE            [24] 1265 	sjmp	00146$
      00061E                       1266 00152$:
                                   1267 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      00061E E5*00            [12] 1268 	mov	a,_bp
      000620 24 11            [12] 1269 	add	a,#0x11
      000622 F9               [12] 1270 	mov	r1,a
      000623 C0 00            [24] 1271 	push	ar0
      000625 E5*00            [12] 1272 	mov	a,_bp
      000627 24 F7            [12] 1273 	add	a,#0xf7
      000629 F8               [12] 1274 	mov	r0,a
      00062A E6               [12] 1275 	mov	a,@r0
      00062B 24 FD            [12] 1276 	add	a,#0xFD
      00062D FF               [12] 1277 	mov	r7,a
      00062E E5*00            [12] 1278 	mov	a,_bp
      000630 24 F7            [12] 1279 	add	a,#0xf7
      000632 F8               [12] 1280 	mov	r0,a
      000633 A6 07            [24] 1281 	mov	@r0,ar7
      000635 A8 07            [24] 1282 	mov	r0,ar7
      000637 86 05            [24] 1283 	mov	ar5,@r0
      000639 08               [12] 1284 	inc	r0
      00063A 86 06            [24] 1285 	mov	ar6,@r0
      00063C 08               [12] 1286 	inc	r0
      00063D 86 07            [24] 1287 	mov	ar7,@r0
      00063F D0 00            [24] 1288 	pop	ar0
      000641 A7 05            [24] 1289 	mov	@r1,ar5
      000643 09               [12] 1290 	inc	r1
      000644 A7 06            [24] 1291 	mov	@r1,ar6
      000646 09               [12] 1292 	inc	r1
      000647 A7 07            [24] 1293 	mov	@r1,ar7
      000649 19               [12] 1294 	dec	r1
      00064A 19               [12] 1295 	dec	r1
                                   1296 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      00064B E5*00            [12] 1297 	mov	a,_bp
      00064D 24 11            [12] 1298 	add	a,#0x11
      00064F FE               [12] 1299 	mov	r6,a
      000650 24 02            [12] 1300 	add	a,#0x02
      000652 F9               [12] 1301 	mov	r1,a
      000653 87 07            [24] 1302 	mov	ar7,@r1
                                   1303 ;	printf_large.c:638: if (memtype >= 0x80)
      000655 BF 80 00         [24] 1304 	cjne	r7,#0x80,00563$
      000658                       1305 00563$:
      000658 40 04            [24] 1306 	jc	00160$
                                   1307 ;	printf_large.c:639: c = 'C';
      00065A 7D 43            [12] 1308 	mov	r5,#0x43
      00065C 80 14            [24] 1309 	sjmp	00161$
      00065E                       1310 00160$:
                                   1311 ;	printf_large.c:640: else if (memtype >= 0x60)
      00065E BF 60 00         [24] 1312 	cjne	r7,#0x60,00565$
      000661                       1313 00565$:
      000661 40 04            [24] 1314 	jc	00157$
                                   1315 ;	printf_large.c:641: c = 'P';
      000663 7D 50            [12] 1316 	mov	r5,#0x50
      000665 80 0B            [24] 1317 	sjmp	00161$
      000667                       1318 00157$:
                                   1319 ;	printf_large.c:642: else if (memtype >= 0x40)
      000667 BF 40 00         [24] 1320 	cjne	r7,#0x40,00567$
      00066A                       1321 00567$:
      00066A 40 04            [24] 1322 	jc	00154$
                                   1323 ;	printf_large.c:643: c = 'I';
      00066C 7D 49            [12] 1324 	mov	r5,#0x49
      00066E 80 02            [24] 1325 	sjmp	00161$
      000670                       1326 00154$:
                                   1327 ;	printf_large.c:645: c = 'X';
      000670 7D 58            [12] 1328 	mov	r5,#0x58
      000672                       1329 00161$:
                                   1330 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000672 C0 06            [24] 1331 	push	ar6
      000674 C0 05            [24] 1332 	push	ar5
      000676 C0 02            [24] 1333 	push	ar2
      000678 C0 00            [24] 1334 	push	ar0
      00067A C0*00            [24] 1335 	push	bits
      00067C E5*00            [12] 1336 	mov	a,_bp
      00067E 24 FB            [12] 1337 	add	a,#0xfb
      000680 F9               [12] 1338 	mov	r1,a
      000681 E7               [12] 1339 	mov	a,@r1
      000682 C0 E0            [24] 1340 	push	acc
      000684 09               [12] 1341 	inc	r1
      000685 E7               [12] 1342 	mov	a,@r1
      000686 C0 E0            [24] 1343 	push	acc
      000688 09               [12] 1344 	inc	r1
      000689 E7               [12] 1345 	mov	a,@r1
      00068A C0 E0            [24] 1346 	push	acc
      00068C 12r06r91         [24] 1347 	lcall	00569$
      00068F 80 0E            [24] 1348 	sjmp	00570$
      000691                       1349 00569$:
      000691 A9*00            [24] 1350 	mov	r1,_bp
      000693 09               [12] 1351 	inc	r1
      000694 09               [12] 1352 	inc	r1
      000695 E7               [12] 1353 	mov	a,@r1
      000696 C0 E0            [24] 1354 	push	acc
      000698 09               [12] 1355 	inc	r1
      000699 E7               [12] 1356 	mov	a,@r1
      00069A C0 E0            [24] 1357 	push	acc
      00069C 8D 82            [24] 1358 	mov	dpl,r5
      00069E 22               [24] 1359 	ret
      00069F                       1360 00570$:
      00069F 15 81            [12] 1361 	dec	sp
      0006A1 15 81            [12] 1362 	dec	sp
      0006A3 15 81            [12] 1363 	dec	sp
      0006A5 D0*00            [24] 1364 	pop	bits
      0006A7 D0 00            [24] 1365 	pop	ar0
      0006A9 D0 02            [24] 1366 	pop	ar2
      0006AB D0 05            [24] 1367 	pop	ar5
      0006AD D0 06            [24] 1368 	pop	ar6
      0006AF E5*00            [12] 1369 	mov	a,_bp
      0006B1 24 0B            [12] 1370 	add	a,#0x0b
      0006B3 F9               [12] 1371 	mov	r1,a
      0006B4 07               [12] 1372 	inc	@r1
      0006B5 B7 00 02         [24] 1373 	cjne	@r1,#0x00,00571$
      0006B8 09               [12] 1374 	inc	r1
      0006B9 07               [12] 1375 	inc	@r1
      0006BA                       1376 00571$:
                                   1377 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      0006BA C0 06            [24] 1378 	push	ar6
      0006BC C0 05            [24] 1379 	push	ar5
      0006BE C0 02            [24] 1380 	push	ar2
      0006C0 C0 00            [24] 1381 	push	ar0
      0006C2 C0*00            [24] 1382 	push	bits
      0006C4 E5*00            [12] 1383 	mov	a,_bp
      0006C6 24 FB            [12] 1384 	add	a,#0xfb
      0006C8 F9               [12] 1385 	mov	r1,a
      0006C9 E7               [12] 1386 	mov	a,@r1
      0006CA C0 E0            [24] 1387 	push	acc
      0006CC 09               [12] 1388 	inc	r1
      0006CD E7               [12] 1389 	mov	a,@r1
      0006CE C0 E0            [24] 1390 	push	acc
      0006D0 09               [12] 1391 	inc	r1
      0006D1 E7               [12] 1392 	mov	a,@r1
      0006D2 C0 E0            [24] 1393 	push	acc
      0006D4 12r06rD9         [24] 1394 	lcall	00572$
      0006D7 80 0F            [24] 1395 	sjmp	00573$
      0006D9                       1396 00572$:
      0006D9 A9*00            [24] 1397 	mov	r1,_bp
      0006DB 09               [12] 1398 	inc	r1
      0006DC 09               [12] 1399 	inc	r1
      0006DD E7               [12] 1400 	mov	a,@r1
      0006DE C0 E0            [24] 1401 	push	acc
      0006E0 09               [12] 1402 	inc	r1
      0006E1 E7               [12] 1403 	mov	a,@r1
      0006E2 C0 E0            [24] 1404 	push	acc
      0006E4 75 82 3A         [24] 1405 	mov	dpl,#0x3A
      0006E7 22               [24] 1406 	ret
      0006E8                       1407 00573$:
      0006E8 15 81            [12] 1408 	dec	sp
      0006EA 15 81            [12] 1409 	dec	sp
      0006EC 15 81            [12] 1410 	dec	sp
      0006EE D0*00            [24] 1411 	pop	bits
      0006F0 D0 00            [24] 1412 	pop	ar0
      0006F2 D0 02            [24] 1413 	pop	ar2
      0006F4 D0 05            [24] 1414 	pop	ar5
      0006F6 D0 06            [24] 1415 	pop	ar6
      0006F8 E5*00            [12] 1416 	mov	a,_bp
      0006FA 24 0B            [12] 1417 	add	a,#0x0b
      0006FC F9               [12] 1418 	mov	r1,a
      0006FD 07               [12] 1419 	inc	@r1
      0006FE B7 00 02         [24] 1420 	cjne	@r1,#0x00,00574$
      000701 09               [12] 1421 	inc	r1
      000702 07               [12] 1422 	inc	@r1
      000703                       1423 00574$:
                                   1424 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000703 C0 06            [24] 1425 	push	ar6
      000705 C0 05            [24] 1426 	push	ar5
      000707 C0 02            [24] 1427 	push	ar2
      000709 C0 00            [24] 1428 	push	ar0
      00070B C0*00            [24] 1429 	push	bits
      00070D E5*00            [12] 1430 	mov	a,_bp
      00070F 24 FB            [12] 1431 	add	a,#0xfb
      000711 F9               [12] 1432 	mov	r1,a
      000712 E7               [12] 1433 	mov	a,@r1
      000713 C0 E0            [24] 1434 	push	acc
      000715 09               [12] 1435 	inc	r1
      000716 E7               [12] 1436 	mov	a,@r1
      000717 C0 E0            [24] 1437 	push	acc
      000719 09               [12] 1438 	inc	r1
      00071A E7               [12] 1439 	mov	a,@r1
      00071B C0 E0            [24] 1440 	push	acc
      00071D 12r07r22         [24] 1441 	lcall	00575$
      000720 80 0F            [24] 1442 	sjmp	00576$
      000722                       1443 00575$:
      000722 A9*00            [24] 1444 	mov	r1,_bp
      000724 09               [12] 1445 	inc	r1
      000725 09               [12] 1446 	inc	r1
      000726 E7               [12] 1447 	mov	a,@r1
      000727 C0 E0            [24] 1448 	push	acc
      000729 09               [12] 1449 	inc	r1
      00072A E7               [12] 1450 	mov	a,@r1
      00072B C0 E0            [24] 1451 	push	acc
      00072D 75 82 30         [24] 1452 	mov	dpl,#0x30
      000730 22               [24] 1453 	ret
      000731                       1454 00576$:
      000731 15 81            [12] 1455 	dec	sp
      000733 15 81            [12] 1456 	dec	sp
      000735 15 81            [12] 1457 	dec	sp
      000737 D0*00            [24] 1458 	pop	bits
      000739 D0 00            [24] 1459 	pop	ar0
      00073B D0 02            [24] 1460 	pop	ar2
      00073D D0 05            [24] 1461 	pop	ar5
      00073F D0 06            [24] 1462 	pop	ar6
      000741 E5*00            [12] 1463 	mov	a,_bp
      000743 24 0B            [12] 1464 	add	a,#0x0b
      000745 F9               [12] 1465 	mov	r1,a
      000746 07               [12] 1466 	inc	@r1
      000747 B7 00 02         [24] 1467 	cjne	@r1,#0x00,00577$
      00074A 09               [12] 1468 	inc	r1
      00074B 07               [12] 1469 	inc	@r1
      00074C                       1470 00577$:
                                   1471 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      00074C C0 06            [24] 1472 	push	ar6
      00074E C0 05            [24] 1473 	push	ar5
      000750 C0 02            [24] 1474 	push	ar2
      000752 C0 00            [24] 1475 	push	ar0
      000754 C0*00            [24] 1476 	push	bits
      000756 E5*00            [12] 1477 	mov	a,_bp
      000758 24 FB            [12] 1478 	add	a,#0xfb
      00075A F9               [12] 1479 	mov	r1,a
      00075B E7               [12] 1480 	mov	a,@r1
      00075C C0 E0            [24] 1481 	push	acc
      00075E 09               [12] 1482 	inc	r1
      00075F E7               [12] 1483 	mov	a,@r1
      000760 C0 E0            [24] 1484 	push	acc
      000762 09               [12] 1485 	inc	r1
      000763 E7               [12] 1486 	mov	a,@r1
      000764 C0 E0            [24] 1487 	push	acc
      000766 12r07r6B         [24] 1488 	lcall	00578$
      000769 80 0F            [24] 1489 	sjmp	00579$
      00076B                       1490 00578$:
      00076B A9*00            [24] 1491 	mov	r1,_bp
      00076D 09               [12] 1492 	inc	r1
      00076E 09               [12] 1493 	inc	r1
      00076F E7               [12] 1494 	mov	a,@r1
      000770 C0 E0            [24] 1495 	push	acc
      000772 09               [12] 1496 	inc	r1
      000773 E7               [12] 1497 	mov	a,@r1
      000774 C0 E0            [24] 1498 	push	acc
      000776 75 82 78         [24] 1499 	mov	dpl,#0x78
      000779 22               [24] 1500 	ret
      00077A                       1501 00579$:
      00077A 15 81            [12] 1502 	dec	sp
      00077C 15 81            [12] 1503 	dec	sp
      00077E 15 81            [12] 1504 	dec	sp
      000780 D0*00            [24] 1505 	pop	bits
      000782 D0 00            [24] 1506 	pop	ar0
      000784 D0 02            [24] 1507 	pop	ar2
      000786 D0 05            [24] 1508 	pop	ar5
      000788 D0 06            [24] 1509 	pop	ar6
      00078A E5*00            [12] 1510 	mov	a,_bp
      00078C 24 0B            [12] 1511 	add	a,#0x0b
      00078E F9               [12] 1512 	mov	r1,a
      00078F 07               [12] 1513 	inc	@r1
      000790 B7 00 02         [24] 1514 	cjne	@r1,#0x00,00580$
      000793 09               [12] 1515 	inc	r1
      000794 07               [12] 1516 	inc	@r1
      000795                       1517 00580$:
                                   1518 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000795 BD 49 02         [24] 1519 	cjne	r5,#0x49,00581$
      000798 80 56            [24] 1520 	sjmp	00163$
      00079A                       1521 00581$:
                                   1522 ;	printf_large.c:652: (c != 'P' /* pdata */))
      00079A BD 50 02         [24] 1523 	cjne	r5,#0x50,00582$
      00079D 80 51            [24] 1524 	sjmp	00163$
      00079F                       1525 00582$:
                                   1526 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      00079F EE               [12] 1527 	mov	a,r6
      0007A0 04               [12] 1528 	inc	a
      0007A1 F9               [12] 1529 	mov	r1,a
      0007A2 87 07            [24] 1530 	mov	ar7,@r1
      0007A4 C0 02            [24] 1531 	push	ar2
      0007A6 C0 00            [24] 1532 	push	ar0
      0007A8 C0*00            [24] 1533 	push	bits
      0007AA E5*00            [12] 1534 	mov	a,_bp
      0007AC 24 FB            [12] 1535 	add	a,#0xfb
      0007AE F9               [12] 1536 	mov	r1,a
      0007AF E7               [12] 1537 	mov	a,@r1
      0007B0 C0 E0            [24] 1538 	push	acc
      0007B2 09               [12] 1539 	inc	r1
      0007B3 E7               [12] 1540 	mov	a,@r1
      0007B4 C0 E0            [24] 1541 	push	acc
      0007B6 09               [12] 1542 	inc	r1
      0007B7 E7               [12] 1543 	mov	a,@r1
      0007B8 C0 E0            [24] 1544 	push	acc
      0007BA A9*00            [24] 1545 	mov	r1,_bp
      0007BC 09               [12] 1546 	inc	r1
      0007BD 09               [12] 1547 	inc	r1
      0007BE E7               [12] 1548 	mov	a,@r1
      0007BF C0 E0            [24] 1549 	push	acc
      0007C1 09               [12] 1550 	inc	r1
      0007C2 E7               [12] 1551 	mov	a,@r1
      0007C3 C0 E0            [24] 1552 	push	acc
      0007C5 E5*00            [12] 1553 	mov	a,_bp
      0007C7 24 10            [12] 1554 	add	a,#0x10
      0007C9 F9               [12] 1555 	mov	r1,a
      0007CA E7               [12] 1556 	mov	a,@r1
      0007CB 24 FF            [12] 1557 	add	a,#0xff
      0007CD 92 F0            [24] 1558 	mov	b[0],c
      0007CF 85 F0*00         [24] 1559 	mov	bits,b
      0007D2 8F 82            [24] 1560 	mov	dpl,r7
      0007D4 12r00r47         [24] 1561 	lcall	_output_2digits
      0007D7 E5 81            [12] 1562 	mov	a,sp
      0007D9 24 FB            [12] 1563 	add	a,#0xfb
      0007DB F5 81            [12] 1564 	mov	sp,a
      0007DD D0*00            [24] 1565 	pop	bits
      0007DF D0 00            [24] 1566 	pop	ar0
      0007E1 D0 02            [24] 1567 	pop	ar2
      0007E3 E5*00            [12] 1568 	mov	a,_bp
      0007E5 24 0B            [12] 1569 	add	a,#0x0b
      0007E7 F9               [12] 1570 	mov	r1,a
      0007E8 74 02            [12] 1571 	mov	a,#0x02
      0007EA 27               [12] 1572 	add	a,@r1
      0007EB F7               [12] 1573 	mov	@r1,a
      0007EC E4               [12] 1574 	clr	a
      0007ED 09               [12] 1575 	inc	r1
      0007EE 37               [12] 1576 	addc	a,@r1
      0007EF F7               [12] 1577 	mov	@r1,a
      0007F0                       1578 00163$:
                                   1579 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      0007F0 E5*00            [12] 1580 	mov	a,_bp
      0007F2 24 04            [12] 1581 	add	a,#0x04
      0007F4 F9               [12] 1582 	mov	r1,a
      0007F5 87 01            [24] 1583 	mov	ar1,@r1
      0007F7 87 07            [24] 1584 	mov	ar7,@r1
      0007F9 C0 02            [24] 1585 	push	ar2
      0007FB C0 00            [24] 1586 	push	ar0
      0007FD C0*00            [24] 1587 	push	bits
      0007FF E5*00            [12] 1588 	mov	a,_bp
      000801 24 FB            [12] 1589 	add	a,#0xfb
      000803 F9               [12] 1590 	mov	r1,a
      000804 E7               [12] 1591 	mov	a,@r1
      000805 C0 E0            [24] 1592 	push	acc
      000807 09               [12] 1593 	inc	r1
      000808 E7               [12] 1594 	mov	a,@r1
      000809 C0 E0            [24] 1595 	push	acc
      00080B 09               [12] 1596 	inc	r1
      00080C E7               [12] 1597 	mov	a,@r1
      00080D C0 E0            [24] 1598 	push	acc
      00080F A9*00            [24] 1599 	mov	r1,_bp
      000811 09               [12] 1600 	inc	r1
      000812 09               [12] 1601 	inc	r1
      000813 E7               [12] 1602 	mov	a,@r1
      000814 C0 E0            [24] 1603 	push	acc
      000816 09               [12] 1604 	inc	r1
      000817 E7               [12] 1605 	mov	a,@r1
      000818 C0 E0            [24] 1606 	push	acc
      00081A E5*00            [12] 1607 	mov	a,_bp
      00081C 24 10            [12] 1608 	add	a,#0x10
      00081E F9               [12] 1609 	mov	r1,a
      00081F E7               [12] 1610 	mov	a,@r1
      000820 24 FF            [12] 1611 	add	a,#0xff
      000822 92 F0            [24] 1612 	mov	b[0],c
      000824 85 F0*00         [24] 1613 	mov	bits,b
      000827 8F 82            [24] 1614 	mov	dpl,r7
      000829 12r00r47         [24] 1615 	lcall	_output_2digits
      00082C E5 81            [12] 1616 	mov	a,sp
      00082E 24 FB            [12] 1617 	add	a,#0xfb
      000830 F5 81            [12] 1618 	mov	sp,a
      000832 D0*00            [24] 1619 	pop	bits
      000834 D0 00            [24] 1620 	pop	ar0
      000836 D0 02            [24] 1621 	pop	ar2
      000838 E5*00            [12] 1622 	mov	a,_bp
      00083A 24 0B            [12] 1623 	add	a,#0x0b
      00083C F9               [12] 1624 	mov	r1,a
      00083D 74 02            [12] 1625 	mov	a,#0x02
      00083F 27               [12] 1626 	add	a,@r1
      000840 F7               [12] 1627 	mov	@r1,a
      000841 E4               [12] 1628 	clr	a
      000842 09               [12] 1629 	inc	r1
      000843 37               [12] 1630 	addc	a,@r1
      000844 F7               [12] 1631 	mov	@r1,a
                                   1632 ;	printf_large.c:663: break;
      000845 02r08rC5         [24] 1633 	ljmp	00172$
                                   1634 ;	printf_large.c:666: case 'I':
      000848                       1635 00166$:
                                   1636 ;	printf_large.c:667: signed_argument = 1;
      000848 D2*00            [12] 1637 	setb	b4
                                   1638 ;	printf_large.c:668: radix = 10;
      00084A E5*00            [12] 1639 	mov	a,_bp
      00084C 24 16            [12] 1640 	add	a,#0x16
      00084E F9               [12] 1641 	mov	r1,a
      00084F 77 0A            [12] 1642 	mov	@r1,#0x0A
                                   1643 ;	printf_large.c:669: break;
                                   1644 ;	printf_large.c:671: case 'O':
      000851 80 72            [24] 1645 	sjmp	00172$
      000853                       1646 00167$:
                                   1647 ;	printf_large.c:672: radix = 8;
      000853 E5*00            [12] 1648 	mov	a,_bp
      000855 24 16            [12] 1649 	add	a,#0x16
      000857 F9               [12] 1650 	mov	r1,a
      000858 77 08            [12] 1651 	mov	@r1,#0x08
                                   1652 ;	printf_large.c:673: break;
                                   1653 ;	printf_large.c:675: case 'U':
      00085A 80 69            [24] 1654 	sjmp	00172$
      00085C                       1655 00168$:
                                   1656 ;	printf_large.c:676: radix = 10;
      00085C E5*00            [12] 1657 	mov	a,_bp
      00085E 24 16            [12] 1658 	add	a,#0x16
      000860 F9               [12] 1659 	mov	r1,a
      000861 77 0A            [12] 1660 	mov	@r1,#0x0A
                                   1661 ;	printf_large.c:677: break;
                                   1662 ;	printf_large.c:679: case 'X':
      000863 80 60            [24] 1663 	sjmp	00172$
      000865                       1664 00169$:
                                   1665 ;	printf_large.c:680: radix = 16;
      000865 E5*00            [12] 1666 	mov	a,_bp
      000867 24 16            [12] 1667 	add	a,#0x16
      000869 F9               [12] 1668 	mov	r1,a
      00086A 77 10            [12] 1669 	mov	@r1,#0x10
                                   1670 ;	printf_large.c:681: break;
                                   1671 ;	printf_large.c:683: case 'F':
      00086C 80 57            [24] 1672 	sjmp	00172$
      00086E                       1673 00170$:
                                   1674 ;	printf_large.c:684: float_argument=1;
      00086E D2*00            [12] 1675 	setb	b7
                                   1676 ;	printf_large.c:685: break;
                                   1677 ;	printf_large.c:687: default:
      000870 80 53            [24] 1678 	sjmp	00172$
      000872                       1679 00171$:
                                   1680 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      000872 C0 02            [24] 1681 	push	ar2
      000874 C0 00            [24] 1682 	push	ar0
      000876 C0*00            [24] 1683 	push	bits
      000878 E5*00            [12] 1684 	mov	a,_bp
      00087A 24 FB            [12] 1685 	add	a,#0xfb
      00087C F9               [12] 1686 	mov	r1,a
      00087D E7               [12] 1687 	mov	a,@r1
      00087E C0 E0            [24] 1688 	push	acc
      000880 09               [12] 1689 	inc	r1
      000881 E7               [12] 1690 	mov	a,@r1
      000882 C0 E0            [24] 1691 	push	acc
      000884 09               [12] 1692 	inc	r1
      000885 E7               [12] 1693 	mov	a,@r1
      000886 C0 E0            [24] 1694 	push	acc
      000888 12r08r8D         [24] 1695 	lcall	00583$
      00088B 80 0E            [24] 1696 	sjmp	00584$
      00088D                       1697 00583$:
      00088D A9*00            [24] 1698 	mov	r1,_bp
      00088F 09               [12] 1699 	inc	r1
      000890 09               [12] 1700 	inc	r1
      000891 E7               [12] 1701 	mov	a,@r1
      000892 C0 E0            [24] 1702 	push	acc
      000894 09               [12] 1703 	inc	r1
      000895 E7               [12] 1704 	mov	a,@r1
      000896 C0 E0            [24] 1705 	push	acc
      000898 8D 82            [24] 1706 	mov	dpl,r5
      00089A 22               [24] 1707 	ret
      00089B                       1708 00584$:
      00089B 15 81            [12] 1709 	dec	sp
      00089D 15 81            [12] 1710 	dec	sp
      00089F 15 81            [12] 1711 	dec	sp
      0008A1 D0*00            [24] 1712 	pop	bits
      0008A3 D0 00            [24] 1713 	pop	ar0
      0008A5 D0 02            [24] 1714 	pop	ar2
      0008A7 E5*00            [12] 1715 	mov	a,_bp
      0008A9 24 0B            [12] 1716 	add	a,#0x0b
      0008AB F9               [12] 1717 	mov	r1,a
      0008AC 07               [12] 1718 	inc	@r1
      0008AD B7 00 02         [24] 1719 	cjne	@r1,#0x00,00585$
      0008B0 09               [12] 1720 	inc	r1
      0008B1 07               [12] 1721 	inc	@r1
      0008B2                       1722 00585$:
                                   1723 ;	printf_large.c:872: return charsOutputted;
                                   1724 ;	printf_large.c:691: }
      0008B2 80 11            [24] 1725 	sjmp	00172$
      0008B4                       1726 00331$:
      0008B4 E5*00            [12] 1727 	mov	a,_bp
      0008B6 24 0B            [12] 1728 	add	a,#0x0b
      0008B8 F9               [12] 1729 	mov	r1,a
      0008B9 A7 06            [24] 1730 	mov	@r1,ar6
      0008BB 09               [12] 1731 	inc	r1
      0008BC A7 05            [24] 1732 	mov	@r1,ar5
      0008BE E5*00            [12] 1733 	mov	a,_bp
      0008C0 24 17            [12] 1734 	add	a,#0x17
      0008C2 F9               [12] 1735 	mov	r1,a
      0008C3 A7 03            [24] 1736 	mov	@r1,ar3
      0008C5                       1737 00172$:
                                   1738 ;	printf_large.c:693: if (float_argument)
      0008C5 20*00 03         [24] 1739 	jb	b7,00586$
      0008C8 02r09rD5         [24] 1740 	ljmp	00238$
      0008CB                       1741 00586$:
                                   1742 ;	printf_large.c:695: value.f = va_arg(ap, float);
      0008CB C0 00            [24] 1743 	push	ar0
      0008CD E5*00            [12] 1744 	mov	a,_bp
      0008CF 24 11            [12] 1745 	add	a,#0x11
      0008D1 F9               [12] 1746 	mov	r1,a
      0008D2 C0 00            [24] 1747 	push	ar0
      0008D4 E5*00            [12] 1748 	mov	a,_bp
      0008D6 24 F7            [12] 1749 	add	a,#0xf7
      0008D8 F8               [12] 1750 	mov	r0,a
      0008D9 E6               [12] 1751 	mov	a,@r0
      0008DA 24 FC            [12] 1752 	add	a,#0xFC
      0008DC FF               [12] 1753 	mov	r7,a
      0008DD E5*00            [12] 1754 	mov	a,_bp
      0008DF 24 F7            [12] 1755 	add	a,#0xf7
      0008E1 F8               [12] 1756 	mov	r0,a
      0008E2 A6 07            [24] 1757 	mov	@r0,ar7
      0008E4 A8 07            [24] 1758 	mov	r0,ar7
      0008E6 86 03            [24] 1759 	mov	ar3,@r0
      0008E8 08               [12] 1760 	inc	r0
      0008E9 86 05            [24] 1761 	mov	ar5,@r0
      0008EB 08               [12] 1762 	inc	r0
      0008EC 86 06            [24] 1763 	mov	ar6,@r0
      0008EE 08               [12] 1764 	inc	r0
      0008EF 86 07            [24] 1765 	mov	ar7,@r0
      0008F1 A7 03            [24] 1766 	mov	@r1,ar3
      0008F3 09               [12] 1767 	inc	r1
      0008F4 A7 05            [24] 1768 	mov	@r1,ar5
      0008F6 09               [12] 1769 	inc	r1
      0008F7 A7 06            [24] 1770 	mov	@r1,ar6
      0008F9 09               [12] 1771 	inc	r1
      0008FA A7 07            [24] 1772 	mov	@r1,ar7
      0008FC 19               [12] 1773 	dec	r1
      0008FD 19               [12] 1774 	dec	r1
      0008FE 19               [12] 1775 	dec	r1
                                   1776 ;	printf_large.c:697: PTR="<NO FLOAT>";
      0008FF E5*00            [12] 1777 	mov	a,_bp
      000901 24 11            [12] 1778 	add	a,#0x11
      000903 F9               [12] 1779 	mov	r1,a
      000904 77r00            [12] 1780 	mov	@r1,#___str_0
      000906 09               [12] 1781 	inc	r1
      000907 77s00            [12] 1782 	mov	@r1,#(___str_0 >> 8)
      000909 09               [12] 1783 	inc	r1
      00090A 77 80            [12] 1784 	mov	@r1,#0x80
      00090C 19               [12] 1785 	dec	r1
      00090D 19               [12] 1786 	dec	r1
                                   1787 ;	printf_large.c:698: while (c=*PTR++)
      00090E E5*00            [12] 1788 	mov	a,_bp
      000910 24 0B            [12] 1789 	add	a,#0x0b
      000912 F8               [12] 1790 	mov	r0,a
      000913 C0 01            [24] 1791 	push	ar1
      000915 E5*00            [12] 1792 	mov	a,_bp
      000917 24 05            [12] 1793 	add	a,#0x05
      000919 F9               [12] 1794 	mov	r1,a
      00091A E6               [12] 1795 	mov	a,@r0
      00091B F7               [12] 1796 	mov	@r1,a
      00091C 08               [12] 1797 	inc	r0
      00091D 09               [12] 1798 	inc	r1
      00091E E6               [12] 1799 	mov	a,@r0
      00091F F7               [12] 1800 	mov	@r1,a
      000920 D0 01            [24] 1801 	pop	ar1
      000922 D0 00            [24] 1802 	pop	ar0
                                   1803 ;	printf_large.c:872: return charsOutputted;
      000924 D0 00            [24] 1804 	pop	ar0
                                   1805 ;	printf_large.c:698: while (c=*PTR++)
      000926                       1806 00173$:
      000926 C0 00            [24] 1807 	push	ar0
      000928 C0 00            [24] 1808 	push	ar0
      00092A E5*00            [12] 1809 	mov	a,_bp
      00092C 24 0D            [12] 1810 	add	a,#0x0d
      00092E F8               [12] 1811 	mov	r0,a
      00092F E7               [12] 1812 	mov	a,@r1
      000930 F6               [12] 1813 	mov	@r0,a
      000931 09               [12] 1814 	inc	r1
      000932 E7               [12] 1815 	mov	a,@r1
      000933 08               [12] 1816 	inc	r0
      000934 F6               [12] 1817 	mov	@r0,a
      000935 09               [12] 1818 	inc	r1
      000936 E7               [12] 1819 	mov	a,@r1
      000937 08               [12] 1820 	inc	r0
      000938 F6               [12] 1821 	mov	@r0,a
      000939 19               [12] 1822 	dec	r1
      00093A 19               [12] 1823 	dec	r1
      00093B E5*00            [12] 1824 	mov	a,_bp
      00093D 24 0D            [12] 1825 	add	a,#0x0d
      00093F F8               [12] 1826 	mov	r0,a
      000940 74 01            [12] 1827 	mov	a,#0x01
      000942 26               [12] 1828 	add	a,@r0
      000943 FB               [12] 1829 	mov	r3,a
      000944 E4               [12] 1830 	clr	a
      000945 08               [12] 1831 	inc	r0
      000946 36               [12] 1832 	addc	a,@r0
      000947 FC               [12] 1833 	mov	r4,a
      000948 08               [12] 1834 	inc	r0
      000949 86 07            [24] 1835 	mov	ar7,@r0
      00094B A7 03            [24] 1836 	mov	@r1,ar3
      00094D 09               [12] 1837 	inc	r1
      00094E A7 04            [24] 1838 	mov	@r1,ar4
      000950 09               [12] 1839 	inc	r1
      000951 A7 07            [24] 1840 	mov	@r1,ar7
      000953 19               [12] 1841 	dec	r1
      000954 19               [12] 1842 	dec	r1
      000955 E5*00            [12] 1843 	mov	a,_bp
      000957 24 0D            [12] 1844 	add	a,#0x0d
      000959 F8               [12] 1845 	mov	r0,a
      00095A 86 82            [24] 1846 	mov	dpl,@r0
      00095C 08               [12] 1847 	inc	r0
      00095D 86 83            [24] 1848 	mov	dph,@r0
      00095F 08               [12] 1849 	inc	r0
      000960 86 F0            [24] 1850 	mov	b,@r0
      000962 12r00r00         [24] 1851 	lcall	__gptrget
      000965 FF               [12] 1852 	mov	r7,a
      000966 D0 00            [24] 1853 	pop	ar0
      000968 8F 05            [24] 1854 	mov	ar5,r7
      00096A D0 00            [24] 1855 	pop	ar0
      00096C EF               [12] 1856 	mov	a,r7
      00096D 70 03            [24] 1857 	jnz	00587$
      00096F 02r01r66         [24] 1858 	ljmp	00243$
      000972                       1859 00587$:
                                   1860 ;	printf_large.c:700: OUTPUT_CHAR (c, p);
      000972 C0 02            [24] 1861 	push	ar2
      000974 C0 01            [24] 1862 	push	ar1
      000976 C0 00            [24] 1863 	push	ar0
      000978 85 00 F0         [24] 1864 	mov	b,ar0
      00097B E5*00            [12] 1865 	mov	a,_bp
      00097D 24 FB            [12] 1866 	add	a,#0xfb
      00097F F8               [12] 1867 	mov	r0,a
      000980 E6               [12] 1868 	mov	a,@r0
      000981 C0 E0            [24] 1869 	push	acc
      000983 08               [12] 1870 	inc	r0
      000984 E6               [12] 1871 	mov	a,@r0
      000985 C0 E0            [24] 1872 	push	acc
      000987 08               [12] 1873 	inc	r0
      000988 E6               [12] 1874 	mov	a,@r0
      000989 C0 E0            [24] 1875 	push	acc
      00098B A8 F0            [24] 1876 	mov	r0,b
      00098D 12r09r92         [24] 1877 	lcall	00588$
      000990 80 11            [24] 1878 	sjmp	00589$
      000992                       1879 00588$:
      000992 85 00 F0         [24] 1880 	mov	b,ar0
      000995 A8*00            [24] 1881 	mov	r0,_bp
      000997 08               [12] 1882 	inc	r0
      000998 08               [12] 1883 	inc	r0
      000999 E6               [12] 1884 	mov	a,@r0
      00099A C0 E0            [24] 1885 	push	acc
      00099C 08               [12] 1886 	inc	r0
      00099D E6               [12] 1887 	mov	a,@r0
      00099E C0 E0            [24] 1888 	push	acc
      0009A0 8D 82            [24] 1889 	mov	dpl,r5
      0009A2 22               [24] 1890 	ret
      0009A3                       1891 00589$:
      0009A3 15 81            [12] 1892 	dec	sp
      0009A5 15 81            [12] 1893 	dec	sp
      0009A7 15 81            [12] 1894 	dec	sp
      0009A9 D0 00            [24] 1895 	pop	ar0
      0009AB D0 01            [24] 1896 	pop	ar1
      0009AD D0 02            [24] 1897 	pop	ar2
      0009AF C0 00            [24] 1898 	push	ar0
      0009B1 E5*00            [12] 1899 	mov	a,_bp
      0009B3 24 05            [12] 1900 	add	a,#0x05
      0009B5 F8               [12] 1901 	mov	r0,a
      0009B6 06               [12] 1902 	inc	@r0
      0009B7 B6 00 02         [24] 1903 	cjne	@r0,#0x00,00590$
      0009BA 08               [12] 1904 	inc	r0
      0009BB 06               [12] 1905 	inc	@r0
      0009BC                       1906 00590$:
      0009BC E5*00            [12] 1907 	mov	a,_bp
      0009BE 24 05            [12] 1908 	add	a,#0x05
      0009C0 F8               [12] 1909 	mov	r0,a
      0009C1 C0 01            [24] 1910 	push	ar1
      0009C3 E5*00            [12] 1911 	mov	a,_bp
      0009C5 24 0B            [12] 1912 	add	a,#0x0b
      0009C7 F9               [12] 1913 	mov	r1,a
      0009C8 E6               [12] 1914 	mov	a,@r0
      0009C9 F7               [12] 1915 	mov	@r1,a
      0009CA 08               [12] 1916 	inc	r0
      0009CB 09               [12] 1917 	inc	r1
      0009CC E6               [12] 1918 	mov	a,@r0
      0009CD F7               [12] 1919 	mov	@r1,a
      0009CE D0 01            [24] 1920 	pop	ar1
      0009D0 D0 00            [24] 1921 	pop	ar0
      0009D2 02r09r26         [24] 1922 	ljmp	00173$
      0009D5                       1923 00238$:
                                   1924 ;	printf_large.c:718: else if (radix != 0)
      0009D5 E5*00            [12] 1925 	mov	a,_bp
      0009D7 24 16            [12] 1926 	add	a,#0x16
      0009D9 F9               [12] 1927 	mov	r1,a
      0009DA E7               [12] 1928 	mov	a,@r1
      0009DB 70 03            [24] 1929 	jnz	00591$
      0009DD 02r01r66         [24] 1930 	ljmp	00243$
      0009E0                       1931 00591$:
                                   1932 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      0009E0 E5*00            [12] 1933 	mov	a,_bp
      0009E2 24 08            [12] 1934 	add	a,#0x08
      0009E4 F9               [12] 1935 	mov	r1,a
      0009E5 87 03            [24] 1936 	mov	ar3,@r1
                                   1937 ;	printf_large.c:726: if (char_argument)
      0009E7 30*00 5C         [24] 1938 	jnb	b5,00184$
                                   1939 ;	printf_large.c:728: value.l = va_arg(ap, char);
      0009EA E5*00            [12] 1940 	mov	a,_bp
      0009EC 24 11            [12] 1941 	add	a,#0x11
      0009EE F9               [12] 1942 	mov	r1,a
      0009EF C0 00            [24] 1943 	push	ar0
      0009F1 E5*00            [12] 1944 	mov	a,_bp
      0009F3 24 F7            [12] 1945 	add	a,#0xf7
      0009F5 F8               [12] 1946 	mov	r0,a
      0009F6 E6               [12] 1947 	mov	a,@r0
      0009F7 14               [12] 1948 	dec	a
      0009F8 FF               [12] 1949 	mov	r7,a
      0009F9 E5*00            [12] 1950 	mov	a,_bp
      0009FB 24 F7            [12] 1951 	add	a,#0xf7
      0009FD F8               [12] 1952 	mov	r0,a
      0009FE A6 07            [24] 1953 	mov	@r0,ar7
      000A00 A8 07            [24] 1954 	mov	r0,ar7
      000A02 86 07            [24] 1955 	mov	ar7,@r0
      000A04 D0 00            [24] 1956 	pop	ar0
      000A06 EF               [12] 1957 	mov	a,r7
      000A07 33               [12] 1958 	rlc	a
      000A08 95 E0            [12] 1959 	subb	a,acc
      000A0A FE               [12] 1960 	mov	r6,a
      000A0B FD               [12] 1961 	mov	r5,a
      000A0C FC               [12] 1962 	mov	r4,a
      000A0D A7 07            [24] 1963 	mov	@r1,ar7
      000A0F 09               [12] 1964 	inc	r1
      000A10 A7 06            [24] 1965 	mov	@r1,ar6
      000A12 09               [12] 1966 	inc	r1
      000A13 A7 05            [24] 1967 	mov	@r1,ar5
      000A15 09               [12] 1968 	inc	r1
      000A16 A7 04            [24] 1969 	mov	@r1,ar4
      000A18 19               [12] 1970 	dec	r1
      000A19 19               [12] 1971 	dec	r1
      000A1A 19               [12] 1972 	dec	r1
                                   1973 ;	printf_large.c:729: if (!signed_argument)
      000A1B 30*00 03         [24] 1974 	jnb	b4,00593$
      000A1E 02r0ArD6         [24] 1975 	ljmp	00185$
      000A21                       1976 00593$:
                                   1977 ;	printf_large.c:731: value.l &= 0xFF;
      000A21 87 04            [24] 1978 	mov	ar4,@r1
      000A23 09               [12] 1979 	inc	r1
      000A24 87 05            [24] 1980 	mov	ar5,@r1
      000A26 09               [12] 1981 	inc	r1
      000A27 87 06            [24] 1982 	mov	ar6,@r1
      000A29 09               [12] 1983 	inc	r1
      000A2A 87 07            [24] 1984 	mov	ar7,@r1
      000A2C 19               [12] 1985 	dec	r1
      000A2D 19               [12] 1986 	dec	r1
      000A2E 19               [12] 1987 	dec	r1
      000A2F 7D 00            [12] 1988 	mov	r5,#0x00
      000A31 7E 00            [12] 1989 	mov	r6,#0x00
      000A33 7F 00            [12] 1990 	mov	r7,#0x00
      000A35 A7 04            [24] 1991 	mov	@r1,ar4
      000A37 09               [12] 1992 	inc	r1
      000A38 A7 05            [24] 1993 	mov	@r1,ar5
      000A3A 09               [12] 1994 	inc	r1
      000A3B A7 06            [24] 1995 	mov	@r1,ar6
      000A3D 09               [12] 1996 	inc	r1
      000A3E A7 07            [24] 1997 	mov	@r1,ar7
      000A40 19               [12] 1998 	dec	r1
      000A41 19               [12] 1999 	dec	r1
      000A42 19               [12] 2000 	dec	r1
      000A43 02r0ArD6         [24] 2001 	ljmp	00185$
      000A46                       2002 00184$:
                                   2003 ;	printf_large.c:734: else if (long_argument)
      000A46 30*00 36         [24] 2004 	jnb	b6,00181$
                                   2005 ;	printf_large.c:736: value.l = va_arg(ap, long);
      000A49 E5*00            [12] 2006 	mov	a,_bp
      000A4B 24 11            [12] 2007 	add	a,#0x11
      000A4D F9               [12] 2008 	mov	r1,a
      000A4E C0 00            [24] 2009 	push	ar0
      000A50 E5*00            [12] 2010 	mov	a,_bp
      000A52 24 F7            [12] 2011 	add	a,#0xf7
      000A54 F8               [12] 2012 	mov	r0,a
      000A55 E6               [12] 2013 	mov	a,@r0
      000A56 24 FC            [12] 2014 	add	a,#0xFC
      000A58 FF               [12] 2015 	mov	r7,a
      000A59 E5*00            [12] 2016 	mov	a,_bp
      000A5B 24 F7            [12] 2017 	add	a,#0xf7
      000A5D F8               [12] 2018 	mov	r0,a
      000A5E A6 07            [24] 2019 	mov	@r0,ar7
      000A60 A8 07            [24] 2020 	mov	r0,ar7
      000A62 86 04            [24] 2021 	mov	ar4,@r0
      000A64 08               [12] 2022 	inc	r0
      000A65 86 05            [24] 2023 	mov	ar5,@r0
      000A67 08               [12] 2024 	inc	r0
      000A68 86 06            [24] 2025 	mov	ar6,@r0
      000A6A 08               [12] 2026 	inc	r0
      000A6B 86 07            [24] 2027 	mov	ar7,@r0
      000A6D D0 00            [24] 2028 	pop	ar0
      000A6F A7 04            [24] 2029 	mov	@r1,ar4
      000A71 09               [12] 2030 	inc	r1
      000A72 A7 05            [24] 2031 	mov	@r1,ar5
      000A74 09               [12] 2032 	inc	r1
      000A75 A7 06            [24] 2033 	mov	@r1,ar6
      000A77 09               [12] 2034 	inc	r1
      000A78 A7 07            [24] 2035 	mov	@r1,ar7
      000A7A 19               [12] 2036 	dec	r1
      000A7B 19               [12] 2037 	dec	r1
      000A7C 19               [12] 2038 	dec	r1
      000A7D 80 57            [24] 2039 	sjmp	00185$
      000A7F                       2040 00181$:
                                   2041 ;	printf_large.c:740: value.l = va_arg(ap, int);
      000A7F E5*00            [12] 2042 	mov	a,_bp
      000A81 24 11            [12] 2043 	add	a,#0x11
      000A83 F9               [12] 2044 	mov	r1,a
      000A84 C0 00            [24] 2045 	push	ar0
      000A86 E5*00            [12] 2046 	mov	a,_bp
      000A88 24 F7            [12] 2047 	add	a,#0xf7
      000A8A F8               [12] 2048 	mov	r0,a
      000A8B E6               [12] 2049 	mov	a,@r0
      000A8C 24 FE            [12] 2050 	add	a,#0xFE
      000A8E FF               [12] 2051 	mov	r7,a
      000A8F E5*00            [12] 2052 	mov	a,_bp
      000A91 24 F7            [12] 2053 	add	a,#0xf7
      000A93 F8               [12] 2054 	mov	r0,a
      000A94 A6 07            [24] 2055 	mov	@r0,ar7
      000A96 A8 07            [24] 2056 	mov	r0,ar7
      000A98 86 06            [24] 2057 	mov	ar6,@r0
      000A9A 08               [12] 2058 	inc	r0
      000A9B 86 07            [24] 2059 	mov	ar7,@r0
      000A9D D0 00            [24] 2060 	pop	ar0
      000A9F EF               [12] 2061 	mov	a,r7
      000AA0 33               [12] 2062 	rlc	a
      000AA1 95 E0            [12] 2063 	subb	a,acc
      000AA3 FD               [12] 2064 	mov	r5,a
      000AA4 FC               [12] 2065 	mov	r4,a
      000AA5 A7 06            [24] 2066 	mov	@r1,ar6
      000AA7 09               [12] 2067 	inc	r1
      000AA8 A7 07            [24] 2068 	mov	@r1,ar7
      000AAA 09               [12] 2069 	inc	r1
      000AAB A7 05            [24] 2070 	mov	@r1,ar5
      000AAD 09               [12] 2071 	inc	r1
      000AAE A7 04            [24] 2072 	mov	@r1,ar4
      000AB0 19               [12] 2073 	dec	r1
      000AB1 19               [12] 2074 	dec	r1
      000AB2 19               [12] 2075 	dec	r1
                                   2076 ;	printf_large.c:741: if (!signed_argument)
      000AB3 20*00 20         [24] 2077 	jb	b4,00185$
                                   2078 ;	printf_large.c:743: value.l &= 0xFFFF;
      000AB6 87 04            [24] 2079 	mov	ar4,@r1
      000AB8 09               [12] 2080 	inc	r1
      000AB9 87 05            [24] 2081 	mov	ar5,@r1
      000ABB 09               [12] 2082 	inc	r1
      000ABC 87 06            [24] 2083 	mov	ar6,@r1
      000ABE 09               [12] 2084 	inc	r1
      000ABF 87 07            [24] 2085 	mov	ar7,@r1
      000AC1 19               [12] 2086 	dec	r1
      000AC2 19               [12] 2087 	dec	r1
      000AC3 19               [12] 2088 	dec	r1
      000AC4 7E 00            [12] 2089 	mov	r6,#0x00
      000AC6 7F 00            [12] 2090 	mov	r7,#0x00
      000AC8 A7 04            [24] 2091 	mov	@r1,ar4
      000ACA 09               [12] 2092 	inc	r1
      000ACB A7 05            [24] 2093 	mov	@r1,ar5
      000ACD 09               [12] 2094 	inc	r1
      000ACE A7 06            [24] 2095 	mov	@r1,ar6
      000AD0 09               [12] 2096 	inc	r1
      000AD1 A7 07            [24] 2097 	mov	@r1,ar7
      000AD3 19               [12] 2098 	dec	r1
      000AD4 19               [12] 2099 	dec	r1
      000AD5 19               [12] 2100 	dec	r1
      000AD6                       2101 00185$:
                                   2102 ;	printf_large.c:747: if ( signed_argument )
      000AD6 30*00 44         [24] 2103 	jnb	b4,00190$
                                   2104 ;	printf_large.c:749: if (value.l < 0)
      000AD9 E5*00            [12] 2105 	mov	a,_bp
      000ADB 24 11            [12] 2106 	add	a,#0x11
      000ADD F9               [12] 2107 	mov	r1,a
      000ADE 87 04            [24] 2108 	mov	ar4,@r1
      000AE0 09               [12] 2109 	inc	r1
      000AE1 87 05            [24] 2110 	mov	ar5,@r1
      000AE3 09               [12] 2111 	inc	r1
      000AE4 87 06            [24] 2112 	mov	ar6,@r1
      000AE6 09               [12] 2113 	inc	r1
      000AE7 87 07            [24] 2114 	mov	ar7,@r1
      000AE9 19               [12] 2115 	dec	r1
      000AEA 19               [12] 2116 	dec	r1
      000AEB 19               [12] 2117 	dec	r1
      000AEC EF               [12] 2118 	mov	a,r7
      000AED 30 E7 2B         [24] 2119 	jnb	acc.7,00187$
                                   2120 ;	printf_large.c:750: value.l = -value.l;
      000AF0 87 04            [24] 2121 	mov	ar4,@r1
      000AF2 09               [12] 2122 	inc	r1
      000AF3 87 05            [24] 2123 	mov	ar5,@r1
      000AF5 09               [12] 2124 	inc	r1
      000AF6 87 06            [24] 2125 	mov	ar6,@r1
      000AF8 09               [12] 2126 	inc	r1
      000AF9 87 07            [24] 2127 	mov	ar7,@r1
      000AFB 19               [12] 2128 	dec	r1
      000AFC 19               [12] 2129 	dec	r1
      000AFD 19               [12] 2130 	dec	r1
      000AFE C3               [12] 2131 	clr	c
      000AFF E4               [12] 2132 	clr	a
      000B00 9C               [12] 2133 	subb	a,r4
      000B01 FC               [12] 2134 	mov	r4,a
      000B02 E4               [12] 2135 	clr	a
      000B03 9D               [12] 2136 	subb	a,r5
      000B04 FD               [12] 2137 	mov	r5,a
      000B05 E4               [12] 2138 	clr	a
      000B06 9E               [12] 2139 	subb	a,r6
      000B07 FE               [12] 2140 	mov	r6,a
      000B08 E4               [12] 2141 	clr	a
      000B09 9F               [12] 2142 	subb	a,r7
      000B0A FF               [12] 2143 	mov	r7,a
      000B0B A7 04            [24] 2144 	mov	@r1,ar4
      000B0D 09               [12] 2145 	inc	r1
      000B0E A7 05            [24] 2146 	mov	@r1,ar5
      000B10 09               [12] 2147 	inc	r1
      000B11 A7 06            [24] 2148 	mov	@r1,ar6
      000B13 09               [12] 2149 	inc	r1
      000B14 A7 07            [24] 2150 	mov	@r1,ar7
      000B16 19               [12] 2151 	dec	r1
      000B17 19               [12] 2152 	dec	r1
      000B18 19               [12] 2153 	dec	r1
      000B19 80 02            [24] 2154 	sjmp	00190$
      000B1B                       2155 00187$:
                                   2156 ;	printf_large.c:752: signed_argument = 0;
      000B1B C2*00            [12] 2157 	clr	b4
      000B1D                       2158 00190$:
                                   2159 ;	printf_large.c:756: lsd = 1;
      000B1D D2*00            [12] 2160 	setb	b5
                                   2161 ;	printf_large.c:758: do {
      000B1F 8B 01            [24] 2162 	mov	ar1,r3
      000B21 C0 00            [24] 2163 	push	ar0
      000B23 E5*00            [12] 2164 	mov	a,_bp
      000B25 24 18            [12] 2165 	add	a,#0x18
      000B27 F8               [12] 2166 	mov	r0,a
      000B28 76 00            [12] 2167 	mov	@r0,#0x00
      000B2A D0 00            [24] 2168 	pop	ar0
      000B2C                       2169 00194$:
                                   2170 ;	printf_large.c:759: value.byte[4] = 0;
      000B2C E5*00            [12] 2171 	mov	a,_bp
      000B2E 24 11            [12] 2172 	add	a,#0x11
      000B30 24 04            [12] 2173 	add	a,#0x04
      000B32 C0 00            [24] 2174 	push	ar0
      000B34 F8               [12] 2175 	mov	r0,a
      000B35 76 00            [12] 2176 	mov	@r0,#0x00
      000B37 D0 00            [24] 2177 	pop	ar0
                                   2178 ;	printf_large.c:761: calculate_digit(&value, radix);
      000B39 88 06            [24] 2179 	mov	ar6,r0
      000B3B C0 02            [24] 2180 	push	ar2
      000B3D C0 01            [24] 2181 	push	ar1
      000B3F C0 00            [24] 2182 	push	ar0
      000B41 C0*00            [24] 2183 	push	bits
      000B43 85 00 F0         [24] 2184 	mov	b,ar0
      000B46 E5*00            [12] 2185 	mov	a,_bp
      000B48 24 16            [12] 2186 	add	a,#0x16
      000B4A F8               [12] 2187 	mov	r0,a
      000B4B E6               [12] 2188 	mov	a,@r0
      000B4C C0 E0            [24] 2189 	push	acc
      000B4E 8E 82            [24] 2190 	mov	dpl,r6
      000B50 12r00rBD         [24] 2191 	lcall	_calculate_digit
      000B53 15 81            [12] 2192 	dec	sp
      000B55 D0*00            [24] 2193 	pop	bits
      000B57 D0 00            [24] 2194 	pop	ar0
      000B59 D0 01            [24] 2195 	pop	ar1
      000B5B D0 02            [24] 2196 	pop	ar2
                                   2197 ;	printf_large.c:765: if (!lsd)
      000B5D 20*00 14         [24] 2198 	jb	b5,00192$
                                   2199 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000B60 C0 00            [24] 2200 	push	ar0
      000B62 A8 02            [24] 2201 	mov	r0,ar2
      000B64 86 06            [24] 2202 	mov	ar6,@r0
      000B66 D0 00            [24] 2203 	pop	ar0
      000B68 EE               [12] 2204 	mov	a,r6
      000B69 C4               [12] 2205 	swap	a
      000B6A FE               [12] 2206 	mov	r6,a
      000B6B E7               [12] 2207 	mov	a,@r1
      000B6C FD               [12] 2208 	mov	r5,a
      000B6D 42 06            [12] 2209 	orl	ar6,a
      000B6F A7 06            [24] 2210 	mov	@r1,ar6
                                   2211 ;	printf_large.c:768: pstore--;
      000B71 19               [12] 2212 	dec	r1
      000B72 80 0A            [24] 2213 	sjmp	00193$
      000B74                       2214 00192$:
                                   2215 ;	printf_large.c:772: *pstore = value.byte[4];
      000B74 C0 00            [24] 2216 	push	ar0
      000B76 A8 02            [24] 2217 	mov	r0,ar2
      000B78 86 06            [24] 2218 	mov	ar6,@r0
      000B7A D0 00            [24] 2219 	pop	ar0
      000B7C A7 06            [24] 2220 	mov	@r1,ar6
      000B7E                       2221 00193$:
                                   2222 ;	printf_large.c:774: length++;
      000B7E C0 00            [24] 2223 	push	ar0
      000B80 E5*00            [12] 2224 	mov	a,_bp
      000B82 24 18            [12] 2225 	add	a,#0x18
      000B84 F8               [12] 2226 	mov	r0,a
      000B85 06               [12] 2227 	inc	@r0
      000B86 D0 00            [24] 2228 	pop	ar0
                                   2229 ;	printf_large.c:775: lsd = !lsd;
      000B88 B2*00            [12] 2230 	cpl	b5
                                   2231 ;	printf_large.c:776: } while( value.ul );
      000B8A 86 04            [24] 2232 	mov	ar4,@r0
      000B8C 08               [12] 2233 	inc	r0
      000B8D 86 05            [24] 2234 	mov	ar5,@r0
      000B8F 08               [12] 2235 	inc	r0
      000B90 86 06            [24] 2236 	mov	ar6,@r0
      000B92 08               [12] 2237 	inc	r0
      000B93 86 07            [24] 2238 	mov	ar7,@r0
      000B95 18               [12] 2239 	dec	r0
      000B96 18               [12] 2240 	dec	r0
      000B97 18               [12] 2241 	dec	r0
      000B98 EC               [12] 2242 	mov	a,r4
      000B99 4D               [12] 2243 	orl	a,r5
      000B9A 4E               [12] 2244 	orl	a,r6
      000B9B 4F               [12] 2245 	orl	a,r7
      000B9C 70 8E            [24] 2246 	jnz	00194$
                                   2247 ;	printf_large.c:778: if (width == 0)
      000B9E 89 03            [24] 2248 	mov	ar3,r1
      000BA0 E5*00            [12] 2249 	mov	a,_bp
      000BA2 24 18            [12] 2250 	add	a,#0x18
      000BA4 F9               [12] 2251 	mov	r1,a
      000BA5 C0 00            [24] 2252 	push	ar0
      000BA7 A8*00            [24] 2253 	mov	r0,_bp
      000BA9 08               [12] 2254 	inc	r0
      000BAA E7               [12] 2255 	mov	a,@r1
      000BAB F6               [12] 2256 	mov	@r0,a
      000BAC D0 00            [24] 2257 	pop	ar0
      000BAE E5*00            [12] 2258 	mov	a,_bp
      000BB0 24 17            [12] 2259 	add	a,#0x17
      000BB2 F9               [12] 2260 	mov	r1,a
      000BB3 E7               [12] 2261 	mov	a,@r1
      000BB4 70 07            [24] 2262 	jnz	00198$
                                   2263 ;	printf_large.c:783: width = 1;
      000BB6 E5*00            [12] 2264 	mov	a,_bp
      000BB8 24 17            [12] 2265 	add	a,#0x17
      000BBA F9               [12] 2266 	mov	r1,a
      000BBB 77 01            [12] 2267 	mov	@r1,#0x01
      000BBD                       2268 00198$:
                                   2269 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      000BBD 30*00 03         [24] 2270 	jnb	b1,00601$
      000BC0 02r0Cr48         [24] 2271 	ljmp	00203$
      000BC3                       2272 00601$:
      000BC3 30*00 03         [24] 2273 	jnb	b0,00602$
      000BC6 02r0Cr48         [24] 2274 	ljmp	00203$
      000BC9                       2275 00602$:
                                   2276 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      000BC9 A9*00            [24] 2277 	mov	r1,_bp
      000BCB 09               [12] 2278 	inc	r1
      000BCC E7               [12] 2279 	mov	a,@r1
      000BCD 04               [12] 2280 	inc	a
      000BCE FF               [12] 2281 	mov	r7,a
      000BCF E5*00            [12] 2282 	mov	a,_bp
      000BD1 24 0B            [12] 2283 	add	a,#0x0b
      000BD3 F9               [12] 2284 	mov	r1,a
      000BD4 87 05            [24] 2285 	mov	ar5,@r1
      000BD6 09               [12] 2286 	inc	r1
      000BD7 87 06            [24] 2287 	mov	ar6,@r1
      000BD9 E5*00            [12] 2288 	mov	a,_bp
      000BDB 24 17            [12] 2289 	add	a,#0x17
      000BDD F9               [12] 2290 	mov	r1,a
      000BDE 87 04            [24] 2291 	mov	ar4,@r1
      000BE0                       2292 00199$:
      000BE0 C3               [12] 2293 	clr	c
      000BE1 EF               [12] 2294 	mov	a,r7
      000BE2 9C               [12] 2295 	subb	a,r4
      000BE3 50 52            [24] 2296 	jnc	00333$
                                   2297 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      000BE5 C0 07            [24] 2298 	push	ar7
      000BE7 C0 06            [24] 2299 	push	ar6
      000BE9 C0 05            [24] 2300 	push	ar5
      000BEB C0 04            [24] 2301 	push	ar4
      000BED C0 03            [24] 2302 	push	ar3
      000BEF C0 02            [24] 2303 	push	ar2
      000BF1 C0 00            [24] 2304 	push	ar0
      000BF3 C0*00            [24] 2305 	push	bits
      000BF5 E5*00            [12] 2306 	mov	a,_bp
      000BF7 24 FB            [12] 2307 	add	a,#0xfb
      000BF9 F9               [12] 2308 	mov	r1,a
      000BFA E7               [12] 2309 	mov	a,@r1
      000BFB C0 E0            [24] 2310 	push	acc
      000BFD 09               [12] 2311 	inc	r1
      000BFE E7               [12] 2312 	mov	a,@r1
      000BFF C0 E0            [24] 2313 	push	acc
      000C01 09               [12] 2314 	inc	r1
      000C02 E7               [12] 2315 	mov	a,@r1
      000C03 C0 E0            [24] 2316 	push	acc
      000C05 12r0Cr0A         [24] 2317 	lcall	00604$
      000C08 80 0F            [24] 2318 	sjmp	00605$
      000C0A                       2319 00604$:
      000C0A A9*00            [24] 2320 	mov	r1,_bp
      000C0C 09               [12] 2321 	inc	r1
      000C0D 09               [12] 2322 	inc	r1
      000C0E E7               [12] 2323 	mov	a,@r1
      000C0F C0 E0            [24] 2324 	push	acc
      000C11 09               [12] 2325 	inc	r1
      000C12 E7               [12] 2326 	mov	a,@r1
      000C13 C0 E0            [24] 2327 	push	acc
      000C15 75 82 20         [24] 2328 	mov	dpl,#0x20
      000C18 22               [24] 2329 	ret
      000C19                       2330 00605$:
      000C19 15 81            [12] 2331 	dec	sp
      000C1B 15 81            [12] 2332 	dec	sp
      000C1D 15 81            [12] 2333 	dec	sp
      000C1F D0*00            [24] 2334 	pop	bits
      000C21 D0 00            [24] 2335 	pop	ar0
      000C23 D0 02            [24] 2336 	pop	ar2
      000C25 D0 03            [24] 2337 	pop	ar3
      000C27 D0 04            [24] 2338 	pop	ar4
      000C29 D0 05            [24] 2339 	pop	ar5
      000C2B D0 06            [24] 2340 	pop	ar6
      000C2D D0 07            [24] 2341 	pop	ar7
      000C2F 0D               [12] 2342 	inc	r5
      000C30 BD 00 01         [24] 2343 	cjne	r5,#0x00,00606$
      000C33 0E               [12] 2344 	inc	r6
      000C34                       2345 00606$:
                                   2346 ;	printf_large.c:792: width--;
      000C34 1C               [12] 2347 	dec	r4
      000C35 80 A9            [24] 2348 	sjmp	00199$
      000C37                       2349 00333$:
      000C37 E5*00            [12] 2350 	mov	a,_bp
      000C39 24 0B            [12] 2351 	add	a,#0x0b
      000C3B F9               [12] 2352 	mov	r1,a
      000C3C A7 05            [24] 2353 	mov	@r1,ar5
      000C3E 09               [12] 2354 	inc	r1
      000C3F A7 06            [24] 2355 	mov	@r1,ar6
      000C41 E5*00            [12] 2356 	mov	a,_bp
      000C43 24 17            [12] 2357 	add	a,#0x17
      000C45 F9               [12] 2358 	mov	r1,a
      000C46 A7 04            [24] 2359 	mov	@r1,ar4
      000C48                       2360 00203$:
                                   2361 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      000C48 30*00 4E         [24] 2362 	jnb	b4,00213$
                                   2363 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      000C4B C0 03            [24] 2364 	push	ar3
      000C4D C0 02            [24] 2365 	push	ar2
      000C4F C0 00            [24] 2366 	push	ar0
      000C51 C0*00            [24] 2367 	push	bits
      000C53 E5*00            [12] 2368 	mov	a,_bp
      000C55 24 FB            [12] 2369 	add	a,#0xfb
      000C57 F9               [12] 2370 	mov	r1,a
      000C58 E7               [12] 2371 	mov	a,@r1
      000C59 C0 E0            [24] 2372 	push	acc
      000C5B 09               [12] 2373 	inc	r1
      000C5C E7               [12] 2374 	mov	a,@r1
      000C5D C0 E0            [24] 2375 	push	acc
      000C5F 09               [12] 2376 	inc	r1
      000C60 E7               [12] 2377 	mov	a,@r1
      000C61 C0 E0            [24] 2378 	push	acc
      000C63 12r0Cr68         [24] 2379 	lcall	00608$
      000C66 80 0F            [24] 2380 	sjmp	00609$
      000C68                       2381 00608$:
      000C68 A9*00            [24] 2382 	mov	r1,_bp
      000C6A 09               [12] 2383 	inc	r1
      000C6B 09               [12] 2384 	inc	r1
      000C6C E7               [12] 2385 	mov	a,@r1
      000C6D C0 E0            [24] 2386 	push	acc
      000C6F 09               [12] 2387 	inc	r1
      000C70 E7               [12] 2388 	mov	a,@r1
      000C71 C0 E0            [24] 2389 	push	acc
      000C73 75 82 2D         [24] 2390 	mov	dpl,#0x2D
      000C76 22               [24] 2391 	ret
      000C77                       2392 00609$:
      000C77 15 81            [12] 2393 	dec	sp
      000C79 15 81            [12] 2394 	dec	sp
      000C7B 15 81            [12] 2395 	dec	sp
      000C7D D0*00            [24] 2396 	pop	bits
      000C7F D0 00            [24] 2397 	pop	ar0
      000C81 D0 02            [24] 2398 	pop	ar2
      000C83 D0 03            [24] 2399 	pop	ar3
      000C85 E5*00            [12] 2400 	mov	a,_bp
      000C87 24 0B            [12] 2401 	add	a,#0x0b
      000C89 F9               [12] 2402 	mov	r1,a
      000C8A 07               [12] 2403 	inc	@r1
      000C8B B7 00 02         [24] 2404 	cjne	@r1,#0x00,00610$
      000C8E 09               [12] 2405 	inc	r1
      000C8F 07               [12] 2406 	inc	@r1
      000C90                       2407 00610$:
                                   2408 ;	printf_large.c:800: width--;
      000C90 E5*00            [12] 2409 	mov	a,_bp
      000C92 24 17            [12] 2410 	add	a,#0x17
      000C94 F9               [12] 2411 	mov	r1,a
      000C95 17               [12] 2412 	dec	@r1
      000C96 02r0Dr40         [24] 2413 	ljmp	00214$
      000C99                       2414 00213$:
                                   2415 ;	printf_large.c:802: else if (length != 0)
      000C99 A9*00            [24] 2416 	mov	r1,_bp
      000C9B 09               [12] 2417 	inc	r1
      000C9C E7               [12] 2418 	mov	a,@r1
      000C9D 70 03            [24] 2419 	jnz	00611$
      000C9F 02r0Dr40         [24] 2420 	ljmp	00214$
      000CA2                       2421 00611$:
                                   2422 ;	printf_large.c:805: if (prefix_sign)
      000CA2 30*00 4D         [24] 2423 	jnb	b2,00208$
                                   2424 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      000CA5 C0 03            [24] 2425 	push	ar3
      000CA7 C0 02            [24] 2426 	push	ar2
      000CA9 C0 00            [24] 2427 	push	ar0
      000CAB C0*00            [24] 2428 	push	bits
      000CAD E5*00            [12] 2429 	mov	a,_bp
      000CAF 24 FB            [12] 2430 	add	a,#0xfb
      000CB1 F9               [12] 2431 	mov	r1,a
      000CB2 E7               [12] 2432 	mov	a,@r1
      000CB3 C0 E0            [24] 2433 	push	acc
      000CB5 09               [12] 2434 	inc	r1
      000CB6 E7               [12] 2435 	mov	a,@r1
      000CB7 C0 E0            [24] 2436 	push	acc
      000CB9 09               [12] 2437 	inc	r1
      000CBA E7               [12] 2438 	mov	a,@r1
      000CBB C0 E0            [24] 2439 	push	acc
      000CBD 12r0CrC2         [24] 2440 	lcall	00613$
      000CC0 80 0F            [24] 2441 	sjmp	00614$
      000CC2                       2442 00613$:
      000CC2 A9*00            [24] 2443 	mov	r1,_bp
      000CC4 09               [12] 2444 	inc	r1
      000CC5 09               [12] 2445 	inc	r1
      000CC6 E7               [12] 2446 	mov	a,@r1
      000CC7 C0 E0            [24] 2447 	push	acc
      000CC9 09               [12] 2448 	inc	r1
      000CCA E7               [12] 2449 	mov	a,@r1
      000CCB C0 E0            [24] 2450 	push	acc
      000CCD 75 82 2B         [24] 2451 	mov	dpl,#0x2B
      000CD0 22               [24] 2452 	ret
      000CD1                       2453 00614$:
      000CD1 15 81            [12] 2454 	dec	sp
      000CD3 15 81            [12] 2455 	dec	sp
      000CD5 15 81            [12] 2456 	dec	sp
      000CD7 D0*00            [24] 2457 	pop	bits
      000CD9 D0 00            [24] 2458 	pop	ar0
      000CDB D0 02            [24] 2459 	pop	ar2
      000CDD D0 03            [24] 2460 	pop	ar3
      000CDF E5*00            [12] 2461 	mov	a,_bp
      000CE1 24 0B            [12] 2462 	add	a,#0x0b
      000CE3 F9               [12] 2463 	mov	r1,a
      000CE4 07               [12] 2464 	inc	@r1
      000CE5 B7 00 02         [24] 2465 	cjne	@r1,#0x00,00615$
      000CE8 09               [12] 2466 	inc	r1
      000CE9 07               [12] 2467 	inc	@r1
      000CEA                       2468 00615$:
                                   2469 ;	printf_large.c:809: width--;
      000CEA E5*00            [12] 2470 	mov	a,_bp
      000CEC 24 17            [12] 2471 	add	a,#0x17
      000CEE F9               [12] 2472 	mov	r1,a
      000CEF 17               [12] 2473 	dec	@r1
      000CF0 80 4E            [24] 2474 	sjmp	00214$
      000CF2                       2475 00208$:
                                   2476 ;	printf_large.c:811: else if (prefix_space)
      000CF2 30*00 4B         [24] 2477 	jnb	b3,00214$
                                   2478 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      000CF5 C0 03            [24] 2479 	push	ar3
      000CF7 C0 02            [24] 2480 	push	ar2
      000CF9 C0 00            [24] 2481 	push	ar0
      000CFB C0*00            [24] 2482 	push	bits
      000CFD E5*00            [12] 2483 	mov	a,_bp
      000CFF 24 FB            [12] 2484 	add	a,#0xfb
      000D01 F9               [12] 2485 	mov	r1,a
      000D02 E7               [12] 2486 	mov	a,@r1
      000D03 C0 E0            [24] 2487 	push	acc
      000D05 09               [12] 2488 	inc	r1
      000D06 E7               [12] 2489 	mov	a,@r1
      000D07 C0 E0            [24] 2490 	push	acc
      000D09 09               [12] 2491 	inc	r1
      000D0A E7               [12] 2492 	mov	a,@r1
      000D0B C0 E0            [24] 2493 	push	acc
      000D0D 12r0Dr12         [24] 2494 	lcall	00617$
      000D10 80 0F            [24] 2495 	sjmp	00618$
      000D12                       2496 00617$:
      000D12 A9*00            [24] 2497 	mov	r1,_bp
      000D14 09               [12] 2498 	inc	r1
      000D15 09               [12] 2499 	inc	r1
      000D16 E7               [12] 2500 	mov	a,@r1
      000D17 C0 E0            [24] 2501 	push	acc
      000D19 09               [12] 2502 	inc	r1
      000D1A E7               [12] 2503 	mov	a,@r1
      000D1B C0 E0            [24] 2504 	push	acc
      000D1D 75 82 20         [24] 2505 	mov	dpl,#0x20
      000D20 22               [24] 2506 	ret
      000D21                       2507 00618$:
      000D21 15 81            [12] 2508 	dec	sp
      000D23 15 81            [12] 2509 	dec	sp
      000D25 15 81            [12] 2510 	dec	sp
      000D27 D0*00            [24] 2511 	pop	bits
      000D29 D0 00            [24] 2512 	pop	ar0
      000D2B D0 02            [24] 2513 	pop	ar2
      000D2D D0 03            [24] 2514 	pop	ar3
      000D2F E5*00            [12] 2515 	mov	a,_bp
      000D31 24 0B            [12] 2516 	add	a,#0x0b
      000D33 F9               [12] 2517 	mov	r1,a
      000D34 07               [12] 2518 	inc	@r1
      000D35 B7 00 02         [24] 2519 	cjne	@r1,#0x00,00619$
      000D38 09               [12] 2520 	inc	r1
      000D39 07               [12] 2521 	inc	@r1
      000D3A                       2522 00619$:
                                   2523 ;	printf_large.c:815: width--;
      000D3A E5*00            [12] 2524 	mov	a,_bp
      000D3C 24 17            [12] 2525 	add	a,#0x17
      000D3E F9               [12] 2526 	mov	r1,a
      000D3F 17               [12] 2527 	dec	@r1
      000D40                       2528 00214$:
                                   2529 ;	printf_large.c:820: if (!left_justify)
      000D40 20*00 74         [24] 2530 	jb	b0,00222$
                                   2531 ;	printf_large.c:822: while ( width-- > length )
      000D43 E5*00            [12] 2532 	mov	a,_bp
      000D45 24 0B            [12] 2533 	add	a,#0x0b
      000D47 F9               [12] 2534 	mov	r1,a
      000D48 87 06            [24] 2535 	mov	ar6,@r1
      000D4A 09               [12] 2536 	inc	r1
      000D4B 87 07            [24] 2537 	mov	ar7,@r1
      000D4D E5*00            [12] 2538 	mov	a,_bp
      000D4F 24 17            [12] 2539 	add	a,#0x17
      000D51 F9               [12] 2540 	mov	r1,a
      000D52 87 05            [24] 2541 	mov	ar5,@r1
      000D54                       2542 00215$:
      000D54 8D 04            [24] 2543 	mov	ar4,r5
      000D56 1D               [12] 2544 	dec	r5
      000D57 A9*00            [24] 2545 	mov	r1,_bp
      000D59 09               [12] 2546 	inc	r1
      000D5A C3               [12] 2547 	clr	c
      000D5B E7               [12] 2548 	mov	a,@r1
      000D5C 9C               [12] 2549 	subb	a,r4
      000D5D 40 03            [24] 2550 	jc	00621$
      000D5F 02r0DrE3         [24] 2551 	ljmp	00334$
      000D62                       2552 00621$:
                                   2553 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      000D62 30*00 04         [24] 2554 	jnb	b1,00248$
      000D65 7C 30            [12] 2555 	mov	r4,#0x30
      000D67 80 02            [24] 2556 	sjmp	00249$
      000D69                       2557 00248$:
      000D69 7C 20            [12] 2558 	mov	r4,#0x20
      000D6B                       2559 00249$:
      000D6B C0 07            [24] 2560 	push	ar7
      000D6D C0 06            [24] 2561 	push	ar6
      000D6F C0 05            [24] 2562 	push	ar5
      000D71 C0 03            [24] 2563 	push	ar3
      000D73 C0 02            [24] 2564 	push	ar2
      000D75 C0 00            [24] 2565 	push	ar0
      000D77 C0*00            [24] 2566 	push	bits
      000D79 E5*00            [12] 2567 	mov	a,_bp
      000D7B 24 FB            [12] 2568 	add	a,#0xfb
      000D7D F9               [12] 2569 	mov	r1,a
      000D7E E7               [12] 2570 	mov	a,@r1
      000D7F C0 E0            [24] 2571 	push	acc
      000D81 09               [12] 2572 	inc	r1
      000D82 E7               [12] 2573 	mov	a,@r1
      000D83 C0 E0            [24] 2574 	push	acc
      000D85 09               [12] 2575 	inc	r1
      000D86 E7               [12] 2576 	mov	a,@r1
      000D87 C0 E0            [24] 2577 	push	acc
      000D89 12r0Dr8E         [24] 2578 	lcall	00623$
      000D8C 80 0E            [24] 2579 	sjmp	00624$
      000D8E                       2580 00623$:
      000D8E A9*00            [24] 2581 	mov	r1,_bp
      000D90 09               [12] 2582 	inc	r1
      000D91 09               [12] 2583 	inc	r1
      000D92 E7               [12] 2584 	mov	a,@r1
      000D93 C0 E0            [24] 2585 	push	acc
      000D95 09               [12] 2586 	inc	r1
      000D96 E7               [12] 2587 	mov	a,@r1
      000D97 C0 E0            [24] 2588 	push	acc
      000D99 8C 82            [24] 2589 	mov	dpl,r4
      000D9B 22               [24] 2590 	ret
      000D9C                       2591 00624$:
      000D9C 15 81            [12] 2592 	dec	sp
      000D9E 15 81            [12] 2593 	dec	sp
      000DA0 15 81            [12] 2594 	dec	sp
      000DA2 D0*00            [24] 2595 	pop	bits
      000DA4 D0 00            [24] 2596 	pop	ar0
      000DA6 D0 02            [24] 2597 	pop	ar2
      000DA8 D0 03            [24] 2598 	pop	ar3
      000DAA D0 05            [24] 2599 	pop	ar5
      000DAC D0 06            [24] 2600 	pop	ar6
      000DAE D0 07            [24] 2601 	pop	ar7
      000DB0 0E               [12] 2602 	inc	r6
      000DB1 BE 00 A0         [24] 2603 	cjne	r6,#0x00,00215$
      000DB4 0F               [12] 2604 	inc	r7
      000DB5 80 9D            [24] 2605 	sjmp	00215$
      000DB7                       2606 00222$:
                                   2607 ;	printf_large.c:830: if (width > length)
      000DB7 E5*00            [12] 2608 	mov	a,_bp
      000DB9 24 17            [12] 2609 	add	a,#0x17
      000DBB F9               [12] 2610 	mov	r1,a
      000DBC C0 00            [24] 2611 	push	ar0
      000DBE A8*00            [24] 2612 	mov	r0,_bp
      000DC0 08               [12] 2613 	inc	r0
      000DC1 C3               [12] 2614 	clr	c
      000DC2 E6               [12] 2615 	mov	a,@r0
      000DC3 97               [12] 2616 	subb	a,@r1
      000DC4 D0 00            [24] 2617 	pop	ar0
      000DC6 50 12            [24] 2618 	jnc	00219$
                                   2619 ;	printf_large.c:831: width -= length;
      000DC8 E5*00            [12] 2620 	mov	a,_bp
      000DCA 24 17            [12] 2621 	add	a,#0x17
      000DCC F9               [12] 2622 	mov	r1,a
      000DCD C0 00            [24] 2623 	push	ar0
      000DCF A8*00            [24] 2624 	mov	r0,_bp
      000DD1 08               [12] 2625 	inc	r0
      000DD2 E7               [12] 2626 	mov	a,@r1
      000DD3 C3               [12] 2627 	clr	c
      000DD4 96               [12] 2628 	subb	a,@r0
      000DD5 F7               [12] 2629 	mov	@r1,a
      000DD6 D0 00            [24] 2630 	pop	ar0
      000DD8 80 1A            [24] 2631 	sjmp	00326$
      000DDA                       2632 00219$:
                                   2633 ;	printf_large.c:833: width = 0;
      000DDA E5*00            [12] 2634 	mov	a,_bp
      000DDC 24 17            [12] 2635 	add	a,#0x17
      000DDE F9               [12] 2636 	mov	r1,a
      000DDF 77 00            [12] 2637 	mov	@r1,#0x00
                                   2638 ;	printf_large.c:872: return charsOutputted;
                                   2639 ;	printf_large.c:837: while( length-- )
      000DE1 80 11            [24] 2640 	sjmp	00326$
      000DE3                       2641 00334$:
      000DE3 E5*00            [12] 2642 	mov	a,_bp
      000DE5 24 0B            [12] 2643 	add	a,#0x0b
      000DE7 F9               [12] 2644 	mov	r1,a
      000DE8 A7 06            [24] 2645 	mov	@r1,ar6
      000DEA 09               [12] 2646 	inc	r1
      000DEB A7 07            [24] 2647 	mov	@r1,ar7
      000DED E5*00            [12] 2648 	mov	a,_bp
      000DEF 24 17            [12] 2649 	add	a,#0x17
      000DF1 F9               [12] 2650 	mov	r1,a
      000DF2 A7 05            [24] 2651 	mov	@r1,ar5
      000DF4                       2652 00326$:
      000DF4 8B 01            [24] 2653 	mov	ar1,r3
      000DF6 C0 00            [24] 2654 	push	ar0
      000DF8 E5*00            [12] 2655 	mov	a,_bp
      000DFA 24 0B            [12] 2656 	add	a,#0x0b
      000DFC F8               [12] 2657 	mov	r0,a
      000DFD 86 06            [24] 2658 	mov	ar6,@r0
      000DFF 08               [12] 2659 	inc	r0
      000E00 86 07            [24] 2660 	mov	ar7,@r0
      000E02 A8*00            [24] 2661 	mov	r0,_bp
      000E04 08               [12] 2662 	inc	r0
      000E05 86 05            [24] 2663 	mov	ar5,@r0
      000E07 D0 00            [24] 2664 	pop	ar0
      000E09                       2665 00227$:
      000E09 8D 04            [24] 2666 	mov	ar4,r5
      000E0B 1D               [12] 2667 	dec	r5
      000E0C EC               [12] 2668 	mov	a,r4
      000E0D 70 03            [24] 2669 	jnz	00627$
      000E0F 02r0ErA0         [24] 2670 	ljmp	00335$
      000E12                       2671 00627$:
                                   2672 ;	printf_large.c:839: lsd = !lsd;
      000E12 B2*00            [12] 2673 	cpl	b5
                                   2674 ;	printf_large.c:840: if (!lsd)
      000E14 20*00 10         [24] 2675 	jb	b5,00225$
                                   2676 ;	printf_large.c:842: pstore++;
      000E17 09               [12] 2677 	inc	r1
                                   2678 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      000E18 E7               [12] 2679 	mov	a,@r1
      000E19 C4               [12] 2680 	swap	a
      000E1A 54 0F            [12] 2681 	anl	a,#0x0F
      000E1C FC               [12] 2682 	mov	r4,a
      000E1D C0 00            [24] 2683 	push	ar0
      000E1F A8 02            [24] 2684 	mov	r0,ar2
      000E21 A6 04            [24] 2685 	mov	@r0,ar4
      000E23 D0 00            [24] 2686 	pop	ar0
      000E25 80 0C            [24] 2687 	sjmp	00226$
      000E27                       2688 00225$:
                                   2689 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      000E27 87 04            [24] 2690 	mov	ar4,@r1
      000E29 74 0F            [12] 2691 	mov	a,#0x0F
      000E2B 5C               [12] 2692 	anl	a,r4
      000E2C C0 00            [24] 2693 	push	ar0
      000E2E A8 02            [24] 2694 	mov	r0,ar2
      000E30 F6               [12] 2695 	mov	@r0,a
      000E31 D0 00            [24] 2696 	pop	ar0
      000E33                       2697 00226$:
                                   2698 ;	printf_large.c:850: output_digit( value.byte[4], lower_case, output_char, p );
      000E33 C0 00            [24] 2699 	push	ar0
      000E35 A8 02            [24] 2700 	mov	r0,ar2
      000E37 86 04            [24] 2701 	mov	ar4,@r0
      000E39 D0 00            [24] 2702 	pop	ar0
      000E3B C0 07            [24] 2703 	push	ar7
      000E3D C0 06            [24] 2704 	push	ar6
      000E3F C0 05            [24] 2705 	push	ar5
      000E41 C0 02            [24] 2706 	push	ar2
      000E43 C0 01            [24] 2707 	push	ar1
      000E45 C0 00            [24] 2708 	push	ar0
      000E47 C0*00            [24] 2709 	push	bits
      000E49 85 00 F0         [24] 2710 	mov	b,ar0
      000E4C E5*00            [12] 2711 	mov	a,_bp
      000E4E 24 FB            [12] 2712 	add	a,#0xfb
      000E50 F8               [12] 2713 	mov	r0,a
      000E51 E6               [12] 2714 	mov	a,@r0
      000E52 C0 E0            [24] 2715 	push	acc
      000E54 08               [12] 2716 	inc	r0
      000E55 E6               [12] 2717 	mov	a,@r0
      000E56 C0 E0            [24] 2718 	push	acc
      000E58 08               [12] 2719 	inc	r0
      000E59 E6               [12] 2720 	mov	a,@r0
      000E5A C0 E0            [24] 2721 	push	acc
      000E5C A8 F0            [24] 2722 	mov	r0,b
      000E5E 85 00 F0         [24] 2723 	mov	b,ar0
      000E61 A8*00            [24] 2724 	mov	r0,_bp
      000E63 08               [12] 2725 	inc	r0
      000E64 08               [12] 2726 	inc	r0
      000E65 E6               [12] 2727 	mov	a,@r0
      000E66 C0 E0            [24] 2728 	push	acc
      000E68 08               [12] 2729 	inc	r0
      000E69 E6               [12] 2730 	mov	a,@r0
      000E6A C0 E0            [24] 2731 	push	acc
      000E6C A8 F0            [24] 2732 	mov	r0,b
      000E6E C0 00            [24] 2733 	push	ar0
      000E70 E5*00            [12] 2734 	mov	a,_bp
      000E72 24 10            [12] 2735 	add	a,#0x10
      000E74 F8               [12] 2736 	mov	r0,a
      000E75 E6               [12] 2737 	mov	a,@r0
      000E76 24 FF            [12] 2738 	add	a,#0xff
      000E78 92 F0            [24] 2739 	mov	b[0],c
      000E7A D0 00            [24] 2740 	pop	ar0
      000E7C 85 F0*00         [24] 2741 	mov	bits,b
      000E7F 8C 82            [24] 2742 	mov	dpl,r4
      000E81 12r00r00         [24] 2743 	lcall	_output_digit
      000E84 E5 81            [12] 2744 	mov	a,sp
      000E86 24 FB            [12] 2745 	add	a,#0xfb
      000E88 F5 81            [12] 2746 	mov	sp,a
      000E8A D0*00            [24] 2747 	pop	bits
      000E8C D0 00            [24] 2748 	pop	ar0
      000E8E D0 01            [24] 2749 	pop	ar1
      000E90 D0 02            [24] 2750 	pop	ar2
      000E92 D0 05            [24] 2751 	pop	ar5
      000E94 D0 06            [24] 2752 	pop	ar6
      000E96 D0 07            [24] 2753 	pop	ar7
                                   2754 ;	printf_large.c:851: charsOutputted++;
      000E98 0E               [12] 2755 	inc	r6
      000E99 BE 00 01         [24] 2756 	cjne	r6,#0x00,00629$
      000E9C 0F               [12] 2757 	inc	r7
      000E9D                       2758 00629$:
      000E9D 02r0Er09         [24] 2759 	ljmp	00227$
      000EA0                       2760 00335$:
      000EA0 E5*00            [12] 2761 	mov	a,_bp
      000EA2 24 0B            [12] 2762 	add	a,#0x0b
      000EA4 F9               [12] 2763 	mov	r1,a
      000EA5 A7 06            [24] 2764 	mov	@r1,ar6
      000EA7 09               [12] 2765 	inc	r1
      000EA8 A7 07            [24] 2766 	mov	@r1,ar7
                                   2767 ;	printf_large.c:856: if (left_justify)
      000EAA 20*00 03         [24] 2768 	jb	b0,00630$
      000EAD 02r01r66         [24] 2769 	ljmp	00243$
      000EB0                       2770 00630$:
                                   2771 ;	printf_large.c:858: while (width-- > 0)
      000EB0 E5*00            [12] 2772 	mov	a,_bp
      000EB2 24 17            [12] 2773 	add	a,#0x17
      000EB4 F9               [12] 2774 	mov	r1,a
      000EB5 87 05            [24] 2775 	mov	ar5,@r1
      000EB7                       2776 00230$:
      000EB7 8D 04            [24] 2777 	mov	ar4,r5
      000EB9 1D               [12] 2778 	dec	r5
      000EBA EC               [12] 2779 	mov	a,r4
      000EBB 70 03            [24] 2780 	jnz	00631$
      000EBD 02r01r66         [24] 2781 	ljmp	00243$
      000EC0                       2782 00631$:
                                   2783 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      000EC0 C0 07            [24] 2784 	push	ar7
      000EC2 C0 06            [24] 2785 	push	ar6
      000EC4 C0 05            [24] 2786 	push	ar5
      000EC6 C0 02            [24] 2787 	push	ar2
      000EC8 C0 00            [24] 2788 	push	ar0
      000ECA E5*00            [12] 2789 	mov	a,_bp
      000ECC 24 FB            [12] 2790 	add	a,#0xfb
      000ECE F9               [12] 2791 	mov	r1,a
      000ECF E7               [12] 2792 	mov	a,@r1
      000ED0 C0 E0            [24] 2793 	push	acc
      000ED2 09               [12] 2794 	inc	r1
      000ED3 E7               [12] 2795 	mov	a,@r1
      000ED4 C0 E0            [24] 2796 	push	acc
      000ED6 09               [12] 2797 	inc	r1
      000ED7 E7               [12] 2798 	mov	a,@r1
      000ED8 C0 E0            [24] 2799 	push	acc
      000EDA 12r0ErDF         [24] 2800 	lcall	00632$
      000EDD 80 0F            [24] 2801 	sjmp	00633$
      000EDF                       2802 00632$:
      000EDF A9*00            [24] 2803 	mov	r1,_bp
      000EE1 09               [12] 2804 	inc	r1
      000EE2 09               [12] 2805 	inc	r1
      000EE3 E7               [12] 2806 	mov	a,@r1
      000EE4 C0 E0            [24] 2807 	push	acc
      000EE6 09               [12] 2808 	inc	r1
      000EE7 E7               [12] 2809 	mov	a,@r1
      000EE8 C0 E0            [24] 2810 	push	acc
      000EEA 75 82 20         [24] 2811 	mov	dpl,#0x20
      000EED 22               [24] 2812 	ret
      000EEE                       2813 00633$:
      000EEE 15 81            [12] 2814 	dec	sp
      000EF0 15 81            [12] 2815 	dec	sp
      000EF2 15 81            [12] 2816 	dec	sp
      000EF4 D0 00            [24] 2817 	pop	ar0
      000EF6 D0 02            [24] 2818 	pop	ar2
      000EF8 D0 05            [24] 2819 	pop	ar5
      000EFA D0 06            [24] 2820 	pop	ar6
      000EFC D0 07            [24] 2821 	pop	ar7
      000EFE 0E               [12] 2822 	inc	r6
      000EFF BE 00 01         [24] 2823 	cjne	r6,#0x00,00634$
      000F02 0F               [12] 2824 	inc	r7
      000F03                       2825 00634$:
      000F03 E5*00            [12] 2826 	mov	a,_bp
      000F05 24 0B            [12] 2827 	add	a,#0x0b
      000F07 F9               [12] 2828 	mov	r1,a
      000F08 A7 06            [24] 2829 	mov	@r1,ar6
      000F0A 09               [12] 2830 	inc	r1
      000F0B A7 07            [24] 2831 	mov	@r1,ar7
      000F0D 80 A8            [24] 2832 	sjmp	00230$
      000F0F                       2833 00241$:
                                   2834 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      000F0F C0 02            [24] 2835 	push	ar2
      000F11 C0 00            [24] 2836 	push	ar0
      000F13 E5*00            [12] 2837 	mov	a,_bp
      000F15 24 FB            [12] 2838 	add	a,#0xfb
      000F17 F9               [12] 2839 	mov	r1,a
      000F18 E7               [12] 2840 	mov	a,@r1
      000F19 C0 E0            [24] 2841 	push	acc
      000F1B 09               [12] 2842 	inc	r1
      000F1C E7               [12] 2843 	mov	a,@r1
      000F1D C0 E0            [24] 2844 	push	acc
      000F1F 09               [12] 2845 	inc	r1
      000F20 E7               [12] 2846 	mov	a,@r1
      000F21 C0 E0            [24] 2847 	push	acc
      000F23 12r0Fr28         [24] 2848 	lcall	00635$
      000F26 80 0E            [24] 2849 	sjmp	00636$
      000F28                       2850 00635$:
      000F28 A9*00            [24] 2851 	mov	r1,_bp
      000F2A 09               [12] 2852 	inc	r1
      000F2B 09               [12] 2853 	inc	r1
      000F2C E7               [12] 2854 	mov	a,@r1
      000F2D C0 E0            [24] 2855 	push	acc
      000F2F 09               [12] 2856 	inc	r1
      000F30 E7               [12] 2857 	mov	a,@r1
      000F31 C0 E0            [24] 2858 	push	acc
      000F33 8D 82            [24] 2859 	mov	dpl,r5
      000F35 22               [24] 2860 	ret
      000F36                       2861 00636$:
      000F36 15 81            [12] 2862 	dec	sp
      000F38 15 81            [12] 2863 	dec	sp
      000F3A 15 81            [12] 2864 	dec	sp
      000F3C D0 00            [24] 2865 	pop	ar0
      000F3E D0 02            [24] 2866 	pop	ar2
      000F40 E5*00            [12] 2867 	mov	a,_bp
      000F42 24 0B            [12] 2868 	add	a,#0x0b
      000F44 F9               [12] 2869 	mov	r1,a
      000F45 07               [12] 2870 	inc	@r1
      000F46 B7 00 02         [24] 2871 	cjne	@r1,#0x00,00637$
      000F49 09               [12] 2872 	inc	r1
      000F4A 07               [12] 2873 	inc	@r1
      000F4B                       2874 00637$:
      000F4B 02r01r66         [24] 2875 	ljmp	00243$
      000F4E                       2876 00245$:
                                   2877 ;	printf_large.c:872: return charsOutputted;
      000F4E E5*00            [12] 2878 	mov	a,_bp
      000F50 24 0B            [12] 2879 	add	a,#0x0b
      000F52 F8               [12] 2880 	mov	r0,a
      000F53 86 82            [24] 2881 	mov	dpl,@r0
      000F55 08               [12] 2882 	inc	r0
      000F56 86 83            [24] 2883 	mov	dph,@r0
      000F58 85*00 81         [24] 2884 	mov	sp,_bp
      000F5B D0*00            [24] 2885 	pop	_bp
      000F5D 22               [24] 2886 	ret
                                   2887 	.area CSEG    (CODE)
                                   2888 	.area CONST   (CODE)
      000000                       2889 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  2890 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    2891 	.db 0x00
                                   2892 	.area XINIT   (CODE)
                                   2893 	.area CABS    (ABS,CODE)
