                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:42 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _memmove
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _memmove
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'memmove'
                                     92 ;------------------------------------------------------------
                                     93 ;src                       Allocated to stack - _bp -5
                                     94 ;acount                    Allocated to stack - _bp -7
                                     95 ;dst                       Allocated to stack - _bp +8
                                     96 ;ret                       Allocated to stack - _bp +11
                                     97 ;d                         Allocated to registers r5 r6 r7 
                                     98 ;s                         Allocated to registers r2 r3 r4 
                                     99 ;sloc0                     Allocated to stack - _bp +1
                                    100 ;sloc1                     Allocated to stack - _bp +5
                                    101 ;------------------------------------------------------------
                                    102 ;	_memmove.c:40: void * memmove (void * dst, const void * src, size_t acount)
                                    103 ;	-----------------------------------------
                                    104 ;	 function memmove
                                    105 ;	-----------------------------------------
      000000                        106 _memmove:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 E5 81            [12]  116 	mov	a,sp
      000004 F5*00            [12]  117 	mov	_bp,a
      000006 24 0D            [12]  118 	add	a,#0x0D
      000008 F5 81            [12]  119 	mov	sp,a
      00000A C8               [12]  120 	xch	a,r0
      00000B E5*00            [12]  121 	mov	a,_bp
      00000D 24 08            [12]  122 	add	a,#0x08
      00000F C8               [12]  123 	xch	a,r0
      000010 A6 82            [24]  124 	mov	@r0,dpl
      000012 08               [12]  125 	inc	r0
      000013 A6 83            [24]  126 	mov	@r0,dph
      000015 08               [12]  127 	inc	r0
      000016 A6 F0            [24]  128 	mov	@r0,b
                                    129 ;	_memmove.c:42: void * ret = dst;
      000018 E5*00            [12]  130 	mov	a,_bp
      00001A 24 08            [12]  131 	add	a,#0x08
      00001C F8               [12]  132 	mov	r0,a
      00001D E5*00            [12]  133 	mov	a,_bp
      00001F 24 0B            [12]  134 	add	a,#0x0b
      000021 F9               [12]  135 	mov	r1,a
      000022 E6               [12]  136 	mov	a,@r0
      000023 F7               [12]  137 	mov	@r1,a
      000024 08               [12]  138 	inc	r0
      000025 09               [12]  139 	inc	r1
      000026 E6               [12]  140 	mov	a,@r0
      000027 F7               [12]  141 	mov	@r1,a
      000028 08               [12]  142 	inc	r0
      000029 09               [12]  143 	inc	r1
      00002A E6               [12]  144 	mov	a,@r0
      00002B F7               [12]  145 	mov	@r1,a
                                    146 ;	_memmove.c:46: if ((uintptr_t)src < (uintptr_t)dst) {
      00002C E5*00            [12]  147 	mov	a,_bp
      00002E 24 FB            [12]  148 	add	a,#0xfb
      000030 F8               [12]  149 	mov	r0,a
      000031 A9*00            [24]  150 	mov	r1,_bp
      000033 09               [12]  151 	inc	r1
      000034 E6               [12]  152 	mov	a,@r0
      000035 F7               [12]  153 	mov	@r1,a
      000036 08               [12]  154 	inc	r0
      000037 09               [12]  155 	inc	r1
      000038 E6               [12]  156 	mov	a,@r0
      000039 F7               [12]  157 	mov	@r1,a
      00003A 08               [12]  158 	inc	r0
      00003B 09               [12]  159 	inc	r1
      00003C E6               [12]  160 	mov	a,@r0
      00003D F7               [12]  161 	mov	@r1,a
      00003E 09               [12]  162 	inc	r1
      00003F 77 00            [12]  163 	mov	@r1,#0x00
      000041 E5*00            [12]  164 	mov	a,_bp
      000043 24 08            [12]  165 	add	a,#0x08
      000045 F8               [12]  166 	mov	r0,a
      000046 86 04            [24]  167 	mov	ar4,@r0
      000048 08               [12]  168 	inc	r0
      000049 86 05            [24]  169 	mov	ar5,@r0
      00004B 08               [12]  170 	inc	r0
      00004C 86 06            [24]  171 	mov	ar6,@r0
      00004E 7F 00            [12]  172 	mov	r7,#0x00
      000050 A8*00            [24]  173 	mov	r0,_bp
      000052 08               [12]  174 	inc	r0
      000053 C3               [12]  175 	clr	c
      000054 E6               [12]  176 	mov	a,@r0
      000055 9C               [12]  177 	subb	a,r4
      000056 08               [12]  178 	inc	r0
      000057 E6               [12]  179 	mov	a,@r0
      000058 9D               [12]  180 	subb	a,r5
      000059 08               [12]  181 	inc	r0
      00005A E6               [12]  182 	mov	a,@r0
      00005B 9E               [12]  183 	subb	a,r6
      00005C 08               [12]  184 	inc	r0
      00005D E6               [12]  185 	mov	a,@r0
      00005E 9F               [12]  186 	subb	a,r7
      00005F 40 03            [24]  187 	jc	00129$
      000061 02r01r00         [24]  188 	ljmp	00108$
      000064                        189 00129$:
                                    190 ;	_memmove.c:50: d = ((char *)dst)+acount-1;
      000064 E5*00            [12]  191 	mov	a,_bp
      000066 24 08            [12]  192 	add	a,#0x08
      000068 F8               [12]  193 	mov	r0,a
      000069 86 05            [24]  194 	mov	ar5,@r0
      00006B 08               [12]  195 	inc	r0
      00006C 86 06            [24]  196 	mov	ar6,@r0
      00006E 08               [12]  197 	inc	r0
      00006F 86 07            [24]  198 	mov	ar7,@r0
      000071 E5*00            [12]  199 	mov	a,_bp
      000073 24 F9            [12]  200 	add	a,#0xf9
      000075 F8               [12]  201 	mov	r0,a
      000076 E6               [12]  202 	mov	a,@r0
      000077 2D               [12]  203 	add	a,r5
      000078 FD               [12]  204 	mov	r5,a
      000079 08               [12]  205 	inc	r0
      00007A E6               [12]  206 	mov	a,@r0
      00007B 3E               [12]  207 	addc	a,r6
      00007C FE               [12]  208 	mov	r6,a
      00007D 1D               [12]  209 	dec	r5
      00007E BD FF 01         [24]  210 	cjne	r5,#0xFF,00130$
      000081 1E               [12]  211 	dec	r6
      000082                        212 00130$:
                                    213 ;	_memmove.c:51: s = ((char *)src)+acount-1;
      000082 E5*00            [12]  214 	mov	a,_bp
      000084 24 FB            [12]  215 	add	a,#0xfb
      000086 F8               [12]  216 	mov	r0,a
      000087 86 02            [24]  217 	mov	ar2,@r0
      000089 08               [12]  218 	inc	r0
      00008A 86 03            [24]  219 	mov	ar3,@r0
      00008C 08               [12]  220 	inc	r0
      00008D 86 04            [24]  221 	mov	ar4,@r0
      00008F E5*00            [12]  222 	mov	a,_bp
      000091 24 F9            [12]  223 	add	a,#0xf9
      000093 F8               [12]  224 	mov	r0,a
      000094 E6               [12]  225 	mov	a,@r0
      000095 2A               [12]  226 	add	a,r2
      000096 FA               [12]  227 	mov	r2,a
      000097 08               [12]  228 	inc	r0
      000098 E6               [12]  229 	mov	a,@r0
      000099 3B               [12]  230 	addc	a,r3
      00009A FB               [12]  231 	mov	r3,a
      00009B 1A               [12]  232 	dec	r2
      00009C BA FF 01         [24]  233 	cjne	r2,#0xFF,00131$
      00009F 1B               [12]  234 	dec	r3
      0000A0                        235 00131$:
                                    236 ;	_memmove.c:52: while (acount--) {
      0000A0 E5*00            [12]  237 	mov	a,_bp
      0000A2 24 05            [12]  238 	add	a,#0x05
      0000A4 F8               [12]  239 	mov	r0,a
      0000A5 A6 02            [24]  240 	mov	@r0,ar2
      0000A7 08               [12]  241 	inc	r0
      0000A8 A6 03            [24]  242 	mov	@r0,ar3
      0000AA 08               [12]  243 	inc	r0
      0000AB A6 04            [24]  244 	mov	@r0,ar4
      0000AD E5*00            [12]  245 	mov	a,_bp
      0000AF 24 F9            [12]  246 	add	a,#0xf9
      0000B1 F8               [12]  247 	mov	r0,a
      0000B2 A9*00            [24]  248 	mov	r1,_bp
      0000B4 09               [12]  249 	inc	r1
      0000B5 E6               [12]  250 	mov	a,@r0
      0000B6 F7               [12]  251 	mov	@r1,a
      0000B7 08               [12]  252 	inc	r0
      0000B8 09               [12]  253 	inc	r1
      0000B9 E6               [12]  254 	mov	a,@r0
      0000BA F7               [12]  255 	mov	@r1,a
      0000BB                        256 00101$:
      0000BB A8*00            [24]  257 	mov	r0,_bp
      0000BD 08               [12]  258 	inc	r0
      0000BE 86 03            [24]  259 	mov	ar3,@r0
      0000C0 08               [12]  260 	inc	r0
      0000C1 86 04            [24]  261 	mov	ar4,@r0
      0000C3 A8*00            [24]  262 	mov	r0,_bp
      0000C5 08               [12]  263 	inc	r0
      0000C6 16               [12]  264 	dec	@r0
      0000C7 B6 FF 02         [24]  265 	cjne	@r0,#0xFF,00132$
      0000CA 08               [12]  266 	inc	r0
      0000CB 16               [12]  267 	dec	@r0
      0000CC                        268 00132$:
      0000CC EB               [12]  269 	mov	a,r3
      0000CD 4C               [12]  270 	orl	a,r4
      0000CE 70 03            [24]  271 	jnz	00133$
      0000D0 02r01r70         [24]  272 	ljmp	00109$
      0000D3                        273 00133$:
                                    274 ;	_memmove.c:53: *d-- = *s--;
      0000D3 E5*00            [12]  275 	mov	a,_bp
      0000D5 24 05            [12]  276 	add	a,#0x05
      0000D7 F8               [12]  277 	mov	r0,a
      0000D8 86 82            [24]  278 	mov	dpl,@r0
      0000DA 08               [12]  279 	inc	r0
      0000DB 86 83            [24]  280 	mov	dph,@r0
      0000DD 08               [12]  281 	inc	r0
      0000DE 86 F0            [24]  282 	mov	b,@r0
      0000E0 12r00r00         [24]  283 	lcall	__gptrget
      0000E3 FC               [12]  284 	mov	r4,a
      0000E4 E5*00            [12]  285 	mov	a,_bp
      0000E6 24 05            [12]  286 	add	a,#0x05
      0000E8 F8               [12]  287 	mov	r0,a
      0000E9 16               [12]  288 	dec	@r0
      0000EA B6 FF 02         [24]  289 	cjne	@r0,#0xFF,00134$
      0000ED 08               [12]  290 	inc	r0
      0000EE 16               [12]  291 	dec	@r0
      0000EF                        292 00134$:
      0000EF 8D 82            [24]  293 	mov	dpl,r5
      0000F1 8E 83            [24]  294 	mov	dph,r6
      0000F3 8F F0            [24]  295 	mov	b,r7
      0000F5 EC               [12]  296 	mov	a,r4
      0000F6 12r00r00         [24]  297 	lcall	__gptrput
      0000F9 1D               [12]  298 	dec	r5
      0000FA BD FF 01         [24]  299 	cjne	r5,#0xFF,00135$
      0000FD 1E               [12]  300 	dec	r6
      0000FE                        301 00135$:
      0000FE 80 BB            [24]  302 	sjmp	00101$
      000100                        303 00108$:
                                    304 ;	_memmove.c:60: d = dst;
      000100 E5*00            [12]  305 	mov	a,_bp
      000102 24 08            [12]  306 	add	a,#0x08
      000104 F8               [12]  307 	mov	r0,a
      000105 86 05            [24]  308 	mov	ar5,@r0
      000107 08               [12]  309 	inc	r0
      000108 86 06            [24]  310 	mov	ar6,@r0
      00010A 08               [12]  311 	inc	r0
      00010B 86 07            [24]  312 	mov	ar7,@r0
                                    313 ;	_memmove.c:61: s = src;
      00010D E5*00            [12]  314 	mov	a,_bp
      00010F 24 FB            [12]  315 	add	a,#0xfb
      000111 F8               [12]  316 	mov	r0,a
      000112 A9*00            [24]  317 	mov	r1,_bp
      000114 09               [12]  318 	inc	r1
      000115 E6               [12]  319 	mov	a,@r0
      000116 F7               [12]  320 	mov	@r1,a
      000117 08               [12]  321 	inc	r0
      000118 09               [12]  322 	inc	r1
      000119 E6               [12]  323 	mov	a,@r0
      00011A F7               [12]  324 	mov	@r1,a
      00011B 08               [12]  325 	inc	r0
      00011C 09               [12]  326 	inc	r1
      00011D E6               [12]  327 	mov	a,@r0
      00011E F7               [12]  328 	mov	@r1,a
                                    329 ;	_memmove.c:62: while (acount--) {
      00011F E5*00            [12]  330 	mov	a,_bp
      000121 24 F9            [12]  331 	add	a,#0xf9
      000123 F8               [12]  332 	mov	r0,a
      000124 E5*00            [12]  333 	mov	a,_bp
      000126 24 05            [12]  334 	add	a,#0x05
      000128 F9               [12]  335 	mov	r1,a
      000129 E6               [12]  336 	mov	a,@r0
      00012A F7               [12]  337 	mov	@r1,a
      00012B 08               [12]  338 	inc	r0
      00012C 09               [12]  339 	inc	r1
      00012D E6               [12]  340 	mov	a,@r0
      00012E F7               [12]  341 	mov	@r1,a
      00012F                        342 00104$:
      00012F E5*00            [12]  343 	mov	a,_bp
      000131 24 05            [12]  344 	add	a,#0x05
      000133 F8               [12]  345 	mov	r0,a
      000134 86 03            [24]  346 	mov	ar3,@r0
      000136 08               [12]  347 	inc	r0
      000137 86 04            [24]  348 	mov	ar4,@r0
      000139 E5*00            [12]  349 	mov	a,_bp
      00013B 24 05            [12]  350 	add	a,#0x05
      00013D F8               [12]  351 	mov	r0,a
      00013E 16               [12]  352 	dec	@r0
      00013F B6 FF 02         [24]  353 	cjne	@r0,#0xFF,00136$
      000142 08               [12]  354 	inc	r0
      000143 16               [12]  355 	dec	@r0
      000144                        356 00136$:
      000144 EB               [12]  357 	mov	a,r3
      000145 4C               [12]  358 	orl	a,r4
      000146 60 28            [24]  359 	jz	00109$
                                    360 ;	_memmove.c:63: *d++ = *s++;
      000148 A8*00            [24]  361 	mov	r0,_bp
      00014A 08               [12]  362 	inc	r0
      00014B 86 82            [24]  363 	mov	dpl,@r0
      00014D 08               [12]  364 	inc	r0
      00014E 86 83            [24]  365 	mov	dph,@r0
      000150 08               [12]  366 	inc	r0
      000151 86 F0            [24]  367 	mov	b,@r0
      000153 12r00r00         [24]  368 	lcall	__gptrget
      000156 FC               [12]  369 	mov	r4,a
      000157 A3               [24]  370 	inc	dptr
      000158 18               [12]  371 	dec	r0
      000159 18               [12]  372 	dec	r0
      00015A A6 82            [24]  373 	mov	@r0,dpl
      00015C 08               [12]  374 	inc	r0
      00015D A6 83            [24]  375 	mov	@r0,dph
      00015F 8D 82            [24]  376 	mov	dpl,r5
      000161 8E 83            [24]  377 	mov	dph,r6
      000163 8F F0            [24]  378 	mov	b,r7
      000165 EC               [12]  379 	mov	a,r4
      000166 12r00r00         [24]  380 	lcall	__gptrput
      000169 A3               [24]  381 	inc	dptr
      00016A AD 82            [24]  382 	mov	r5,dpl
      00016C AE 83            [24]  383 	mov	r6,dph
      00016E 80 BF            [24]  384 	sjmp	00104$
      000170                        385 00109$:
                                    386 ;	_memmove.c:67: return(ret);
      000170 E5*00            [12]  387 	mov	a,_bp
      000172 24 0B            [12]  388 	add	a,#0x0b
      000174 F8               [12]  389 	mov	r0,a
      000175 86 82            [24]  390 	mov	dpl,@r0
      000177 08               [12]  391 	inc	r0
      000178 86 83            [24]  392 	mov	dph,@r0
      00017A 08               [12]  393 	inc	r0
      00017B 86 F0            [24]  394 	mov	b,@r0
      00017D 85*00 81         [24]  395 	mov	sp,_bp
      000180 D0*00            [24]  396 	pop	_bp
      000182 22               [24]  397 	ret
                                    398 	.area CSEG    (CODE)
                                    399 	.area CONST   (CODE)
                                    400 	.area XINIT   (CODE)
                                    401 	.area CABS    (ABS,CODE)
