                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:41 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'output_digit'
                                    107 ;------------------------------------------------------------
                                    108 ;output_char               Allocated to stack - _bp -4
                                    109 ;p                         Allocated to stack - _bp -7
                                    110 ;lower_case                Allocated to registers b0 
                                    111 ;n                         Allocated to registers r7 
                                    112 ;c                         Allocated to registers r7 
                                    113 ;------------------------------------------------------------
                                    114 ;	printf_large.c:116: output_digit (unsigned char n, bool lower_case, pfn_outputchar output_char, void* p)
                                    115 ;	-----------------------------------------
                                    116 ;	 function output_digit
                                    117 ;	-----------------------------------------
      000000                        118 _output_digit:
                           000007   119 	ar7 = 0x07
                           000006   120 	ar6 = 0x06
                           000005   121 	ar5 = 0x05
                           000004   122 	ar4 = 0x04
                           000003   123 	ar3 = 0x03
                           000002   124 	ar2 = 0x02
                           000001   125 	ar1 = 0x01
                           000000   126 	ar0 = 0x00
      000000 C0*00            [24]  127 	push	_bp
      000002 85 81*00         [24]  128 	mov	_bp,sp
      000005 AF 82            [24]  129 	mov	r7,dpl
                                    130 ;	printf_large.c:118: register unsigned char c = n + (unsigned char)'0';
      000007 74 30            [12]  131 	mov	a,#0x30
      000009 2F               [12]  132 	add	a,r7
                                    133 ;	printf_large.c:120: if (c > (unsigned char)'9')
      00000A FF               [12]  134 	mov  r7,a
      00000B 24 C6            [12]  135 	add	a,#0xff - 0x39
      00000D 50 0B            [24]  136 	jnc	00104$
                                    137 ;	printf_large.c:122: c += (unsigned char)('A' - '0' - 10);
      00000F 74 07            [12]  138 	mov	a,#0x07
      000011 2F               [12]  139 	add	a,r7
      000012 FF               [12]  140 	mov	r7,a
                                    141 ;	printf_large.c:123: if (lower_case)
      000013 30*00 04         [24]  142 	jnb	b0,00104$
                                    143 ;	printf_large.c:124: c += (unsigned char)('a' - 'A');
      000016 74 20            [12]  144 	mov	a,#0x20
      000018 2F               [12]  145 	add	a,r7
      000019 FF               [12]  146 	mov	r7,a
      00001A                        147 00104$:
                                    148 ;	printf_large.c:126: output_char( c, p );
      00001A E5*00            [12]  149 	mov	a,_bp
      00001C 24 F9            [12]  150 	add	a,#0xf9
      00001E F8               [12]  151 	mov	r0,a
      00001F E6               [12]  152 	mov	a,@r0
      000020 C0 E0            [24]  153 	push	acc
      000022 08               [12]  154 	inc	r0
      000023 E6               [12]  155 	mov	a,@r0
      000024 C0 E0            [24]  156 	push	acc
      000026 08               [12]  157 	inc	r0
      000027 E6               [12]  158 	mov	a,@r0
      000028 C0 E0            [24]  159 	push	acc
      00002A 12r00r2F         [24]  160 	lcall	00115$
      00002D 80 0F            [24]  161 	sjmp	00116$
      00002F                        162 00115$:
      00002F E5*00            [12]  163 	mov	a,_bp
      000031 24 FC            [12]  164 	add	a,#0xfc
      000033 F8               [12]  165 	mov	r0,a
      000034 E6               [12]  166 	mov	a,@r0
      000035 C0 E0            [24]  167 	push	acc
      000037 08               [12]  168 	inc	r0
      000038 E6               [12]  169 	mov	a,@r0
      000039 C0 E0            [24]  170 	push	acc
      00003B 8F 82            [24]  171 	mov	dpl,r7
      00003D 22               [24]  172 	ret
      00003E                        173 00116$:
      00003E 15 81            [12]  174 	dec	sp
      000040 15 81            [12]  175 	dec	sp
      000042 15 81            [12]  176 	dec	sp
      000044 D0*00            [24]  177 	pop	_bp
      000046 22               [24]  178 	ret
                                    179 ;------------------------------------------------------------
                                    180 ;Allocation info for local variables in function 'output_2digits'
                                    181 ;------------------------------------------------------------
                                    182 ;output_char               Allocated to stack - _bp -4
                                    183 ;p                         Allocated to stack - _bp -7
                                    184 ;lower_case                Allocated to registers b0 
                                    185 ;b                         Allocated to registers r7 
                                    186 ;------------------------------------------------------------
                                    187 ;	printf_large.c:149: output_2digits (unsigned char b, bool lower_case, pfn_outputchar output_char, void* p)
                                    188 ;	-----------------------------------------
                                    189 ;	 function output_2digits
                                    190 ;	-----------------------------------------
      000047                        191 _output_2digits:
      000047 C0*00            [24]  192 	push	_bp
      000049 85 81*00         [24]  193 	mov	_bp,sp
                                    194 ;	printf_large.c:151: output_digit( b>>4,   lower_case, output_char, p );
      00004C E5 82            [12]  195 	mov	a,dpl
      00004E FF               [12]  196 	mov	r7,a
      00004F C4               [12]  197 	swap	a
      000050 54 0F            [12]  198 	anl	a,#0x0F
      000052 FE               [12]  199 	mov	r6,a
      000053 C0 07            [24]  200 	push	ar7
      000055 C0*00            [24]  201 	push	bits
      000057 E5*00            [12]  202 	mov	a,_bp
      000059 24 F9            [12]  203 	add	a,#0xf9
      00005B F8               [12]  204 	mov	r0,a
      00005C E6               [12]  205 	mov	a,@r0
      00005D C0 E0            [24]  206 	push	acc
      00005F 08               [12]  207 	inc	r0
      000060 E6               [12]  208 	mov	a,@r0
      000061 C0 E0            [24]  209 	push	acc
      000063 08               [12]  210 	inc	r0
      000064 E6               [12]  211 	mov	a,@r0
      000065 C0 E0            [24]  212 	push	acc
      000067 E5*00            [12]  213 	mov	a,_bp
      000069 24 FC            [12]  214 	add	a,#0xfc
      00006B F8               [12]  215 	mov	r0,a
      00006C E6               [12]  216 	mov	a,@r0
      00006D C0 E0            [24]  217 	push	acc
      00006F 08               [12]  218 	inc	r0
      000070 E6               [12]  219 	mov	a,@r0
      000071 C0 E0            [24]  220 	push	acc
      000073 A2*00            [12]  221 	mov	c,b0
      000075 92 F0            [24]  222 	mov	b[0],c
      000077 85 F0*00         [24]  223 	mov	bits,b
      00007A 8E 82            [24]  224 	mov	dpl,r6
      00007C 12r00r00         [24]  225 	lcall	_output_digit
      00007F E5 81            [12]  226 	mov	a,sp
      000081 24 FB            [12]  227 	add	a,#0xfb
      000083 F5 81            [12]  228 	mov	sp,a
      000085 D0*00            [24]  229 	pop	bits
      000087 D0 07            [24]  230 	pop	ar7
                                    231 ;	printf_large.c:152: output_digit( b&0x0F, lower_case, output_char, p );
      000089 53 07 0F         [24]  232 	anl	ar7,#0x0F
      00008C E5*00            [12]  233 	mov	a,_bp
      00008E 24 F9            [12]  234 	add	a,#0xf9
      000090 F8               [12]  235 	mov	r0,a
      000091 E6               [12]  236 	mov	a,@r0
      000092 C0 E0            [24]  237 	push	acc
      000094 08               [12]  238 	inc	r0
      000095 E6               [12]  239 	mov	a,@r0
      000096 C0 E0            [24]  240 	push	acc
      000098 08               [12]  241 	inc	r0
      000099 E6               [12]  242 	mov	a,@r0
      00009A C0 E0            [24]  243 	push	acc
      00009C E5*00            [12]  244 	mov	a,_bp
      00009E 24 FC            [12]  245 	add	a,#0xfc
      0000A0 F8               [12]  246 	mov	r0,a
      0000A1 E6               [12]  247 	mov	a,@r0
      0000A2 C0 E0            [24]  248 	push	acc
      0000A4 08               [12]  249 	inc	r0
      0000A5 E6               [12]  250 	mov	a,@r0
      0000A6 C0 E0            [24]  251 	push	acc
      0000A8 A2*00            [12]  252 	mov	c,b0
      0000AA 92 F0            [24]  253 	mov	b[0],c
      0000AC 85 F0*00         [24]  254 	mov	bits,b
      0000AF 8F 82            [24]  255 	mov	dpl,r7
      0000B1 12r00r00         [24]  256 	lcall	_output_digit
      0000B4 E5 81            [12]  257 	mov	a,sp
      0000B6 24 FB            [12]  258 	add	a,#0xfb
      0000B8 F5 81            [12]  259 	mov	sp,a
      0000BA D0*00            [24]  260 	pop	_bp
      0000BC 22               [24]  261 	ret
                                    262 ;------------------------------------------------------------
                                    263 ;Allocation info for local variables in function 'calculate_digit'
                                    264 ;------------------------------------------------------------
                                    265 ;radix                     Allocated to stack - _bp -3
                                    266 ;value                     Allocated to registers r1 
                                    267 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    268 ;pb4                       Allocated to registers r0 
                                    269 ;i                         Allocated to registers r3 
                                    270 ;sloc0                     Allocated to stack - _bp +8
                                    271 ;------------------------------------------------------------
                                    272 ;	printf_large.c:168: calculate_digit (value_t _AUTOMEM * value, unsigned char radix)
                                    273 ;	-----------------------------------------
                                    274 ;	 function calculate_digit
                                    275 ;	-----------------------------------------
      0000BD                        276 _calculate_digit:
      0000BD C0*00            [24]  277 	push	_bp
      0000BF 85 81*00         [24]  278 	mov	_bp,sp
      0000C2 A9 82            [24]  279 	mov	r1,dpl
                                    280 ;	printf_large.c:170: unsigned long ul = value->ul;
      0000C4 87 04            [24]  281 	mov	ar4,@r1
      0000C6 09               [12]  282 	inc	r1
      0000C7 87 05            [24]  283 	mov	ar5,@r1
      0000C9 09               [12]  284 	inc	r1
      0000CA 87 06            [24]  285 	mov	ar6,@r1
      0000CC 09               [12]  286 	inc	r1
      0000CD 87 07            [24]  287 	mov	ar7,@r1
      0000CF 19               [12]  288 	dec	r1
      0000D0 19               [12]  289 	dec	r1
      0000D1 19               [12]  290 	dec	r1
                                    291 ;	printf_large.c:171: unsigned char _AUTOMEM * pb4 = &value->byte[4];
      0000D2 74 04            [12]  292 	mov	a,#0x04
      0000D4 29               [12]  293 	add	a,r1
      0000D5 F8               [12]  294 	mov	r0,a
                                    295 ;	printf_large.c:172: unsigned char i = 32;
      0000D6 7B 20            [12]  296 	mov	r3,#0x20
                                    297 ;	printf_large.c:174: do
      0000D8                        298 00103$:
                                    299 ;	printf_large.c:176: *pb4 = (*pb4 << 1) | ((ul >> 31) & 0x01);
      0000D8 C0 03            [24]  300 	push	ar3
      0000DA E6               [12]  301 	mov	a,@r0
      0000DB 26               [12]  302 	add	a,@r0
      0000DC FA               [12]  303 	mov	r2,a
      0000DD EF               [12]  304 	mov	a,r7
      0000DE 23               [12]  305 	rl	a
      0000DF 54 01            [12]  306 	anl	a,#0x01
      0000E1 FB               [12]  307 	mov	r3,a
      0000E2 EA               [12]  308 	mov	a,r2
      0000E3 42 03            [12]  309 	orl	ar3,a
      0000E5 A6 03            [24]  310 	mov	@r0,ar3
                                    311 ;	printf_large.c:177: ul <<= 1;
      0000E7 EC               [12]  312 	mov	a,r4
      0000E8 2C               [12]  313 	add	a,r4
      0000E9 FC               [12]  314 	mov	r4,a
      0000EA ED               [12]  315 	mov	a,r5
      0000EB 33               [12]  316 	rlc	a
      0000EC FD               [12]  317 	mov	r5,a
      0000ED EE               [12]  318 	mov	a,r6
      0000EE 33               [12]  319 	rlc	a
      0000EF FE               [12]  320 	mov	r6,a
      0000F0 EF               [12]  321 	mov	a,r7
      0000F1 33               [12]  322 	rlc	a
      0000F2 FF               [12]  323 	mov	r7,a
                                    324 ;	printf_large.c:179: if (radix <= *pb4 )
      0000F3 86 02            [24]  325 	mov	ar2,@r0
      0000F5 C0 00            [24]  326 	push	ar0
      0000F7 E5*00            [12]  327 	mov	a,_bp
      0000F9 24 FD            [12]  328 	add	a,#0xfd
      0000FB F8               [12]  329 	mov	r0,a
      0000FC C3               [12]  330 	clr	c
      0000FD EA               [12]  331 	mov	a,r2
      0000FE 96               [12]  332 	subb	a,@r0
      0000FF D0 00            [24]  333 	pop	ar0
      000101 D0 03            [24]  334 	pop	ar3
      000103 40 12            [24]  335 	jc	00104$
                                    336 ;	printf_large.c:181: *pb4 -= radix;
      000105 C0 00            [24]  337 	push	ar0
      000107 E5*00            [12]  338 	mov	a,_bp
      000109 24 FD            [12]  339 	add	a,#0xfd
      00010B F8               [12]  340 	mov	r0,a
      00010C EA               [12]  341 	mov	a,r2
      00010D C3               [12]  342 	clr	c
      00010E 96               [12]  343 	subb	a,@r0
      00010F FA               [12]  344 	mov	r2,a
      000110 D0 00            [24]  345 	pop	ar0
      000112 A6 02            [24]  346 	mov	@r0,ar2
                                    347 ;	printf_large.c:182: ul |= 1;
      000114 43 04 01         [24]  348 	orl	ar4,#0x01
      000117                        349 00104$:
                                    350 ;	printf_large.c:184: } while (--i);
      000117 EB               [12]  351 	mov	a,r3
      000118 14               [12]  352 	dec	a
      000119 FA               [12]  353 	mov	r2,a
      00011A FB               [12]  354 	mov	r3,a
      00011B 70 BB            [24]  355 	jnz	00103$
                                    356 ;	printf_large.c:185: value->ul = ul;
      00011D A7 04            [24]  357 	mov	@r1,ar4
      00011F 09               [12]  358 	inc	r1
      000120 A7 05            [24]  359 	mov	@r1,ar5
      000122 09               [12]  360 	inc	r1
      000123 A7 06            [24]  361 	mov	@r1,ar6
      000125 09               [12]  362 	inc	r1
      000126 A7 07            [24]  363 	mov	@r1,ar7
      000128 D0*00            [24]  364 	pop	_bp
      00012A 22               [24]  365 	ret
                                    366 ;------------------------------------------------------------
                                    367 ;Allocation info for local variables in function '_print_format'
                                    368 ;------------------------------------------------------------
                                    369 ;pvoid                     Allocated to stack - _bp -5
                                    370 ;format                    Allocated to stack - _bp -8
                                    371 ;ap                        Allocated to stack - _bp -9
                                    372 ;pfn                       Allocated to stack - _bp +11
                                    373 ;left_justify              Allocated to registers b0 
                                    374 ;zero_padding              Allocated to registers b1 
                                    375 ;prefix_sign               Allocated to registers b2 
                                    376 ;prefix_space              Allocated to registers b3 
                                    377 ;signed_argument           Allocated to registers b4 
                                    378 ;char_argument             Allocated to registers b5 
                                    379 ;long_argument             Allocated to registers b6 
                                    380 ;float_argument            Allocated to registers b7 
                                    381 ;lower_case                Allocated to stack - _bp +16
                                    382 ;value                     Allocated to stack - _bp +17
                                    383 ;charsOutputted            Allocated to stack - _bp +1
                                    384 ;lsd                       Allocated to registers b5 
                                    385 ;radix                     Allocated to stack - _bp +22
                                    386 ;width                     Allocated to stack - _bp +23
                                    387 ;decimals                  Allocated to registers r4 
                                    388 ;length                    Allocated to stack - _bp +24
                                    389 ;c                         Allocated to registers r5 
                                    390 ;memtype                   Allocated to registers r7 
                                    391 ;store                     Allocated to stack - _bp +25
                                    392 ;pstore                    Allocated to registers r3 
                                    393 ;sloc0                     Allocated to stack - _bp +6
                                    394 ;sloc1                     Allocated to stack - _bp +7
                                    395 ;sloc2                     Allocated to stack - _bp +10
                                    396 ;sloc3                     Allocated to stack - _bp +13
                                    397 ;sloc4                     Allocated to stack - _bp +14
                                    398 ;sloc5                     Allocated to stack - _bp +1
                                    399 ;sloc6                     Allocated to stack - _bp +3
                                    400 ;------------------------------------------------------------
                                    401 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    402 ;	-----------------------------------------
                                    403 ;	 function _print_format
                                    404 ;	-----------------------------------------
      00012B                        405 __print_format:
      00012B C0*00            [24]  406 	push	_bp
      00012D E5 81            [12]  407 	mov	a,sp
      00012F F5*00            [12]  408 	mov	_bp,a
      000131 24 1E            [12]  409 	add	a,#0x1E
      000133 F5 81            [12]  410 	mov	sp,a
      000135 C8               [12]  411 	xch	a,r0
      000136 E5*00            [12]  412 	mov	a,_bp
      000138 24 0B            [12]  413 	add	a,#0x0b
      00013A C8               [12]  414 	xch	a,r0
      00013B A6 82            [24]  415 	mov	@r0,dpl
      00013D 08               [12]  416 	inc	r0
      00013E A6 83            [24]  417 	mov	@r0,dph
                                    418 ;	printf_large.c:466: charsOutputted = 0;
      000140 A8*00            [24]  419 	mov	r0,_bp
      000142 08               [12]  420 	inc	r0
      000143 E4               [12]  421 	clr	a
      000144 F6               [12]  422 	mov	@r0,a
      000145 08               [12]  423 	inc	r0
      000146 F6               [12]  424 	mov	@r0,a
                                    425 ;	printf_large.c:475: while( c=*format++ )
      000147 E5*00            [12]  426 	mov	a,_bp
      000149 24 06            [12]  427 	add	a,#0x06
      00014B F8               [12]  428 	mov	r0,a
      00014C E5*00            [12]  429 	mov	a,_bp
      00014E 24 11            [12]  430 	add	a,#0x11
      000150 F6               [12]  431 	mov	@r0,a
      000151 E5*00            [12]  432 	mov	a,_bp
      000153 24 19            [12]  433 	add	a,#0x19
      000155 C8               [12]  434 	xch	a,r0
      000156 E5*00            [12]  435 	mov	a,_bp
      000158 24 0D            [12]  436 	add	a,#0x0d
      00015A C8               [12]  437 	xch	a,r0
      00015B 24 05            [12]  438 	add	a,#0x05
      00015D F6               [12]  439 	mov	@r0,a
      00015E E5*00            [12]  440 	mov	a,_bp
      000160 24 11            [12]  441 	add	a,#0x11
      000162 F8               [12]  442 	mov	r0,a
      000163 24 04            [12]  443 	add	a,#0x04
      000165 FA               [12]  444 	mov	r2,a
      000166                        445 00243$:
      000166 E5*00            [12]  446 	mov	a,_bp
      000168 24 F8            [12]  447 	add	a,#0xf8
      00016A F9               [12]  448 	mov	r1,a
      00016B 87 06            [24]  449 	mov	ar6,@r1
      00016D 09               [12]  450 	inc	r1
      00016E 87 05            [24]  451 	mov	ar5,@r1
      000170 09               [12]  452 	inc	r1
      000171 87 04            [24]  453 	mov	ar4,@r1
      000173 8E 82            [24]  454 	mov	dpl,r6
      000175 8D 83            [24]  455 	mov	dph,r5
      000177 8C F0            [24]  456 	mov	b,r4
      000179 12r00r00         [24]  457 	lcall	__gptrget
      00017C FF               [12]  458 	mov	r7,a
      00017D E5*00            [12]  459 	mov	a,_bp
      00017F 24 F8            [12]  460 	add	a,#0xf8
      000181 F9               [12]  461 	mov	r1,a
      000182 74 01            [12]  462 	mov	a,#0x01
      000184 2E               [12]  463 	add	a,r6
      000185 F7               [12]  464 	mov	@r1,a
      000186 E4               [12]  465 	clr	a
      000187 3D               [12]  466 	addc	a,r5
      000188 09               [12]  467 	inc	r1
      000189 F7               [12]  468 	mov	@r1,a
      00018A 09               [12]  469 	inc	r1
      00018B A7 04            [24]  470 	mov	@r1,ar4
      00018D EF               [12]  471 	mov	a,r7
      00018E FD               [12]  472 	mov	r5,a
      00018F 70 03            [24]  473 	jnz	00500$
      000191 02r0Fr46         [24]  474 	ljmp	00245$
      000194                        475 00500$:
                                    476 ;	printf_large.c:477: if ( c=='%' )
      000194 BD 25 02         [24]  477 	cjne	r5,#0x25,00501$
      000197 80 03            [24]  478 	sjmp	00502$
      000199                        479 00501$:
      000199 02r0Fr08         [24]  480 	ljmp	00241$
      00019C                        481 00502$:
                                    482 ;	printf_large.c:479: left_justify    = 0;
      00019C C2*00            [12]  483 	clr	b0
                                    484 ;	printf_large.c:480: zero_padding    = 0;
      00019E C2*00            [12]  485 	clr	b1
                                    486 ;	printf_large.c:481: prefix_sign     = 0;
      0001A0 C2*00            [12]  487 	clr	b2
                                    488 ;	printf_large.c:482: prefix_space    = 0;
      0001A2 C2*00            [12]  489 	clr	b3
                                    490 ;	printf_large.c:483: signed_argument = 0;
      0001A4 C2*00            [12]  491 	clr	b4
                                    492 ;	printf_large.c:484: char_argument   = 0;
      0001A6 C2*00            [12]  493 	clr	b5
                                    494 ;	printf_large.c:485: long_argument   = 0;
      0001A8 C2*00            [12]  495 	clr	b6
                                    496 ;	printf_large.c:486: float_argument  = 0;
      0001AA C2*00            [12]  497 	clr	b7
                                    498 ;	printf_large.c:487: radix           = 0;
      0001AC E5*00            [12]  499 	mov	a,_bp
      0001AE 24 16            [12]  500 	add	a,#0x16
      0001B0 F9               [12]  501 	mov	r1,a
      0001B1 77 00            [12]  502 	mov	@r1,#0x00
                                    503 ;	printf_large.c:488: width           = 0;
      0001B3 E5*00            [12]  504 	mov	a,_bp
      0001B5 24 17            [12]  505 	add	a,#0x17
      0001B7 F9               [12]  506 	mov	r1,a
      0001B8 77 00            [12]  507 	mov	@r1,#0x00
                                    508 ;	printf_large.c:489: decimals        = -1;
      0001BA 7C FF            [12]  509 	mov	r4,#0xFF
                                    510 ;	printf_large.c:491: get_conversion_spec:
      0001BC E5*00            [12]  511 	mov	a,_bp
      0001BE 24 F8            [12]  512 	add	a,#0xf8
      0001C0 F9               [12]  513 	mov	r1,a
      0001C1 C0 00            [24]  514 	push	ar0
      0001C3 E5*00            [12]  515 	mov	a,_bp
      0001C5 24 07            [12]  516 	add	a,#0x07
      0001C7 F8               [12]  517 	mov	r0,a
      0001C8 E7               [12]  518 	mov	a,@r1
      0001C9 F6               [12]  519 	mov	@r0,a
      0001CA 09               [12]  520 	inc	r1
      0001CB 08               [12]  521 	inc	r0
      0001CC E7               [12]  522 	mov	a,@r1
      0001CD F6               [12]  523 	mov	@r0,a
      0001CE 09               [12]  524 	inc	r1
      0001CF 08               [12]  525 	inc	r0
      0001D0 E7               [12]  526 	mov	a,@r1
      0001D1 F6               [12]  527 	mov	@r0,a
      0001D2 D0 00            [24]  528 	pop	ar0
      0001D4                        529 00101$:
                                    530 ;	printf_large.c:493: c = *format++;
      0001D4 E5*00            [12]  531 	mov	a,_bp
      0001D6 24 07            [12]  532 	add	a,#0x07
      0001D8 F9               [12]  533 	mov	r1,a
      0001D9 87 82            [24]  534 	mov	dpl,@r1
      0001DB 09               [12]  535 	inc	r1
      0001DC 87 83            [24]  536 	mov	dph,@r1
      0001DE 09               [12]  537 	inc	r1
      0001DF 87 F0            [24]  538 	mov	b,@r1
      0001E1 12r00r00         [24]  539 	lcall	__gptrget
      0001E4 FD               [12]  540 	mov	r5,a
      0001E5 A3               [24]  541 	inc	dptr
      0001E6 19               [12]  542 	dec	r1
      0001E7 19               [12]  543 	dec	r1
      0001E8 A7 82            [24]  544 	mov	@r1,dpl
      0001EA 09               [12]  545 	inc	r1
      0001EB A7 83            [24]  546 	mov	@r1,dph
      0001ED E5*00            [12]  547 	mov	a,_bp
      0001EF 24 07            [12]  548 	add	a,#0x07
      0001F1 F9               [12]  549 	mov	r1,a
      0001F2 C0 00            [24]  550 	push	ar0
      0001F4 E5*00            [12]  551 	mov	a,_bp
      0001F6 24 F8            [12]  552 	add	a,#0xf8
      0001F8 F8               [12]  553 	mov	r0,a
      0001F9 E7               [12]  554 	mov	a,@r1
      0001FA F6               [12]  555 	mov	@r0,a
      0001FB 09               [12]  556 	inc	r1
      0001FC 08               [12]  557 	inc	r0
      0001FD E7               [12]  558 	mov	a,@r1
      0001FE F6               [12]  559 	mov	@r0,a
      0001FF 09               [12]  560 	inc	r1
      000200 08               [12]  561 	inc	r0
      000201 E7               [12]  562 	mov	a,@r1
      000202 F6               [12]  563 	mov	@r0,a
      000203 D0 00            [24]  564 	pop	ar0
                                    565 ;	printf_large.c:495: if (c=='%')
      000205 BD 25 3E         [24]  566 	cjne	r5,#0x25,00103$
                                    567 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000208 C0 02            [24]  568 	push	ar2
      00020A C0 00            [24]  569 	push	ar0
      00020C E5*00            [12]  570 	mov	a,_bp
      00020E 24 FB            [12]  571 	add	a,#0xfb
      000210 F9               [12]  572 	mov	r1,a
      000211 E7               [12]  573 	mov	a,@r1
      000212 C0 E0            [24]  574 	push	acc
      000214 09               [12]  575 	inc	r1
      000215 E7               [12]  576 	mov	a,@r1
      000216 C0 E0            [24]  577 	push	acc
      000218 09               [12]  578 	inc	r1
      000219 E7               [12]  579 	mov	a,@r1
      00021A C0 E0            [24]  580 	push	acc
      00021C 12r02r21         [24]  581 	lcall	00505$
      00021F 80 0F            [24]  582 	sjmp	00506$
      000221                        583 00505$:
      000221 E5*00            [12]  584 	mov	a,_bp
      000223 24 0B            [12]  585 	add	a,#0x0b
      000225 F9               [12]  586 	mov	r1,a
      000226 E7               [12]  587 	mov	a,@r1
      000227 C0 E0            [24]  588 	push	acc
      000229 09               [12]  589 	inc	r1
      00022A E7               [12]  590 	mov	a,@r1
      00022B C0 E0            [24]  591 	push	acc
      00022D 8D 82            [24]  592 	mov	dpl,r5
      00022F 22               [24]  593 	ret
      000230                        594 00506$:
      000230 15 81            [12]  595 	dec	sp
      000232 15 81            [12]  596 	dec	sp
      000234 15 81            [12]  597 	dec	sp
      000236 D0 00            [24]  598 	pop	ar0
      000238 D0 02            [24]  599 	pop	ar2
      00023A A9*00            [24]  600 	mov	r1,_bp
      00023C 09               [12]  601 	inc	r1
      00023D 07               [12]  602 	inc	@r1
      00023E B7 00 02         [24]  603 	cjne	@r1,#0x00,00507$
      000241 09               [12]  604 	inc	r1
      000242 07               [12]  605 	inc	@r1
      000243                        606 00507$:
                                    607 ;	printf_large.c:498: continue;
      000243 02r01r66         [24]  608 	ljmp	00243$
      000246                        609 00103$:
                                    610 ;	printf_large.c:501: if (isdigit(c))
      000246 8D 07            [24]  611 	mov	ar7,r5
      000248 BF 30 00         [24]  612 	cjne	r7,#0x30,00508$
      00024B                        613 00508$:
      00024B 40 3A            [24]  614 	jc	00110$
      00024D EF               [12]  615 	mov	a,r7
      00024E 24 C6            [12]  616 	add	a,#0xff - 0x39
      000250 40 35            [24]  617 	jc	00110$
                                    618 ;	printf_large.c:503: if (decimals==-1)
      000252 BC FF 25         [24]  619 	cjne	r4,#0xFF,00107$
                                    620 ;	printf_large.c:505: width = 10*width + c - '0';
      000255 E5*00            [12]  621 	mov	a,_bp
      000257 24 17            [12]  622 	add	a,#0x17
      000259 F9               [12]  623 	mov	r1,a
      00025A E7               [12]  624 	mov	a,@r1
      00025B 75 F0 0A         [24]  625 	mov	b,#0x0A
      00025E A4               [48]  626 	mul	ab
      00025F 2D               [12]  627 	add	a,r5
      000260 FB               [12]  628 	mov	r3,a
      000261 E5*00            [12]  629 	mov	a,_bp
      000263 24 17            [12]  630 	add	a,#0x17
      000265 F9               [12]  631 	mov	r1,a
      000266 EB               [12]  632 	mov	a,r3
      000267 24 D0            [12]  633 	add	a,#0xD0
      000269 F7               [12]  634 	mov	@r1,a
                                    635 ;	printf_large.c:506: if (width == 0)
      00026A E5*00            [12]  636 	mov	a,_bp
      00026C 24 17            [12]  637 	add	a,#0x17
      00026E F9               [12]  638 	mov	r1,a
      00026F E7               [12]  639 	mov	a,@r1
      000270 60 03            [24]  640 	jz	00513$
      000272 02r01rD4         [24]  641 	ljmp	00101$
      000275                        642 00513$:
                                    643 ;	printf_large.c:509: zero_padding = 1;
      000275 D2*00            [12]  644 	setb	b1
      000277 02r01rD4         [24]  645 	ljmp	00101$
      00027A                        646 00107$:
                                    647 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      00027A EC               [12]  648 	mov	a,r4
      00027B 75 F0 0A         [24]  649 	mov	b,#0x0A
      00027E A4               [48]  650 	mul	ab
      00027F 2D               [12]  651 	add	a,r5
      000280 FB               [12]  652 	mov	r3,a
      000281 24 D0            [12]  653 	add	a,#0xD0
      000283 FC               [12]  654 	mov	r4,a
                                    655 ;	printf_large.c:516: goto get_conversion_spec;
      000284 02r01rD4         [24]  656 	ljmp	00101$
      000287                        657 00110$:
                                    658 ;	printf_large.c:519: if (c=='.')
      000287 BD 2E 0D         [24]  659 	cjne	r5,#0x2E,00115$
                                    660 ;	printf_large.c:521: if (decimals==-1)
      00028A BC FF 02         [24]  661 	cjne	r4,#0xFF,00516$
      00028D 80 03            [24]  662 	sjmp	00517$
      00028F                        663 00516$:
      00028F 02r01rD4         [24]  664 	ljmp	00101$
      000292                        665 00517$:
                                    666 ;	printf_large.c:522: decimals=0;
      000292 7C 00            [12]  667 	mov	r4,#0x00
                                    668 ;	printf_large.c:525: goto get_conversion_spec;
      000294 02r01rD4         [24]  669 	ljmp	00101$
      000297                        670 00115$:
                                    671 ;	printf_large.c:528: if (islower(c))
      000297 8D 07            [24]  672 	mov	ar7,r5
      000299 BF 61 00         [24]  673 	cjne	r7,#0x61,00518$
      00029C                        674 00518$:
      00029C 40 11            [24]  675 	jc	00117$
      00029E EF               [12]  676 	mov	a,r7
      00029F 24 85            [12]  677 	add	a,#0xff - 0x7A
      0002A1 40 0C            [24]  678 	jc	00117$
                                    679 ;	printf_large.c:530: c = toupper(c);
      0002A3 53 05 DF         [24]  680 	anl	ar5,#0xDF
                                    681 ;	printf_large.c:531: lower_case = 1;
      0002A6 E5*00            [12]  682 	mov	a,_bp
      0002A8 24 10            [12]  683 	add	a,#0x10
      0002AA F9               [12]  684 	mov	r1,a
      0002AB 77 01            [12]  685 	mov	@r1,#0x01
      0002AD 80 07            [24]  686 	sjmp	00118$
      0002AF                        687 00117$:
                                    688 ;	printf_large.c:534: lower_case = 0;
      0002AF E5*00            [12]  689 	mov	a,_bp
      0002B1 24 10            [12]  690 	add	a,#0x10
      0002B3 F9               [12]  691 	mov	r1,a
      0002B4 77 00            [12]  692 	mov	@r1,#0x00
      0002B6                        693 00118$:
                                    694 ;	printf_large.c:536: switch( c )
      0002B6 BD 20 02         [24]  695 	cjne	r5,#0x20,00521$
      0002B9 80 6E            [24]  696 	sjmp	00122$
      0002BB                        697 00521$:
      0002BB BD 2B 02         [24]  698 	cjne	r5,#0x2B,00522$
      0002BE 80 64            [24]  699 	sjmp	00121$
      0002C0                        700 00522$:
      0002C0 BD 2D 02         [24]  701 	cjne	r5,#0x2D,00523$
      0002C3 80 5A            [24]  702 	sjmp	00120$
      0002C5                        703 00523$:
      0002C5 BD 42 02         [24]  704 	cjne	r5,#0x42,00524$
      0002C8 80 64            [24]  705 	sjmp	00123$
      0002CA                        706 00524$:
      0002CA BD 43 02         [24]  707 	cjne	r5,#0x43,00525$
      0002CD 80 69            [24]  708 	sjmp	00129$
      0002CF                        709 00525$:
      0002CF BD 44 03         [24]  710 	cjne	r5,#0x44,00526$
      0002D2 02r08r46         [24]  711 	ljmp	00166$
      0002D5                        712 00526$:
      0002D5 BD 46 03         [24]  713 	cjne	r5,#0x46,00527$
      0002D8 02r08r6C         [24]  714 	ljmp	00170$
      0002DB                        715 00527$:
      0002DB BD 48 03         [24]  716 	cjne	r5,#0x48,00528$
      0002DE 02r01rD4         [24]  717 	ljmp	00101$
      0002E1                        718 00528$:
      0002E1 BD 49 03         [24]  719 	cjne	r5,#0x49,00529$
      0002E4 02r08r46         [24]  720 	ljmp	00166$
      0002E7                        721 00529$:
      0002E7 BD 4A 03         [24]  722 	cjne	r5,#0x4A,00530$
      0002EA 02r01rD4         [24]  723 	ljmp	00101$
      0002ED                        724 00530$:
      0002ED BD 4C 02         [24]  725 	cjne	r5,#0x4C,00531$
      0002F0 80 41            [24]  726 	sjmp	00128$
      0002F2                        727 00531$:
      0002F2 BD 4F 03         [24]  728 	cjne	r5,#0x4F,00532$
      0002F5 02r08r51         [24]  729 	ljmp	00167$
      0002F8                        730 00532$:
      0002F8 BD 50 03         [24]  731 	cjne	r5,#0x50,00533$
      0002FB 02r06r23         [24]  732 	ljmp	00152$
      0002FE                        733 00533$:
      0002FE BD 53 03         [24]  734 	cjne	r5,#0x53,00534$
      000301 02r03rAC         [24]  735 	ljmp	00133$
      000304                        736 00534$:
      000304 BD 54 03         [24]  737 	cjne	r5,#0x54,00535$
      000307 02r01rD4         [24]  738 	ljmp	00101$
      00030A                        739 00535$:
      00030A BD 55 03         [24]  740 	cjne	r5,#0x55,00536$
      00030D 02r08r5A         [24]  741 	ljmp	00168$
      000310                        742 00536$:
      000310 BD 58 03         [24]  743 	cjne	r5,#0x58,00537$
      000313 02r08r63         [24]  744 	ljmp	00169$
      000316                        745 00537$:
      000316 BD 5A 03         [24]  746 	cjne	r5,#0x5A,00538$
      000319 02r01rD4         [24]  747 	ljmp	00101$
      00031C                        748 00538$:
      00031C 02r08r70         [24]  749 	ljmp	00171$
                                    750 ;	printf_large.c:538: case '-':
      00031F                        751 00120$:
                                    752 ;	printf_large.c:539: left_justify = 1;
      00031F D2*00            [12]  753 	setb	b0
                                    754 ;	printf_large.c:540: goto get_conversion_spec;
      000321 02r01rD4         [24]  755 	ljmp	00101$
                                    756 ;	printf_large.c:541: case '+':
      000324                        757 00121$:
                                    758 ;	printf_large.c:542: prefix_sign = 1;
      000324 D2*00            [12]  759 	setb	b2
                                    760 ;	printf_large.c:543: goto get_conversion_spec;
      000326 02r01rD4         [24]  761 	ljmp	00101$
                                    762 ;	printf_large.c:544: case ' ':
      000329                        763 00122$:
                                    764 ;	printf_large.c:545: prefix_space = 1;
      000329 D2*00            [12]  765 	setb	b3
                                    766 ;	printf_large.c:546: goto get_conversion_spec;
      00032B 02r01rD4         [24]  767 	ljmp	00101$
                                    768 ;	printf_large.c:547: case 'B': /* byte */
      00032E                        769 00123$:
                                    770 ;	printf_large.c:548: char_argument = 1;
      00032E D2*00            [12]  771 	setb	b5
                                    772 ;	printf_large.c:549: goto get_conversion_spec;
      000330 02r01rD4         [24]  773 	ljmp	00101$
                                    774 ;	printf_large.c:556: case 'L': /* long */
      000333                        775 00128$:
                                    776 ;	printf_large.c:557: long_argument = 1;
      000333 D2*00            [12]  777 	setb	b6
                                    778 ;	printf_large.c:558: goto get_conversion_spec;
      000335 02r01rD4         [24]  779 	ljmp	00101$
                                    780 ;	printf_large.c:560: case 'C':
      000338                        781 00129$:
                                    782 ;	printf_large.c:561: if( char_argument )
      000338 30*00 15         [24]  783 	jnb	b5,00131$
                                    784 ;	printf_large.c:562: c = va_arg(ap,char);
      00033B E5*00            [12]  785 	mov	a,_bp
      00033D 24 F7            [12]  786 	add	a,#0xf7
      00033F F9               [12]  787 	mov	r1,a
      000340 E7               [12]  788 	mov	a,@r1
      000341 14               [12]  789 	dec	a
      000342 FB               [12]  790 	mov	r3,a
      000343 E5*00            [12]  791 	mov	a,_bp
      000345 24 F7            [12]  792 	add	a,#0xf7
      000347 F9               [12]  793 	mov	r1,a
      000348 A7 03            [24]  794 	mov	@r1,ar3
      00034A 8B 01            [24]  795 	mov	ar1,r3
      00034C 87 05            [24]  796 	mov	ar5,@r1
      00034E 80 1A            [24]  797 	sjmp	00132$
      000350                        798 00131$:
                                    799 ;	printf_large.c:564: c = va_arg(ap,int);
      000350 E5*00            [12]  800 	mov	a,_bp
      000352 24 F7            [12]  801 	add	a,#0xf7
      000354 F9               [12]  802 	mov	r1,a
      000355 E7               [12]  803 	mov	a,@r1
      000356 24 FE            [12]  804 	add	a,#0xFE
      000358 FB               [12]  805 	mov	r3,a
      000359 E5*00            [12]  806 	mov	a,_bp
      00035B 24 F7            [12]  807 	add	a,#0xf7
      00035D F9               [12]  808 	mov	r1,a
      00035E A7 03            [24]  809 	mov	@r1,ar3
      000360 8B 01            [24]  810 	mov	ar1,r3
      000362 87 03            [24]  811 	mov	ar3,@r1
      000364 09               [12]  812 	inc	r1
      000365 87 06            [24]  813 	mov	ar6,@r1
      000367 19               [12]  814 	dec	r1
      000368 8B 05            [24]  815 	mov	ar5,r3
                                    816 ;	printf_large.c:872: return charsOutputted;
                                    817 ;	printf_large.c:564: c = va_arg(ap,int);
      00036A                        818 00132$:
                                    819 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      00036A C0 02            [24]  820 	push	ar2
      00036C C0 00            [24]  821 	push	ar0
      00036E C0*00            [24]  822 	push	bits
      000370 E5*00            [12]  823 	mov	a,_bp
      000372 24 FB            [12]  824 	add	a,#0xfb
      000374 F9               [12]  825 	mov	r1,a
      000375 E7               [12]  826 	mov	a,@r1
      000376 C0 E0            [24]  827 	push	acc
      000378 09               [12]  828 	inc	r1
      000379 E7               [12]  829 	mov	a,@r1
      00037A C0 E0            [24]  830 	push	acc
      00037C 09               [12]  831 	inc	r1
      00037D E7               [12]  832 	mov	a,@r1
      00037E C0 E0            [24]  833 	push	acc
      000380 12r03r85         [24]  834 	lcall	00540$
      000383 80 0F            [24]  835 	sjmp	00541$
      000385                        836 00540$:
      000385 E5*00            [12]  837 	mov	a,_bp
      000387 24 0B            [12]  838 	add	a,#0x0b
      000389 F9               [12]  839 	mov	r1,a
      00038A E7               [12]  840 	mov	a,@r1
      00038B C0 E0            [24]  841 	push	acc
      00038D 09               [12]  842 	inc	r1
      00038E E7               [12]  843 	mov	a,@r1
      00038F C0 E0            [24]  844 	push	acc
      000391 8D 82            [24]  845 	mov	dpl,r5
      000393 22               [24]  846 	ret
      000394                        847 00541$:
      000394 15 81            [12]  848 	dec	sp
      000396 15 81            [12]  849 	dec	sp
      000398 15 81            [12]  850 	dec	sp
      00039A D0*00            [24]  851 	pop	bits
      00039C D0 00            [24]  852 	pop	ar0
      00039E D0 02            [24]  853 	pop	ar2
      0003A0 A9*00            [24]  854 	mov	r1,_bp
      0003A2 09               [12]  855 	inc	r1
      0003A3 07               [12]  856 	inc	@r1
      0003A4 B7 00 02         [24]  857 	cjne	@r1,#0x00,00542$
      0003A7 09               [12]  858 	inc	r1
      0003A8 07               [12]  859 	inc	@r1
      0003A9                        860 00542$:
                                    861 ;	printf_large.c:566: break;
      0003A9 02r08rC0         [24]  862 	ljmp	00172$
                                    863 ;	printf_large.c:568: case 'S':
      0003AC                        864 00133$:
                                    865 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      0003AC E5*00            [12]  866 	mov	a,_bp
      0003AE 24 11            [12]  867 	add	a,#0x11
      0003B0 F9               [12]  868 	mov	r1,a
      0003B1 C0 00            [24]  869 	push	ar0
      0003B3 E5*00            [12]  870 	mov	a,_bp
      0003B5 24 F7            [12]  871 	add	a,#0xf7
      0003B7 F8               [12]  872 	mov	r0,a
      0003B8 E6               [12]  873 	mov	a,@r0
      0003B9 24 FD            [12]  874 	add	a,#0xFD
      0003BB FE               [12]  875 	mov	r6,a
      0003BC E5*00            [12]  876 	mov	a,_bp
      0003BE 24 F7            [12]  877 	add	a,#0xf7
      0003C0 F8               [12]  878 	mov	r0,a
      0003C1 A6 06            [24]  879 	mov	@r0,ar6
      0003C3 A8 06            [24]  880 	mov	r0,ar6
      0003C5 86 03            [24]  881 	mov	ar3,@r0
      0003C7 08               [12]  882 	inc	r0
      0003C8 86 06            [24]  883 	mov	ar6,@r0
      0003CA 08               [12]  884 	inc	r0
      0003CB 86 07            [24]  885 	mov	ar7,@r0
      0003CD D0 00            [24]  886 	pop	ar0
      0003CF A7 03            [24]  887 	mov	@r1,ar3
      0003D1 09               [12]  888 	inc	r1
      0003D2 A7 06            [24]  889 	mov	@r1,ar6
      0003D4 09               [12]  890 	inc	r1
      0003D5 A7 07            [24]  891 	mov	@r1,ar7
      0003D7 19               [12]  892 	dec	r1
      0003D8 19               [12]  893 	dec	r1
                                    894 ;	printf_large.c:582: length = strlen(PTR);
      0003D9 8B 82            [24]  895 	mov	dpl,r3
      0003DB 8E 83            [24]  896 	mov	dph,r6
      0003DD 8F F0            [24]  897 	mov	b,r7
      0003DF C0 04            [24]  898 	push	ar4
      0003E1 C0 02            [24]  899 	push	ar2
      0003E3 C0 01            [24]  900 	push	ar1
      0003E5 C0 00            [24]  901 	push	ar0
      0003E7 C0*00            [24]  902 	push	bits
      0003E9 12r00r00         [24]  903 	lcall	_strlen
      0003EC AE 82            [24]  904 	mov	r6,dpl
      0003EE AF 83            [24]  905 	mov	r7,dph
      0003F0 D0*00            [24]  906 	pop	bits
      0003F2 D0 00            [24]  907 	pop	ar0
      0003F4 D0 01            [24]  908 	pop	ar1
      0003F6 D0 02            [24]  909 	pop	ar2
      0003F8 D0 04            [24]  910 	pop	ar4
      0003FA C0 00            [24]  911 	push	ar0
      0003FC E5*00            [12]  912 	mov	a,_bp
      0003FE 24 0A            [12]  913 	add	a,#0x0a
      000400 F8               [12]  914 	mov	r0,a
      000401 A6 06            [24]  915 	mov	@r0,ar6
      000403 D0 00            [24]  916 	pop	ar0
                                    917 ;	printf_large.c:584: if ( decimals == -1 )
      000405 BC FF 0B         [24]  918 	cjne	r4,#0xFF,00135$
                                    919 ;	printf_large.c:586: decimals = length;
      000408 C0 00            [24]  920 	push	ar0
      00040A E5*00            [12]  921 	mov	a,_bp
      00040C 24 0A            [12]  922 	add	a,#0x0a
      00040E F8               [12]  923 	mov	r0,a
      00040F 86 04            [24]  924 	mov	ar4,@r0
      000411 D0 00            [24]  925 	pop	ar0
      000413                        926 00135$:
                                    927 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000413 30*00 03         [24]  928 	jnb	b0,00545$
      000416 02r04rCB         [24]  929 	ljmp	00289$
      000419                        930 00545$:
      000419 C0 00            [24]  931 	push	ar0
      00041B E5*00            [12]  932 	mov	a,_bp
      00041D 24 0A            [12]  933 	add	a,#0x0a
      00041F F8               [12]  934 	mov	r0,a
      000420 C0 01            [24]  935 	push	ar1
      000422 E5*00            [12]  936 	mov	a,_bp
      000424 24 17            [12]  937 	add	a,#0x17
      000426 F9               [12]  938 	mov	r1,a
      000427 C3               [12]  939 	clr	c
      000428 E6               [12]  940 	mov	a,@r0
      000429 97               [12]  941 	subb	a,@r1
      00042A D0 01            [24]  942 	pop	ar1
      00042C D0 00            [24]  943 	pop	ar0
      00042E 40 03            [24]  944 	jc	00546$
      000430 02r04rCB         [24]  945 	ljmp	00289$
      000433                        946 00546$:
                                    947 ;	printf_large.c:590: width -= length;
      000433 C0 00            [24]  948 	push	ar0
      000435 E5*00            [12]  949 	mov	a,_bp
      000437 24 17            [12]  950 	add	a,#0x17
      000439 F8               [12]  951 	mov	r0,a
      00043A C0 01            [24]  952 	push	ar1
      00043C E5*00            [12]  953 	mov	a,_bp
      00043E 24 0A            [12]  954 	add	a,#0x0a
      000440 F9               [12]  955 	mov	r1,a
      000441 E6               [12]  956 	mov	a,@r0
      000442 C3               [12]  957 	clr	c
      000443 97               [12]  958 	subb	a,@r1
      000444 F6               [12]  959 	mov	@r0,a
      000445 D0 01            [24]  960 	pop	ar1
                                    961 ;	printf_large.c:591: while( width-- != 0 )
      000447 A8*00            [24]  962 	mov	r0,_bp
      000449 08               [12]  963 	inc	r0
      00044A 86 06            [24]  964 	mov	ar6,@r0
      00044C 08               [12]  965 	inc	r0
      00044D 86 07            [24]  966 	mov	ar7,@r0
      00044F E5*00            [12]  967 	mov	a,_bp
      000451 24 17            [12]  968 	add	a,#0x17
      000453 F8               [12]  969 	mov	r0,a
      000454 86 05            [24]  970 	mov	ar5,@r0
      000456 D0 00            [24]  971 	pop	ar0
      000458                        972 00136$:
      000458 8D 03            [24]  973 	mov	ar3,r5
      00045A 1D               [12]  974 	dec	r5
      00045B EB               [12]  975 	mov	a,r3
      00045C 60 5A            [24]  976 	jz	00329$
                                    977 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      00045E C0 07            [24]  978 	push	ar7
      000460 C0 06            [24]  979 	push	ar6
      000462 C0 05            [24]  980 	push	ar5
      000464 C0 04            [24]  981 	push	ar4
      000466 C0 02            [24]  982 	push	ar2
      000468 C0 01            [24]  983 	push	ar1
      00046A C0 00            [24]  984 	push	ar0
      00046C C0*00            [24]  985 	push	bits
      00046E 85 00 F0         [24]  986 	mov	b,ar0
      000471 E5*00            [12]  987 	mov	a,_bp
      000473 24 FB            [12]  988 	add	a,#0xfb
      000475 F8               [12]  989 	mov	r0,a
      000476 E6               [12]  990 	mov	a,@r0
      000477 C0 E0            [24]  991 	push	acc
      000479 08               [12]  992 	inc	r0
      00047A E6               [12]  993 	mov	a,@r0
      00047B C0 E0            [24]  994 	push	acc
      00047D 08               [12]  995 	inc	r0
      00047E E6               [12]  996 	mov	a,@r0
      00047F C0 E0            [24]  997 	push	acc
      000481 A8 F0            [24]  998 	mov	r0,b
      000483 12r04r88         [24]  999 	lcall	00548$
      000486 80 13            [24] 1000 	sjmp	00549$
      000488                       1001 00548$:
      000488 85 00 F0         [24] 1002 	mov	b,ar0
      00048B E5*00            [12] 1003 	mov	a,_bp
      00048D 24 0B            [12] 1004 	add	a,#0x0b
      00048F F8               [12] 1005 	mov	r0,a
      000490 E6               [12] 1006 	mov	a,@r0
      000491 C0 E0            [24] 1007 	push	acc
      000493 08               [12] 1008 	inc	r0
      000494 E6               [12] 1009 	mov	a,@r0
      000495 C0 E0            [24] 1010 	push	acc
      000497 75 82 20         [24] 1011 	mov	dpl,#0x20
      00049A 22               [24] 1012 	ret
      00049B                       1013 00549$:
      00049B 15 81            [12] 1014 	dec	sp
      00049D 15 81            [12] 1015 	dec	sp
      00049F 15 81            [12] 1016 	dec	sp
      0004A1 D0*00            [24] 1017 	pop	bits
      0004A3 D0 00            [24] 1018 	pop	ar0
      0004A5 D0 01            [24] 1019 	pop	ar1
      0004A7 D0 02            [24] 1020 	pop	ar2
      0004A9 D0 04            [24] 1021 	pop	ar4
      0004AB D0 05            [24] 1022 	pop	ar5
      0004AD D0 06            [24] 1023 	pop	ar6
      0004AF D0 07            [24] 1024 	pop	ar7
      0004B1 0E               [12] 1025 	inc	r6
                                   1026 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      0004B2 BE 00 A3         [24] 1027 	cjne	r6,#0x00,00136$
      0004B5 0F               [12] 1028 	inc	r7
      0004B6 80 A0            [24] 1029 	sjmp	00136$
      0004B8                       1030 00329$:
      0004B8 C0 00            [24] 1031 	push	ar0
      0004BA A8*00            [24] 1032 	mov	r0,_bp
      0004BC 08               [12] 1033 	inc	r0
      0004BD A6 06            [24] 1034 	mov	@r0,ar6
      0004BF 08               [12] 1035 	inc	r0
      0004C0 A6 07            [24] 1036 	mov	@r0,ar7
      0004C2 E5*00            [12] 1037 	mov	a,_bp
      0004C4 24 17            [12] 1038 	add	a,#0x17
      0004C6 F8               [12] 1039 	mov	r0,a
      0004C7 A6 05            [24] 1040 	mov	@r0,ar5
      0004C9 D0 00            [24] 1041 	pop	ar0
      0004CB                       1042 00289$:
      0004CB C0 00            [24] 1043 	push	ar0
      0004CD A8*00            [24] 1044 	mov	r0,_bp
      0004CF 08               [12] 1045 	inc	r0
      0004D0 C0 01            [24] 1046 	push	ar1
      0004D2 E5*00            [12] 1047 	mov	a,_bp
      0004D4 24 0E            [12] 1048 	add	a,#0x0e
      0004D6 F9               [12] 1049 	mov	r1,a
      0004D7 E6               [12] 1050 	mov	a,@r0
      0004D8 F7               [12] 1051 	mov	@r1,a
      0004D9 08               [12] 1052 	inc	r0
      0004DA 09               [12] 1053 	inc	r1
      0004DB E6               [12] 1054 	mov	a,@r0
      0004DC F7               [12] 1055 	mov	@r1,a
      0004DD D0 01            [24] 1056 	pop	ar1
      0004DF D0 00            [24] 1057 	pop	ar0
      0004E1                       1058 00143$:
      0004E1 87 03            [24] 1059 	mov	ar3,@r1
      0004E3 09               [12] 1060 	inc	r1
      0004E4 87 06            [24] 1061 	mov	ar6,@r1
      0004E6 09               [12] 1062 	inc	r1
      0004E7 87 07            [24] 1063 	mov	ar7,@r1
      0004E9 19               [12] 1064 	dec	r1
      0004EA 19               [12] 1065 	dec	r1
      0004EB 8B 82            [24] 1066 	mov	dpl,r3
      0004ED 8E 83            [24] 1067 	mov	dph,r6
      0004EF 8F F0            [24] 1068 	mov	b,r7
      0004F1 12r00r00         [24] 1069 	lcall	__gptrget
      0004F4 FB               [12] 1070 	mov	r3,a
      0004F5 FD               [12] 1071 	mov	r5,a
      0004F6 70 03            [24] 1072 	jnz	00551$
      0004F8 02r05r7F         [24] 1073 	ljmp	00330$
      0004FB                       1074 00551$:
      0004FB 8C 07            [24] 1075 	mov	ar7,r4
      0004FD 1C               [12] 1076 	dec	r4
      0004FE C3               [12] 1077 	clr	c
      0004FF 74 80            [12] 1078 	mov	a,#(0x00 ^ 0x80)
      000501 8F F0            [24] 1079 	mov	b,r7
      000503 63 F0 80         [24] 1080 	xrl	b,#0x80
      000506 95 F0            [12] 1081 	subb	a,b
      000508 50 75            [24] 1082 	jnc	00330$
                                   1083 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      00050A C0 00            [24] 1084 	push	ar0
      00050C C0 04            [24] 1085 	push	ar4
      00050E C0 02            [24] 1086 	push	ar2
      000510 C0 01            [24] 1087 	push	ar1
      000512 C0 00            [24] 1088 	push	ar0
      000514 C0*00            [24] 1089 	push	bits
      000516 85 00 F0         [24] 1090 	mov	b,ar0
      000519 E5*00            [12] 1091 	mov	a,_bp
      00051B 24 FB            [12] 1092 	add	a,#0xfb
      00051D F8               [12] 1093 	mov	r0,a
      00051E E6               [12] 1094 	mov	a,@r0
      00051F C0 E0            [24] 1095 	push	acc
      000521 08               [12] 1096 	inc	r0
      000522 E6               [12] 1097 	mov	a,@r0
      000523 C0 E0            [24] 1098 	push	acc
      000525 08               [12] 1099 	inc	r0
      000526 E6               [12] 1100 	mov	a,@r0
      000527 C0 E0            [24] 1101 	push	acc
      000529 A8 F0            [24] 1102 	mov	r0,b
      00052B 12r05r30         [24] 1103 	lcall	00553$
      00052E 80 12            [24] 1104 	sjmp	00554$
      000530                       1105 00553$:
      000530 85 00 F0         [24] 1106 	mov	b,ar0
      000533 E5*00            [12] 1107 	mov	a,_bp
      000535 24 0B            [12] 1108 	add	a,#0x0b
      000537 F8               [12] 1109 	mov	r0,a
      000538 E6               [12] 1110 	mov	a,@r0
      000539 C0 E0            [24] 1111 	push	acc
      00053B 08               [12] 1112 	inc	r0
      00053C E6               [12] 1113 	mov	a,@r0
      00053D C0 E0            [24] 1114 	push	acc
      00053F 8D 82            [24] 1115 	mov	dpl,r5
      000541 22               [24] 1116 	ret
      000542                       1117 00554$:
      000542 15 81            [12] 1118 	dec	sp
      000544 15 81            [12] 1119 	dec	sp
      000546 15 81            [12] 1120 	dec	sp
      000548 D0*00            [24] 1121 	pop	bits
      00054A D0 00            [24] 1122 	pop	ar0
      00054C D0 01            [24] 1123 	pop	ar1
      00054E D0 02            [24] 1124 	pop	ar2
      000550 D0 04            [24] 1125 	pop	ar4
      000552 C0 00            [24] 1126 	push	ar0
      000554 E5*00            [12] 1127 	mov	a,_bp
      000556 24 0E            [12] 1128 	add	a,#0x0e
      000558 F8               [12] 1129 	mov	r0,a
      000559 06               [12] 1130 	inc	@r0
      00055A B6 00 02         [24] 1131 	cjne	@r0,#0x00,00555$
      00055D 08               [12] 1132 	inc	r0
      00055E 06               [12] 1133 	inc	@r0
      00055F                       1134 00555$:
      00055F D0 00            [24] 1135 	pop	ar0
                                   1136 ;	printf_large.c:600: PTR++;
      000561 87 03            [24] 1137 	mov	ar3,@r1
      000563 09               [12] 1138 	inc	r1
      000564 87 06            [24] 1139 	mov	ar6,@r1
      000566 09               [12] 1140 	inc	r1
      000567 87 07            [24] 1141 	mov	ar7,@r1
      000569 19               [12] 1142 	dec	r1
      00056A 19               [12] 1143 	dec	r1
      00056B 0B               [12] 1144 	inc	r3
      00056C BB 00 01         [24] 1145 	cjne	r3,#0x00,00556$
      00056F 0E               [12] 1146 	inc	r6
      000570                       1147 00556$:
      000570 A7 03            [24] 1148 	mov	@r1,ar3
      000572 09               [12] 1149 	inc	r1
      000573 A7 06            [24] 1150 	mov	@r1,ar6
      000575 09               [12] 1151 	inc	r1
      000576 A7 07            [24] 1152 	mov	@r1,ar7
      000578 19               [12] 1153 	dec	r1
      000579 19               [12] 1154 	dec	r1
      00057A D0 00            [24] 1155 	pop	ar0
      00057C 02r04rE1         [24] 1156 	ljmp	00143$
      00057F                       1157 00330$:
      00057F E5*00            [12] 1158 	mov	a,_bp
      000581 24 0E            [12] 1159 	add	a,#0x0e
      000583 F9               [12] 1160 	mov	r1,a
      000584 C0 00            [24] 1161 	push	ar0
      000586 A8*00            [24] 1162 	mov	r0,_bp
      000588 08               [12] 1163 	inc	r0
      000589 E7               [12] 1164 	mov	a,@r1
      00058A F6               [12] 1165 	mov	@r0,a
      00058B 09               [12] 1166 	inc	r1
      00058C 08               [12] 1167 	inc	r0
      00058D E7               [12] 1168 	mov	a,@r1
      00058E F6               [12] 1169 	mov	@r0,a
      00058F D0 00            [24] 1170 	pop	ar0
                                   1171 ;	printf_large.c:603: if ( left_justify && (length < width))
      000591 20*00 03         [24] 1172 	jb	b0,00557$
      000594 02r08rC0         [24] 1173 	ljmp	00172$
      000597                       1174 00557$:
      000597 E5*00            [12] 1175 	mov	a,_bp
      000599 24 0A            [12] 1176 	add	a,#0x0a
      00059B F9               [12] 1177 	mov	r1,a
      00059C C0 00            [24] 1178 	push	ar0
      00059E E5*00            [12] 1179 	mov	a,_bp
      0005A0 24 17            [12] 1180 	add	a,#0x17
      0005A2 F8               [12] 1181 	mov	r0,a
      0005A3 C3               [12] 1182 	clr	c
      0005A4 E7               [12] 1183 	mov	a,@r1
      0005A5 96               [12] 1184 	subb	a,@r0
      0005A6 D0 00            [24] 1185 	pop	ar0
      0005A8 40 03            [24] 1186 	jc	00558$
      0005AA 02r08rC0         [24] 1187 	ljmp	00172$
      0005AD                       1188 00558$:
                                   1189 ;	printf_large.c:605: width -= length;
      0005AD E5*00            [12] 1190 	mov	a,_bp
      0005AF 24 17            [12] 1191 	add	a,#0x17
      0005B1 F9               [12] 1192 	mov	r1,a
      0005B2 C0 00            [24] 1193 	push	ar0
      0005B4 E5*00            [12] 1194 	mov	a,_bp
      0005B6 24 0A            [12] 1195 	add	a,#0x0a
      0005B8 F8               [12] 1196 	mov	r0,a
      0005B9 E7               [12] 1197 	mov	a,@r1
      0005BA C3               [12] 1198 	clr	c
      0005BB 96               [12] 1199 	subb	a,@r0
      0005BC F7               [12] 1200 	mov	@r1,a
      0005BD D0 00            [24] 1201 	pop	ar0
                                   1202 ;	printf_large.c:606: while( width-- != 0 )
      0005BF E5*00            [12] 1203 	mov	a,_bp
      0005C1 24 0E            [12] 1204 	add	a,#0x0e
      0005C3 F9               [12] 1205 	mov	r1,a
      0005C4 87 06            [24] 1206 	mov	ar6,@r1
      0005C6 09               [12] 1207 	inc	r1
      0005C7 87 05            [24] 1208 	mov	ar5,@r1
      0005C9 E5*00            [12] 1209 	mov	a,_bp
      0005CB 24 17            [12] 1210 	add	a,#0x17
      0005CD F9               [12] 1211 	mov	r1,a
      0005CE 87 03            [24] 1212 	mov	ar3,@r1
      0005D0                       1213 00146$:
      0005D0 8B 07            [24] 1214 	mov	ar7,r3
      0005D2 1B               [12] 1215 	dec	r3
      0005D3 EF               [12] 1216 	mov	a,r7
      0005D4 70 03            [24] 1217 	jnz	00559$
      0005D6 02r08rB1         [24] 1218 	ljmp	00331$
      0005D9                       1219 00559$:
                                   1220 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      0005D9 C0 06            [24] 1221 	push	ar6
      0005DB C0 05            [24] 1222 	push	ar5
      0005DD C0 03            [24] 1223 	push	ar3
      0005DF C0 02            [24] 1224 	push	ar2
      0005E1 C0 00            [24] 1225 	push	ar0
      0005E3 C0*00            [24] 1226 	push	bits
      0005E5 E5*00            [12] 1227 	mov	a,_bp
      0005E7 24 FB            [12] 1228 	add	a,#0xfb
      0005E9 F9               [12] 1229 	mov	r1,a
      0005EA E7               [12] 1230 	mov	a,@r1
      0005EB C0 E0            [24] 1231 	push	acc
      0005ED 09               [12] 1232 	inc	r1
      0005EE E7               [12] 1233 	mov	a,@r1
      0005EF C0 E0            [24] 1234 	push	acc
      0005F1 09               [12] 1235 	inc	r1
      0005F2 E7               [12] 1236 	mov	a,@r1
      0005F3 C0 E0            [24] 1237 	push	acc
      0005F5 12r05rFA         [24] 1238 	lcall	00560$
      0005F8 80 10            [24] 1239 	sjmp	00561$
      0005FA                       1240 00560$:
      0005FA E5*00            [12] 1241 	mov	a,_bp
      0005FC 24 0B            [12] 1242 	add	a,#0x0b
      0005FE F9               [12] 1243 	mov	r1,a
      0005FF E7               [12] 1244 	mov	a,@r1
      000600 C0 E0            [24] 1245 	push	acc
      000602 09               [12] 1246 	inc	r1
      000603 E7               [12] 1247 	mov	a,@r1
      000604 C0 E0            [24] 1248 	push	acc
      000606 75 82 20         [24] 1249 	mov	dpl,#0x20
      000609 22               [24] 1250 	ret
      00060A                       1251 00561$:
      00060A 15 81            [12] 1252 	dec	sp
      00060C 15 81            [12] 1253 	dec	sp
      00060E 15 81            [12] 1254 	dec	sp
      000610 D0*00            [24] 1255 	pop	bits
      000612 D0 00            [24] 1256 	pop	ar0
      000614 D0 02            [24] 1257 	pop	ar2
      000616 D0 03            [24] 1258 	pop	ar3
      000618 D0 05            [24] 1259 	pop	ar5
      00061A D0 06            [24] 1260 	pop	ar6
      00061C 0E               [12] 1261 	inc	r6
                                   1262 ;	printf_large.c:613: case 'P':
      00061D BE 00 B0         [24] 1263 	cjne	r6,#0x00,00146$
      000620 0D               [12] 1264 	inc	r5
      000621 80 AD            [24] 1265 	sjmp	00146$
      000623                       1266 00152$:
                                   1267 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000623 E5*00            [12] 1268 	mov	a,_bp
      000625 24 11            [12] 1269 	add	a,#0x11
      000627 F9               [12] 1270 	mov	r1,a
      000628 C0 00            [24] 1271 	push	ar0
      00062A E5*00            [12] 1272 	mov	a,_bp
      00062C 24 F7            [12] 1273 	add	a,#0xf7
      00062E F8               [12] 1274 	mov	r0,a
      00062F E6               [12] 1275 	mov	a,@r0
      000630 24 FD            [12] 1276 	add	a,#0xFD
      000632 FF               [12] 1277 	mov	r7,a
      000633 E5*00            [12] 1278 	mov	a,_bp
      000635 24 F7            [12] 1279 	add	a,#0xf7
      000637 F8               [12] 1280 	mov	r0,a
      000638 A6 07            [24] 1281 	mov	@r0,ar7
      00063A A8 07            [24] 1282 	mov	r0,ar7
      00063C 86 05            [24] 1283 	mov	ar5,@r0
      00063E 08               [12] 1284 	inc	r0
      00063F 86 06            [24] 1285 	mov	ar6,@r0
      000641 08               [12] 1286 	inc	r0
      000642 86 07            [24] 1287 	mov	ar7,@r0
      000644 D0 00            [24] 1288 	pop	ar0
      000646 A7 05            [24] 1289 	mov	@r1,ar5
      000648 09               [12] 1290 	inc	r1
      000649 A7 06            [24] 1291 	mov	@r1,ar6
      00064B 09               [12] 1292 	inc	r1
      00064C A7 07            [24] 1293 	mov	@r1,ar7
      00064E 19               [12] 1294 	dec	r1
      00064F 19               [12] 1295 	dec	r1
                                   1296 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      000650 E5*00            [12] 1297 	mov	a,_bp
      000652 24 11            [12] 1298 	add	a,#0x11
      000654 FE               [12] 1299 	mov	r6,a
      000655 24 02            [12] 1300 	add	a,#0x02
      000657 F9               [12] 1301 	mov	r1,a
      000658 87 07            [24] 1302 	mov	ar7,@r1
                                   1303 ;	printf_large.c:638: if (memtype >= 0x80)
      00065A BF 80 00         [24] 1304 	cjne	r7,#0x80,00563$
      00065D                       1305 00563$:
      00065D 40 04            [24] 1306 	jc	00160$
                                   1307 ;	printf_large.c:639: c = 'C';
      00065F 7D 43            [12] 1308 	mov	r5,#0x43
      000661 80 14            [24] 1309 	sjmp	00161$
      000663                       1310 00160$:
                                   1311 ;	printf_large.c:640: else if (memtype >= 0x60)
      000663 BF 60 00         [24] 1312 	cjne	r7,#0x60,00565$
      000666                       1313 00565$:
      000666 40 04            [24] 1314 	jc	00157$
                                   1315 ;	printf_large.c:641: c = 'P';
      000668 7D 50            [12] 1316 	mov	r5,#0x50
      00066A 80 0B            [24] 1317 	sjmp	00161$
      00066C                       1318 00157$:
                                   1319 ;	printf_large.c:642: else if (memtype >= 0x40)
      00066C BF 40 00         [24] 1320 	cjne	r7,#0x40,00567$
      00066F                       1321 00567$:
      00066F 40 04            [24] 1322 	jc	00154$
                                   1323 ;	printf_large.c:643: c = 'I';
      000671 7D 49            [12] 1324 	mov	r5,#0x49
      000673 80 02            [24] 1325 	sjmp	00161$
      000675                       1326 00154$:
                                   1327 ;	printf_large.c:645: c = 'X';
      000675 7D 58            [12] 1328 	mov	r5,#0x58
      000677                       1329 00161$:
                                   1330 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000677 C0 06            [24] 1331 	push	ar6
      000679 C0 05            [24] 1332 	push	ar5
      00067B C0 02            [24] 1333 	push	ar2
      00067D C0 00            [24] 1334 	push	ar0
      00067F C0*00            [24] 1335 	push	bits
      000681 E5*00            [12] 1336 	mov	a,_bp
      000683 24 FB            [12] 1337 	add	a,#0xfb
      000685 F9               [12] 1338 	mov	r1,a
      000686 E7               [12] 1339 	mov	a,@r1
      000687 C0 E0            [24] 1340 	push	acc
      000689 09               [12] 1341 	inc	r1
      00068A E7               [12] 1342 	mov	a,@r1
      00068B C0 E0            [24] 1343 	push	acc
      00068D 09               [12] 1344 	inc	r1
      00068E E7               [12] 1345 	mov	a,@r1
      00068F C0 E0            [24] 1346 	push	acc
      000691 12r06r96         [24] 1347 	lcall	00569$
      000694 80 0F            [24] 1348 	sjmp	00570$
      000696                       1349 00569$:
      000696 E5*00            [12] 1350 	mov	a,_bp
      000698 24 0B            [12] 1351 	add	a,#0x0b
      00069A F9               [12] 1352 	mov	r1,a
      00069B E7               [12] 1353 	mov	a,@r1
      00069C C0 E0            [24] 1354 	push	acc
      00069E 09               [12] 1355 	inc	r1
      00069F E7               [12] 1356 	mov	a,@r1
      0006A0 C0 E0            [24] 1357 	push	acc
      0006A2 8D 82            [24] 1358 	mov	dpl,r5
      0006A4 22               [24] 1359 	ret
      0006A5                       1360 00570$:
      0006A5 15 81            [12] 1361 	dec	sp
      0006A7 15 81            [12] 1362 	dec	sp
      0006A9 15 81            [12] 1363 	dec	sp
      0006AB D0*00            [24] 1364 	pop	bits
      0006AD D0 00            [24] 1365 	pop	ar0
      0006AF D0 02            [24] 1366 	pop	ar2
      0006B1 D0 05            [24] 1367 	pop	ar5
      0006B3 D0 06            [24] 1368 	pop	ar6
      0006B5 A9*00            [24] 1369 	mov	r1,_bp
      0006B7 09               [12] 1370 	inc	r1
      0006B8 07               [12] 1371 	inc	@r1
      0006B9 B7 00 02         [24] 1372 	cjne	@r1,#0x00,00571$
      0006BC 09               [12] 1373 	inc	r1
      0006BD 07               [12] 1374 	inc	@r1
      0006BE                       1375 00571$:
                                   1376 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      0006BE C0 06            [24] 1377 	push	ar6
      0006C0 C0 05            [24] 1378 	push	ar5
      0006C2 C0 02            [24] 1379 	push	ar2
      0006C4 C0 00            [24] 1380 	push	ar0
      0006C6 C0*00            [24] 1381 	push	bits
      0006C8 E5*00            [12] 1382 	mov	a,_bp
      0006CA 24 FB            [12] 1383 	add	a,#0xfb
      0006CC F9               [12] 1384 	mov	r1,a
      0006CD E7               [12] 1385 	mov	a,@r1
      0006CE C0 E0            [24] 1386 	push	acc
      0006D0 09               [12] 1387 	inc	r1
      0006D1 E7               [12] 1388 	mov	a,@r1
      0006D2 C0 E0            [24] 1389 	push	acc
      0006D4 09               [12] 1390 	inc	r1
      0006D5 E7               [12] 1391 	mov	a,@r1
      0006D6 C0 E0            [24] 1392 	push	acc
      0006D8 12r06rDD         [24] 1393 	lcall	00572$
      0006DB 80 10            [24] 1394 	sjmp	00573$
      0006DD                       1395 00572$:
      0006DD E5*00            [12] 1396 	mov	a,_bp
      0006DF 24 0B            [12] 1397 	add	a,#0x0b
      0006E1 F9               [12] 1398 	mov	r1,a
      0006E2 E7               [12] 1399 	mov	a,@r1
      0006E3 C0 E0            [24] 1400 	push	acc
      0006E5 09               [12] 1401 	inc	r1
      0006E6 E7               [12] 1402 	mov	a,@r1
      0006E7 C0 E0            [24] 1403 	push	acc
      0006E9 75 82 3A         [24] 1404 	mov	dpl,#0x3A
      0006EC 22               [24] 1405 	ret
      0006ED                       1406 00573$:
      0006ED 15 81            [12] 1407 	dec	sp
      0006EF 15 81            [12] 1408 	dec	sp
      0006F1 15 81            [12] 1409 	dec	sp
      0006F3 D0*00            [24] 1410 	pop	bits
      0006F5 D0 00            [24] 1411 	pop	ar0
      0006F7 D0 02            [24] 1412 	pop	ar2
      0006F9 D0 05            [24] 1413 	pop	ar5
      0006FB D0 06            [24] 1414 	pop	ar6
      0006FD A9*00            [24] 1415 	mov	r1,_bp
      0006FF 09               [12] 1416 	inc	r1
      000700 07               [12] 1417 	inc	@r1
      000701 B7 00 02         [24] 1418 	cjne	@r1,#0x00,00574$
      000704 09               [12] 1419 	inc	r1
      000705 07               [12] 1420 	inc	@r1
      000706                       1421 00574$:
                                   1422 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000706 C0 06            [24] 1423 	push	ar6
      000708 C0 05            [24] 1424 	push	ar5
      00070A C0 02            [24] 1425 	push	ar2
      00070C C0 00            [24] 1426 	push	ar0
      00070E C0*00            [24] 1427 	push	bits
      000710 E5*00            [12] 1428 	mov	a,_bp
      000712 24 FB            [12] 1429 	add	a,#0xfb
      000714 F9               [12] 1430 	mov	r1,a
      000715 E7               [12] 1431 	mov	a,@r1
      000716 C0 E0            [24] 1432 	push	acc
      000718 09               [12] 1433 	inc	r1
      000719 E7               [12] 1434 	mov	a,@r1
      00071A C0 E0            [24] 1435 	push	acc
      00071C 09               [12] 1436 	inc	r1
      00071D E7               [12] 1437 	mov	a,@r1
      00071E C0 E0            [24] 1438 	push	acc
      000720 12r07r25         [24] 1439 	lcall	00575$
      000723 80 10            [24] 1440 	sjmp	00576$
      000725                       1441 00575$:
      000725 E5*00            [12] 1442 	mov	a,_bp
      000727 24 0B            [12] 1443 	add	a,#0x0b
      000729 F9               [12] 1444 	mov	r1,a
      00072A E7               [12] 1445 	mov	a,@r1
      00072B C0 E0            [24] 1446 	push	acc
      00072D 09               [12] 1447 	inc	r1
      00072E E7               [12] 1448 	mov	a,@r1
      00072F C0 E0            [24] 1449 	push	acc
      000731 75 82 30         [24] 1450 	mov	dpl,#0x30
      000734 22               [24] 1451 	ret
      000735                       1452 00576$:
      000735 15 81            [12] 1453 	dec	sp
      000737 15 81            [12] 1454 	dec	sp
      000739 15 81            [12] 1455 	dec	sp
      00073B D0*00            [24] 1456 	pop	bits
      00073D D0 00            [24] 1457 	pop	ar0
      00073F D0 02            [24] 1458 	pop	ar2
      000741 D0 05            [24] 1459 	pop	ar5
      000743 D0 06            [24] 1460 	pop	ar6
      000745 A9*00            [24] 1461 	mov	r1,_bp
      000747 09               [12] 1462 	inc	r1
      000748 07               [12] 1463 	inc	@r1
      000749 B7 00 02         [24] 1464 	cjne	@r1,#0x00,00577$
      00074C 09               [12] 1465 	inc	r1
      00074D 07               [12] 1466 	inc	@r1
      00074E                       1467 00577$:
                                   1468 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      00074E C0 06            [24] 1469 	push	ar6
      000750 C0 05            [24] 1470 	push	ar5
      000752 C0 02            [24] 1471 	push	ar2
      000754 C0 00            [24] 1472 	push	ar0
      000756 C0*00            [24] 1473 	push	bits
      000758 E5*00            [12] 1474 	mov	a,_bp
      00075A 24 FB            [12] 1475 	add	a,#0xfb
      00075C F9               [12] 1476 	mov	r1,a
      00075D E7               [12] 1477 	mov	a,@r1
      00075E C0 E0            [24] 1478 	push	acc
      000760 09               [12] 1479 	inc	r1
      000761 E7               [12] 1480 	mov	a,@r1
      000762 C0 E0            [24] 1481 	push	acc
      000764 09               [12] 1482 	inc	r1
      000765 E7               [12] 1483 	mov	a,@r1
      000766 C0 E0            [24] 1484 	push	acc
      000768 12r07r6D         [24] 1485 	lcall	00578$
      00076B 80 10            [24] 1486 	sjmp	00579$
      00076D                       1487 00578$:
      00076D E5*00            [12] 1488 	mov	a,_bp
      00076F 24 0B            [12] 1489 	add	a,#0x0b
      000771 F9               [12] 1490 	mov	r1,a
      000772 E7               [12] 1491 	mov	a,@r1
      000773 C0 E0            [24] 1492 	push	acc
      000775 09               [12] 1493 	inc	r1
      000776 E7               [12] 1494 	mov	a,@r1
      000777 C0 E0            [24] 1495 	push	acc
      000779 75 82 78         [24] 1496 	mov	dpl,#0x78
      00077C 22               [24] 1497 	ret
      00077D                       1498 00579$:
      00077D 15 81            [12] 1499 	dec	sp
      00077F 15 81            [12] 1500 	dec	sp
      000781 15 81            [12] 1501 	dec	sp
      000783 D0*00            [24] 1502 	pop	bits
      000785 D0 00            [24] 1503 	pop	ar0
      000787 D0 02            [24] 1504 	pop	ar2
      000789 D0 05            [24] 1505 	pop	ar5
      00078B D0 06            [24] 1506 	pop	ar6
      00078D A9*00            [24] 1507 	mov	r1,_bp
      00078F 09               [12] 1508 	inc	r1
      000790 07               [12] 1509 	inc	@r1
      000791 B7 00 02         [24] 1510 	cjne	@r1,#0x00,00580$
      000794 09               [12] 1511 	inc	r1
      000795 07               [12] 1512 	inc	@r1
      000796                       1513 00580$:
                                   1514 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000796 BD 49 02         [24] 1515 	cjne	r5,#0x49,00581$
      000799 80 55            [24] 1516 	sjmp	00163$
      00079B                       1517 00581$:
                                   1518 ;	printf_large.c:652: (c != 'P' /* pdata */))
      00079B BD 50 02         [24] 1519 	cjne	r5,#0x50,00582$
      00079E 80 50            [24] 1520 	sjmp	00163$
      0007A0                       1521 00582$:
                                   1522 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      0007A0 EE               [12] 1523 	mov	a,r6
      0007A1 04               [12] 1524 	inc	a
      0007A2 F9               [12] 1525 	mov	r1,a
      0007A3 87 07            [24] 1526 	mov	ar7,@r1
      0007A5 C0 02            [24] 1527 	push	ar2
      0007A7 C0 00            [24] 1528 	push	ar0
      0007A9 C0*00            [24] 1529 	push	bits
      0007AB E5*00            [12] 1530 	mov	a,_bp
      0007AD 24 FB            [12] 1531 	add	a,#0xfb
      0007AF F9               [12] 1532 	mov	r1,a
      0007B0 E7               [12] 1533 	mov	a,@r1
      0007B1 C0 E0            [24] 1534 	push	acc
      0007B3 09               [12] 1535 	inc	r1
      0007B4 E7               [12] 1536 	mov	a,@r1
      0007B5 C0 E0            [24] 1537 	push	acc
      0007B7 09               [12] 1538 	inc	r1
      0007B8 E7               [12] 1539 	mov	a,@r1
      0007B9 C0 E0            [24] 1540 	push	acc
      0007BB E5*00            [12] 1541 	mov	a,_bp
      0007BD 24 0B            [12] 1542 	add	a,#0x0b
      0007BF F9               [12] 1543 	mov	r1,a
      0007C0 E7               [12] 1544 	mov	a,@r1
      0007C1 C0 E0            [24] 1545 	push	acc
      0007C3 09               [12] 1546 	inc	r1
      0007C4 E7               [12] 1547 	mov	a,@r1
      0007C5 C0 E0            [24] 1548 	push	acc
      0007C7 E5*00            [12] 1549 	mov	a,_bp
      0007C9 24 10            [12] 1550 	add	a,#0x10
      0007CB F9               [12] 1551 	mov	r1,a
      0007CC E7               [12] 1552 	mov	a,@r1
      0007CD 24 FF            [12] 1553 	add	a,#0xff
      0007CF 92 F0            [24] 1554 	mov	b[0],c
      0007D1 85 F0*00         [24] 1555 	mov	bits,b
      0007D4 8F 82            [24] 1556 	mov	dpl,r7
      0007D6 12r00r47         [24] 1557 	lcall	_output_2digits
      0007D9 E5 81            [12] 1558 	mov	a,sp
      0007DB 24 FB            [12] 1559 	add	a,#0xfb
      0007DD F5 81            [12] 1560 	mov	sp,a
      0007DF D0*00            [24] 1561 	pop	bits
      0007E1 D0 00            [24] 1562 	pop	ar0
      0007E3 D0 02            [24] 1563 	pop	ar2
      0007E5 A9*00            [24] 1564 	mov	r1,_bp
      0007E7 09               [12] 1565 	inc	r1
      0007E8 74 02            [12] 1566 	mov	a,#0x02
      0007EA 27               [12] 1567 	add	a,@r1
      0007EB F7               [12] 1568 	mov	@r1,a
      0007EC E4               [12] 1569 	clr	a
      0007ED 09               [12] 1570 	inc	r1
      0007EE 37               [12] 1571 	addc	a,@r1
      0007EF F7               [12] 1572 	mov	@r1,a
      0007F0                       1573 00163$:
                                   1574 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      0007F0 E5*00            [12] 1575 	mov	a,_bp
      0007F2 24 06            [12] 1576 	add	a,#0x06
      0007F4 F9               [12] 1577 	mov	r1,a
      0007F5 87 01            [24] 1578 	mov	ar1,@r1
      0007F7 87 07            [24] 1579 	mov	ar7,@r1
      0007F9 C0 02            [24] 1580 	push	ar2
      0007FB C0 00            [24] 1581 	push	ar0
      0007FD C0*00            [24] 1582 	push	bits
      0007FF E5*00            [12] 1583 	mov	a,_bp
      000801 24 FB            [12] 1584 	add	a,#0xfb
      000803 F9               [12] 1585 	mov	r1,a
      000804 E7               [12] 1586 	mov	a,@r1
      000805 C0 E0            [24] 1587 	push	acc
      000807 09               [12] 1588 	inc	r1
      000808 E7               [12] 1589 	mov	a,@r1
      000809 C0 E0            [24] 1590 	push	acc
      00080B 09               [12] 1591 	inc	r1
      00080C E7               [12] 1592 	mov	a,@r1
      00080D C0 E0            [24] 1593 	push	acc
      00080F E5*00            [12] 1594 	mov	a,_bp
      000811 24 0B            [12] 1595 	add	a,#0x0b
      000813 F9               [12] 1596 	mov	r1,a
      000814 E7               [12] 1597 	mov	a,@r1
      000815 C0 E0            [24] 1598 	push	acc
      000817 09               [12] 1599 	inc	r1
      000818 E7               [12] 1600 	mov	a,@r1
      000819 C0 E0            [24] 1601 	push	acc
      00081B E5*00            [12] 1602 	mov	a,_bp
      00081D 24 10            [12] 1603 	add	a,#0x10
      00081F F9               [12] 1604 	mov	r1,a
      000820 E7               [12] 1605 	mov	a,@r1
      000821 24 FF            [12] 1606 	add	a,#0xff
      000823 92 F0            [24] 1607 	mov	b[0],c
      000825 85 F0*00         [24] 1608 	mov	bits,b
      000828 8F 82            [24] 1609 	mov	dpl,r7
      00082A 12r00r47         [24] 1610 	lcall	_output_2digits
      00082D E5 81            [12] 1611 	mov	a,sp
      00082F 24 FB            [12] 1612 	add	a,#0xfb
      000831 F5 81            [12] 1613 	mov	sp,a
      000833 D0*00            [24] 1614 	pop	bits
      000835 D0 00            [24] 1615 	pop	ar0
      000837 D0 02            [24] 1616 	pop	ar2
      000839 A9*00            [24] 1617 	mov	r1,_bp
      00083B 09               [12] 1618 	inc	r1
      00083C 74 02            [12] 1619 	mov	a,#0x02
      00083E 27               [12] 1620 	add	a,@r1
      00083F F7               [12] 1621 	mov	@r1,a
      000840 E4               [12] 1622 	clr	a
      000841 09               [12] 1623 	inc	r1
      000842 37               [12] 1624 	addc	a,@r1
      000843 F7               [12] 1625 	mov	@r1,a
                                   1626 ;	printf_large.c:663: break;
                                   1627 ;	printf_large.c:666: case 'I':
      000844 80 7A            [24] 1628 	sjmp	00172$
      000846                       1629 00166$:
                                   1630 ;	printf_large.c:667: signed_argument = 1;
      000846 D2*00            [12] 1631 	setb	b4
                                   1632 ;	printf_large.c:668: radix = 10;
      000848 E5*00            [12] 1633 	mov	a,_bp
      00084A 24 16            [12] 1634 	add	a,#0x16
      00084C F9               [12] 1635 	mov	r1,a
      00084D 77 0A            [12] 1636 	mov	@r1,#0x0A
                                   1637 ;	printf_large.c:669: break;
                                   1638 ;	printf_large.c:671: case 'O':
      00084F 80 6F            [24] 1639 	sjmp	00172$
      000851                       1640 00167$:
                                   1641 ;	printf_large.c:672: radix = 8;
      000851 E5*00            [12] 1642 	mov	a,_bp
      000853 24 16            [12] 1643 	add	a,#0x16
      000855 F9               [12] 1644 	mov	r1,a
      000856 77 08            [12] 1645 	mov	@r1,#0x08
                                   1646 ;	printf_large.c:673: break;
                                   1647 ;	printf_large.c:675: case 'U':
      000858 80 66            [24] 1648 	sjmp	00172$
      00085A                       1649 00168$:
                                   1650 ;	printf_large.c:676: radix = 10;
      00085A E5*00            [12] 1651 	mov	a,_bp
      00085C 24 16            [12] 1652 	add	a,#0x16
      00085E F9               [12] 1653 	mov	r1,a
      00085F 77 0A            [12] 1654 	mov	@r1,#0x0A
                                   1655 ;	printf_large.c:677: break;
                                   1656 ;	printf_large.c:679: case 'X':
      000861 80 5D            [24] 1657 	sjmp	00172$
      000863                       1658 00169$:
                                   1659 ;	printf_large.c:680: radix = 16;
      000863 E5*00            [12] 1660 	mov	a,_bp
      000865 24 16            [12] 1661 	add	a,#0x16
      000867 F9               [12] 1662 	mov	r1,a
      000868 77 10            [12] 1663 	mov	@r1,#0x10
                                   1664 ;	printf_large.c:681: break;
                                   1665 ;	printf_large.c:683: case 'F':
      00086A 80 54            [24] 1666 	sjmp	00172$
      00086C                       1667 00170$:
                                   1668 ;	printf_large.c:684: float_argument=1;
      00086C D2*00            [12] 1669 	setb	b7
                                   1670 ;	printf_large.c:685: break;
                                   1671 ;	printf_large.c:687: default:
      00086E 80 50            [24] 1672 	sjmp	00172$
      000870                       1673 00171$:
                                   1674 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      000870 C0 02            [24] 1675 	push	ar2
      000872 C0 00            [24] 1676 	push	ar0
      000874 C0*00            [24] 1677 	push	bits
      000876 E5*00            [12] 1678 	mov	a,_bp
      000878 24 FB            [12] 1679 	add	a,#0xfb
      00087A F9               [12] 1680 	mov	r1,a
      00087B E7               [12] 1681 	mov	a,@r1
      00087C C0 E0            [24] 1682 	push	acc
      00087E 09               [12] 1683 	inc	r1
      00087F E7               [12] 1684 	mov	a,@r1
      000880 C0 E0            [24] 1685 	push	acc
      000882 09               [12] 1686 	inc	r1
      000883 E7               [12] 1687 	mov	a,@r1
      000884 C0 E0            [24] 1688 	push	acc
      000886 12r08r8B         [24] 1689 	lcall	00583$
      000889 80 0F            [24] 1690 	sjmp	00584$
      00088B                       1691 00583$:
      00088B E5*00            [12] 1692 	mov	a,_bp
      00088D 24 0B            [12] 1693 	add	a,#0x0b
      00088F F9               [12] 1694 	mov	r1,a
      000890 E7               [12] 1695 	mov	a,@r1
      000891 C0 E0            [24] 1696 	push	acc
      000893 09               [12] 1697 	inc	r1
      000894 E7               [12] 1698 	mov	a,@r1
      000895 C0 E0            [24] 1699 	push	acc
      000897 8D 82            [24] 1700 	mov	dpl,r5
      000899 22               [24] 1701 	ret
      00089A                       1702 00584$:
      00089A 15 81            [12] 1703 	dec	sp
      00089C 15 81            [12] 1704 	dec	sp
      00089E 15 81            [12] 1705 	dec	sp
      0008A0 D0*00            [24] 1706 	pop	bits
      0008A2 D0 00            [24] 1707 	pop	ar0
      0008A4 D0 02            [24] 1708 	pop	ar2
      0008A6 A9*00            [24] 1709 	mov	r1,_bp
      0008A8 09               [12] 1710 	inc	r1
      0008A9 07               [12] 1711 	inc	@r1
      0008AA B7 00 02         [24] 1712 	cjne	@r1,#0x00,00585$
      0008AD 09               [12] 1713 	inc	r1
      0008AE 07               [12] 1714 	inc	@r1
      0008AF                       1715 00585$:
                                   1716 ;	printf_large.c:872: return charsOutputted;
                                   1717 ;	printf_large.c:691: }
      0008AF 80 0F            [24] 1718 	sjmp	00172$
      0008B1                       1719 00331$:
      0008B1 A9*00            [24] 1720 	mov	r1,_bp
      0008B3 09               [12] 1721 	inc	r1
      0008B4 A7 06            [24] 1722 	mov	@r1,ar6
      0008B6 09               [12] 1723 	inc	r1
      0008B7 A7 05            [24] 1724 	mov	@r1,ar5
      0008B9 E5*00            [12] 1725 	mov	a,_bp
      0008BB 24 17            [12] 1726 	add	a,#0x17
      0008BD F9               [12] 1727 	mov	r1,a
      0008BE A7 03            [24] 1728 	mov	@r1,ar3
      0008C0                       1729 00172$:
                                   1730 ;	printf_large.c:693: if (float_argument)
      0008C0 20*00 03         [24] 1731 	jb	b7,00586$
      0008C3 02r09rCD         [24] 1732 	ljmp	00238$
      0008C6                       1733 00586$:
                                   1734 ;	printf_large.c:695: value.f = va_arg(ap, float);
      0008C6 C0 00            [24] 1735 	push	ar0
      0008C8 E5*00            [12] 1736 	mov	a,_bp
      0008CA 24 11            [12] 1737 	add	a,#0x11
      0008CC F9               [12] 1738 	mov	r1,a
      0008CD C0 00            [24] 1739 	push	ar0
      0008CF E5*00            [12] 1740 	mov	a,_bp
      0008D1 24 F7            [12] 1741 	add	a,#0xf7
      0008D3 F8               [12] 1742 	mov	r0,a
      0008D4 E6               [12] 1743 	mov	a,@r0
      0008D5 24 FC            [12] 1744 	add	a,#0xFC
      0008D7 FF               [12] 1745 	mov	r7,a
      0008D8 E5*00            [12] 1746 	mov	a,_bp
      0008DA 24 F7            [12] 1747 	add	a,#0xf7
      0008DC F8               [12] 1748 	mov	r0,a
      0008DD A6 07            [24] 1749 	mov	@r0,ar7
      0008DF A8 07            [24] 1750 	mov	r0,ar7
      0008E1 86 03            [24] 1751 	mov	ar3,@r0
      0008E3 08               [12] 1752 	inc	r0
      0008E4 86 05            [24] 1753 	mov	ar5,@r0
      0008E6 08               [12] 1754 	inc	r0
      0008E7 86 06            [24] 1755 	mov	ar6,@r0
      0008E9 08               [12] 1756 	inc	r0
      0008EA 86 07            [24] 1757 	mov	ar7,@r0
      0008EC A7 03            [24] 1758 	mov	@r1,ar3
      0008EE 09               [12] 1759 	inc	r1
      0008EF A7 05            [24] 1760 	mov	@r1,ar5
      0008F1 09               [12] 1761 	inc	r1
      0008F2 A7 06            [24] 1762 	mov	@r1,ar6
      0008F4 09               [12] 1763 	inc	r1
      0008F5 A7 07            [24] 1764 	mov	@r1,ar7
      0008F7 19               [12] 1765 	dec	r1
      0008F8 19               [12] 1766 	dec	r1
      0008F9 19               [12] 1767 	dec	r1
                                   1768 ;	printf_large.c:697: PTR="<NO FLOAT>";
      0008FA E5*00            [12] 1769 	mov	a,_bp
      0008FC 24 11            [12] 1770 	add	a,#0x11
      0008FE F9               [12] 1771 	mov	r1,a
      0008FF 77r00            [12] 1772 	mov	@r1,#___str_0
      000901 09               [12] 1773 	inc	r1
      000902 77s00            [12] 1774 	mov	@r1,#(___str_0 >> 8)
      000904 09               [12] 1775 	inc	r1
      000905 77 80            [12] 1776 	mov	@r1,#0x80
      000907 19               [12] 1777 	dec	r1
      000908 19               [12] 1778 	dec	r1
                                   1779 ;	printf_large.c:698: while (c=*PTR++)
      000909 A8*00            [24] 1780 	mov	r0,_bp
      00090B 08               [12] 1781 	inc	r0
      00090C C0 01            [24] 1782 	push	ar1
      00090E E5*00            [12] 1783 	mov	a,_bp
      000910 24 07            [12] 1784 	add	a,#0x07
      000912 F9               [12] 1785 	mov	r1,a
      000913 E6               [12] 1786 	mov	a,@r0
      000914 F7               [12] 1787 	mov	@r1,a
      000915 08               [12] 1788 	inc	r0
      000916 09               [12] 1789 	inc	r1
      000917 E6               [12] 1790 	mov	a,@r0
      000918 F7               [12] 1791 	mov	@r1,a
      000919 D0 01            [24] 1792 	pop	ar1
      00091B D0 00            [24] 1793 	pop	ar0
                                   1794 ;	printf_large.c:872: return charsOutputted;
      00091D D0 00            [24] 1795 	pop	ar0
                                   1796 ;	printf_large.c:698: while (c=*PTR++)
      00091F                       1797 00173$:
      00091F C0 00            [24] 1798 	push	ar0
      000921 C0 00            [24] 1799 	push	ar0
      000923 E5*00            [12] 1800 	mov	a,_bp
      000925 24 03            [12] 1801 	add	a,#0x03
      000927 F8               [12] 1802 	mov	r0,a
      000928 E7               [12] 1803 	mov	a,@r1
      000929 F6               [12] 1804 	mov	@r0,a
      00092A 09               [12] 1805 	inc	r1
      00092B E7               [12] 1806 	mov	a,@r1
      00092C 08               [12] 1807 	inc	r0
      00092D F6               [12] 1808 	mov	@r0,a
      00092E 09               [12] 1809 	inc	r1
      00092F E7               [12] 1810 	mov	a,@r1
      000930 08               [12] 1811 	inc	r0
      000931 F6               [12] 1812 	mov	@r0,a
      000932 19               [12] 1813 	dec	r1
      000933 19               [12] 1814 	dec	r1
      000934 E5*00            [12] 1815 	mov	a,_bp
      000936 24 03            [12] 1816 	add	a,#0x03
      000938 F8               [12] 1817 	mov	r0,a
      000939 74 01            [12] 1818 	mov	a,#0x01
      00093B 26               [12] 1819 	add	a,@r0
      00093C FB               [12] 1820 	mov	r3,a
      00093D E4               [12] 1821 	clr	a
      00093E 08               [12] 1822 	inc	r0
      00093F 36               [12] 1823 	addc	a,@r0
      000940 FC               [12] 1824 	mov	r4,a
      000941 08               [12] 1825 	inc	r0
      000942 86 07            [24] 1826 	mov	ar7,@r0
      000944 A7 03            [24] 1827 	mov	@r1,ar3
      000946 09               [12] 1828 	inc	r1
      000947 A7 04            [24] 1829 	mov	@r1,ar4
      000949 09               [12] 1830 	inc	r1
      00094A A7 07            [24] 1831 	mov	@r1,ar7
      00094C 19               [12] 1832 	dec	r1
      00094D 19               [12] 1833 	dec	r1
      00094E E5*00            [12] 1834 	mov	a,_bp
      000950 24 03            [12] 1835 	add	a,#0x03
      000952 F8               [12] 1836 	mov	r0,a
      000953 86 82            [24] 1837 	mov	dpl,@r0
      000955 08               [12] 1838 	inc	r0
      000956 86 83            [24] 1839 	mov	dph,@r0
      000958 08               [12] 1840 	inc	r0
      000959 86 F0            [24] 1841 	mov	b,@r0
      00095B 12r00r00         [24] 1842 	lcall	__gptrget
      00095E FF               [12] 1843 	mov	r7,a
      00095F D0 00            [24] 1844 	pop	ar0
      000961 8F 05            [24] 1845 	mov	ar5,r7
      000963 D0 00            [24] 1846 	pop	ar0
      000965 EF               [12] 1847 	mov	a,r7
      000966 70 03            [24] 1848 	jnz	00587$
      000968 02r01r66         [24] 1849 	ljmp	00243$
      00096B                       1850 00587$:
                                   1851 ;	printf_large.c:700: OUTPUT_CHAR (c, p);
      00096B C0 02            [24] 1852 	push	ar2
      00096D C0 01            [24] 1853 	push	ar1
      00096F C0 00            [24] 1854 	push	ar0
      000971 85 00 F0         [24] 1855 	mov	b,ar0
      000974 E5*00            [12] 1856 	mov	a,_bp
      000976 24 FB            [12] 1857 	add	a,#0xfb
      000978 F8               [12] 1858 	mov	r0,a
      000979 E6               [12] 1859 	mov	a,@r0
      00097A C0 E0            [24] 1860 	push	acc
      00097C 08               [12] 1861 	inc	r0
      00097D E6               [12] 1862 	mov	a,@r0
      00097E C0 E0            [24] 1863 	push	acc
      000980 08               [12] 1864 	inc	r0
      000981 E6               [12] 1865 	mov	a,@r0
      000982 C0 E0            [24] 1866 	push	acc
      000984 A8 F0            [24] 1867 	mov	r0,b
      000986 12r09r8B         [24] 1868 	lcall	00588$
      000989 80 12            [24] 1869 	sjmp	00589$
      00098B                       1870 00588$:
      00098B 85 00 F0         [24] 1871 	mov	b,ar0
      00098E E5*00            [12] 1872 	mov	a,_bp
      000990 24 0B            [12] 1873 	add	a,#0x0b
      000992 F8               [12] 1874 	mov	r0,a
      000993 E6               [12] 1875 	mov	a,@r0
      000994 C0 E0            [24] 1876 	push	acc
      000996 08               [12] 1877 	inc	r0
      000997 E6               [12] 1878 	mov	a,@r0
      000998 C0 E0            [24] 1879 	push	acc
      00099A 8D 82            [24] 1880 	mov	dpl,r5
      00099C 22               [24] 1881 	ret
      00099D                       1882 00589$:
      00099D 15 81            [12] 1883 	dec	sp
      00099F 15 81            [12] 1884 	dec	sp
      0009A1 15 81            [12] 1885 	dec	sp
      0009A3 D0 00            [24] 1886 	pop	ar0
      0009A5 D0 01            [24] 1887 	pop	ar1
      0009A7 D0 02            [24] 1888 	pop	ar2
      0009A9 C0 00            [24] 1889 	push	ar0
      0009AB E5*00            [12] 1890 	mov	a,_bp
      0009AD 24 07            [12] 1891 	add	a,#0x07
      0009AF F8               [12] 1892 	mov	r0,a
      0009B0 06               [12] 1893 	inc	@r0
      0009B1 B6 00 02         [24] 1894 	cjne	@r0,#0x00,00590$
      0009B4 08               [12] 1895 	inc	r0
      0009B5 06               [12] 1896 	inc	@r0
      0009B6                       1897 00590$:
      0009B6 E5*00            [12] 1898 	mov	a,_bp
      0009B8 24 07            [12] 1899 	add	a,#0x07
      0009BA F8               [12] 1900 	mov	r0,a
      0009BB C0 01            [24] 1901 	push	ar1
      0009BD A9*00            [24] 1902 	mov	r1,_bp
      0009BF 09               [12] 1903 	inc	r1
      0009C0 E6               [12] 1904 	mov	a,@r0
      0009C1 F7               [12] 1905 	mov	@r1,a
      0009C2 08               [12] 1906 	inc	r0
      0009C3 09               [12] 1907 	inc	r1
      0009C4 E6               [12] 1908 	mov	a,@r0
      0009C5 F7               [12] 1909 	mov	@r1,a
      0009C6 D0 01            [24] 1910 	pop	ar1
      0009C8 D0 00            [24] 1911 	pop	ar0
      0009CA 02r09r1F         [24] 1912 	ljmp	00173$
      0009CD                       1913 00238$:
                                   1914 ;	printf_large.c:718: else if (radix != 0)
      0009CD E5*00            [12] 1915 	mov	a,_bp
      0009CF 24 16            [12] 1916 	add	a,#0x16
      0009D1 F9               [12] 1917 	mov	r1,a
      0009D2 E7               [12] 1918 	mov	a,@r1
      0009D3 70 03            [24] 1919 	jnz	00591$
      0009D5 02r01r66         [24] 1920 	ljmp	00243$
      0009D8                       1921 00591$:
                                   1922 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      0009D8 E5*00            [12] 1923 	mov	a,_bp
      0009DA 24 0D            [12] 1924 	add	a,#0x0d
      0009DC F9               [12] 1925 	mov	r1,a
      0009DD 87 03            [24] 1926 	mov	ar3,@r1
                                   1927 ;	printf_large.c:726: if (char_argument)
      0009DF 30*00 5C         [24] 1928 	jnb	b5,00184$
                                   1929 ;	printf_large.c:728: value.l = va_arg(ap, char);
      0009E2 E5*00            [12] 1930 	mov	a,_bp
      0009E4 24 11            [12] 1931 	add	a,#0x11
      0009E6 F9               [12] 1932 	mov	r1,a
      0009E7 C0 00            [24] 1933 	push	ar0
      0009E9 E5*00            [12] 1934 	mov	a,_bp
      0009EB 24 F7            [12] 1935 	add	a,#0xf7
      0009ED F8               [12] 1936 	mov	r0,a
      0009EE E6               [12] 1937 	mov	a,@r0
      0009EF 14               [12] 1938 	dec	a
      0009F0 FF               [12] 1939 	mov	r7,a
      0009F1 E5*00            [12] 1940 	mov	a,_bp
      0009F3 24 F7            [12] 1941 	add	a,#0xf7
      0009F5 F8               [12] 1942 	mov	r0,a
      0009F6 A6 07            [24] 1943 	mov	@r0,ar7
      0009F8 A8 07            [24] 1944 	mov	r0,ar7
      0009FA 86 07            [24] 1945 	mov	ar7,@r0
      0009FC D0 00            [24] 1946 	pop	ar0
      0009FE EF               [12] 1947 	mov	a,r7
      0009FF 33               [12] 1948 	rlc	a
      000A00 95 E0            [12] 1949 	subb	a,acc
      000A02 FE               [12] 1950 	mov	r6,a
      000A03 FD               [12] 1951 	mov	r5,a
      000A04 FC               [12] 1952 	mov	r4,a
      000A05 A7 07            [24] 1953 	mov	@r1,ar7
      000A07 09               [12] 1954 	inc	r1
      000A08 A7 06            [24] 1955 	mov	@r1,ar6
      000A0A 09               [12] 1956 	inc	r1
      000A0B A7 05            [24] 1957 	mov	@r1,ar5
      000A0D 09               [12] 1958 	inc	r1
      000A0E A7 04            [24] 1959 	mov	@r1,ar4
      000A10 19               [12] 1960 	dec	r1
      000A11 19               [12] 1961 	dec	r1
      000A12 19               [12] 1962 	dec	r1
                                   1963 ;	printf_large.c:729: if (!signed_argument)
      000A13 30*00 03         [24] 1964 	jnb	b4,00593$
      000A16 02r0ArCE         [24] 1965 	ljmp	00185$
      000A19                       1966 00593$:
                                   1967 ;	printf_large.c:731: value.l &= 0xFF;
      000A19 87 04            [24] 1968 	mov	ar4,@r1
      000A1B 09               [12] 1969 	inc	r1
      000A1C 87 05            [24] 1970 	mov	ar5,@r1
      000A1E 09               [12] 1971 	inc	r1
      000A1F 87 06            [24] 1972 	mov	ar6,@r1
      000A21 09               [12] 1973 	inc	r1
      000A22 87 07            [24] 1974 	mov	ar7,@r1
      000A24 19               [12] 1975 	dec	r1
      000A25 19               [12] 1976 	dec	r1
      000A26 19               [12] 1977 	dec	r1
      000A27 7D 00            [12] 1978 	mov	r5,#0x00
      000A29 7E 00            [12] 1979 	mov	r6,#0x00
      000A2B 7F 00            [12] 1980 	mov	r7,#0x00
      000A2D A7 04            [24] 1981 	mov	@r1,ar4
      000A2F 09               [12] 1982 	inc	r1
      000A30 A7 05            [24] 1983 	mov	@r1,ar5
      000A32 09               [12] 1984 	inc	r1
      000A33 A7 06            [24] 1985 	mov	@r1,ar6
      000A35 09               [12] 1986 	inc	r1
      000A36 A7 07            [24] 1987 	mov	@r1,ar7
      000A38 19               [12] 1988 	dec	r1
      000A39 19               [12] 1989 	dec	r1
      000A3A 19               [12] 1990 	dec	r1
      000A3B 02r0ArCE         [24] 1991 	ljmp	00185$
      000A3E                       1992 00184$:
                                   1993 ;	printf_large.c:734: else if (long_argument)
      000A3E 30*00 36         [24] 1994 	jnb	b6,00181$
                                   1995 ;	printf_large.c:736: value.l = va_arg(ap, long);
      000A41 E5*00            [12] 1996 	mov	a,_bp
      000A43 24 11            [12] 1997 	add	a,#0x11
      000A45 F9               [12] 1998 	mov	r1,a
      000A46 C0 00            [24] 1999 	push	ar0
      000A48 E5*00            [12] 2000 	mov	a,_bp
      000A4A 24 F7            [12] 2001 	add	a,#0xf7
      000A4C F8               [12] 2002 	mov	r0,a
      000A4D E6               [12] 2003 	mov	a,@r0
      000A4E 24 FC            [12] 2004 	add	a,#0xFC
      000A50 FF               [12] 2005 	mov	r7,a
      000A51 E5*00            [12] 2006 	mov	a,_bp
      000A53 24 F7            [12] 2007 	add	a,#0xf7
      000A55 F8               [12] 2008 	mov	r0,a
      000A56 A6 07            [24] 2009 	mov	@r0,ar7
      000A58 A8 07            [24] 2010 	mov	r0,ar7
      000A5A 86 04            [24] 2011 	mov	ar4,@r0
      000A5C 08               [12] 2012 	inc	r0
      000A5D 86 05            [24] 2013 	mov	ar5,@r0
      000A5F 08               [12] 2014 	inc	r0
      000A60 86 06            [24] 2015 	mov	ar6,@r0
      000A62 08               [12] 2016 	inc	r0
      000A63 86 07            [24] 2017 	mov	ar7,@r0
      000A65 D0 00            [24] 2018 	pop	ar0
      000A67 A7 04            [24] 2019 	mov	@r1,ar4
      000A69 09               [12] 2020 	inc	r1
      000A6A A7 05            [24] 2021 	mov	@r1,ar5
      000A6C 09               [12] 2022 	inc	r1
      000A6D A7 06            [24] 2023 	mov	@r1,ar6
      000A6F 09               [12] 2024 	inc	r1
      000A70 A7 07            [24] 2025 	mov	@r1,ar7
      000A72 19               [12] 2026 	dec	r1
      000A73 19               [12] 2027 	dec	r1
      000A74 19               [12] 2028 	dec	r1
      000A75 80 57            [24] 2029 	sjmp	00185$
      000A77                       2030 00181$:
                                   2031 ;	printf_large.c:740: value.l = va_arg(ap, int);
      000A77 E5*00            [12] 2032 	mov	a,_bp
      000A79 24 11            [12] 2033 	add	a,#0x11
      000A7B F9               [12] 2034 	mov	r1,a
      000A7C C0 00            [24] 2035 	push	ar0
      000A7E E5*00            [12] 2036 	mov	a,_bp
      000A80 24 F7            [12] 2037 	add	a,#0xf7
      000A82 F8               [12] 2038 	mov	r0,a
      000A83 E6               [12] 2039 	mov	a,@r0
      000A84 24 FE            [12] 2040 	add	a,#0xFE
      000A86 FF               [12] 2041 	mov	r7,a
      000A87 E5*00            [12] 2042 	mov	a,_bp
      000A89 24 F7            [12] 2043 	add	a,#0xf7
      000A8B F8               [12] 2044 	mov	r0,a
      000A8C A6 07            [24] 2045 	mov	@r0,ar7
      000A8E A8 07            [24] 2046 	mov	r0,ar7
      000A90 86 06            [24] 2047 	mov	ar6,@r0
      000A92 08               [12] 2048 	inc	r0
      000A93 86 07            [24] 2049 	mov	ar7,@r0
      000A95 D0 00            [24] 2050 	pop	ar0
      000A97 EF               [12] 2051 	mov	a,r7
      000A98 33               [12] 2052 	rlc	a
      000A99 95 E0            [12] 2053 	subb	a,acc
      000A9B FD               [12] 2054 	mov	r5,a
      000A9C FC               [12] 2055 	mov	r4,a
      000A9D A7 06            [24] 2056 	mov	@r1,ar6
      000A9F 09               [12] 2057 	inc	r1
      000AA0 A7 07            [24] 2058 	mov	@r1,ar7
      000AA2 09               [12] 2059 	inc	r1
      000AA3 A7 05            [24] 2060 	mov	@r1,ar5
      000AA5 09               [12] 2061 	inc	r1
      000AA6 A7 04            [24] 2062 	mov	@r1,ar4
      000AA8 19               [12] 2063 	dec	r1
      000AA9 19               [12] 2064 	dec	r1
      000AAA 19               [12] 2065 	dec	r1
                                   2066 ;	printf_large.c:741: if (!signed_argument)
      000AAB 20*00 20         [24] 2067 	jb	b4,00185$
                                   2068 ;	printf_large.c:743: value.l &= 0xFFFF;
      000AAE 87 04            [24] 2069 	mov	ar4,@r1
      000AB0 09               [12] 2070 	inc	r1
      000AB1 87 05            [24] 2071 	mov	ar5,@r1
      000AB3 09               [12] 2072 	inc	r1
      000AB4 87 06            [24] 2073 	mov	ar6,@r1
      000AB6 09               [12] 2074 	inc	r1
      000AB7 87 07            [24] 2075 	mov	ar7,@r1
      000AB9 19               [12] 2076 	dec	r1
      000ABA 19               [12] 2077 	dec	r1
      000ABB 19               [12] 2078 	dec	r1
      000ABC 7E 00            [12] 2079 	mov	r6,#0x00
      000ABE 7F 00            [12] 2080 	mov	r7,#0x00
      000AC0 A7 04            [24] 2081 	mov	@r1,ar4
      000AC2 09               [12] 2082 	inc	r1
      000AC3 A7 05            [24] 2083 	mov	@r1,ar5
      000AC5 09               [12] 2084 	inc	r1
      000AC6 A7 06            [24] 2085 	mov	@r1,ar6
      000AC8 09               [12] 2086 	inc	r1
      000AC9 A7 07            [24] 2087 	mov	@r1,ar7
      000ACB 19               [12] 2088 	dec	r1
      000ACC 19               [12] 2089 	dec	r1
      000ACD 19               [12] 2090 	dec	r1
      000ACE                       2091 00185$:
                                   2092 ;	printf_large.c:747: if ( signed_argument )
      000ACE 30*00 44         [24] 2093 	jnb	b4,00190$
                                   2094 ;	printf_large.c:749: if (value.l < 0)
      000AD1 E5*00            [12] 2095 	mov	a,_bp
      000AD3 24 11            [12] 2096 	add	a,#0x11
      000AD5 F9               [12] 2097 	mov	r1,a
      000AD6 87 04            [24] 2098 	mov	ar4,@r1
      000AD8 09               [12] 2099 	inc	r1
      000AD9 87 05            [24] 2100 	mov	ar5,@r1
      000ADB 09               [12] 2101 	inc	r1
      000ADC 87 06            [24] 2102 	mov	ar6,@r1
      000ADE 09               [12] 2103 	inc	r1
      000ADF 87 07            [24] 2104 	mov	ar7,@r1
      000AE1 19               [12] 2105 	dec	r1
      000AE2 19               [12] 2106 	dec	r1
      000AE3 19               [12] 2107 	dec	r1
      000AE4 EF               [12] 2108 	mov	a,r7
      000AE5 30 E7 2B         [24] 2109 	jnb	acc.7,00187$
                                   2110 ;	printf_large.c:750: value.l = -value.l;
      000AE8 87 04            [24] 2111 	mov	ar4,@r1
      000AEA 09               [12] 2112 	inc	r1
      000AEB 87 05            [24] 2113 	mov	ar5,@r1
      000AED 09               [12] 2114 	inc	r1
      000AEE 87 06            [24] 2115 	mov	ar6,@r1
      000AF0 09               [12] 2116 	inc	r1
      000AF1 87 07            [24] 2117 	mov	ar7,@r1
      000AF3 19               [12] 2118 	dec	r1
      000AF4 19               [12] 2119 	dec	r1
      000AF5 19               [12] 2120 	dec	r1
      000AF6 C3               [12] 2121 	clr	c
      000AF7 E4               [12] 2122 	clr	a
      000AF8 9C               [12] 2123 	subb	a,r4
      000AF9 FC               [12] 2124 	mov	r4,a
      000AFA E4               [12] 2125 	clr	a
      000AFB 9D               [12] 2126 	subb	a,r5
      000AFC FD               [12] 2127 	mov	r5,a
      000AFD E4               [12] 2128 	clr	a
      000AFE 9E               [12] 2129 	subb	a,r6
      000AFF FE               [12] 2130 	mov	r6,a
      000B00 E4               [12] 2131 	clr	a
      000B01 9F               [12] 2132 	subb	a,r7
      000B02 FF               [12] 2133 	mov	r7,a
      000B03 A7 04            [24] 2134 	mov	@r1,ar4
      000B05 09               [12] 2135 	inc	r1
      000B06 A7 05            [24] 2136 	mov	@r1,ar5
      000B08 09               [12] 2137 	inc	r1
      000B09 A7 06            [24] 2138 	mov	@r1,ar6
      000B0B 09               [12] 2139 	inc	r1
      000B0C A7 07            [24] 2140 	mov	@r1,ar7
      000B0E 19               [12] 2141 	dec	r1
      000B0F 19               [12] 2142 	dec	r1
      000B10 19               [12] 2143 	dec	r1
      000B11 80 02            [24] 2144 	sjmp	00190$
      000B13                       2145 00187$:
                                   2146 ;	printf_large.c:752: signed_argument = 0;
      000B13 C2*00            [12] 2147 	clr	b4
      000B15                       2148 00190$:
                                   2149 ;	printf_large.c:756: lsd = 1;
      000B15 D2*00            [12] 2150 	setb	b5
                                   2151 ;	printf_large.c:758: do {
      000B17 8B 01            [24] 2152 	mov	ar1,r3
      000B19 C0 00            [24] 2153 	push	ar0
      000B1B E5*00            [12] 2154 	mov	a,_bp
      000B1D 24 18            [12] 2155 	add	a,#0x18
      000B1F F8               [12] 2156 	mov	r0,a
      000B20 76 00            [12] 2157 	mov	@r0,#0x00
      000B22 D0 00            [24] 2158 	pop	ar0
      000B24                       2159 00194$:
                                   2160 ;	printf_large.c:759: value.byte[4] = 0;
      000B24 E5*00            [12] 2161 	mov	a,_bp
      000B26 24 11            [12] 2162 	add	a,#0x11
      000B28 24 04            [12] 2163 	add	a,#0x04
      000B2A C0 00            [24] 2164 	push	ar0
      000B2C F8               [12] 2165 	mov	r0,a
      000B2D 76 00            [12] 2166 	mov	@r0,#0x00
      000B2F D0 00            [24] 2167 	pop	ar0
                                   2168 ;	printf_large.c:761: calculate_digit(&value, radix);
      000B31 88 06            [24] 2169 	mov	ar6,r0
      000B33 C0 02            [24] 2170 	push	ar2
      000B35 C0 01            [24] 2171 	push	ar1
      000B37 C0 00            [24] 2172 	push	ar0
      000B39 C0*00            [24] 2173 	push	bits
      000B3B 85 00 F0         [24] 2174 	mov	b,ar0
      000B3E E5*00            [12] 2175 	mov	a,_bp
      000B40 24 16            [12] 2176 	add	a,#0x16
      000B42 F8               [12] 2177 	mov	r0,a
      000B43 E6               [12] 2178 	mov	a,@r0
      000B44 C0 E0            [24] 2179 	push	acc
      000B46 8E 82            [24] 2180 	mov	dpl,r6
      000B48 12r00rBD         [24] 2181 	lcall	_calculate_digit
      000B4B 15 81            [12] 2182 	dec	sp
      000B4D D0*00            [24] 2183 	pop	bits
      000B4F D0 00            [24] 2184 	pop	ar0
      000B51 D0 01            [24] 2185 	pop	ar1
      000B53 D0 02            [24] 2186 	pop	ar2
                                   2187 ;	printf_large.c:765: if (!lsd)
      000B55 20*00 14         [24] 2188 	jb	b5,00192$
                                   2189 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000B58 C0 00            [24] 2190 	push	ar0
      000B5A A8 02            [24] 2191 	mov	r0,ar2
      000B5C 86 06            [24] 2192 	mov	ar6,@r0
      000B5E D0 00            [24] 2193 	pop	ar0
      000B60 EE               [12] 2194 	mov	a,r6
      000B61 C4               [12] 2195 	swap	a
      000B62 FE               [12] 2196 	mov	r6,a
      000B63 E7               [12] 2197 	mov	a,@r1
      000B64 FD               [12] 2198 	mov	r5,a
      000B65 42 06            [12] 2199 	orl	ar6,a
      000B67 A7 06            [24] 2200 	mov	@r1,ar6
                                   2201 ;	printf_large.c:768: pstore--;
      000B69 19               [12] 2202 	dec	r1
      000B6A 80 0A            [24] 2203 	sjmp	00193$
      000B6C                       2204 00192$:
                                   2205 ;	printf_large.c:772: *pstore = value.byte[4];
      000B6C C0 00            [24] 2206 	push	ar0
      000B6E A8 02            [24] 2207 	mov	r0,ar2
      000B70 86 06            [24] 2208 	mov	ar6,@r0
      000B72 D0 00            [24] 2209 	pop	ar0
      000B74 A7 06            [24] 2210 	mov	@r1,ar6
      000B76                       2211 00193$:
                                   2212 ;	printf_large.c:774: length++;
      000B76 C0 00            [24] 2213 	push	ar0
      000B78 E5*00            [12] 2214 	mov	a,_bp
      000B7A 24 18            [12] 2215 	add	a,#0x18
      000B7C F8               [12] 2216 	mov	r0,a
      000B7D 06               [12] 2217 	inc	@r0
      000B7E D0 00            [24] 2218 	pop	ar0
                                   2219 ;	printf_large.c:775: lsd = !lsd;
      000B80 B2*00            [12] 2220 	cpl	b5
                                   2221 ;	printf_large.c:776: } while( value.ul );
      000B82 86 04            [24] 2222 	mov	ar4,@r0
      000B84 08               [12] 2223 	inc	r0
      000B85 86 05            [24] 2224 	mov	ar5,@r0
      000B87 08               [12] 2225 	inc	r0
      000B88 86 06            [24] 2226 	mov	ar6,@r0
      000B8A 08               [12] 2227 	inc	r0
      000B8B 86 07            [24] 2228 	mov	ar7,@r0
      000B8D 18               [12] 2229 	dec	r0
      000B8E 18               [12] 2230 	dec	r0
      000B8F 18               [12] 2231 	dec	r0
      000B90 EC               [12] 2232 	mov	a,r4
      000B91 4D               [12] 2233 	orl	a,r5
      000B92 4E               [12] 2234 	orl	a,r6
      000B93 4F               [12] 2235 	orl	a,r7
      000B94 70 8E            [24] 2236 	jnz	00194$
                                   2237 ;	printf_large.c:778: if (width == 0)
      000B96 89 03            [24] 2238 	mov	ar3,r1
      000B98 E5*00            [12] 2239 	mov	a,_bp
      000B9A 24 18            [12] 2240 	add	a,#0x18
      000B9C F9               [12] 2241 	mov	r1,a
      000B9D C0 00            [24] 2242 	push	ar0
      000B9F E5*00            [12] 2243 	mov	a,_bp
      000BA1 24 0A            [12] 2244 	add	a,#0x0a
      000BA3 F8               [12] 2245 	mov	r0,a
      000BA4 E7               [12] 2246 	mov	a,@r1
      000BA5 F6               [12] 2247 	mov	@r0,a
      000BA6 D0 00            [24] 2248 	pop	ar0
      000BA8 E5*00            [12] 2249 	mov	a,_bp
      000BAA 24 17            [12] 2250 	add	a,#0x17
      000BAC F9               [12] 2251 	mov	r1,a
      000BAD E7               [12] 2252 	mov	a,@r1
      000BAE 70 07            [24] 2253 	jnz	00198$
                                   2254 ;	printf_large.c:783: width = 1;
      000BB0 E5*00            [12] 2255 	mov	a,_bp
      000BB2 24 17            [12] 2256 	add	a,#0x17
      000BB4 F9               [12] 2257 	mov	r1,a
      000BB5 77 01            [12] 2258 	mov	@r1,#0x01
      000BB7                       2259 00198$:
                                   2260 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      000BB7 30*00 03         [24] 2261 	jnb	b1,00601$
      000BBA 02r0Cr41         [24] 2262 	ljmp	00203$
      000BBD                       2263 00601$:
      000BBD 30*00 03         [24] 2264 	jnb	b0,00602$
      000BC0 02r0Cr41         [24] 2265 	ljmp	00203$
      000BC3                       2266 00602$:
                                   2267 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      000BC3 E5*00            [12] 2268 	mov	a,_bp
      000BC5 24 0A            [12] 2269 	add	a,#0x0a
      000BC7 F9               [12] 2270 	mov	r1,a
      000BC8 E7               [12] 2271 	mov	a,@r1
      000BC9 04               [12] 2272 	inc	a
      000BCA FF               [12] 2273 	mov	r7,a
      000BCB A9*00            [24] 2274 	mov	r1,_bp
      000BCD 09               [12] 2275 	inc	r1
      000BCE 87 05            [24] 2276 	mov	ar5,@r1
      000BD0 09               [12] 2277 	inc	r1
      000BD1 87 06            [24] 2278 	mov	ar6,@r1
      000BD3 E5*00            [12] 2279 	mov	a,_bp
      000BD5 24 17            [12] 2280 	add	a,#0x17
      000BD7 F9               [12] 2281 	mov	r1,a
      000BD8 87 04            [24] 2282 	mov	ar4,@r1
      000BDA                       2283 00199$:
      000BDA C3               [12] 2284 	clr	c
      000BDB EF               [12] 2285 	mov	a,r7
      000BDC 9C               [12] 2286 	subb	a,r4
      000BDD 50 53            [24] 2287 	jnc	00333$
                                   2288 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      000BDF C0 07            [24] 2289 	push	ar7
      000BE1 C0 06            [24] 2290 	push	ar6
      000BE3 C0 05            [24] 2291 	push	ar5
      000BE5 C0 04            [24] 2292 	push	ar4
      000BE7 C0 03            [24] 2293 	push	ar3
      000BE9 C0 02            [24] 2294 	push	ar2
      000BEB C0 00            [24] 2295 	push	ar0
      000BED C0*00            [24] 2296 	push	bits
      000BEF E5*00            [12] 2297 	mov	a,_bp
      000BF1 24 FB            [12] 2298 	add	a,#0xfb
      000BF3 F9               [12] 2299 	mov	r1,a
      000BF4 E7               [12] 2300 	mov	a,@r1
      000BF5 C0 E0            [24] 2301 	push	acc
      000BF7 09               [12] 2302 	inc	r1
      000BF8 E7               [12] 2303 	mov	a,@r1
      000BF9 C0 E0            [24] 2304 	push	acc
      000BFB 09               [12] 2305 	inc	r1
      000BFC E7               [12] 2306 	mov	a,@r1
      000BFD C0 E0            [24] 2307 	push	acc
      000BFF 12r0Cr04         [24] 2308 	lcall	00604$
      000C02 80 10            [24] 2309 	sjmp	00605$
      000C04                       2310 00604$:
      000C04 E5*00            [12] 2311 	mov	a,_bp
      000C06 24 0B            [12] 2312 	add	a,#0x0b
      000C08 F9               [12] 2313 	mov	r1,a
      000C09 E7               [12] 2314 	mov	a,@r1
      000C0A C0 E0            [24] 2315 	push	acc
      000C0C 09               [12] 2316 	inc	r1
      000C0D E7               [12] 2317 	mov	a,@r1
      000C0E C0 E0            [24] 2318 	push	acc
      000C10 75 82 20         [24] 2319 	mov	dpl,#0x20
      000C13 22               [24] 2320 	ret
      000C14                       2321 00605$:
      000C14 15 81            [12] 2322 	dec	sp
      000C16 15 81            [12] 2323 	dec	sp
      000C18 15 81            [12] 2324 	dec	sp
      000C1A D0*00            [24] 2325 	pop	bits
      000C1C D0 00            [24] 2326 	pop	ar0
      000C1E D0 02            [24] 2327 	pop	ar2
      000C20 D0 03            [24] 2328 	pop	ar3
      000C22 D0 04            [24] 2329 	pop	ar4
      000C24 D0 05            [24] 2330 	pop	ar5
      000C26 D0 06            [24] 2331 	pop	ar6
      000C28 D0 07            [24] 2332 	pop	ar7
      000C2A 0D               [12] 2333 	inc	r5
      000C2B BD 00 01         [24] 2334 	cjne	r5,#0x00,00606$
      000C2E 0E               [12] 2335 	inc	r6
      000C2F                       2336 00606$:
                                   2337 ;	printf_large.c:792: width--;
      000C2F 1C               [12] 2338 	dec	r4
      000C30 80 A8            [24] 2339 	sjmp	00199$
      000C32                       2340 00333$:
      000C32 A9*00            [24] 2341 	mov	r1,_bp
      000C34 09               [12] 2342 	inc	r1
      000C35 A7 05            [24] 2343 	mov	@r1,ar5
      000C37 09               [12] 2344 	inc	r1
      000C38 A7 06            [24] 2345 	mov	@r1,ar6
      000C3A E5*00            [12] 2346 	mov	a,_bp
      000C3C 24 17            [12] 2347 	add	a,#0x17
      000C3E F9               [12] 2348 	mov	r1,a
      000C3F A7 04            [24] 2349 	mov	@r1,ar4
      000C41                       2350 00203$:
                                   2351 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      000C41 30*00 4D         [24] 2352 	jnb	b4,00213$
                                   2353 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      000C44 C0 03            [24] 2354 	push	ar3
      000C46 C0 02            [24] 2355 	push	ar2
      000C48 C0 00            [24] 2356 	push	ar0
      000C4A C0*00            [24] 2357 	push	bits
      000C4C E5*00            [12] 2358 	mov	a,_bp
      000C4E 24 FB            [12] 2359 	add	a,#0xfb
      000C50 F9               [12] 2360 	mov	r1,a
      000C51 E7               [12] 2361 	mov	a,@r1
      000C52 C0 E0            [24] 2362 	push	acc
      000C54 09               [12] 2363 	inc	r1
      000C55 E7               [12] 2364 	mov	a,@r1
      000C56 C0 E0            [24] 2365 	push	acc
      000C58 09               [12] 2366 	inc	r1
      000C59 E7               [12] 2367 	mov	a,@r1
      000C5A C0 E0            [24] 2368 	push	acc
      000C5C 12r0Cr61         [24] 2369 	lcall	00608$
      000C5F 80 10            [24] 2370 	sjmp	00609$
      000C61                       2371 00608$:
      000C61 E5*00            [12] 2372 	mov	a,_bp
      000C63 24 0B            [12] 2373 	add	a,#0x0b
      000C65 F9               [12] 2374 	mov	r1,a
      000C66 E7               [12] 2375 	mov	a,@r1
      000C67 C0 E0            [24] 2376 	push	acc
      000C69 09               [12] 2377 	inc	r1
      000C6A E7               [12] 2378 	mov	a,@r1
      000C6B C0 E0            [24] 2379 	push	acc
      000C6D 75 82 2D         [24] 2380 	mov	dpl,#0x2D
      000C70 22               [24] 2381 	ret
      000C71                       2382 00609$:
      000C71 15 81            [12] 2383 	dec	sp
      000C73 15 81            [12] 2384 	dec	sp
      000C75 15 81            [12] 2385 	dec	sp
      000C77 D0*00            [24] 2386 	pop	bits
      000C79 D0 00            [24] 2387 	pop	ar0
      000C7B D0 02            [24] 2388 	pop	ar2
      000C7D D0 03            [24] 2389 	pop	ar3
      000C7F A9*00            [24] 2390 	mov	r1,_bp
      000C81 09               [12] 2391 	inc	r1
      000C82 07               [12] 2392 	inc	@r1
      000C83 B7 00 02         [24] 2393 	cjne	@r1,#0x00,00610$
      000C86 09               [12] 2394 	inc	r1
      000C87 07               [12] 2395 	inc	@r1
      000C88                       2396 00610$:
                                   2397 ;	printf_large.c:800: width--;
      000C88 E5*00            [12] 2398 	mov	a,_bp
      000C8A 24 17            [12] 2399 	add	a,#0x17
      000C8C F9               [12] 2400 	mov	r1,a
      000C8D 17               [12] 2401 	dec	@r1
      000C8E 02r0Dr38         [24] 2402 	ljmp	00214$
      000C91                       2403 00213$:
                                   2404 ;	printf_large.c:802: else if (length != 0)
      000C91 E5*00            [12] 2405 	mov	a,_bp
      000C93 24 0A            [12] 2406 	add	a,#0x0a
      000C95 F9               [12] 2407 	mov	r1,a
      000C96 E7               [12] 2408 	mov	a,@r1
      000C97 70 03            [24] 2409 	jnz	00611$
      000C99 02r0Dr38         [24] 2410 	ljmp	00214$
      000C9C                       2411 00611$:
                                   2412 ;	printf_large.c:805: if (prefix_sign)
      000C9C 30*00 4C         [24] 2413 	jnb	b2,00208$
                                   2414 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      000C9F C0 03            [24] 2415 	push	ar3
      000CA1 C0 02            [24] 2416 	push	ar2
      000CA3 C0 00            [24] 2417 	push	ar0
      000CA5 C0*00            [24] 2418 	push	bits
      000CA7 E5*00            [12] 2419 	mov	a,_bp
      000CA9 24 FB            [12] 2420 	add	a,#0xfb
      000CAB F9               [12] 2421 	mov	r1,a
      000CAC E7               [12] 2422 	mov	a,@r1
      000CAD C0 E0            [24] 2423 	push	acc
      000CAF 09               [12] 2424 	inc	r1
      000CB0 E7               [12] 2425 	mov	a,@r1
      000CB1 C0 E0            [24] 2426 	push	acc
      000CB3 09               [12] 2427 	inc	r1
      000CB4 E7               [12] 2428 	mov	a,@r1
      000CB5 C0 E0            [24] 2429 	push	acc
      000CB7 12r0CrBC         [24] 2430 	lcall	00613$
      000CBA 80 10            [24] 2431 	sjmp	00614$
      000CBC                       2432 00613$:
      000CBC E5*00            [12] 2433 	mov	a,_bp
      000CBE 24 0B            [12] 2434 	add	a,#0x0b
      000CC0 F9               [12] 2435 	mov	r1,a
      000CC1 E7               [12] 2436 	mov	a,@r1
      000CC2 C0 E0            [24] 2437 	push	acc
      000CC4 09               [12] 2438 	inc	r1
      000CC5 E7               [12] 2439 	mov	a,@r1
      000CC6 C0 E0            [24] 2440 	push	acc
      000CC8 75 82 2B         [24] 2441 	mov	dpl,#0x2B
      000CCB 22               [24] 2442 	ret
      000CCC                       2443 00614$:
      000CCC 15 81            [12] 2444 	dec	sp
      000CCE 15 81            [12] 2445 	dec	sp
      000CD0 15 81            [12] 2446 	dec	sp
      000CD2 D0*00            [24] 2447 	pop	bits
      000CD4 D0 00            [24] 2448 	pop	ar0
      000CD6 D0 02            [24] 2449 	pop	ar2
      000CD8 D0 03            [24] 2450 	pop	ar3
      000CDA A9*00            [24] 2451 	mov	r1,_bp
      000CDC 09               [12] 2452 	inc	r1
      000CDD 07               [12] 2453 	inc	@r1
      000CDE B7 00 02         [24] 2454 	cjne	@r1,#0x00,00615$
      000CE1 09               [12] 2455 	inc	r1
      000CE2 07               [12] 2456 	inc	@r1
      000CE3                       2457 00615$:
                                   2458 ;	printf_large.c:809: width--;
      000CE3 E5*00            [12] 2459 	mov	a,_bp
      000CE5 24 17            [12] 2460 	add	a,#0x17
      000CE7 F9               [12] 2461 	mov	r1,a
      000CE8 17               [12] 2462 	dec	@r1
      000CE9 80 4D            [24] 2463 	sjmp	00214$
      000CEB                       2464 00208$:
                                   2465 ;	printf_large.c:811: else if (prefix_space)
      000CEB 30*00 4A         [24] 2466 	jnb	b3,00214$
                                   2467 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      000CEE C0 03            [24] 2468 	push	ar3
      000CF0 C0 02            [24] 2469 	push	ar2
      000CF2 C0 00            [24] 2470 	push	ar0
      000CF4 C0*00            [24] 2471 	push	bits
      000CF6 E5*00            [12] 2472 	mov	a,_bp
      000CF8 24 FB            [12] 2473 	add	a,#0xfb
      000CFA F9               [12] 2474 	mov	r1,a
      000CFB E7               [12] 2475 	mov	a,@r1
      000CFC C0 E0            [24] 2476 	push	acc
      000CFE 09               [12] 2477 	inc	r1
      000CFF E7               [12] 2478 	mov	a,@r1
      000D00 C0 E0            [24] 2479 	push	acc
      000D02 09               [12] 2480 	inc	r1
      000D03 E7               [12] 2481 	mov	a,@r1
      000D04 C0 E0            [24] 2482 	push	acc
      000D06 12r0Dr0B         [24] 2483 	lcall	00617$
      000D09 80 10            [24] 2484 	sjmp	00618$
      000D0B                       2485 00617$:
      000D0B E5*00            [12] 2486 	mov	a,_bp
      000D0D 24 0B            [12] 2487 	add	a,#0x0b
      000D0F F9               [12] 2488 	mov	r1,a
      000D10 E7               [12] 2489 	mov	a,@r1
      000D11 C0 E0            [24] 2490 	push	acc
      000D13 09               [12] 2491 	inc	r1
      000D14 E7               [12] 2492 	mov	a,@r1
      000D15 C0 E0            [24] 2493 	push	acc
      000D17 75 82 20         [24] 2494 	mov	dpl,#0x20
      000D1A 22               [24] 2495 	ret
      000D1B                       2496 00618$:
      000D1B 15 81            [12] 2497 	dec	sp
      000D1D 15 81            [12] 2498 	dec	sp
      000D1F 15 81            [12] 2499 	dec	sp
      000D21 D0*00            [24] 2500 	pop	bits
      000D23 D0 00            [24] 2501 	pop	ar0
      000D25 D0 02            [24] 2502 	pop	ar2
      000D27 D0 03            [24] 2503 	pop	ar3
      000D29 A9*00            [24] 2504 	mov	r1,_bp
      000D2B 09               [12] 2505 	inc	r1
      000D2C 07               [12] 2506 	inc	@r1
      000D2D B7 00 02         [24] 2507 	cjne	@r1,#0x00,00619$
      000D30 09               [12] 2508 	inc	r1
      000D31 07               [12] 2509 	inc	@r1
      000D32                       2510 00619$:
                                   2511 ;	printf_large.c:815: width--;
      000D32 E5*00            [12] 2512 	mov	a,_bp
      000D34 24 17            [12] 2513 	add	a,#0x17
      000D36 F9               [12] 2514 	mov	r1,a
      000D37 17               [12] 2515 	dec	@r1
      000D38                       2516 00214$:
                                   2517 ;	printf_large.c:820: if (!left_justify)
      000D38 20*00 75         [24] 2518 	jb	b0,00222$
                                   2519 ;	printf_large.c:822: while ( width-- > length )
      000D3B A9*00            [24] 2520 	mov	r1,_bp
      000D3D 09               [12] 2521 	inc	r1
      000D3E 87 06            [24] 2522 	mov	ar6,@r1
      000D40 09               [12] 2523 	inc	r1
      000D41 87 07            [24] 2524 	mov	ar7,@r1
      000D43 E5*00            [12] 2525 	mov	a,_bp
      000D45 24 17            [12] 2526 	add	a,#0x17
      000D47 F9               [12] 2527 	mov	r1,a
      000D48 87 05            [24] 2528 	mov	ar5,@r1
      000D4A                       2529 00215$:
      000D4A 8D 04            [24] 2530 	mov	ar4,r5
      000D4C 1D               [12] 2531 	dec	r5
      000D4D E5*00            [12] 2532 	mov	a,_bp
      000D4F 24 0A            [12] 2533 	add	a,#0x0a
      000D51 F9               [12] 2534 	mov	r1,a
      000D52 C3               [12] 2535 	clr	c
      000D53 E7               [12] 2536 	mov	a,@r1
      000D54 9C               [12] 2537 	subb	a,r4
      000D55 40 03            [24] 2538 	jc	00621$
      000D57 02r0DrE0         [24] 2539 	ljmp	00334$
      000D5A                       2540 00621$:
                                   2541 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      000D5A 30*00 04         [24] 2542 	jnb	b1,00248$
      000D5D 7C 30            [12] 2543 	mov	r4,#0x30
      000D5F 80 02            [24] 2544 	sjmp	00249$
      000D61                       2545 00248$:
      000D61 7C 20            [12] 2546 	mov	r4,#0x20
      000D63                       2547 00249$:
      000D63 C0 07            [24] 2548 	push	ar7
      000D65 C0 06            [24] 2549 	push	ar6
      000D67 C0 05            [24] 2550 	push	ar5
      000D69 C0 03            [24] 2551 	push	ar3
      000D6B C0 02            [24] 2552 	push	ar2
      000D6D C0 00            [24] 2553 	push	ar0
      000D6F C0*00            [24] 2554 	push	bits
      000D71 E5*00            [12] 2555 	mov	a,_bp
      000D73 24 FB            [12] 2556 	add	a,#0xfb
      000D75 F9               [12] 2557 	mov	r1,a
      000D76 E7               [12] 2558 	mov	a,@r1
      000D77 C0 E0            [24] 2559 	push	acc
      000D79 09               [12] 2560 	inc	r1
      000D7A E7               [12] 2561 	mov	a,@r1
      000D7B C0 E0            [24] 2562 	push	acc
      000D7D 09               [12] 2563 	inc	r1
      000D7E E7               [12] 2564 	mov	a,@r1
      000D7F C0 E0            [24] 2565 	push	acc
      000D81 12r0Dr86         [24] 2566 	lcall	00623$
      000D84 80 0F            [24] 2567 	sjmp	00624$
      000D86                       2568 00623$:
      000D86 E5*00            [12] 2569 	mov	a,_bp
      000D88 24 0B            [12] 2570 	add	a,#0x0b
      000D8A F9               [12] 2571 	mov	r1,a
      000D8B E7               [12] 2572 	mov	a,@r1
      000D8C C0 E0            [24] 2573 	push	acc
      000D8E 09               [12] 2574 	inc	r1
      000D8F E7               [12] 2575 	mov	a,@r1
      000D90 C0 E0            [24] 2576 	push	acc
      000D92 8C 82            [24] 2577 	mov	dpl,r4
      000D94 22               [24] 2578 	ret
      000D95                       2579 00624$:
      000D95 15 81            [12] 2580 	dec	sp
      000D97 15 81            [12] 2581 	dec	sp
      000D99 15 81            [12] 2582 	dec	sp
      000D9B D0*00            [24] 2583 	pop	bits
      000D9D D0 00            [24] 2584 	pop	ar0
      000D9F D0 02            [24] 2585 	pop	ar2
      000DA1 D0 03            [24] 2586 	pop	ar3
      000DA3 D0 05            [24] 2587 	pop	ar5
      000DA5 D0 06            [24] 2588 	pop	ar6
      000DA7 D0 07            [24] 2589 	pop	ar7
      000DA9 0E               [12] 2590 	inc	r6
      000DAA BE 00 9D         [24] 2591 	cjne	r6,#0x00,00215$
      000DAD 0F               [12] 2592 	inc	r7
      000DAE 80 9A            [24] 2593 	sjmp	00215$
      000DB0                       2594 00222$:
                                   2595 ;	printf_large.c:830: if (width > length)
      000DB0 E5*00            [12] 2596 	mov	a,_bp
      000DB2 24 17            [12] 2597 	add	a,#0x17
      000DB4 F9               [12] 2598 	mov	r1,a
      000DB5 C0 00            [24] 2599 	push	ar0
      000DB7 E5*00            [12] 2600 	mov	a,_bp
      000DB9 24 0A            [12] 2601 	add	a,#0x0a
      000DBB F8               [12] 2602 	mov	r0,a
      000DBC C3               [12] 2603 	clr	c
      000DBD E6               [12] 2604 	mov	a,@r0
      000DBE 97               [12] 2605 	subb	a,@r1
      000DBF D0 00            [24] 2606 	pop	ar0
      000DC1 50 14            [24] 2607 	jnc	00219$
                                   2608 ;	printf_large.c:831: width -= length;
      000DC3 E5*00            [12] 2609 	mov	a,_bp
      000DC5 24 17            [12] 2610 	add	a,#0x17
      000DC7 F9               [12] 2611 	mov	r1,a
      000DC8 C0 00            [24] 2612 	push	ar0
      000DCA E5*00            [12] 2613 	mov	a,_bp
      000DCC 24 0A            [12] 2614 	add	a,#0x0a
      000DCE F8               [12] 2615 	mov	r0,a
      000DCF E7               [12] 2616 	mov	a,@r1
      000DD0 C3               [12] 2617 	clr	c
      000DD1 96               [12] 2618 	subb	a,@r0
      000DD2 F7               [12] 2619 	mov	@r1,a
      000DD3 D0 00            [24] 2620 	pop	ar0
      000DD5 80 18            [24] 2621 	sjmp	00326$
      000DD7                       2622 00219$:
                                   2623 ;	printf_large.c:833: width = 0;
      000DD7 E5*00            [12] 2624 	mov	a,_bp
      000DD9 24 17            [12] 2625 	add	a,#0x17
      000DDB F9               [12] 2626 	mov	r1,a
      000DDC 77 00            [12] 2627 	mov	@r1,#0x00
                                   2628 ;	printf_large.c:872: return charsOutputted;
                                   2629 ;	printf_large.c:837: while( length-- )
      000DDE 80 0F            [24] 2630 	sjmp	00326$
      000DE0                       2631 00334$:
      000DE0 A9*00            [24] 2632 	mov	r1,_bp
      000DE2 09               [12] 2633 	inc	r1
      000DE3 A7 06            [24] 2634 	mov	@r1,ar6
      000DE5 09               [12] 2635 	inc	r1
      000DE6 A7 07            [24] 2636 	mov	@r1,ar7
      000DE8 E5*00            [12] 2637 	mov	a,_bp
      000DEA 24 17            [12] 2638 	add	a,#0x17
      000DEC F9               [12] 2639 	mov	r1,a
      000DED A7 05            [24] 2640 	mov	@r1,ar5
      000DEF                       2641 00326$:
      000DEF 8B 01            [24] 2642 	mov	ar1,r3
      000DF1 C0 00            [24] 2643 	push	ar0
      000DF3 A8*00            [24] 2644 	mov	r0,_bp
      000DF5 08               [12] 2645 	inc	r0
      000DF6 86 06            [24] 2646 	mov	ar6,@r0
      000DF8 08               [12] 2647 	inc	r0
      000DF9 86 07            [24] 2648 	mov	ar7,@r0
      000DFB E5*00            [12] 2649 	mov	a,_bp
      000DFD 24 0A            [12] 2650 	add	a,#0x0a
      000DFF F8               [12] 2651 	mov	r0,a
      000E00 86 05            [24] 2652 	mov	ar5,@r0
      000E02 D0 00            [24] 2653 	pop	ar0
      000E04                       2654 00227$:
      000E04 8D 04            [24] 2655 	mov	ar4,r5
      000E06 1D               [12] 2656 	dec	r5
      000E07 EC               [12] 2657 	mov	a,r4
      000E08 70 03            [24] 2658 	jnz	00627$
      000E0A 02r0Er9C         [24] 2659 	ljmp	00335$
      000E0D                       2660 00627$:
                                   2661 ;	printf_large.c:839: lsd = !lsd;
      000E0D B2*00            [12] 2662 	cpl	b5
                                   2663 ;	printf_large.c:840: if (!lsd)
      000E0F 20*00 10         [24] 2664 	jb	b5,00225$
                                   2665 ;	printf_large.c:842: pstore++;
      000E12 09               [12] 2666 	inc	r1
                                   2667 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      000E13 E7               [12] 2668 	mov	a,@r1
      000E14 C4               [12] 2669 	swap	a
      000E15 54 0F            [12] 2670 	anl	a,#0x0F
      000E17 FC               [12] 2671 	mov	r4,a
      000E18 C0 00            [24] 2672 	push	ar0
      000E1A A8 02            [24] 2673 	mov	r0,ar2
      000E1C A6 04            [24] 2674 	mov	@r0,ar4
      000E1E D0 00            [24] 2675 	pop	ar0
      000E20 80 0C            [24] 2676 	sjmp	00226$
      000E22                       2677 00225$:
                                   2678 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      000E22 87 04            [24] 2679 	mov	ar4,@r1
      000E24 74 0F            [12] 2680 	mov	a,#0x0F
      000E26 5C               [12] 2681 	anl	a,r4
      000E27 C0 00            [24] 2682 	push	ar0
      000E29 A8 02            [24] 2683 	mov	r0,ar2
      000E2B F6               [12] 2684 	mov	@r0,a
      000E2C D0 00            [24] 2685 	pop	ar0
      000E2E                       2686 00226$:
                                   2687 ;	printf_large.c:850: output_digit( value.byte[4], lower_case, output_char, p );
      000E2E C0 00            [24] 2688 	push	ar0
      000E30 A8 02            [24] 2689 	mov	r0,ar2
      000E32 86 04            [24] 2690 	mov	ar4,@r0
      000E34 D0 00            [24] 2691 	pop	ar0
      000E36 C0 07            [24] 2692 	push	ar7
      000E38 C0 06            [24] 2693 	push	ar6
      000E3A C0 05            [24] 2694 	push	ar5
      000E3C C0 02            [24] 2695 	push	ar2
      000E3E C0 01            [24] 2696 	push	ar1
      000E40 C0 00            [24] 2697 	push	ar0
      000E42 C0*00            [24] 2698 	push	bits
      000E44 85 00 F0         [24] 2699 	mov	b,ar0
      000E47 E5*00            [12] 2700 	mov	a,_bp
      000E49 24 FB            [12] 2701 	add	a,#0xfb
      000E4B F8               [12] 2702 	mov	r0,a
      000E4C E6               [12] 2703 	mov	a,@r0
      000E4D C0 E0            [24] 2704 	push	acc
      000E4F 08               [12] 2705 	inc	r0
      000E50 E6               [12] 2706 	mov	a,@r0
      000E51 C0 E0            [24] 2707 	push	acc
      000E53 08               [12] 2708 	inc	r0
      000E54 E6               [12] 2709 	mov	a,@r0
      000E55 C0 E0            [24] 2710 	push	acc
      000E57 A8 F0            [24] 2711 	mov	r0,b
      000E59 85 00 F0         [24] 2712 	mov	b,ar0
      000E5C E5*00            [12] 2713 	mov	a,_bp
      000E5E 24 0B            [12] 2714 	add	a,#0x0b
      000E60 F8               [12] 2715 	mov	r0,a
      000E61 E6               [12] 2716 	mov	a,@r0
      000E62 C0 E0            [24] 2717 	push	acc
      000E64 08               [12] 2718 	inc	r0
      000E65 E6               [12] 2719 	mov	a,@r0
      000E66 C0 E0            [24] 2720 	push	acc
      000E68 A8 F0            [24] 2721 	mov	r0,b
      000E6A C0 00            [24] 2722 	push	ar0
      000E6C E5*00            [12] 2723 	mov	a,_bp
      000E6E 24 10            [12] 2724 	add	a,#0x10
      000E70 F8               [12] 2725 	mov	r0,a
      000E71 E6               [12] 2726 	mov	a,@r0
      000E72 24 FF            [12] 2727 	add	a,#0xff
      000E74 92 F0            [24] 2728 	mov	b[0],c
      000E76 D0 00            [24] 2729 	pop	ar0
      000E78 85 F0*00         [24] 2730 	mov	bits,b
      000E7B 8C 82            [24] 2731 	mov	dpl,r4
      000E7D 12r00r00         [24] 2732 	lcall	_output_digit
      000E80 E5 81            [12] 2733 	mov	a,sp
      000E82 24 FB            [12] 2734 	add	a,#0xfb
      000E84 F5 81            [12] 2735 	mov	sp,a
      000E86 D0*00            [24] 2736 	pop	bits
      000E88 D0 00            [24] 2737 	pop	ar0
      000E8A D0 01            [24] 2738 	pop	ar1
      000E8C D0 02            [24] 2739 	pop	ar2
      000E8E D0 05            [24] 2740 	pop	ar5
      000E90 D0 06            [24] 2741 	pop	ar6
      000E92 D0 07            [24] 2742 	pop	ar7
                                   2743 ;	printf_large.c:851: charsOutputted++;
      000E94 0E               [12] 2744 	inc	r6
      000E95 BE 00 01         [24] 2745 	cjne	r6,#0x00,00629$
      000E98 0F               [12] 2746 	inc	r7
      000E99                       2747 00629$:
      000E99 02r0Er04         [24] 2748 	ljmp	00227$
      000E9C                       2749 00335$:
      000E9C A9*00            [24] 2750 	mov	r1,_bp
      000E9E 09               [12] 2751 	inc	r1
      000E9F A7 06            [24] 2752 	mov	@r1,ar6
      000EA1 09               [12] 2753 	inc	r1
      000EA2 A7 07            [24] 2754 	mov	@r1,ar7
                                   2755 ;	printf_large.c:856: if (left_justify)
      000EA4 20*00 03         [24] 2756 	jb	b0,00630$
      000EA7 02r01r66         [24] 2757 	ljmp	00243$
      000EAA                       2758 00630$:
                                   2759 ;	printf_large.c:858: while (width-- > 0)
      000EAA E5*00            [12] 2760 	mov	a,_bp
      000EAC 24 17            [12] 2761 	add	a,#0x17
      000EAE F9               [12] 2762 	mov	r1,a
      000EAF 87 05            [24] 2763 	mov	ar5,@r1
      000EB1                       2764 00230$:
      000EB1 8D 04            [24] 2765 	mov	ar4,r5
      000EB3 1D               [12] 2766 	dec	r5
      000EB4 EC               [12] 2767 	mov	a,r4
      000EB5 70 03            [24] 2768 	jnz	00631$
      000EB7 02r01r66         [24] 2769 	ljmp	00243$
      000EBA                       2770 00631$:
                                   2771 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      000EBA C0 07            [24] 2772 	push	ar7
      000EBC C0 06            [24] 2773 	push	ar6
      000EBE C0 05            [24] 2774 	push	ar5
      000EC0 C0 02            [24] 2775 	push	ar2
      000EC2 C0 00            [24] 2776 	push	ar0
      000EC4 E5*00            [12] 2777 	mov	a,_bp
      000EC6 24 FB            [12] 2778 	add	a,#0xfb
      000EC8 F9               [12] 2779 	mov	r1,a
      000EC9 E7               [12] 2780 	mov	a,@r1
      000ECA C0 E0            [24] 2781 	push	acc
      000ECC 09               [12] 2782 	inc	r1
      000ECD E7               [12] 2783 	mov	a,@r1
      000ECE C0 E0            [24] 2784 	push	acc
      000ED0 09               [12] 2785 	inc	r1
      000ED1 E7               [12] 2786 	mov	a,@r1
      000ED2 C0 E0            [24] 2787 	push	acc
      000ED4 12r0ErD9         [24] 2788 	lcall	00632$
      000ED7 80 10            [24] 2789 	sjmp	00633$
      000ED9                       2790 00632$:
      000ED9 E5*00            [12] 2791 	mov	a,_bp
      000EDB 24 0B            [12] 2792 	add	a,#0x0b
      000EDD F9               [12] 2793 	mov	r1,a
      000EDE E7               [12] 2794 	mov	a,@r1
      000EDF C0 E0            [24] 2795 	push	acc
      000EE1 09               [12] 2796 	inc	r1
      000EE2 E7               [12] 2797 	mov	a,@r1
      000EE3 C0 E0            [24] 2798 	push	acc
      000EE5 75 82 20         [24] 2799 	mov	dpl,#0x20
      000EE8 22               [24] 2800 	ret
      000EE9                       2801 00633$:
      000EE9 15 81            [12] 2802 	dec	sp
      000EEB 15 81            [12] 2803 	dec	sp
      000EED 15 81            [12] 2804 	dec	sp
      000EEF D0 00            [24] 2805 	pop	ar0
      000EF1 D0 02            [24] 2806 	pop	ar2
      000EF3 D0 05            [24] 2807 	pop	ar5
      000EF5 D0 06            [24] 2808 	pop	ar6
      000EF7 D0 07            [24] 2809 	pop	ar7
      000EF9 0E               [12] 2810 	inc	r6
      000EFA BE 00 01         [24] 2811 	cjne	r6,#0x00,00634$
      000EFD 0F               [12] 2812 	inc	r7
      000EFE                       2813 00634$:
      000EFE A9*00            [24] 2814 	mov	r1,_bp
      000F00 09               [12] 2815 	inc	r1
      000F01 A7 06            [24] 2816 	mov	@r1,ar6
      000F03 09               [12] 2817 	inc	r1
      000F04 A7 07            [24] 2818 	mov	@r1,ar7
      000F06 80 A9            [24] 2819 	sjmp	00230$
      000F08                       2820 00241$:
                                   2821 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      000F08 C0 02            [24] 2822 	push	ar2
      000F0A C0 00            [24] 2823 	push	ar0
      000F0C E5*00            [12] 2824 	mov	a,_bp
      000F0E 24 FB            [12] 2825 	add	a,#0xfb
      000F10 F9               [12] 2826 	mov	r1,a
      000F11 E7               [12] 2827 	mov	a,@r1
      000F12 C0 E0            [24] 2828 	push	acc
      000F14 09               [12] 2829 	inc	r1
      000F15 E7               [12] 2830 	mov	a,@r1
      000F16 C0 E0            [24] 2831 	push	acc
      000F18 09               [12] 2832 	inc	r1
      000F19 E7               [12] 2833 	mov	a,@r1
      000F1A C0 E0            [24] 2834 	push	acc
      000F1C 12r0Fr21         [24] 2835 	lcall	00635$
      000F1F 80 0F            [24] 2836 	sjmp	00636$
      000F21                       2837 00635$:
      000F21 E5*00            [12] 2838 	mov	a,_bp
      000F23 24 0B            [12] 2839 	add	a,#0x0b
      000F25 F9               [12] 2840 	mov	r1,a
      000F26 E7               [12] 2841 	mov	a,@r1
      000F27 C0 E0            [24] 2842 	push	acc
      000F29 09               [12] 2843 	inc	r1
      000F2A E7               [12] 2844 	mov	a,@r1
      000F2B C0 E0            [24] 2845 	push	acc
      000F2D 8D 82            [24] 2846 	mov	dpl,r5
      000F2F 22               [24] 2847 	ret
      000F30                       2848 00636$:
      000F30 15 81            [12] 2849 	dec	sp
      000F32 15 81            [12] 2850 	dec	sp
      000F34 15 81            [12] 2851 	dec	sp
      000F36 D0 00            [24] 2852 	pop	ar0
      000F38 D0 02            [24] 2853 	pop	ar2
      000F3A A9*00            [24] 2854 	mov	r1,_bp
      000F3C 09               [12] 2855 	inc	r1
      000F3D 07               [12] 2856 	inc	@r1
      000F3E B7 00 02         [24] 2857 	cjne	@r1,#0x00,00637$
      000F41 09               [12] 2858 	inc	r1
      000F42 07               [12] 2859 	inc	@r1
      000F43                       2860 00637$:
      000F43 02r01r66         [24] 2861 	ljmp	00243$
      000F46                       2862 00245$:
                                   2863 ;	printf_large.c:872: return charsOutputted;
      000F46 A8*00            [24] 2864 	mov	r0,_bp
      000F48 08               [12] 2865 	inc	r0
      000F49 86 82            [24] 2866 	mov	dpl,@r0
      000F4B 08               [12] 2867 	inc	r0
      000F4C 86 83            [24] 2868 	mov	dph,@r0
      000F4E 85*00 81         [24] 2869 	mov	sp,_bp
      000F51 D0*00            [24] 2870 	pop	_bp
      000F53 22               [24] 2871 	ret
                                   2872 	.area CSEG    (CODE)
                                   2873 	.area CONST   (CODE)
      000000                       2874 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  2875 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    2876 	.db 0x00
                                   2877 	.area XINIT   (CODE)
                                   2878 	.area CABS    (ABS,CODE)
