                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:11 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 	.globl _toupper
                                     14 	.globl _isspace
                                     15 	.globl _atof
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable bit register bank
                                     33 ;--------------------------------------------------------
                                     34 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         35 bits:
      000000                         36 	.ds 1
                           008000    37 	b0 = bits[0]
                           008100    38 	b1 = bits[1]
                           008200    39 	b2 = bits[2]
                           008300    40 	b3 = bits[3]
                           008400    41 	b4 = bits[4]
                           008500    42 	b5 = bits[5]
                           008600    43 	b6 = bits[6]
                           008700    44 	b7 = bits[7]
                                     45 ;--------------------------------------------------------
                                     46 ; internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DSEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in internal ram 
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; indirectly addressable internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area ISEG    (DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area IABS    (ABS,DATA)
                                     60 	.area IABS    (ABS,DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; bit data
                                     63 ;--------------------------------------------------------
                                     64 	.area BSEG    (BIT)
                                     65 ;--------------------------------------------------------
                                     66 ; paged external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area PSEG    (PAG,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XSEG    (XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XABS    (ABS,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; external initialized ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XISEG   (XDATA)
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT0 (CODE)
                                     83 	.area GSINIT1 (CODE)
                                     84 	.area GSINIT2 (CODE)
                                     85 	.area GSINIT3 (CODE)
                                     86 	.area GSINIT4 (CODE)
                                     87 	.area GSINIT5 (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area CSEG    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area HOME    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; code
                                    105 ;--------------------------------------------------------
                                    106 	.area CSEG    (CODE)
                                    107 ;------------------------------------------------------------
                                    108 ;Allocation info for local variables in function 'atof'
                                    109 ;------------------------------------------------------------
                                    110 ;s                         Allocated to registers r5 r3 r2 
                                    111 ;value                     Allocated to stack - _bp +8
                                    112 ;fraction                  Allocated to stack - _bp +12
                                    113 ;iexp                      Allocated to registers r6 
                                    114 ;sign                      Allocated to registers b0 
                                    115 ;sloc0                     Allocated to stack - _bp +1
                                    116 ;sloc1                     Allocated to stack - _bp +4
                                    117 ;------------------------------------------------------------
                                    118 ;	_atof.c:33: float atof(const char * s)
                                    119 ;	-----------------------------------------
                                    120 ;	 function atof
                                    121 ;	-----------------------------------------
      000000                        122 _atof:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 E5 81            [12]  132 	mov	a,sp
      000004 F5*00            [12]  133 	mov	_bp,a
      000006 24 0F            [12]  134 	add	a,#0x0F
      000008 F5 81            [12]  135 	mov	sp,a
      00000A AD 82            [24]  136 	mov	r5,dpl
      00000C AB 83            [24]  137 	mov	r3,dph
      00000E AA F0            [24]  138 	mov	r2,b
                                    139 ;	_atof.c:40: while (isspace(*s)) s++;
      000010 A8*00            [24]  140 	mov	r0,_bp
      000012 08               [12]  141 	inc	r0
      000013 A6 05            [24]  142 	mov	@r0,ar5
      000015 08               [12]  143 	inc	r0
      000016 A6 03            [24]  144 	mov	@r0,ar3
      000018 08               [12]  145 	inc	r0
      000019 A6 02            [24]  146 	mov	@r0,ar2
      00001B                        147 00101$:
      00001B A8*00            [24]  148 	mov	r0,_bp
      00001D 08               [12]  149 	inc	r0
      00001E 86 82            [24]  150 	mov	dpl,@r0
      000020 08               [12]  151 	inc	r0
      000021 86 83            [24]  152 	mov	dph,@r0
      000023 08               [12]  153 	inc	r0
      000024 86 F0            [24]  154 	mov	b,@r0
      000026 12r00r00         [24]  155 	lcall	__gptrget
      000029 FC               [12]  156 	mov	r4,a
      00002A 33               [12]  157 	rlc	a
      00002B 95 E0            [12]  158 	subb	a,acc
      00002D FB               [12]  159 	mov	r3,a
      00002E 8C 82            [24]  160 	mov	dpl,r4
      000030 8B 83            [24]  161 	mov	dph,r3
      000032 78r00            [12]  162 	mov	r0,#_isspace
      000034 79s00            [12]  163 	mov	r1,#(_isspace >> 8)
      000036 7As00            [12]  164 	mov	r2,#(_isspace >> 16)
      000038 12r00r00         [24]  165 	lcall	__sdcc_banked_call
      00003B E5 82            [12]  166 	mov	a,dpl
      00003D 85 83 F0         [24]  167 	mov	b,dph
      000040 45 F0            [12]  168 	orl	a,b
      000042 60 0B            [24]  169 	jz	00145$
      000044 A8*00            [24]  170 	mov	r0,_bp
      000046 08               [12]  171 	inc	r0
      000047 06               [12]  172 	inc	@r0
      000048 B6 00 02         [24]  173 	cjne	@r0,#0x00,00177$
      00004B 08               [12]  174 	inc	r0
      00004C 06               [12]  175 	inc	@r0
      00004D                        176 00177$:
      00004D 80 CC            [24]  177 	sjmp	00101$
      00004F                        178 00145$:
      00004F A8*00            [24]  179 	mov	r0,_bp
      000051 08               [12]  180 	inc	r0
      000052 86 05            [24]  181 	mov	ar5,@r0
      000054 08               [12]  182 	inc	r0
      000055 86 03            [24]  183 	mov	ar3,@r0
      000057 08               [12]  184 	inc	r0
      000058 86 02            [24]  185 	mov	ar2,@r0
                                    186 ;	_atof.c:43: if (*s == '-')
      00005A A8*00            [24]  187 	mov	r0,_bp
      00005C 08               [12]  188 	inc	r0
      00005D 86 82            [24]  189 	mov	dpl,@r0
      00005F 08               [12]  190 	inc	r0
      000060 86 83            [24]  191 	mov	dph,@r0
      000062 08               [12]  192 	inc	r0
      000063 86 F0            [24]  193 	mov	b,@r0
      000065 12r00r00         [24]  194 	lcall	__gptrget
      000068 FC               [12]  195 	mov	r4,a
      000069 BC 2D 12         [24]  196 	cjne	r4,#0x2D,00107$
                                    197 ;	_atof.c:45: sign=1;
      00006C D2*00            [12]  198 	setb	b0
                                    199 ;	_atof.c:46: s++;
      00006E A8*00            [24]  200 	mov	r0,_bp
      000070 08               [12]  201 	inc	r0
      000071 74 01            [12]  202 	mov	a,#0x01
      000073 26               [12]  203 	add	a,@r0
      000074 FD               [12]  204 	mov	r5,a
      000075 E4               [12]  205 	clr	a
      000076 08               [12]  206 	inc	r0
      000077 36               [12]  207 	addc	a,@r0
      000078 FB               [12]  208 	mov	r3,a
      000079 08               [12]  209 	inc	r0
      00007A 86 02            [24]  210 	mov	ar2,@r0
      00007C 80 13            [24]  211 	sjmp	00108$
      00007E                        212 00107$:
                                    213 ;	_atof.c:50: sign=0;
      00007E C2*00            [12]  214 	clr	b0
                                    215 ;	_atof.c:51: if (*s == '+') s++;
      000080 BC 2B 0E         [24]  216 	cjne	r4,#0x2B,00108$
      000083 A8*00            [24]  217 	mov	r0,_bp
      000085 08               [12]  218 	inc	r0
      000086 74 01            [12]  219 	mov	a,#0x01
      000088 26               [12]  220 	add	a,@r0
      000089 FD               [12]  221 	mov	r5,a
      00008A E4               [12]  222 	clr	a
      00008B 08               [12]  223 	inc	r0
      00008C 36               [12]  224 	addc	a,@r0
      00008D FB               [12]  225 	mov	r3,a
      00008E 08               [12]  226 	inc	r0
      00008F 86 02            [24]  227 	mov	ar2,@r0
      000091                        228 00108$:
                                    229 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      000091 E5*00            [12]  230 	mov	a,_bp
      000093 24 08            [12]  231 	add	a,#0x08
      000095 F8               [12]  232 	mov	r0,a
      000096 E4               [12]  233 	clr	a
      000097 F6               [12]  234 	mov	@r0,a
      000098 08               [12]  235 	inc	r0
      000099 F6               [12]  236 	mov	@r0,a
      00009A 08               [12]  237 	inc	r0
      00009B F6               [12]  238 	mov	@r0,a
      00009C 08               [12]  239 	inc	r0
      00009D F6               [12]  240 	mov	@r0,a
      00009E A8*00            [24]  241 	mov	r0,_bp
      0000A0 08               [12]  242 	inc	r0
      0000A1 A6 05            [24]  243 	mov	@r0,ar5
      0000A3 08               [12]  244 	inc	r0
      0000A4 A6 03            [24]  245 	mov	@r0,ar3
      0000A6 08               [12]  246 	inc	r0
      0000A7 A6 02            [24]  247 	mov	@r0,ar2
      0000A9                        248 00124$:
      0000A9 A8*00            [24]  249 	mov	r0,_bp
      0000AB 08               [12]  250 	inc	r0
      0000AC 86 82            [24]  251 	mov	dpl,@r0
      0000AE 08               [12]  252 	inc	r0
      0000AF 86 83            [24]  253 	mov	dph,@r0
      0000B1 08               [12]  254 	inc	r0
      0000B2 86 F0            [24]  255 	mov	b,@r0
      0000B4 12r00r00         [24]  256 	lcall	__gptrget
      0000B7 FC               [12]  257 	mov	r4,a
      0000B8 33               [12]  258 	rlc	a
      0000B9 95 E0            [12]  259 	subb	a,acc
      0000BB FB               [12]  260 	mov	r3,a
      0000BC 8C 82            [24]  261 	mov	dpl,r4
      0000BE 8B 83            [24]  262 	mov	dph,r3
      0000C0 C0*00            [24]  263 	push	bits
      0000C2 78r00            [12]  264 	mov	r0,#_isdigit
      0000C4 79s00            [12]  265 	mov	r1,#(_isdigit >> 8)
      0000C6 7As00            [12]  266 	mov	r2,#(_isdigit >> 16)
      0000C8 12r00r00         [24]  267 	lcall	__sdcc_banked_call
      0000CB E5 82            [12]  268 	mov	a,dpl
      0000CD 85 83 F0         [24]  269 	mov	b,dph
      0000D0 D0*00            [24]  270 	pop	bits
      0000D2 45 F0            [12]  271 	orl	a,b
      0000D4 70 03            [24]  272 	jnz	00182$
      0000D6 02r01r86         [24]  273 	ljmp	00146$
      0000D9                        274 00182$:
                                    275 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000D9 C0*00            [24]  276 	push	bits
      0000DB E5*00            [12]  277 	mov	a,_bp
      0000DD 24 08            [12]  278 	add	a,#0x08
      0000DF F8               [12]  279 	mov	r0,a
      0000E0 E6               [12]  280 	mov	a,@r0
      0000E1 C0 E0            [24]  281 	push	acc
      0000E3 08               [12]  282 	inc	r0
      0000E4 E6               [12]  283 	mov	a,@r0
      0000E5 C0 E0            [24]  284 	push	acc
      0000E7 08               [12]  285 	inc	r0
      0000E8 E6               [12]  286 	mov	a,@r0
      0000E9 C0 E0            [24]  287 	push	acc
      0000EB 08               [12]  288 	inc	r0
      0000EC E6               [12]  289 	mov	a,@r0
      0000ED C0 E0            [24]  290 	push	acc
      0000EF 90 00 00         [24]  291 	mov	dptr,#0x0000
      0000F2 75 F0 20         [24]  292 	mov	b,#0x20
      0000F5 74 41            [12]  293 	mov	a,#0x41
      0000F7 12r00r00         [24]  294 	lcall	___fsmul
      0000FA C8               [12]  295 	xch	a,r0
      0000FB E5*00            [12]  296 	mov	a,_bp
      0000FD 24 04            [12]  297 	add	a,#0x04
      0000FF C8               [12]  298 	xch	a,r0
      000100 A6 82            [24]  299 	mov	@r0,dpl
      000102 08               [12]  300 	inc	r0
      000103 A6 83            [24]  301 	mov	@r0,dph
      000105 08               [12]  302 	inc	r0
      000106 A6 F0            [24]  303 	mov	@r0,b
      000108 08               [12]  304 	inc	r0
      000109 F6               [12]  305 	mov	@r0,a
      00010A E5 81            [12]  306 	mov	a,sp
      00010C 24 FC            [12]  307 	add	a,#0xfc
      00010E F5 81            [12]  308 	mov	sp,a
      000110 D0*00            [24]  309 	pop	bits
      000112 A8*00            [24]  310 	mov	r0,_bp
      000114 08               [12]  311 	inc	r0
      000115 86 82            [24]  312 	mov	dpl,@r0
      000117 08               [12]  313 	inc	r0
      000118 86 83            [24]  314 	mov	dph,@r0
      00011A 08               [12]  315 	inc	r0
      00011B 86 F0            [24]  316 	mov	b,@r0
      00011D 12r00r00         [24]  317 	lcall	__gptrget
      000120 FE               [12]  318 	mov	r6,a
      000121 A3               [24]  319 	inc	dptr
      000122 18               [12]  320 	dec	r0
      000123 18               [12]  321 	dec	r0
      000124 A6 82            [24]  322 	mov	@r0,dpl
      000126 08               [12]  323 	inc	r0
      000127 A6 83            [24]  324 	mov	@r0,dph
      000129 EE               [12]  325 	mov	a,r6
      00012A 33               [12]  326 	rlc	a
      00012B 95 E0            [12]  327 	subb	a,acc
      00012D FD               [12]  328 	mov	r5,a
      00012E EE               [12]  329 	mov	a,r6
      00012F 24 D0            [12]  330 	add	a,#0xD0
      000131 FE               [12]  331 	mov	r6,a
      000132 ED               [12]  332 	mov	a,r5
      000133 34 FF            [12]  333 	addc	a,#0xFF
      000135 FD               [12]  334 	mov	r5,a
      000136 8E 82            [24]  335 	mov	dpl,r6
      000138 8D 83            [24]  336 	mov	dph,r5
      00013A C0*00            [24]  337 	push	bits
      00013C 12r00r00         [24]  338 	lcall	___sint2fs
      00013F AC 82            [24]  339 	mov	r4,dpl
      000141 AD 83            [24]  340 	mov	r5,dph
      000143 AE F0            [24]  341 	mov	r6,b
      000145 FF               [12]  342 	mov	r7,a
      000146 D0*00            [24]  343 	pop	bits
      000148 C0*00            [24]  344 	push	bits
      00014A C0 04            [24]  345 	push	ar4
      00014C C0 05            [24]  346 	push	ar5
      00014E C0 06            [24]  347 	push	ar6
      000150 C0 07            [24]  348 	push	ar7
      000152 E5*00            [12]  349 	mov	a,_bp
      000154 24 04            [12]  350 	add	a,#0x04
      000156 F8               [12]  351 	mov	r0,a
      000157 86 82            [24]  352 	mov	dpl,@r0
      000159 08               [12]  353 	inc	r0
      00015A 86 83            [24]  354 	mov	dph,@r0
      00015C 08               [12]  355 	inc	r0
      00015D 86 F0            [24]  356 	mov	b,@r0
      00015F 08               [12]  357 	inc	r0
      000160 E6               [12]  358 	mov	a,@r0
      000161 12r00r00         [24]  359 	lcall	___fsadd
      000164 AC 82            [24]  360 	mov	r4,dpl
      000166 AD 83            [24]  361 	mov	r5,dph
      000168 AE F0            [24]  362 	mov	r6,b
      00016A FF               [12]  363 	mov	r7,a
      00016B E5 81            [12]  364 	mov	a,sp
      00016D 24 FC            [12]  365 	add	a,#0xfc
      00016F F5 81            [12]  366 	mov	sp,a
      000171 D0*00            [24]  367 	pop	bits
      000173 E5*00            [12]  368 	mov	a,_bp
      000175 24 08            [12]  369 	add	a,#0x08
      000177 F8               [12]  370 	mov	r0,a
      000178 A6 04            [24]  371 	mov	@r0,ar4
      00017A 08               [12]  372 	inc	r0
      00017B A6 05            [24]  373 	mov	@r0,ar5
      00017D 08               [12]  374 	inc	r0
      00017E A6 06            [24]  375 	mov	@r0,ar6
      000180 08               [12]  376 	inc	r0
      000181 A6 07            [24]  377 	mov	@r0,ar7
                                    378 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      000183 02r00rA9         [24]  379 	ljmp	00124$
      000186                        380 00146$:
      000186 A8*00            [24]  381 	mov	r0,_bp
      000188 08               [12]  382 	inc	r0
      000189 86 05            [24]  383 	mov	ar5,@r0
      00018B 08               [12]  384 	inc	r0
      00018C 86 03            [24]  385 	mov	ar3,@r0
      00018E 08               [12]  386 	inc	r0
      00018F 86 02            [24]  387 	mov	ar2,@r0
                                    388 ;	_atof.c:61: if (*s == '.')
      000191 A8*00            [24]  389 	mov	r0,_bp
      000193 08               [12]  390 	inc	r0
      000194 86 82            [24]  391 	mov	dpl,@r0
      000196 08               [12]  392 	inc	r0
      000197 86 83            [24]  393 	mov	dph,@r0
      000199 08               [12]  394 	inc	r0
      00019A 86 F0            [24]  395 	mov	b,@r0
      00019C 12r00r00         [24]  396 	lcall	__gptrget
      00019F FF               [12]  397 	mov	r7,a
      0001A0 BF 2E 02         [24]  398 	cjne	r7,#0x2E,00183$
      0001A3 80 03            [24]  399 	sjmp	00184$
      0001A5                        400 00183$:
      0001A5 02r02rF7         [24]  401 	ljmp	00112$
      0001A8                        402 00184$:
                                    403 ;	_atof.c:63: s++;
      0001A8 A8*00            [24]  404 	mov	r0,_bp
      0001AA 08               [12]  405 	inc	r0
      0001AB 74 01            [12]  406 	mov	a,#0x01
      0001AD 26               [12]  407 	add	a,@r0
      0001AE FD               [12]  408 	mov	r5,a
      0001AF E4               [12]  409 	clr	a
      0001B0 08               [12]  410 	inc	r0
      0001B1 36               [12]  411 	addc	a,@r0
      0001B2 FB               [12]  412 	mov	r3,a
      0001B3 08               [12]  413 	inc	r0
      0001B4 86 02            [24]  414 	mov	ar2,@r0
                                    415 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0001B6 E5*00            [12]  416 	mov	a,_bp
      0001B8 24 0C            [12]  417 	add	a,#0x0c
      0001BA F8               [12]  418 	mov	r0,a
      0001BB 76 CD            [12]  419 	mov	@r0,#0xCD
      0001BD 08               [12]  420 	inc	r0
      0001BE 76 CC            [12]  421 	mov	@r0,#0xCC
      0001C0 08               [12]  422 	inc	r0
      0001C1 76 CC            [12]  423 	mov	@r0,#0xCC
      0001C3 08               [12]  424 	inc	r0
      0001C4 76 3D            [12]  425 	mov	@r0,#0x3D
      0001C6 E5*00            [12]  426 	mov	a,_bp
      0001C8 24 04            [12]  427 	add	a,#0x04
      0001CA F8               [12]  428 	mov	r0,a
      0001CB A6 05            [24]  429 	mov	@r0,ar5
      0001CD 08               [12]  430 	inc	r0
      0001CE A6 03            [24]  431 	mov	@r0,ar3
      0001D0 08               [12]  432 	inc	r0
      0001D1 A6 02            [24]  433 	mov	@r0,ar2
      0001D3                        434 00127$:
      0001D3 E5*00            [12]  435 	mov	a,_bp
      0001D5 24 04            [12]  436 	add	a,#0x04
      0001D7 F8               [12]  437 	mov	r0,a
      0001D8 86 82            [24]  438 	mov	dpl,@r0
      0001DA 08               [12]  439 	inc	r0
      0001DB 86 83            [24]  440 	mov	dph,@r0
      0001DD 08               [12]  441 	inc	r0
      0001DE 86 F0            [24]  442 	mov	b,@r0
      0001E0 12r00r00         [24]  443 	lcall	__gptrget
      0001E3 FE               [12]  444 	mov	r6,a
      0001E4 33               [12]  445 	rlc	a
      0001E5 95 E0            [12]  446 	subb	a,acc
      0001E7 FD               [12]  447 	mov	r5,a
      0001E8 8E 82            [24]  448 	mov	dpl,r6
      0001EA 8D 83            [24]  449 	mov	dph,r5
      0001EC C0*00            [24]  450 	push	bits
      0001EE 78r00            [12]  451 	mov	r0,#_isdigit
      0001F0 79s00            [12]  452 	mov	r1,#(_isdigit >> 8)
      0001F2 7As00            [12]  453 	mov	r2,#(_isdigit >> 16)
      0001F4 12r00r00         [24]  454 	lcall	__sdcc_banked_call
      0001F7 E5 82            [12]  455 	mov	a,dpl
      0001F9 85 83 F0         [24]  456 	mov	b,dph
      0001FC D0*00            [24]  457 	pop	bits
      0001FE 45 F0            [12]  458 	orl	a,b
      000200 70 03            [24]  459 	jnz	00185$
      000202 02r02rEA         [24]  460 	ljmp	00147$
      000205                        461 00185$:
                                    462 ;	_atof.c:66: value+=(*s-'0')*fraction;
      000205 E5*00            [12]  463 	mov	a,_bp
      000207 24 04            [12]  464 	add	a,#0x04
      000209 F8               [12]  465 	mov	r0,a
      00020A 86 82            [24]  466 	mov	dpl,@r0
      00020C 08               [12]  467 	inc	r0
      00020D 86 83            [24]  468 	mov	dph,@r0
      00020F 08               [12]  469 	inc	r0
      000210 86 F0            [24]  470 	mov	b,@r0
      000212 12r00r00         [24]  471 	lcall	__gptrget
      000215 FE               [12]  472 	mov	r6,a
      000216 A3               [24]  473 	inc	dptr
      000217 18               [12]  474 	dec	r0
      000218 18               [12]  475 	dec	r0
      000219 A6 82            [24]  476 	mov	@r0,dpl
      00021B 08               [12]  477 	inc	r0
      00021C A6 83            [24]  478 	mov	@r0,dph
      00021E EE               [12]  479 	mov	a,r6
      00021F 33               [12]  480 	rlc	a
      000220 95 E0            [12]  481 	subb	a,acc
      000222 FD               [12]  482 	mov	r5,a
      000223 EE               [12]  483 	mov	a,r6
      000224 24 D0            [12]  484 	add	a,#0xD0
      000226 FE               [12]  485 	mov	r6,a
      000227 ED               [12]  486 	mov	a,r5
      000228 34 FF            [12]  487 	addc	a,#0xFF
      00022A FD               [12]  488 	mov	r5,a
      00022B 8E 82            [24]  489 	mov	dpl,r6
      00022D 8D 83            [24]  490 	mov	dph,r5
      00022F C0*00            [24]  491 	push	bits
      000231 12r00r00         [24]  492 	lcall	___sint2fs
      000234 AC 82            [24]  493 	mov	r4,dpl
      000236 AD 83            [24]  494 	mov	r5,dph
      000238 AE F0            [24]  495 	mov	r6,b
      00023A FF               [12]  496 	mov	r7,a
      00023B D0*00            [24]  497 	pop	bits
      00023D C0*00            [24]  498 	push	bits
      00023F E5*00            [12]  499 	mov	a,_bp
      000241 24 0C            [12]  500 	add	a,#0x0c
      000243 F8               [12]  501 	mov	r0,a
      000244 E6               [12]  502 	mov	a,@r0
      000245 C0 E0            [24]  503 	push	acc
      000247 08               [12]  504 	inc	r0
      000248 E6               [12]  505 	mov	a,@r0
      000249 C0 E0            [24]  506 	push	acc
      00024B 08               [12]  507 	inc	r0
      00024C E6               [12]  508 	mov	a,@r0
      00024D C0 E0            [24]  509 	push	acc
      00024F 08               [12]  510 	inc	r0
      000250 E6               [12]  511 	mov	a,@r0
      000251 C0 E0            [24]  512 	push	acc
      000253 8C 82            [24]  513 	mov	dpl,r4
      000255 8D 83            [24]  514 	mov	dph,r5
      000257 8E F0            [24]  515 	mov	b,r6
      000259 EF               [12]  516 	mov	a,r7
      00025A 12r00r00         [24]  517 	lcall	___fsmul
      00025D AC 82            [24]  518 	mov	r4,dpl
      00025F AD 83            [24]  519 	mov	r5,dph
      000261 AE F0            [24]  520 	mov	r6,b
      000263 FF               [12]  521 	mov	r7,a
      000264 E5 81            [12]  522 	mov	a,sp
      000266 24 FC            [12]  523 	add	a,#0xfc
      000268 F5 81            [12]  524 	mov	sp,a
      00026A D0*00            [24]  525 	pop	bits
      00026C C0*00            [24]  526 	push	bits
      00026E C0 04            [24]  527 	push	ar4
      000270 C0 05            [24]  528 	push	ar5
      000272 C0 06            [24]  529 	push	ar6
      000274 C0 07            [24]  530 	push	ar7
      000276 E5*00            [12]  531 	mov	a,_bp
      000278 24 08            [12]  532 	add	a,#0x08
      00027A F8               [12]  533 	mov	r0,a
      00027B 86 82            [24]  534 	mov	dpl,@r0
      00027D 08               [12]  535 	inc	r0
      00027E 86 83            [24]  536 	mov	dph,@r0
      000280 08               [12]  537 	inc	r0
      000281 86 F0            [24]  538 	mov	b,@r0
      000283 08               [12]  539 	inc	r0
      000284 E6               [12]  540 	mov	a,@r0
      000285 12r00r00         [24]  541 	lcall	___fsadd
      000288 AC 82            [24]  542 	mov	r4,dpl
      00028A AD 83            [24]  543 	mov	r5,dph
      00028C AE F0            [24]  544 	mov	r6,b
      00028E FF               [12]  545 	mov	r7,a
      00028F E5 81            [12]  546 	mov	a,sp
      000291 24 FC            [12]  547 	add	a,#0xfc
      000293 F5 81            [12]  548 	mov	sp,a
      000295 D0*00            [24]  549 	pop	bits
      000297 E5*00            [12]  550 	mov	a,_bp
      000299 24 08            [12]  551 	add	a,#0x08
      00029B F8               [12]  552 	mov	r0,a
      00029C A6 04            [24]  553 	mov	@r0,ar4
      00029E 08               [12]  554 	inc	r0
      00029F A6 05            [24]  555 	mov	@r0,ar5
      0002A1 08               [12]  556 	inc	r0
      0002A2 A6 06            [24]  557 	mov	@r0,ar6
      0002A4 08               [12]  558 	inc	r0
      0002A5 A6 07            [24]  559 	mov	@r0,ar7
                                    560 ;	_atof.c:67: fraction*=0.1;
      0002A7 C0*00            [24]  561 	push	bits
      0002A9 E5*00            [12]  562 	mov	a,_bp
      0002AB 24 0C            [12]  563 	add	a,#0x0c
      0002AD F8               [12]  564 	mov	r0,a
      0002AE E6               [12]  565 	mov	a,@r0
      0002AF C0 E0            [24]  566 	push	acc
      0002B1 08               [12]  567 	inc	r0
      0002B2 E6               [12]  568 	mov	a,@r0
      0002B3 C0 E0            [24]  569 	push	acc
      0002B5 08               [12]  570 	inc	r0
      0002B6 E6               [12]  571 	mov	a,@r0
      0002B7 C0 E0            [24]  572 	push	acc
      0002B9 08               [12]  573 	inc	r0
      0002BA E6               [12]  574 	mov	a,@r0
      0002BB C0 E0            [24]  575 	push	acc
      0002BD 90 CC CD         [24]  576 	mov	dptr,#0xCCCD
      0002C0 75 F0 CC         [24]  577 	mov	b,#0xCC
      0002C3 74 3D            [12]  578 	mov	a,#0x3D
      0002C5 12r00r00         [24]  579 	lcall	___fsmul
      0002C8 AC 82            [24]  580 	mov	r4,dpl
      0002CA AD 83            [24]  581 	mov	r5,dph
      0002CC AE F0            [24]  582 	mov	r6,b
      0002CE FF               [12]  583 	mov	r7,a
      0002CF E5 81            [12]  584 	mov	a,sp
      0002D1 24 FC            [12]  585 	add	a,#0xfc
      0002D3 F5 81            [12]  586 	mov	sp,a
      0002D5 D0*00            [24]  587 	pop	bits
      0002D7 E5*00            [12]  588 	mov	a,_bp
      0002D9 24 0C            [12]  589 	add	a,#0x0c
      0002DB F8               [12]  590 	mov	r0,a
      0002DC A6 04            [24]  591 	mov	@r0,ar4
      0002DE 08               [12]  592 	inc	r0
      0002DF A6 05            [24]  593 	mov	@r0,ar5
      0002E1 08               [12]  594 	inc	r0
      0002E2 A6 06            [24]  595 	mov	@r0,ar6
      0002E4 08               [12]  596 	inc	r0
      0002E5 A6 07            [24]  597 	mov	@r0,ar7
                                    598 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002E7 02r01rD3         [24]  599 	ljmp	00127$
      0002EA                        600 00147$:
      0002EA E5*00            [12]  601 	mov	a,_bp
      0002EC 24 04            [12]  602 	add	a,#0x04
      0002EE F8               [12]  603 	mov	r0,a
      0002EF 86 05            [24]  604 	mov	ar5,@r0
      0002F1 08               [12]  605 	inc	r0
      0002F2 86 03            [24]  606 	mov	ar3,@r0
      0002F4 08               [12]  607 	inc	r0
      0002F5 86 02            [24]  608 	mov	ar2,@r0
      0002F7                        609 00112$:
                                    610 ;	_atof.c:72: if (toupper(*s)=='E')
      0002F7 8D 82            [24]  611 	mov	dpl,r5
      0002F9 8B 83            [24]  612 	mov	dph,r3
      0002FB 8A F0            [24]  613 	mov	b,r2
      0002FD 12r00r00         [24]  614 	lcall	__gptrget
      000300 FF               [12]  615 	mov	r7,a
      000301 33               [12]  616 	rlc	a
      000302 95 E0            [12]  617 	subb	a,acc
      000304 FE               [12]  618 	mov	r6,a
      000305 8F 82            [24]  619 	mov	dpl,r7
      000307 8E 83            [24]  620 	mov	dph,r6
      000309 C0 05            [24]  621 	push	ar5
      00030B C0 03            [24]  622 	push	ar3
      00030D C0 02            [24]  623 	push	ar2
      00030F C0*00            [24]  624 	push	bits
      000311 78r00            [12]  625 	mov	r0,#_toupper
      000313 79s00            [12]  626 	mov	r1,#(_toupper >> 8)
      000315 7As00            [12]  627 	mov	r2,#(_toupper >> 16)
      000317 12r00r00         [24]  628 	lcall	__sdcc_banked_call
      00031A AE 82            [24]  629 	mov	r6,dpl
      00031C AF 83            [24]  630 	mov	r7,dph
      00031E D0*00            [24]  631 	pop	bits
      000320 D0 02            [24]  632 	pop	ar2
      000322 D0 03            [24]  633 	pop	ar3
      000324 D0 05            [24]  634 	pop	ar5
      000326 BE 45 05         [24]  635 	cjne	r6,#0x45,00186$
      000329 BF 00 02         [24]  636 	cjne	r7,#0x00,00186$
      00032C 80 03            [24]  637 	sjmp	00187$
      00032E                        638 00186$:
      00032E 02r03rE6         [24]  639 	ljmp	00120$
      000331                        640 00187$:
                                    641 ;	_atof.c:74: s++;
      000331 0D               [12]  642 	inc	r5
      000332 BD 00 01         [24]  643 	cjne	r5,#0x00,00188$
      000335 0B               [12]  644 	inc	r3
      000336                        645 00188$:
                                    646 ;	_atof.c:75: iexp=(signed char)atoi(s);
      000336 8D 82            [24]  647 	mov	dpl,r5
      000338 8B 83            [24]  648 	mov	dph,r3
      00033A 8A F0            [24]  649 	mov	b,r2
      00033C C0*00            [24]  650 	push	bits
      00033E 78r00            [12]  651 	mov	r0,#_atoi
      000340 79s00            [12]  652 	mov	r1,#(_atoi >> 8)
      000342 7As00            [12]  653 	mov	r2,#(_atoi >> 16)
      000344 12r00r00         [24]  654 	lcall	__sdcc_banked_call
      000347 AE 82            [24]  655 	mov	r6,dpl
      000349 AF 83            [24]  656 	mov	r7,dph
      00034B D0*00            [24]  657 	pop	bits
                                    658 ;	_atof.c:77: while(iexp!=0)
      00034D                        659 00116$:
      00034D EE               [12]  660 	mov	a,r6
      00034E 70 03            [24]  661 	jnz	00189$
      000350 02r03rE6         [24]  662 	ljmp	00120$
      000353                        663 00189$:
                                    664 ;	_atof.c:79: if(iexp<0)
      000353 EE               [12]  665 	mov	a,r6
      000354 30 E7 47         [24]  666 	jnb	acc.7,00114$
                                    667 ;	_atof.c:81: value*=0.1;
      000357 C0 06            [24]  668 	push	ar6
      000359 C0*00            [24]  669 	push	bits
      00035B E5*00            [12]  670 	mov	a,_bp
      00035D 24 08            [12]  671 	add	a,#0x08
      00035F F8               [12]  672 	mov	r0,a
      000360 E6               [12]  673 	mov	a,@r0
      000361 C0 E0            [24]  674 	push	acc
      000363 08               [12]  675 	inc	r0
      000364 E6               [12]  676 	mov	a,@r0
      000365 C0 E0            [24]  677 	push	acc
      000367 08               [12]  678 	inc	r0
      000368 E6               [12]  679 	mov	a,@r0
      000369 C0 E0            [24]  680 	push	acc
      00036B 08               [12]  681 	inc	r0
      00036C E6               [12]  682 	mov	a,@r0
      00036D C0 E0            [24]  683 	push	acc
      00036F 90 CC CD         [24]  684 	mov	dptr,#0xCCCD
      000372 75 F0 CC         [24]  685 	mov	b,#0xCC
      000375 74 3D            [12]  686 	mov	a,#0x3D
      000377 12r00r00         [24]  687 	lcall	___fsmul
      00037A AB 82            [24]  688 	mov	r3,dpl
      00037C AC 83            [24]  689 	mov	r4,dph
      00037E AD F0            [24]  690 	mov	r5,b
      000380 FF               [12]  691 	mov	r7,a
      000381 E5 81            [12]  692 	mov	a,sp
      000383 24 FC            [12]  693 	add	a,#0xfc
      000385 F5 81            [12]  694 	mov	sp,a
      000387 D0*00            [24]  695 	pop	bits
      000389 D0 06            [24]  696 	pop	ar6
      00038B E5*00            [12]  697 	mov	a,_bp
      00038D 24 08            [12]  698 	add	a,#0x08
      00038F F8               [12]  699 	mov	r0,a
      000390 A6 03            [24]  700 	mov	@r0,ar3
      000392 08               [12]  701 	inc	r0
      000393 A6 04            [24]  702 	mov	@r0,ar4
      000395 08               [12]  703 	inc	r0
      000396 A6 05            [24]  704 	mov	@r0,ar5
      000398 08               [12]  705 	inc	r0
      000399 A6 07            [24]  706 	mov	@r0,ar7
                                    707 ;	_atof.c:82: iexp++;
      00039B 0E               [12]  708 	inc	r6
      00039C 80 AF            [24]  709 	sjmp	00116$
      00039E                        710 00114$:
                                    711 ;	_atof.c:86: value*=10.0;
      00039E C0 06            [24]  712 	push	ar6
      0003A0 C0*00            [24]  713 	push	bits
      0003A2 E5*00            [12]  714 	mov	a,_bp
      0003A4 24 08            [12]  715 	add	a,#0x08
      0003A6 F8               [12]  716 	mov	r0,a
      0003A7 E6               [12]  717 	mov	a,@r0
      0003A8 C0 E0            [24]  718 	push	acc
      0003AA 08               [12]  719 	inc	r0
      0003AB E6               [12]  720 	mov	a,@r0
      0003AC C0 E0            [24]  721 	push	acc
      0003AE 08               [12]  722 	inc	r0
      0003AF E6               [12]  723 	mov	a,@r0
      0003B0 C0 E0            [24]  724 	push	acc
      0003B2 08               [12]  725 	inc	r0
      0003B3 E6               [12]  726 	mov	a,@r0
      0003B4 C0 E0            [24]  727 	push	acc
      0003B6 90 00 00         [24]  728 	mov	dptr,#0x0000
      0003B9 75 F0 20         [24]  729 	mov	b,#0x20
      0003BC 74 41            [12]  730 	mov	a,#0x41
      0003BE 12r00r00         [24]  731 	lcall	___fsmul
      0003C1 AB 82            [24]  732 	mov	r3,dpl
      0003C3 AC 83            [24]  733 	mov	r4,dph
      0003C5 AD F0            [24]  734 	mov	r5,b
      0003C7 FF               [12]  735 	mov	r7,a
      0003C8 E5 81            [12]  736 	mov	a,sp
      0003CA 24 FC            [12]  737 	add	a,#0xfc
      0003CC F5 81            [12]  738 	mov	sp,a
      0003CE D0*00            [24]  739 	pop	bits
      0003D0 D0 06            [24]  740 	pop	ar6
      0003D2 E5*00            [12]  741 	mov	a,_bp
      0003D4 24 08            [12]  742 	add	a,#0x08
      0003D6 F8               [12]  743 	mov	r0,a
      0003D7 A6 03            [24]  744 	mov	@r0,ar3
      0003D9 08               [12]  745 	inc	r0
      0003DA A6 04            [24]  746 	mov	@r0,ar4
      0003DC 08               [12]  747 	inc	r0
      0003DD A6 05            [24]  748 	mov	@r0,ar5
      0003DF 08               [12]  749 	inc	r0
      0003E0 A6 07            [24]  750 	mov	@r0,ar7
                                    751 ;	_atof.c:87: iexp--;
      0003E2 1E               [12]  752 	dec	r6
      0003E3 02r03r4D         [24]  753 	ljmp	00116$
      0003E6                        754 00120$:
                                    755 ;	_atof.c:93: if(sign) value*=-1.0;
      0003E6 30*00 12         [24]  756 	jnb	b0,00122$
      0003E9 E5*00            [12]  757 	mov	a,_bp
      0003EB 24 08            [12]  758 	add	a,#0x08
      0003ED F8               [12]  759 	mov	r0,a
      0003EE E6               [12]  760 	mov	a,@r0
      0003EF F6               [12]  761 	mov	@r0,a
      0003F0 08               [12]  762 	inc	r0
      0003F1 E6               [12]  763 	mov	a,@r0
      0003F2 F6               [12]  764 	mov	@r0,a
      0003F3 08               [12]  765 	inc	r0
      0003F4 E6               [12]  766 	mov	a,@r0
      0003F5 F6               [12]  767 	mov	@r0,a
      0003F6 08               [12]  768 	inc	r0
      0003F7 E6               [12]  769 	mov	a,@r0
      0003F8 B2 E7            [12]  770 	cpl	acc.7
      0003FA F6               [12]  771 	mov	@r0,a
      0003FB                        772 00122$:
                                    773 ;	_atof.c:94: return (value);
      0003FB E5*00            [12]  774 	mov	a,_bp
      0003FD 24 08            [12]  775 	add	a,#0x08
      0003FF F8               [12]  776 	mov	r0,a
      000400 86 82            [24]  777 	mov	dpl,@r0
      000402 08               [12]  778 	inc	r0
      000403 86 83            [24]  779 	mov	dph,@r0
      000405 08               [12]  780 	inc	r0
      000406 86 F0            [24]  781 	mov	b,@r0
      000408 08               [12]  782 	inc	r0
      000409 E6               [12]  783 	mov	a,@r0
      00040A 85*00 81         [24]  784 	mov	sp,_bp
      00040D D0*00            [24]  785 	pop	_bp
      00040F 02r00r00         [24]  786 	ljmp	__sdcc_banked_ret
                                    787 	.area CSEG    (CODE)
                                    788 	.area CONST   (CODE)
                                    789 	.area XINIT   (CODE)
                                    790 	.area CABS    (ABS,CODE)
