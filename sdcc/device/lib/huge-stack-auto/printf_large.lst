                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:21 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'output_digit'
                                    107 ;------------------------------------------------------------
                                    108 ;output_char               Allocated to stack - _bp -6
                                    109 ;p                         Allocated to stack - _bp -9
                                    110 ;lower_case                Allocated to registers b0 
                                    111 ;n                         Allocated to registers r7 
                                    112 ;c                         Allocated to registers r7 
                                    113 ;------------------------------------------------------------
                                    114 ;	printf_large.c:116: output_digit (unsigned char n, bool lower_case, pfn_outputchar output_char, void* p)
                                    115 ;	-----------------------------------------
                                    116 ;	 function output_digit
                                    117 ;	-----------------------------------------
      000000                        118 _output_digit:
                           000007   119 	ar7 = 0x07
                           000006   120 	ar6 = 0x06
                           000005   121 	ar5 = 0x05
                           000004   122 	ar4 = 0x04
                           000003   123 	ar3 = 0x03
                           000002   124 	ar2 = 0x02
                           000001   125 	ar1 = 0x01
                           000000   126 	ar0 = 0x00
      000000 C0*00            [24]  127 	push	_bp
      000002 85 81*00         [24]  128 	mov	_bp,sp
      000005 AF 82            [24]  129 	mov	r7,dpl
                                    130 ;	printf_large.c:118: register unsigned char c = n + (unsigned char)'0';
      000007 74 30            [12]  131 	mov	a,#0x30
      000009 2F               [12]  132 	add	a,r7
                                    133 ;	printf_large.c:120: if (c > (unsigned char)'9')
      00000A FF               [12]  134 	mov  r7,a
      00000B 24 C6            [12]  135 	add	a,#0xff - 0x39
      00000D 50 0B            [24]  136 	jnc	00104$
                                    137 ;	printf_large.c:122: c += (unsigned char)('A' - '0' - 10);
      00000F 74 07            [12]  138 	mov	a,#0x07
      000011 2F               [12]  139 	add	a,r7
      000012 FF               [12]  140 	mov	r7,a
                                    141 ;	printf_large.c:123: if (lower_case)
      000013 30*00 04         [24]  142 	jnb	b0,00104$
                                    143 ;	printf_large.c:124: c += (unsigned char)('a' - 'A');
      000016 74 20            [12]  144 	mov	a,#0x20
      000018 2F               [12]  145 	add	a,r7
      000019 FF               [12]  146 	mov	r7,a
      00001A                        147 00104$:
                                    148 ;	printf_large.c:126: output_char( c, p );
      00001A E5*00            [12]  149 	mov	a,_bp
      00001C 24 F7            [12]  150 	add	a,#0xf7
      00001E F8               [12]  151 	mov	r0,a
      00001F E6               [12]  152 	mov	a,@r0
      000020 C0 E0            [24]  153 	push	acc
      000022 08               [12]  154 	inc	r0
      000023 E6               [12]  155 	mov	a,@r0
      000024 C0 E0            [24]  156 	push	acc
      000026 08               [12]  157 	inc	r0
      000027 E6               [12]  158 	mov	a,@r0
      000028 C0 E0            [24]  159 	push	acc
      00002A E5*00            [12]  160 	mov	a,_bp
      00002C 24 FA            [12]  161 	add	a,#0xfa
      00002E F8               [12]  162 	mov	r0,a
      00002F E6               [12]  163 	mov	a,@r0
      000030 C0 E0            [24]  164 	push	acc
      000032 08               [12]  165 	inc	r0
      000033 E6               [12]  166 	mov	a,@r0
      000034 C0 E0            [24]  167 	push	acc
      000036 08               [12]  168 	inc	r0
      000037 E6               [12]  169 	mov	a,@r0
      000038 C0 E0            [24]  170 	push	acc
      00003A 8F 82            [24]  171 	mov	dpl,r7
      00003C D0 02            [24]  172 	pop	ar2
      00003E D0 01            [24]  173 	pop	ar1
      000040 D0 00            [24]  174 	pop	ar0
      000042 12r00r00         [24]  175 	lcall	__sdcc_banked_call
      000045 15 81            [12]  176 	dec	sp
      000047 15 81            [12]  177 	dec	sp
      000049 15 81            [12]  178 	dec	sp
      00004B D0*00            [24]  179 	pop	_bp
      00004D 02r00r00         [24]  180 	ljmp	__sdcc_banked_ret
                                    181 ;------------------------------------------------------------
                                    182 ;Allocation info for local variables in function 'output_2digits'
                                    183 ;------------------------------------------------------------
                                    184 ;output_char               Allocated to stack - _bp -6
                                    185 ;p                         Allocated to stack - _bp -9
                                    186 ;lower_case                Allocated to registers b0 
                                    187 ;b                         Allocated to registers r7 
                                    188 ;------------------------------------------------------------
                                    189 ;	printf_large.c:149: output_2digits (unsigned char b, bool lower_case, pfn_outputchar output_char, void* p)
                                    190 ;	-----------------------------------------
                                    191 ;	 function output_2digits
                                    192 ;	-----------------------------------------
      000050                        193 _output_2digits:
      000050 C0*00            [24]  194 	push	_bp
      000052 85 81*00         [24]  195 	mov	_bp,sp
                                    196 ;	printf_large.c:151: output_digit( b>>4,   lower_case, output_char, p );
      000055 E5 82            [12]  197 	mov	a,dpl
      000057 FF               [12]  198 	mov	r7,a
      000058 C4               [12]  199 	swap	a
      000059 54 0F            [12]  200 	anl	a,#0x0F
      00005B FE               [12]  201 	mov	r6,a
      00005C C0 07            [24]  202 	push	ar7
      00005E C0*00            [24]  203 	push	bits
      000060 E5*00            [12]  204 	mov	a,_bp
      000062 24 F7            [12]  205 	add	a,#0xf7
      000064 F8               [12]  206 	mov	r0,a
      000065 E6               [12]  207 	mov	a,@r0
      000066 C0 E0            [24]  208 	push	acc
      000068 08               [12]  209 	inc	r0
      000069 E6               [12]  210 	mov	a,@r0
      00006A C0 E0            [24]  211 	push	acc
      00006C 08               [12]  212 	inc	r0
      00006D E6               [12]  213 	mov	a,@r0
      00006E C0 E0            [24]  214 	push	acc
      000070 E5*00            [12]  215 	mov	a,_bp
      000072 24 FA            [12]  216 	add	a,#0xfa
      000074 F8               [12]  217 	mov	r0,a
      000075 E6               [12]  218 	mov	a,@r0
      000076 C0 E0            [24]  219 	push	acc
      000078 08               [12]  220 	inc	r0
      000079 E6               [12]  221 	mov	a,@r0
      00007A C0 E0            [24]  222 	push	acc
      00007C 08               [12]  223 	inc	r0
      00007D E6               [12]  224 	mov	a,@r0
      00007E C0 E0            [24]  225 	push	acc
      000080 A2*00            [12]  226 	mov	c,b0
      000082 92 F0            [24]  227 	mov	b[0],c
      000084 85 F0*00         [24]  228 	mov	bits,b
      000087 8E 82            [24]  229 	mov	dpl,r6
      000089 78r00            [12]  230 	mov	r0,#_output_digit
      00008B 79s00            [12]  231 	mov	r1,#(_output_digit >> 8)
      00008D 7As00            [12]  232 	mov	r2,#(_output_digit >> 16)
      00008F 12r00r00         [24]  233 	lcall	__sdcc_banked_call
      000092 E5 81            [12]  234 	mov	a,sp
      000094 24 FA            [12]  235 	add	a,#0xfa
      000096 F5 81            [12]  236 	mov	sp,a
      000098 D0*00            [24]  237 	pop	bits
      00009A D0 07            [24]  238 	pop	ar7
                                    239 ;	printf_large.c:152: output_digit( b&0x0F, lower_case, output_char, p );
      00009C 53 07 0F         [24]  240 	anl	ar7,#0x0F
      00009F E5*00            [12]  241 	mov	a,_bp
      0000A1 24 F7            [12]  242 	add	a,#0xf7
      0000A3 F8               [12]  243 	mov	r0,a
      0000A4 E6               [12]  244 	mov	a,@r0
      0000A5 C0 E0            [24]  245 	push	acc
      0000A7 08               [12]  246 	inc	r0
      0000A8 E6               [12]  247 	mov	a,@r0
      0000A9 C0 E0            [24]  248 	push	acc
      0000AB 08               [12]  249 	inc	r0
      0000AC E6               [12]  250 	mov	a,@r0
      0000AD C0 E0            [24]  251 	push	acc
      0000AF E5*00            [12]  252 	mov	a,_bp
      0000B1 24 FA            [12]  253 	add	a,#0xfa
      0000B3 F8               [12]  254 	mov	r0,a
      0000B4 E6               [12]  255 	mov	a,@r0
      0000B5 C0 E0            [24]  256 	push	acc
      0000B7 08               [12]  257 	inc	r0
      0000B8 E6               [12]  258 	mov	a,@r0
      0000B9 C0 E0            [24]  259 	push	acc
      0000BB 08               [12]  260 	inc	r0
      0000BC E6               [12]  261 	mov	a,@r0
      0000BD C0 E0            [24]  262 	push	acc
      0000BF A2*00            [12]  263 	mov	c,b0
      0000C1 92 F0            [24]  264 	mov	b[0],c
      0000C3 85 F0*00         [24]  265 	mov	bits,b
      0000C6 8F 82            [24]  266 	mov	dpl,r7
      0000C8 78r00            [12]  267 	mov	r0,#_output_digit
      0000CA 79s00            [12]  268 	mov	r1,#(_output_digit >> 8)
      0000CC 7As00            [12]  269 	mov	r2,#(_output_digit >> 16)
      0000CE 12r00r00         [24]  270 	lcall	__sdcc_banked_call
      0000D1 E5 81            [12]  271 	mov	a,sp
      0000D3 24 FA            [12]  272 	add	a,#0xfa
      0000D5 F5 81            [12]  273 	mov	sp,a
      0000D7 D0*00            [24]  274 	pop	_bp
      0000D9 02r00r00         [24]  275 	ljmp	__sdcc_banked_ret
                                    276 ;------------------------------------------------------------
                                    277 ;Allocation info for local variables in function 'calculate_digit'
                                    278 ;------------------------------------------------------------
                                    279 ;radix                     Allocated to stack - _bp -4
                                    280 ;value                     Allocated to registers r1 
                                    281 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    282 ;pb4                       Allocated to registers r0 
                                    283 ;i                         Allocated to registers r3 
                                    284 ;sloc0                     Allocated to stack - _bp +8
                                    285 ;------------------------------------------------------------
                                    286 ;	printf_large.c:168: calculate_digit (value_t _AUTOMEM * value, unsigned char radix)
                                    287 ;	-----------------------------------------
                                    288 ;	 function calculate_digit
                                    289 ;	-----------------------------------------
      0000DC                        290 _calculate_digit:
      0000DC C0*00            [24]  291 	push	_bp
      0000DE 85 81*00         [24]  292 	mov	_bp,sp
      0000E1 A9 82            [24]  293 	mov	r1,dpl
                                    294 ;	printf_large.c:170: unsigned long ul = value->ul;
      0000E3 87 04            [24]  295 	mov	ar4,@r1
      0000E5 09               [12]  296 	inc	r1
      0000E6 87 05            [24]  297 	mov	ar5,@r1
      0000E8 09               [12]  298 	inc	r1
      0000E9 87 06            [24]  299 	mov	ar6,@r1
      0000EB 09               [12]  300 	inc	r1
      0000EC 87 07            [24]  301 	mov	ar7,@r1
      0000EE 19               [12]  302 	dec	r1
      0000EF 19               [12]  303 	dec	r1
      0000F0 19               [12]  304 	dec	r1
                                    305 ;	printf_large.c:171: unsigned char _AUTOMEM * pb4 = &value->byte[4];
      0000F1 74 04            [12]  306 	mov	a,#0x04
      0000F3 29               [12]  307 	add	a,r1
      0000F4 F8               [12]  308 	mov	r0,a
                                    309 ;	printf_large.c:172: unsigned char i = 32;
      0000F5 7B 20            [12]  310 	mov	r3,#0x20
                                    311 ;	printf_large.c:174: do
      0000F7                        312 00103$:
                                    313 ;	printf_large.c:176: *pb4 = (*pb4 << 1) | ((ul >> 31) & 0x01);
      0000F7 C0 03            [24]  314 	push	ar3
      0000F9 E6               [12]  315 	mov	a,@r0
      0000FA 26               [12]  316 	add	a,@r0
      0000FB FA               [12]  317 	mov	r2,a
      0000FC EF               [12]  318 	mov	a,r7
      0000FD 23               [12]  319 	rl	a
      0000FE 54 01            [12]  320 	anl	a,#0x01
      000100 FB               [12]  321 	mov	r3,a
      000101 EA               [12]  322 	mov	a,r2
      000102 42 03            [12]  323 	orl	ar3,a
      000104 A6 03            [24]  324 	mov	@r0,ar3
                                    325 ;	printf_large.c:177: ul <<= 1;
      000106 EC               [12]  326 	mov	a,r4
      000107 2C               [12]  327 	add	a,r4
      000108 FC               [12]  328 	mov	r4,a
      000109 ED               [12]  329 	mov	a,r5
      00010A 33               [12]  330 	rlc	a
      00010B FD               [12]  331 	mov	r5,a
      00010C EE               [12]  332 	mov	a,r6
      00010D 33               [12]  333 	rlc	a
      00010E FE               [12]  334 	mov	r6,a
      00010F EF               [12]  335 	mov	a,r7
      000110 33               [12]  336 	rlc	a
      000111 FF               [12]  337 	mov	r7,a
                                    338 ;	printf_large.c:179: if (radix <= *pb4 )
      000112 86 02            [24]  339 	mov	ar2,@r0
      000114 C0 00            [24]  340 	push	ar0
      000116 E5*00            [12]  341 	mov	a,_bp
      000118 24 FC            [12]  342 	add	a,#0xfc
      00011A F8               [12]  343 	mov	r0,a
      00011B C3               [12]  344 	clr	c
      00011C EA               [12]  345 	mov	a,r2
      00011D 96               [12]  346 	subb	a,@r0
      00011E D0 00            [24]  347 	pop	ar0
      000120 D0 03            [24]  348 	pop	ar3
      000122 40 12            [24]  349 	jc	00104$
                                    350 ;	printf_large.c:181: *pb4 -= radix;
      000124 C0 00            [24]  351 	push	ar0
      000126 E5*00            [12]  352 	mov	a,_bp
      000128 24 FC            [12]  353 	add	a,#0xfc
      00012A F8               [12]  354 	mov	r0,a
      00012B EA               [12]  355 	mov	a,r2
      00012C C3               [12]  356 	clr	c
      00012D 96               [12]  357 	subb	a,@r0
      00012E FA               [12]  358 	mov	r2,a
      00012F D0 00            [24]  359 	pop	ar0
      000131 A6 02            [24]  360 	mov	@r0,ar2
                                    361 ;	printf_large.c:182: ul |= 1;
      000133 43 04 01         [24]  362 	orl	ar4,#0x01
      000136                        363 00104$:
                                    364 ;	printf_large.c:184: } while (--i);
      000136 EB               [12]  365 	mov	a,r3
      000137 14               [12]  366 	dec	a
      000138 FA               [12]  367 	mov	r2,a
      000139 FB               [12]  368 	mov	r3,a
      00013A 70 BB            [24]  369 	jnz	00103$
                                    370 ;	printf_large.c:185: value->ul = ul;
      00013C A7 04            [24]  371 	mov	@r1,ar4
      00013E 09               [12]  372 	inc	r1
      00013F A7 05            [24]  373 	mov	@r1,ar5
      000141 09               [12]  374 	inc	r1
      000142 A7 06            [24]  375 	mov	@r1,ar6
      000144 09               [12]  376 	inc	r1
      000145 A7 07            [24]  377 	mov	@r1,ar7
      000147 D0*00            [24]  378 	pop	_bp
      000149 02r00r00         [24]  379 	ljmp	__sdcc_banked_ret
                                    380 ;------------------------------------------------------------
                                    381 ;Allocation info for local variables in function 'output_float'
                                    382 ;------------------------------------------------------------
                                    383 ;reqWidth                  Allocated to stack - _bp -4
                                    384 ;reqDecimals               Allocated to stack - _bp -5
                                    385 ;output_char               Allocated to stack - _bp -8
                                    386 ;p                         Allocated to stack - _bp -11
                                    387 ;space                     Allocated to registers b3 
                                    388 ;sign                      Allocated to registers b2 
                                    389 ;zero                      Allocated to registers b1 
                                    390 ;left                      Allocated to registers b0 
                                    391 ;f                         Allocated to stack - _bp +1
                                    392 ;charsOutputted            Allocated to stack - _bp +10
                                    393 ;fpBuffer                  Allocated to stack - _bp +11
                                    394 ;negative                  Allocated to registers b4 
                                    395 ;integerPart               Allocated to stack - _bp +27
                                    396 ;rounding                  Allocated to registers r3 r5 r6 r7 
                                    397 ;decimalPart               Allocated to stack - _bp +31
                                    398 ;fpBI                      Allocated to registers r7 
                                    399 ;fpBD                      Allocated to stack - _bp +35
                                    400 ;minWidth                  Allocated to registers r6 
                                    401 ;i                         Allocated to registers r4 
                                    402 ;exp                       Allocated to stack - _bp +9
                                    403 ;sloc0                     Allocated to stack - _bp +44
                                    404 ;sloc1                     Allocated to stack - _bp +5
                                    405 ;sloc2                     Allocated to stack - _bp +9
                                    406 ;------------------------------------------------------------
                                    407 ;	printf_large.c:227: output_float (float f, unsigned char reqWidth,
                                    408 ;	-----------------------------------------
                                    409 ;	 function output_float
                                    410 ;	-----------------------------------------
      00014C                        411 _output_float:
      00014C C0*00            [24]  412 	push	_bp
      00014E 85 81*00         [24]  413 	mov	_bp,sp
      000151 C0 82            [24]  414 	push	dpl
      000153 C0 83            [24]  415 	push	dph
      000155 C0 F0            [24]  416 	push	b
      000157 C0 E0            [24]  417 	push	acc
      000159 E5 81            [12]  418 	mov	a,sp
      00015B 24 1F            [12]  419 	add	a,#0x1F
      00015D F5 81            [12]  420 	mov	sp,a
                                    421 ;	printf_large.c:232: unsigned char charsOutputted = 0;
      00015F E5*00            [12]  422 	mov	a,_bp
      000161 24 0A            [12]  423 	add	a,#0x0a
      000163 F8               [12]  424 	mov	r0,a
      000164 76 00            [12]  425 	mov	@r0,#0x00
                                    426 ;	printf_large.c:247: bool negative = 0;
      000166 C2*00            [12]  427 	clr	b4
                                    428 ;	printf_large.c:253: signed char exp = -128;
      000168 E5*00            [12]  429 	mov	a,_bp
      00016A 24 09            [12]  430 	add	a,#0x09
      00016C F8               [12]  431 	mov	r0,a
      00016D 76 80            [12]  432 	mov	@r0,#0x80
                                    433 ;	printf_large.c:256: if (f<0)
      00016F C0*00            [24]  434 	push	bits
      000171 E4               [12]  435 	clr	a
      000172 C0 E0            [24]  436 	push	acc
      000174 C0 E0            [24]  437 	push	acc
      000176 C0 E0            [24]  438 	push	acc
      000178 C0 E0            [24]  439 	push	acc
      00017A A8*00            [24]  440 	mov	r0,_bp
      00017C 08               [12]  441 	inc	r0
      00017D 86 82            [24]  442 	mov	dpl,@r0
      00017F 08               [12]  443 	inc	r0
      000180 86 83            [24]  444 	mov	dph,@r0
      000182 08               [12]  445 	inc	r0
      000183 86 F0            [24]  446 	mov	b,@r0
      000185 08               [12]  447 	inc	r0
      000186 E6               [12]  448 	mov	a,@r0
      000187 12r00r00         [24]  449 	lcall	___fslt
      00018A AB 82            [24]  450 	mov	r3,dpl
      00018C E5 81            [12]  451 	mov	a,sp
      00018E 24 FC            [12]  452 	add	a,#0xfc
      000190 F5 81            [12]  453 	mov	sp,a
      000192 D0*00            [24]  454 	pop	bits
      000194 EB               [12]  455 	mov	a,r3
      000195 60 12            [24]  456 	jz	00102$
                                    457 ;	printf_large.c:258: negative=1;
      000197 D2*00            [12]  458 	setb	b4
                                    459 ;	printf_large.c:259: f=-f;
      000199 A8*00            [24]  460 	mov	r0,_bp
      00019B 08               [12]  461 	inc	r0
      00019C E6               [12]  462 	mov	a,@r0
      00019D F6               [12]  463 	mov	@r0,a
      00019E 08               [12]  464 	inc	r0
      00019F E6               [12]  465 	mov	a,@r0
      0001A0 F6               [12]  466 	mov	@r0,a
      0001A1 08               [12]  467 	inc	r0
      0001A2 E6               [12]  468 	mov	a,@r0
      0001A3 F6               [12]  469 	mov	@r0,a
      0001A4 08               [12]  470 	inc	r0
      0001A5 E6               [12]  471 	mov	a,@r0
      0001A6 B2 E7            [12]  472 	cpl	acc.7
      0001A8 F6               [12]  473 	mov	@r0,a
      0001A9                        474 00102$:
                                    475 ;	printf_large.c:262: if (f>0x00ffffff)
      0001A9 C0*00            [24]  476 	push	bits
      0001AB 74 FF            [12]  477 	mov	a,#0xFF
      0001AD C0 E0            [24]  478 	push	acc
      0001AF C0 E0            [24]  479 	push	acc
      0001B1 74 7F            [12]  480 	mov	a,#0x7F
      0001B3 C0 E0            [24]  481 	push	acc
      0001B5 74 4B            [12]  482 	mov	a,#0x4B
      0001B7 C0 E0            [24]  483 	push	acc
      0001B9 A8*00            [24]  484 	mov	r0,_bp
      0001BB 08               [12]  485 	inc	r0
      0001BC 86 82            [24]  486 	mov	dpl,@r0
      0001BE 08               [12]  487 	inc	r0
      0001BF 86 83            [24]  488 	mov	dph,@r0
      0001C1 08               [12]  489 	inc	r0
      0001C2 86 F0            [24]  490 	mov	b,@r0
      0001C4 08               [12]  491 	inc	r0
      0001C5 E6               [12]  492 	mov	a,@r0
      0001C6 12r00r00         [24]  493 	lcall	___fsgt
      0001C9 AB 82            [24]  494 	mov	r3,dpl
      0001CB E5 81            [12]  495 	mov	a,sp
      0001CD 24 FC            [12]  496 	add	a,#0xfc
      0001CF F5 81            [12]  497 	mov	sp,a
      0001D1 D0*00            [24]  498 	pop	bits
      0001D3 EB               [12]  499 	mov	a,r3
      0001D4 70 03            [24]  500 	jnz	00348$
      0001D6 02r03r49         [24]  501 	ljmp	00111$
      0001D9                        502 00348$:
                                    503 ;	printf_large.c:266: for (exp = 0; f >= 10.0; exp++) f /=10.0;
      0001D9 7F 00            [12]  504 	mov	r7,#0x00
      0001DB                        505 00181$:
      0001DB C0 07            [24]  506 	push	ar7
      0001DD C0*00            [24]  507 	push	bits
      0001DF E4               [12]  508 	clr	a
      0001E0 C0 E0            [24]  509 	push	acc
      0001E2 C0 E0            [24]  510 	push	acc
      0001E4 74 20            [12]  511 	mov	a,#0x20
      0001E6 C0 E0            [24]  512 	push	acc
      0001E8 74 41            [12]  513 	mov	a,#0x41
      0001EA C0 E0            [24]  514 	push	acc
      0001EC A8*00            [24]  515 	mov	r0,_bp
      0001EE 08               [12]  516 	inc	r0
      0001EF 86 82            [24]  517 	mov	dpl,@r0
      0001F1 08               [12]  518 	inc	r0
      0001F2 86 83            [24]  519 	mov	dph,@r0
      0001F4 08               [12]  520 	inc	r0
      0001F5 86 F0            [24]  521 	mov	b,@r0
      0001F7 08               [12]  522 	inc	r0
      0001F8 E6               [12]  523 	mov	a,@r0
      0001F9 12r00r00         [24]  524 	lcall	___fslt
      0001FC AB 82            [24]  525 	mov	r3,dpl
      0001FE E5 81            [12]  526 	mov	a,sp
      000200 24 FC            [12]  527 	add	a,#0xfc
      000202 F5 81            [12]  528 	mov	sp,a
      000204 D0*00            [24]  529 	pop	bits
      000206 D0 07            [24]  530 	pop	ar7
      000208 EB               [12]  531 	mov	a,r3
      000209 70 3B            [24]  532 	jnz	00205$
      00020B C0 07            [24]  533 	push	ar7
      00020D C0*00            [24]  534 	push	bits
      00020F E4               [12]  535 	clr	a
      000210 C0 E0            [24]  536 	push	acc
      000212 C0 E0            [24]  537 	push	acc
      000214 74 20            [12]  538 	mov	a,#0x20
      000216 C0 E0            [24]  539 	push	acc
      000218 74 41            [12]  540 	mov	a,#0x41
      00021A C0 E0            [24]  541 	push	acc
      00021C A8*00            [24]  542 	mov	r0,_bp
      00021E 08               [12]  543 	inc	r0
      00021F 86 82            [24]  544 	mov	dpl,@r0
      000221 08               [12]  545 	inc	r0
      000222 86 83            [24]  546 	mov	dph,@r0
      000224 08               [12]  547 	inc	r0
      000225 86 F0            [24]  548 	mov	b,@r0
      000227 08               [12]  549 	inc	r0
      000228 E6               [12]  550 	mov	a,@r0
      000229 12r00r00         [24]  551 	lcall	___fsdiv
      00022C A8*00            [24]  552 	mov	r0,_bp
      00022E 08               [12]  553 	inc	r0
      00022F A6 82            [24]  554 	mov	@r0,dpl
      000231 08               [12]  555 	inc	r0
      000232 A6 83            [24]  556 	mov	@r0,dph
      000234 08               [12]  557 	inc	r0
      000235 A6 F0            [24]  558 	mov	@r0,b
      000237 08               [12]  559 	inc	r0
      000238 F6               [12]  560 	mov	@r0,a
      000239 E5 81            [12]  561 	mov	a,sp
      00023B 24 FC            [12]  562 	add	a,#0xfc
      00023D F5 81            [12]  563 	mov	sp,a
      00023F D0*00            [24]  564 	pop	bits
      000241 D0 07            [24]  565 	pop	ar7
      000243 0F               [12]  566 	inc	r7
      000244 80 95            [24]  567 	sjmp	00181$
      000246                        568 00205$:
      000246                        569 00184$:
                                    570 ;	printf_large.c:267: for (       ; f < 1.0;   exp--) f *=10.0;
      000246 C0 07            [24]  571 	push	ar7
      000248 C0*00            [24]  572 	push	bits
      00024A E4               [12]  573 	clr	a
      00024B C0 E0            [24]  574 	push	acc
      00024D C0 E0            [24]  575 	push	acc
      00024F 74 80            [12]  576 	mov	a,#0x80
      000251 C0 E0            [24]  577 	push	acc
      000253 74 3F            [12]  578 	mov	a,#0x3F
      000255 C0 E0            [24]  579 	push	acc
      000257 A8*00            [24]  580 	mov	r0,_bp
      000259 08               [12]  581 	inc	r0
      00025A 86 82            [24]  582 	mov	dpl,@r0
      00025C 08               [12]  583 	inc	r0
      00025D 86 83            [24]  584 	mov	dph,@r0
      00025F 08               [12]  585 	inc	r0
      000260 86 F0            [24]  586 	mov	b,@r0
      000262 08               [12]  587 	inc	r0
      000263 E6               [12]  588 	mov	a,@r0
      000264 12r00r00         [24]  589 	lcall	___fslt
      000267 AB 82            [24]  590 	mov	r3,dpl
      000269 E5 81            [12]  591 	mov	a,sp
      00026B 24 FC            [12]  592 	add	a,#0xfc
      00026D F5 81            [12]  593 	mov	sp,a
      00026F D0*00            [24]  594 	pop	bits
      000271 D0 07            [24]  595 	pop	ar7
      000273 EB               [12]  596 	mov	a,r3
      000274 60 3B            [24]  597 	jz	00246$
      000276 C0 07            [24]  598 	push	ar7
      000278 C0*00            [24]  599 	push	bits
      00027A A8*00            [24]  600 	mov	r0,_bp
      00027C 08               [12]  601 	inc	r0
      00027D E6               [12]  602 	mov	a,@r0
      00027E C0 E0            [24]  603 	push	acc
      000280 08               [12]  604 	inc	r0
      000281 E6               [12]  605 	mov	a,@r0
      000282 C0 E0            [24]  606 	push	acc
      000284 08               [12]  607 	inc	r0
      000285 E6               [12]  608 	mov	a,@r0
      000286 C0 E0            [24]  609 	push	acc
      000288 08               [12]  610 	inc	r0
      000289 E6               [12]  611 	mov	a,@r0
      00028A C0 E0            [24]  612 	push	acc
      00028C 90 00 00         [24]  613 	mov	dptr,#0x0000
      00028F 75 F0 20         [24]  614 	mov	b,#0x20
      000292 74 41            [12]  615 	mov	a,#0x41
      000294 12r00r00         [24]  616 	lcall	___fsmul
      000297 A8*00            [24]  617 	mov	r0,_bp
      000299 08               [12]  618 	inc	r0
      00029A A6 82            [24]  619 	mov	@r0,dpl
      00029C 08               [12]  620 	inc	r0
      00029D A6 83            [24]  621 	mov	@r0,dph
      00029F 08               [12]  622 	inc	r0
      0002A0 A6 F0            [24]  623 	mov	@r0,b
      0002A2 08               [12]  624 	inc	r0
      0002A3 F6               [12]  625 	mov	@r0,a
      0002A4 E5 81            [12]  626 	mov	a,sp
      0002A6 24 FC            [12]  627 	add	a,#0xfc
      0002A8 F5 81            [12]  628 	mov	sp,a
      0002AA D0*00            [24]  629 	pop	bits
      0002AC D0 07            [24]  630 	pop	ar7
      0002AE 1F               [12]  631 	dec	r7
      0002AF 80 95            [24]  632 	sjmp	00184$
      0002B1                        633 00246$:
      0002B1 E5*00            [12]  634 	mov	a,_bp
      0002B3 24 09            [12]  635 	add	a,#0x09
      0002B5 F8               [12]  636 	mov	r0,a
      0002B6 A6 07            [24]  637 	mov	@r0,ar7
                                    638 ;	printf_large.c:269: if (negative)
      0002B8 30*00 3F         [24]  639 	jnb	b4,00108$
                                    640 ;	printf_large.c:271: OUTPUT_CHAR ('-', p);
      0002BB C0*00            [24]  641 	push	bits
      0002BD E5*00            [12]  642 	mov	a,_bp
      0002BF 24 F5            [12]  643 	add	a,#0xf5
      0002C1 F8               [12]  644 	mov	r0,a
      0002C2 E6               [12]  645 	mov	a,@r0
      0002C3 C0 E0            [24]  646 	push	acc
      0002C5 08               [12]  647 	inc	r0
      0002C6 E6               [12]  648 	mov	a,@r0
      0002C7 C0 E0            [24]  649 	push	acc
      0002C9 08               [12]  650 	inc	r0
      0002CA E6               [12]  651 	mov	a,@r0
      0002CB C0 E0            [24]  652 	push	acc
      0002CD E5*00            [12]  653 	mov	a,_bp
      0002CF 24 F8            [12]  654 	add	a,#0xf8
      0002D1 F8               [12]  655 	mov	r0,a
      0002D2 E6               [12]  656 	mov	a,@r0
      0002D3 C0 E0            [24]  657 	push	acc
      0002D5 08               [12]  658 	inc	r0
      0002D6 E6               [12]  659 	mov	a,@r0
      0002D7 C0 E0            [24]  660 	push	acc
      0002D9 08               [12]  661 	inc	r0
      0002DA E6               [12]  662 	mov	a,@r0
      0002DB C0 E0            [24]  663 	push	acc
      0002DD 75 82 2D         [24]  664 	mov	dpl,#0x2D
      0002E0 D0 02            [24]  665 	pop	ar2
      0002E2 D0 01            [24]  666 	pop	ar1
      0002E4 D0 00            [24]  667 	pop	ar0
      0002E6 12r00r00         [24]  668 	lcall	__sdcc_banked_call
      0002E9 15 81            [12]  669 	dec	sp
      0002EB 15 81            [12]  670 	dec	sp
      0002ED 15 81            [12]  671 	dec	sp
      0002EF D0*00            [24]  672 	pop	bits
      0002F1 E5*00            [12]  673 	mov	a,_bp
      0002F3 24 0A            [12]  674 	add	a,#0x0a
      0002F5 F8               [12]  675 	mov	r0,a
      0002F6 76 01            [12]  676 	mov	@r0,#0x01
      0002F8 80 40            [24]  677 	sjmp	00109$
      0002FA                        678 00108$:
                                    679 ;	printf_large.c:275: if (sign)
      0002FA 30*00 3D         [24]  680 	jnb	b2,00109$
                                    681 ;	printf_large.c:277: OUTPUT_CHAR ('+', p);
      0002FD C0*00            [24]  682 	push	bits
      0002FF E5*00            [12]  683 	mov	a,_bp
      000301 24 F5            [12]  684 	add	a,#0xf5
      000303 F8               [12]  685 	mov	r0,a
      000304 E6               [12]  686 	mov	a,@r0
      000305 C0 E0            [24]  687 	push	acc
      000307 08               [12]  688 	inc	r0
      000308 E6               [12]  689 	mov	a,@r0
      000309 C0 E0            [24]  690 	push	acc
      00030B 08               [12]  691 	inc	r0
      00030C E6               [12]  692 	mov	a,@r0
      00030D C0 E0            [24]  693 	push	acc
      00030F E5*00            [12]  694 	mov	a,_bp
      000311 24 F8            [12]  695 	add	a,#0xf8
      000313 F8               [12]  696 	mov	r0,a
      000314 E6               [12]  697 	mov	a,@r0
      000315 C0 E0            [24]  698 	push	acc
      000317 08               [12]  699 	inc	r0
      000318 E6               [12]  700 	mov	a,@r0
      000319 C0 E0            [24]  701 	push	acc
      00031B 08               [12]  702 	inc	r0
      00031C E6               [12]  703 	mov	a,@r0
      00031D C0 E0            [24]  704 	push	acc
      00031F 75 82 2B         [24]  705 	mov	dpl,#0x2B
      000322 D0 02            [24]  706 	pop	ar2
      000324 D0 01            [24]  707 	pop	ar1
      000326 D0 00            [24]  708 	pop	ar0
      000328 12r00r00         [24]  709 	lcall	__sdcc_banked_call
      00032B 15 81            [12]  710 	dec	sp
      00032D 15 81            [12]  711 	dec	sp
      00032F 15 81            [12]  712 	dec	sp
      000331 D0*00            [24]  713 	pop	bits
      000333 E5*00            [12]  714 	mov	a,_bp
      000335 24 0A            [12]  715 	add	a,#0x0a
      000337 F8               [12]  716 	mov	r0,a
      000338 76 01            [12]  717 	mov	@r0,#0x01
      00033A                        718 00109$:
                                    719 ;	printf_large.c:280: reqWidth = 0;
      00033A E5*00            [12]  720 	mov	a,_bp
      00033C 24 FC            [12]  721 	add	a,#0xfc
      00033E F8               [12]  722 	mov	r0,a
      00033F 76 00            [12]  723 	mov	@r0,#0x00
                                    724 ;	printf_large.c:281: left = 0;
      000341 C2*00            [12]  725 	clr	b0
                                    726 ;	printf_large.c:282: zero = 0;
      000343 C2*00            [12]  727 	clr	b1
                                    728 ;	printf_large.c:283: sign = 0;
      000345 C2*00            [12]  729 	clr	b2
                                    730 ;	printf_large.c:284: space = 0;
      000347 C2*00            [12]  731 	clr	b3
      000349                        732 00111$:
                                    733 ;	printf_large.c:288: if (reqDecimals==-1)
      000349 E5*00            [12]  734 	mov	a,_bp
      00034B 24 FB            [12]  735 	add	a,#0xfb
      00034D F8               [12]  736 	mov	r0,a
      00034E B6 FF 07         [24]  737 	cjne	@r0,#0xFF,00113$
                                    738 ;	printf_large.c:289: reqDecimals=DEFAULT_FLOAT_PRECISION;
      000351 E5*00            [12]  739 	mov	a,_bp
      000353 24 FB            [12]  740 	add	a,#0xfb
      000355 F8               [12]  741 	mov	r0,a
      000356 76 06            [12]  742 	mov	@r0,#0x06
      000358                        743 00113$:
                                    744 ;	printf_large.c:292: rounding = 0.5;
      000358 7B 00            [12]  745 	mov	r3,#0x00
      00035A 7D 00            [12]  746 	mov	r5,#0x00
      00035C 7E 00            [12]  747 	mov	r6,#0x00
      00035E 7F 3F            [12]  748 	mov	r7,#0x3F
                                    749 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      000360 E5*00            [12]  750 	mov	a,_bp
      000362 24 FB            [12]  751 	add	a,#0xfb
      000364 F8               [12]  752 	mov	r0,a
      000365 86 04            [24]  753 	mov	ar4,@r0
      000367 8C 02            [24]  754 	mov	ar2,r4
      000369                        755 00187$:
      000369 EA               [12]  756 	mov	a,r2
      00036A 60 48            [24]  757 	jz	00114$
                                    758 ;	printf_large.c:295: rounding /= 10.0;
      00036C C0 02            [24]  759 	push	ar2
      00036E C0*00            [24]  760 	push	bits
      000370 E4               [12]  761 	clr	a
      000371 C0 E0            [24]  762 	push	acc
      000373 C0 E0            [24]  763 	push	acc
      000375 74 20            [12]  764 	mov	a,#0x20
      000377 C0 E0            [24]  765 	push	acc
      000379 74 41            [12]  766 	mov	a,#0x41
      00037B C0 E0            [24]  767 	push	acc
      00037D 8B 82            [24]  768 	mov	dpl,r3
      00037F 8D 83            [24]  769 	mov	dph,r5
      000381 8E F0            [24]  770 	mov	b,r6
      000383 EF               [12]  771 	mov	a,r7
      000384 12r00r00         [24]  772 	lcall	___fsdiv
      000387 C8               [12]  773 	xch	a,r0
      000388 E5*00            [12]  774 	mov	a,_bp
      00038A 24 05            [12]  775 	add	a,#0x05
      00038C C8               [12]  776 	xch	a,r0
      00038D A6 82            [24]  777 	mov	@r0,dpl
      00038F 08               [12]  778 	inc	r0
      000390 A6 83            [24]  779 	mov	@r0,dph
      000392 08               [12]  780 	inc	r0
      000393 A6 F0            [24]  781 	mov	@r0,b
      000395 08               [12]  782 	inc	r0
      000396 F6               [12]  783 	mov	@r0,a
      000397 E5 81            [12]  784 	mov	a,sp
      000399 24 FC            [12]  785 	add	a,#0xfc
      00039B F5 81            [12]  786 	mov	sp,a
      00039D D0*00            [24]  787 	pop	bits
      00039F D0 02            [24]  788 	pop	ar2
      0003A1 E5*00            [12]  789 	mov	a,_bp
      0003A3 24 05            [12]  790 	add	a,#0x05
      0003A5 F8               [12]  791 	mov	r0,a
      0003A6 86 03            [24]  792 	mov	ar3,@r0
      0003A8 08               [12]  793 	inc	r0
      0003A9 86 05            [24]  794 	mov	ar5,@r0
      0003AB 08               [12]  795 	inc	r0
      0003AC 86 06            [24]  796 	mov	ar6,@r0
      0003AE 08               [12]  797 	inc	r0
      0003AF 86 07            [24]  798 	mov	ar7,@r0
                                    799 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0003B1 1A               [12]  800 	dec	r2
      0003B2 80 B5            [24]  801 	sjmp	00187$
      0003B4                        802 00114$:
                                    803 ;	printf_large.c:297: f += rounding;
      0003B4 C0*00            [24]  804 	push	bits
      0003B6 C0 03            [24]  805 	push	ar3
      0003B8 C0 05            [24]  806 	push	ar5
      0003BA C0 06            [24]  807 	push	ar6
      0003BC C0 07            [24]  808 	push	ar7
      0003BE A8*00            [24]  809 	mov	r0,_bp
      0003C0 08               [12]  810 	inc	r0
      0003C1 86 82            [24]  811 	mov	dpl,@r0
      0003C3 08               [12]  812 	inc	r0
      0003C4 86 83            [24]  813 	mov	dph,@r0
      0003C6 08               [12]  814 	inc	r0
      0003C7 86 F0            [24]  815 	mov	b,@r0
      0003C9 08               [12]  816 	inc	r0
      0003CA E6               [12]  817 	mov	a,@r0
      0003CB 12r00r00         [24]  818 	lcall	___fsadd
      0003CE A8*00            [24]  819 	mov	r0,_bp
      0003D0 08               [12]  820 	inc	r0
      0003D1 A6 82            [24]  821 	mov	@r0,dpl
      0003D3 08               [12]  822 	inc	r0
      0003D4 A6 83            [24]  823 	mov	@r0,dph
      0003D6 08               [12]  824 	inc	r0
      0003D7 A6 F0            [24]  825 	mov	@r0,b
      0003D9 08               [12]  826 	inc	r0
      0003DA F6               [12]  827 	mov	@r0,a
      0003DB E5 81            [12]  828 	mov	a,sp
      0003DD 24 FC            [12]  829 	add	a,#0xfc
      0003DF F5 81            [12]  830 	mov	sp,a
      0003E1 D0*00            [24]  831 	pop	bits
                                    832 ;	printf_large.c:300: integerPart = f;
      0003E3 A8*00            [24]  833 	mov	r0,_bp
      0003E5 08               [12]  834 	inc	r0
      0003E6 86 82            [24]  835 	mov	dpl,@r0
      0003E8 08               [12]  836 	inc	r0
      0003E9 86 83            [24]  837 	mov	dph,@r0
      0003EB 08               [12]  838 	inc	r0
      0003EC 86 F0            [24]  839 	mov	b,@r0
      0003EE 08               [12]  840 	inc	r0
      0003EF E6               [12]  841 	mov	a,@r0
      0003F0 C0*00            [24]  842 	push	bits
      0003F2 12r00r00         [24]  843 	lcall	___fs2ulong
      0003F5 AB 82            [24]  844 	mov	r3,dpl
      0003F7 AD 83            [24]  845 	mov	r5,dph
      0003F9 AE F0            [24]  846 	mov	r6,b
      0003FB FF               [12]  847 	mov	r7,a
      0003FC D0*00            [24]  848 	pop	bits
      0003FE E5*00            [12]  849 	mov	a,_bp
      000400 24 1B            [12]  850 	add	a,#0x1b
      000402 F8               [12]  851 	mov	r0,a
      000403 A6 03            [24]  852 	mov	@r0,ar3
      000405 08               [12]  853 	inc	r0
      000406 A6 05            [24]  854 	mov	@r0,ar5
      000408 08               [12]  855 	inc	r0
      000409 A6 06            [24]  856 	mov	@r0,ar6
      00040B 08               [12]  857 	inc	r0
      00040C A6 07            [24]  858 	mov	@r0,ar7
                                    859 ;	printf_large.c:301: decimalPart = f - integerPart;
      00040E E5*00            [12]  860 	mov	a,_bp
      000410 24 1B            [12]  861 	add	a,#0x1b
      000412 F8               [12]  862 	mov	r0,a
      000413 86 82            [24]  863 	mov	dpl,@r0
      000415 08               [12]  864 	inc	r0
      000416 86 83            [24]  865 	mov	dph,@r0
      000418 08               [12]  866 	inc	r0
      000419 86 F0            [24]  867 	mov	b,@r0
      00041B 08               [12]  868 	inc	r0
      00041C E6               [12]  869 	mov	a,@r0
      00041D C0*00            [24]  870 	push	bits
      00041F 12r00r00         [24]  871 	lcall	___ulong2fs
      000422 AA 82            [24]  872 	mov	r2,dpl
      000424 AD 83            [24]  873 	mov	r5,dph
      000426 AE F0            [24]  874 	mov	r6,b
      000428 FF               [12]  875 	mov	r7,a
      000429 D0*00            [24]  876 	pop	bits
      00042B C0*00            [24]  877 	push	bits
      00042D C0 02            [24]  878 	push	ar2
      00042F C0 05            [24]  879 	push	ar5
      000431 C0 06            [24]  880 	push	ar6
      000433 C0 07            [24]  881 	push	ar7
      000435 A8*00            [24]  882 	mov	r0,_bp
      000437 08               [12]  883 	inc	r0
      000438 86 82            [24]  884 	mov	dpl,@r0
      00043A 08               [12]  885 	inc	r0
      00043B 86 83            [24]  886 	mov	dph,@r0
      00043D 08               [12]  887 	inc	r0
      00043E 86 F0            [24]  888 	mov	b,@r0
      000440 08               [12]  889 	inc	r0
      000441 E6               [12]  890 	mov	a,@r0
      000442 12r00r00         [24]  891 	lcall	___fssub
      000445 AB 82            [24]  892 	mov	r3,dpl
      000447 AD 83            [24]  893 	mov	r5,dph
      000449 AE F0            [24]  894 	mov	r6,b
      00044B FF               [12]  895 	mov	r7,a
      00044C E5 81            [12]  896 	mov	a,sp
      00044E 24 FC            [12]  897 	add	a,#0xfc
      000450 F5 81            [12]  898 	mov	sp,a
      000452 D0*00            [24]  899 	pop	bits
      000454 E5*00            [12]  900 	mov	a,_bp
      000456 24 1F            [12]  901 	add	a,#0x1f
      000458 F8               [12]  902 	mov	r0,a
      000459 A6 03            [24]  903 	mov	@r0,ar3
      00045B 08               [12]  904 	inc	r0
      00045C A6 05            [24]  905 	mov	@r0,ar5
      00045E 08               [12]  906 	inc	r0
      00045F A6 06            [24]  907 	mov	@r0,ar6
      000461 08               [12]  908 	inc	r0
      000462 A6 07            [24]  909 	mov	@r0,ar7
                                    910 ;	printf_large.c:304: while (integerPart)
      000464 E5*00            [12]  911 	mov	a,_bp
      000466 24 05            [12]  912 	add	a,#0x05
      000468 F8               [12]  913 	mov	r0,a
      000469 E5*00            [12]  914 	mov	a,_bp
      00046B 24 0B            [12]  915 	add	a,#0x0B
      00046D F6               [12]  916 	mov	@r0,a
      00046E 7C 00            [12]  917 	mov	r4,#0x00
                                    918 ;	printf_large.c:426: return charsOutputted;
                                    919 ;	printf_large.c:304: while (integerPart)
      000470                        920 00115$:
      000470 E5*00            [12]  921 	mov	a,_bp
      000472 24 1B            [12]  922 	add	a,#0x1b
      000474 F8               [12]  923 	mov	r0,a
      000475 E6               [12]  924 	mov	a,@r0
      000476 08               [12]  925 	inc	r0
      000477 46               [12]  926 	orl	a,@r0
      000478 08               [12]  927 	inc	r0
      000479 46               [12]  928 	orl	a,@r0
      00047A 08               [12]  929 	inc	r0
      00047B 46               [12]  930 	orl	a,@r0
      00047C 70 03            [24]  931 	jnz	00356$
      00047E 02r05r02         [24]  932 	ljmp	00248$
      000481                        933 00356$:
                                    934 ;	printf_large.c:306: fpBuffer[fpBI++]='0' + integerPart%10;
      000481 8C 07            [24]  935 	mov	ar7,r4
      000483 0C               [12]  936 	inc	r4
      000484 E5*00            [12]  937 	mov	a,_bp
      000486 24 05            [12]  938 	add	a,#0x05
      000488 F8               [12]  939 	mov	r0,a
      000489 EF               [12]  940 	mov	a,r7
      00048A 26               [12]  941 	add	a,@r0
      00048B F9               [12]  942 	mov	r1,a
      00048C C0 04            [24]  943 	push	ar4
      00048E C0 01            [24]  944 	push	ar1
      000490 C0*00            [24]  945 	push	bits
      000492 74 0A            [12]  946 	mov	a,#0x0A
      000494 C0 E0            [24]  947 	push	acc
      000496 E4               [12]  948 	clr	a
      000497 C0 E0            [24]  949 	push	acc
      000499 C0 E0            [24]  950 	push	acc
      00049B C0 E0            [24]  951 	push	acc
      00049D E5*00            [12]  952 	mov	a,_bp
      00049F 24 1B            [12]  953 	add	a,#0x1b
      0004A1 F8               [12]  954 	mov	r0,a
      0004A2 86 82            [24]  955 	mov	dpl,@r0
      0004A4 08               [12]  956 	inc	r0
      0004A5 86 83            [24]  957 	mov	dph,@r0
      0004A7 08               [12]  958 	inc	r0
      0004A8 86 F0            [24]  959 	mov	b,@r0
      0004AA 08               [12]  960 	inc	r0
      0004AB E6               [12]  961 	mov	a,@r0
      0004AC 12r00r00         [24]  962 	lcall	__modulong
      0004AF AB 82            [24]  963 	mov	r3,dpl
      0004B1 E5 81            [12]  964 	mov	a,sp
      0004B3 24 FC            [12]  965 	add	a,#0xfc
      0004B5 F5 81            [12]  966 	mov	sp,a
      0004B7 D0*00            [24]  967 	pop	bits
      0004B9 D0 01            [24]  968 	pop	ar1
      0004BB 74 30            [12]  969 	mov	a,#0x30
      0004BD 2B               [12]  970 	add	a,r3
      0004BE F7               [12]  971 	mov	@r1,a
                                    972 ;	printf_large.c:307: integerPart /= 10;
      0004BF C0*00            [24]  973 	push	bits
      0004C1 74 0A            [12]  974 	mov	a,#0x0A
      0004C3 C0 E0            [24]  975 	push	acc
      0004C5 E4               [12]  976 	clr	a
      0004C6 C0 E0            [24]  977 	push	acc
      0004C8 C0 E0            [24]  978 	push	acc
      0004CA C0 E0            [24]  979 	push	acc
      0004CC E5*00            [12]  980 	mov	a,_bp
      0004CE 24 1B            [12]  981 	add	a,#0x1b
      0004D0 F8               [12]  982 	mov	r0,a
      0004D1 86 82            [24]  983 	mov	dpl,@r0
      0004D3 08               [12]  984 	inc	r0
      0004D4 86 83            [24]  985 	mov	dph,@r0
      0004D6 08               [12]  986 	inc	r0
      0004D7 86 F0            [24]  987 	mov	b,@r0
      0004D9 08               [12]  988 	inc	r0
      0004DA E6               [12]  989 	mov	a,@r0
      0004DB 12r00r00         [24]  990 	lcall	__divulong
      0004DE AB 82            [24]  991 	mov	r3,dpl
      0004E0 AD 83            [24]  992 	mov	r5,dph
      0004E2 AE F0            [24]  993 	mov	r6,b
      0004E4 FF               [12]  994 	mov	r7,a
      0004E5 E5 81            [12]  995 	mov	a,sp
      0004E7 24 FC            [12]  996 	add	a,#0xfc
      0004E9 F5 81            [12]  997 	mov	sp,a
      0004EB D0*00            [24]  998 	pop	bits
      0004ED D0 04            [24]  999 	pop	ar4
      0004EF E5*00            [12] 1000 	mov	a,_bp
      0004F1 24 1B            [12] 1001 	add	a,#0x1b
      0004F3 F8               [12] 1002 	mov	r0,a
      0004F4 A6 03            [24] 1003 	mov	@r0,ar3
      0004F6 08               [12] 1004 	inc	r0
      0004F7 A6 05            [24] 1005 	mov	@r0,ar5
      0004F9 08               [12] 1006 	inc	r0
      0004FA A6 06            [24] 1007 	mov	@r0,ar6
      0004FC 08               [12] 1008 	inc	r0
      0004FD A6 07            [24] 1009 	mov	@r0,ar7
      0004FF 02r04r70         [24] 1010 	ljmp	00115$
      000502                       1011 00248$:
                                   1012 ;	printf_large.c:309: if (!fpBI)
      000502 EC               [12] 1013 	mov	a,r4
      000503 FF               [12] 1014 	mov	r7,a
      000504 70 0D            [24] 1015 	jnz	00119$
                                   1016 ;	printf_large.c:312: fpBuffer[fpBI++]='0';
      000506 EC               [12] 1017 	mov	a,r4
      000507 04               [12] 1018 	inc	a
      000508 FF               [12] 1019 	mov	r7,a
      000509 E5*00            [12] 1020 	mov	a,_bp
      00050B 24 05            [12] 1021 	add	a,#0x05
      00050D F8               [12] 1022 	mov	r0,a
      00050E EC               [12] 1023 	mov	a,r4
      00050F 26               [12] 1024 	add	a,@r0
      000510 F8               [12] 1025 	mov	r0,a
      000511 76 30            [12] 1026 	mov	@r0,#0x30
      000513                       1027 00119$:
                                   1028 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      000513 E5*00            [12] 1029 	mov	a,_bp
      000515 24 FB            [12] 1030 	add	a,#0xfb
      000517 F8               [12] 1031 	mov	r0,a
      000518 86 04            [24] 1032 	mov	ar4,@r0
      00051A E5*00            [12] 1033 	mov	a,_bp
      00051C 24 23            [12] 1034 	add	a,#0x23
      00051E F8               [12] 1035 	mov	r0,a
      00051F A6 07            [24] 1036 	mov	@r0,ar7
      000521 8C 05            [24] 1037 	mov	ar5,r4
      000523                       1038 00190$:
      000523 ED               [12] 1039 	mov	a,r5
      000524 70 05            [24] 1040 	jnz	00189$
      000526 8D 04            [24] 1041 	mov	ar4,r5
      000528 02r06r1C         [24] 1042 	ljmp	00120$
      00052B                       1043 00189$:
                                   1044 ;	printf_large.c:320: decimalPart *= 10.0;
      00052B C0 07            [24] 1045 	push	ar7
      00052D C0 05            [24] 1046 	push	ar5
      00052F C0*00            [24] 1047 	push	bits
      000531 E5*00            [12] 1048 	mov	a,_bp
      000533 24 1F            [12] 1049 	add	a,#0x1f
      000535 F8               [12] 1050 	mov	r0,a
      000536 E6               [12] 1051 	mov	a,@r0
      000537 C0 E0            [24] 1052 	push	acc
      000539 08               [12] 1053 	inc	r0
      00053A E6               [12] 1054 	mov	a,@r0
      00053B C0 E0            [24] 1055 	push	acc
      00053D 08               [12] 1056 	inc	r0
      00053E E6               [12] 1057 	mov	a,@r0
      00053F C0 E0            [24] 1058 	push	acc
      000541 08               [12] 1059 	inc	r0
      000542 E6               [12] 1060 	mov	a,@r0
      000543 C0 E0            [24] 1061 	push	acc
      000545 90 00 00         [24] 1062 	mov	dptr,#0x0000
      000548 75 F0 20         [24] 1063 	mov	b,#0x20
      00054B 74 41            [12] 1064 	mov	a,#0x41
      00054D 12r00r00         [24] 1065 	lcall	___fsmul
      000550 AA 82            [24] 1066 	mov	r2,dpl
      000552 AB 83            [24] 1067 	mov	r3,dph
      000554 AE F0            [24] 1068 	mov	r6,b
      000556 FF               [12] 1069 	mov	r7,a
      000557 E5 81            [12] 1070 	mov	a,sp
      000559 24 FC            [12] 1071 	add	a,#0xfc
      00055B F5 81            [12] 1072 	mov	sp,a
      00055D D0*00            [24] 1073 	pop	bits
      00055F E5*00            [12] 1074 	mov	a,_bp
      000561 24 1F            [12] 1075 	add	a,#0x1f
      000563 F8               [12] 1076 	mov	r0,a
      000564 A6 02            [24] 1077 	mov	@r0,ar2
      000566 08               [12] 1078 	inc	r0
      000567 A6 03            [24] 1079 	mov	@r0,ar3
      000569 08               [12] 1080 	inc	r0
      00056A A6 06            [24] 1081 	mov	@r0,ar6
      00056C 08               [12] 1082 	inc	r0
      00056D A6 07            [24] 1083 	mov	@r0,ar7
                                   1084 ;	printf_large.c:322: integerPart = decimalPart;
      00056F E5*00            [12] 1085 	mov	a,_bp
      000571 24 1F            [12] 1086 	add	a,#0x1f
      000573 F8               [12] 1087 	mov	r0,a
      000574 86 82            [24] 1088 	mov	dpl,@r0
      000576 08               [12] 1089 	inc	r0
      000577 86 83            [24] 1090 	mov	dph,@r0
      000579 08               [12] 1091 	inc	r0
      00057A 86 F0            [24] 1092 	mov	b,@r0
      00057C 08               [12] 1093 	inc	r0
      00057D E6               [12] 1094 	mov	a,@r0
      00057E C0*00            [24] 1095 	push	bits
      000580 12r00r00         [24] 1096 	lcall	___fs2ulong
      000583 AA 82            [24] 1097 	mov	r2,dpl
      000585 AB 83            [24] 1098 	mov	r3,dph
      000587 AE F0            [24] 1099 	mov	r6,b
      000589 FF               [12] 1100 	mov	r7,a
      00058A D0*00            [24] 1101 	pop	bits
      00058C E5*00            [12] 1102 	mov	a,_bp
      00058E 24 1B            [12] 1103 	add	a,#0x1b
      000590 F8               [12] 1104 	mov	r0,a
      000591 A6 02            [24] 1105 	mov	@r0,ar2
      000593 08               [12] 1106 	inc	r0
      000594 A6 03            [24] 1107 	mov	@r0,ar3
      000596 08               [12] 1108 	inc	r0
      000597 A6 06            [24] 1109 	mov	@r0,ar6
      000599 08               [12] 1110 	inc	r0
      00059A A6 07            [24] 1111 	mov	@r0,ar7
                                   1112 ;	printf_large.c:323: fpBuffer[fpBD++] = '0' + integerPart;
      00059C E5*00            [12] 1113 	mov	a,_bp
      00059E 24 23            [12] 1114 	add	a,#0x23
      0005A0 F8               [12] 1115 	mov	r0,a
      0005A1 86 07            [24] 1116 	mov	ar7,@r0
      0005A3 E5*00            [12] 1117 	mov	a,_bp
      0005A5 24 23            [12] 1118 	add	a,#0x23
      0005A7 F8               [12] 1119 	mov	r0,a
      0005A8 06               [12] 1120 	inc	@r0
      0005A9 E5*00            [12] 1121 	mov	a,_bp
      0005AB 24 05            [12] 1122 	add	a,#0x05
      0005AD F8               [12] 1123 	mov	r0,a
      0005AE EF               [12] 1124 	mov	a,r7
      0005AF 26               [12] 1125 	add	a,@r0
      0005B0 F9               [12] 1126 	mov	r1,a
      0005B1 E5*00            [12] 1127 	mov	a,_bp
      0005B3 24 1B            [12] 1128 	add	a,#0x1b
      0005B5 F8               [12] 1129 	mov	r0,a
      0005B6 86 03            [24] 1130 	mov	ar3,@r0
      0005B8 74 30            [12] 1131 	mov	a,#0x30
      0005BA 2B               [12] 1132 	add	a,r3
      0005BB F7               [12] 1133 	mov	@r1,a
                                   1134 ;	printf_large.c:324: decimalPart -= integerPart;
      0005BC E5*00            [12] 1135 	mov	a,_bp
      0005BE 24 1B            [12] 1136 	add	a,#0x1b
      0005C0 F8               [12] 1137 	mov	r0,a
      0005C1 86 82            [24] 1138 	mov	dpl,@r0
      0005C3 08               [12] 1139 	inc	r0
      0005C4 86 83            [24] 1140 	mov	dph,@r0
      0005C6 08               [12] 1141 	inc	r0
      0005C7 86 F0            [24] 1142 	mov	b,@r0
      0005C9 08               [12] 1143 	inc	r0
      0005CA E6               [12] 1144 	mov	a,@r0
      0005CB C0*00            [24] 1145 	push	bits
      0005CD 12r00r00         [24] 1146 	lcall	___ulong2fs
      0005D0 AA 82            [24] 1147 	mov	r2,dpl
      0005D2 AB 83            [24] 1148 	mov	r3,dph
      0005D4 AE F0            [24] 1149 	mov	r6,b
      0005D6 FF               [12] 1150 	mov	r7,a
      0005D7 D0*00            [24] 1151 	pop	bits
      0005D9 C0*00            [24] 1152 	push	bits
      0005DB C0 02            [24] 1153 	push	ar2
      0005DD C0 03            [24] 1154 	push	ar3
      0005DF C0 06            [24] 1155 	push	ar6
      0005E1 C0 07            [24] 1156 	push	ar7
      0005E3 E5*00            [12] 1157 	mov	a,_bp
      0005E5 24 1F            [12] 1158 	add	a,#0x1f
      0005E7 F8               [12] 1159 	mov	r0,a
      0005E8 86 82            [24] 1160 	mov	dpl,@r0
      0005EA 08               [12] 1161 	inc	r0
      0005EB 86 83            [24] 1162 	mov	dph,@r0
      0005ED 08               [12] 1163 	inc	r0
      0005EE 86 F0            [24] 1164 	mov	b,@r0
      0005F0 08               [12] 1165 	inc	r0
      0005F1 E6               [12] 1166 	mov	a,@r0
      0005F2 12r00r00         [24] 1167 	lcall	___fssub
      0005F5 AA 82            [24] 1168 	mov	r2,dpl
      0005F7 AB 83            [24] 1169 	mov	r3,dph
      0005F9 AE F0            [24] 1170 	mov	r6,b
      0005FB FF               [12] 1171 	mov	r7,a
      0005FC E5 81            [12] 1172 	mov	a,sp
      0005FE 24 FC            [12] 1173 	add	a,#0xfc
      000600 F5 81            [12] 1174 	mov	sp,a
      000602 D0*00            [24] 1175 	pop	bits
      000604 D0 05            [24] 1176 	pop	ar5
      000606 E5*00            [12] 1177 	mov	a,_bp
      000608 24 1F            [12] 1178 	add	a,#0x1f
      00060A F8               [12] 1179 	mov	r0,a
      00060B A6 02            [24] 1180 	mov	@r0,ar2
      00060D 08               [12] 1181 	inc	r0
      00060E A6 03            [24] 1182 	mov	@r0,ar3
      000610 08               [12] 1183 	inc	r0
      000611 A6 06            [24] 1184 	mov	@r0,ar6
      000613 08               [12] 1185 	inc	r0
      000614 A6 07            [24] 1186 	mov	@r0,ar7
                                   1187 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      000616 1D               [12] 1188 	dec	r5
      000617 D0 07            [24] 1189 	pop	ar7
      000619 02r05r23         [24] 1190 	ljmp	00190$
      00061C                       1191 00120$:
                                   1192 ;	printf_large.c:327: minWidth=fpBI; // we need at least these
      00061C 8F 06            [24] 1193 	mov	ar6,r7
                                   1194 ;	printf_large.c:328: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
      00061E E5*00            [12] 1195 	mov	a,_bp
      000620 24 FB            [12] 1196 	add	a,#0xfb
      000622 F8               [12] 1197 	mov	r0,a
      000623 E6               [12] 1198 	mov	a,@r0
      000624 60 0A            [24] 1199 	jz	00198$
      000626 E5*00            [12] 1200 	mov	a,_bp
      000628 24 FB            [12] 1201 	add	a,#0xfb
      00062A F8               [12] 1202 	mov	r0,a
      00062B E6               [12] 1203 	mov	a,@r0
      00062C 04               [12] 1204 	inc	a
      00062D FD               [12] 1205 	mov	r5,a
      00062E 80 02            [24] 1206 	sjmp	00199$
      000630                       1207 00198$:
      000630 7D 00            [12] 1208 	mov	r5,#0x00
      000632                       1209 00199$:
      000632 8E 03            [24] 1210 	mov	ar3,r6
      000634 ED               [12] 1211 	mov	a,r5
      000635 2B               [12] 1212 	add	a,r3
      000636 FD               [12] 1213 	mov	r5,a
      000637 FE               [12] 1214 	mov	r6,a
                                   1215 ;	printf_large.c:329: if (negative || sign || space)
      000638 20*00 06         [24] 1216 	jb	b4,00121$
      00063B 20*00 03         [24] 1217 	jb	b2,00121$
      00063E 30*00 01         [24] 1218 	jnb	b3,00122$
      000641                       1219 00121$:
                                   1220 ;	printf_large.c:330: minWidth++; // and maybe even this :)
      000641 0E               [12] 1221 	inc	r6
      000642                       1222 00122$:
                                   1223 ;	printf_large.c:332: if (!left && reqWidth>i)
      000642 30*00 03         [24] 1224 	jnb	b0,00363$
      000645 02r08rFB         [24] 1225 	ljmp	00159$
      000648                       1226 00363$:
      000648 E5*00            [12] 1227 	mov	a,_bp
      00064A 24 FC            [12] 1228 	add	a,#0xfc
      00064C F8               [12] 1229 	mov	r0,a
      00064D C3               [12] 1230 	clr	c
      00064E EC               [12] 1231 	mov	a,r4
      00064F 96               [12] 1232 	subb	a,@r0
      000650 40 03            [24] 1233 	jc	00364$
      000652 02r08rFB         [24] 1234 	ljmp	00159$
      000655                       1235 00364$:
                                   1236 ;	printf_large.c:334: if (zero)
      000655 20*00 03         [24] 1237 	jb	b1,00365$
      000658 02r07r97         [24] 1238 	ljmp	00228$
      00065B                       1239 00365$:
                                   1240 ;	printf_large.c:336: if (negative)
      00065B 30*00 47         [24] 1241 	jnb	b4,00131$
                                   1242 ;	printf_large.c:338: OUTPUT_CHAR('-', p);
      00065E C0 07            [24] 1243 	push	ar7
      000660 C0 06            [24] 1244 	push	ar6
      000662 C0*00            [24] 1245 	push	bits
      000664 E5*00            [12] 1246 	mov	a,_bp
      000666 24 F5            [12] 1247 	add	a,#0xf5
      000668 F8               [12] 1248 	mov	r0,a
      000669 E6               [12] 1249 	mov	a,@r0
      00066A C0 E0            [24] 1250 	push	acc
      00066C 08               [12] 1251 	inc	r0
      00066D E6               [12] 1252 	mov	a,@r0
      00066E C0 E0            [24] 1253 	push	acc
      000670 08               [12] 1254 	inc	r0
      000671 E6               [12] 1255 	mov	a,@r0
      000672 C0 E0            [24] 1256 	push	acc
      000674 E5*00            [12] 1257 	mov	a,_bp
      000676 24 F8            [12] 1258 	add	a,#0xf8
      000678 F8               [12] 1259 	mov	r0,a
      000679 E6               [12] 1260 	mov	a,@r0
      00067A C0 E0            [24] 1261 	push	acc
      00067C 08               [12] 1262 	inc	r0
      00067D E6               [12] 1263 	mov	a,@r0
      00067E C0 E0            [24] 1264 	push	acc
      000680 08               [12] 1265 	inc	r0
      000681 E6               [12] 1266 	mov	a,@r0
      000682 C0 E0            [24] 1267 	push	acc
      000684 75 82 2D         [24] 1268 	mov	dpl,#0x2D
      000687 D0 02            [24] 1269 	pop	ar2
      000689 D0 01            [24] 1270 	pop	ar1
      00068B D0 00            [24] 1271 	pop	ar0
      00068D 12r00r00         [24] 1272 	lcall	__sdcc_banked_call
      000690 15 81            [12] 1273 	dec	sp
      000692 15 81            [12] 1274 	dec	sp
      000694 15 81            [12] 1275 	dec	sp
      000696 D0*00            [24] 1276 	pop	bits
      000698 D0 06            [24] 1277 	pop	ar6
      00069A D0 07            [24] 1278 	pop	ar7
      00069C E5*00            [12] 1279 	mov	a,_bp
      00069E 24 0A            [12] 1280 	add	a,#0x0a
      0006A0 F8               [12] 1281 	mov	r0,a
      0006A1 06               [12] 1282 	inc	@r0
      0006A2 02r07r35         [24] 1283 	ljmp	00226$
      0006A5                       1284 00131$:
                                   1285 ;	printf_large.c:340: else if (sign)
      0006A5 30*00 46         [24] 1286 	jnb	b2,00128$
                                   1287 ;	printf_large.c:342: OUTPUT_CHAR('+', p);
      0006A8 C0 07            [24] 1288 	push	ar7
      0006AA C0 06            [24] 1289 	push	ar6
      0006AC C0*00            [24] 1290 	push	bits
      0006AE E5*00            [12] 1291 	mov	a,_bp
      0006B0 24 F5            [12] 1292 	add	a,#0xf5
      0006B2 F8               [12] 1293 	mov	r0,a
      0006B3 E6               [12] 1294 	mov	a,@r0
      0006B4 C0 E0            [24] 1295 	push	acc
      0006B6 08               [12] 1296 	inc	r0
      0006B7 E6               [12] 1297 	mov	a,@r0
      0006B8 C0 E0            [24] 1298 	push	acc
      0006BA 08               [12] 1299 	inc	r0
      0006BB E6               [12] 1300 	mov	a,@r0
      0006BC C0 E0            [24] 1301 	push	acc
      0006BE E5*00            [12] 1302 	mov	a,_bp
      0006C0 24 F8            [12] 1303 	add	a,#0xf8
      0006C2 F8               [12] 1304 	mov	r0,a
      0006C3 E6               [12] 1305 	mov	a,@r0
      0006C4 C0 E0            [24] 1306 	push	acc
      0006C6 08               [12] 1307 	inc	r0
      0006C7 E6               [12] 1308 	mov	a,@r0
      0006C8 C0 E0            [24] 1309 	push	acc
      0006CA 08               [12] 1310 	inc	r0
      0006CB E6               [12] 1311 	mov	a,@r0
      0006CC C0 E0            [24] 1312 	push	acc
      0006CE 75 82 2B         [24] 1313 	mov	dpl,#0x2B
      0006D1 D0 02            [24] 1314 	pop	ar2
      0006D3 D0 01            [24] 1315 	pop	ar1
      0006D5 D0 00            [24] 1316 	pop	ar0
      0006D7 12r00r00         [24] 1317 	lcall	__sdcc_banked_call
      0006DA 15 81            [12] 1318 	dec	sp
      0006DC 15 81            [12] 1319 	dec	sp
      0006DE 15 81            [12] 1320 	dec	sp
      0006E0 D0*00            [24] 1321 	pop	bits
      0006E2 D0 06            [24] 1322 	pop	ar6
      0006E4 D0 07            [24] 1323 	pop	ar7
      0006E6 E5*00            [12] 1324 	mov	a,_bp
      0006E8 24 0A            [12] 1325 	add	a,#0x0a
      0006EA F8               [12] 1326 	mov	r0,a
      0006EB 06               [12] 1327 	inc	@r0
      0006EC 80 47            [24] 1328 	sjmp	00226$
      0006EE                       1329 00128$:
                                   1330 ;	printf_large.c:344: else if (space)
      0006EE 30*00 44         [24] 1331 	jnb	b3,00226$
                                   1332 ;	printf_large.c:346: OUTPUT_CHAR(' ', p);
      0006F1 C0 07            [24] 1333 	push	ar7
      0006F3 C0 06            [24] 1334 	push	ar6
      0006F5 C0*00            [24] 1335 	push	bits
      0006F7 E5*00            [12] 1336 	mov	a,_bp
      0006F9 24 F5            [12] 1337 	add	a,#0xf5
      0006FB F8               [12] 1338 	mov	r0,a
      0006FC E6               [12] 1339 	mov	a,@r0
      0006FD C0 E0            [24] 1340 	push	acc
      0006FF 08               [12] 1341 	inc	r0
      000700 E6               [12] 1342 	mov	a,@r0
      000701 C0 E0            [24] 1343 	push	acc
      000703 08               [12] 1344 	inc	r0
      000704 E6               [12] 1345 	mov	a,@r0
      000705 C0 E0            [24] 1346 	push	acc
      000707 E5*00            [12] 1347 	mov	a,_bp
      000709 24 F8            [12] 1348 	add	a,#0xf8
      00070B F8               [12] 1349 	mov	r0,a
      00070C E6               [12] 1350 	mov	a,@r0
      00070D C0 E0            [24] 1351 	push	acc
      00070F 08               [12] 1352 	inc	r0
      000710 E6               [12] 1353 	mov	a,@r0
      000711 C0 E0            [24] 1354 	push	acc
      000713 08               [12] 1355 	inc	r0
      000714 E6               [12] 1356 	mov	a,@r0
      000715 C0 E0            [24] 1357 	push	acc
      000717 75 82 20         [24] 1358 	mov	dpl,#0x20
      00071A D0 02            [24] 1359 	pop	ar2
      00071C D0 01            [24] 1360 	pop	ar1
      00071E D0 00            [24] 1361 	pop	ar0
      000720 12r00r00         [24] 1362 	lcall	__sdcc_banked_call
      000723 15 81            [12] 1363 	dec	sp
      000725 15 81            [12] 1364 	dec	sp
      000727 15 81            [12] 1365 	dec	sp
      000729 D0*00            [24] 1366 	pop	bits
      00072B D0 06            [24] 1367 	pop	ar6
      00072D D0 07            [24] 1368 	pop	ar7
      00072F E5*00            [12] 1369 	mov	a,_bp
      000731 24 0A            [12] 1370 	add	a,#0x0a
      000733 F8               [12] 1371 	mov	r0,a
      000734 06               [12] 1372 	inc	@r0
                                   1373 ;	printf_large.c:348: while (reqWidth-->minWidth)
      000735                       1374 00226$:
      000735 E5*00            [12] 1375 	mov	a,_bp
      000737 24 0A            [12] 1376 	add	a,#0x0a
      000739 F8               [12] 1377 	mov	r0,a
      00073A 86 05            [24] 1378 	mov	ar5,@r0
      00073C E5*00            [12] 1379 	mov	a,_bp
      00073E 24 FC            [12] 1380 	add	a,#0xfc
      000740 F8               [12] 1381 	mov	r0,a
      000741 86 04            [24] 1382 	mov	ar4,@r0
      000743                       1383 00133$:
      000743 8C 03            [24] 1384 	mov	ar3,r4
      000745 1C               [12] 1385 	dec	r4
      000746 C3               [12] 1386 	clr	c
      000747 EE               [12] 1387 	mov	a,r6
      000748 9B               [12] 1388 	subb	a,r3
      000749 40 03            [24] 1389 	jc	00369$
      00074B 02r09rD7         [24] 1390 	ljmp	00250$
      00074E                       1391 00369$:
                                   1392 ;	printf_large.c:350: OUTPUT_CHAR('0', p);
      00074E C0 07            [24] 1393 	push	ar7
      000750 C0 06            [24] 1394 	push	ar6
      000752 C0 05            [24] 1395 	push	ar5
      000754 C0 04            [24] 1396 	push	ar4
      000756 C0*00            [24] 1397 	push	bits
      000758 E5*00            [12] 1398 	mov	a,_bp
      00075A 24 F5            [12] 1399 	add	a,#0xf5
      00075C F8               [12] 1400 	mov	r0,a
      00075D E6               [12] 1401 	mov	a,@r0
      00075E C0 E0            [24] 1402 	push	acc
      000760 08               [12] 1403 	inc	r0
      000761 E6               [12] 1404 	mov	a,@r0
      000762 C0 E0            [24] 1405 	push	acc
      000764 08               [12] 1406 	inc	r0
      000765 E6               [12] 1407 	mov	a,@r0
      000766 C0 E0            [24] 1408 	push	acc
      000768 E5*00            [12] 1409 	mov	a,_bp
      00076A 24 F8            [12] 1410 	add	a,#0xf8
      00076C F8               [12] 1411 	mov	r0,a
      00076D E6               [12] 1412 	mov	a,@r0
      00076E C0 E0            [24] 1413 	push	acc
      000770 08               [12] 1414 	inc	r0
      000771 E6               [12] 1415 	mov	a,@r0
      000772 C0 E0            [24] 1416 	push	acc
      000774 08               [12] 1417 	inc	r0
      000775 E6               [12] 1418 	mov	a,@r0
      000776 C0 E0            [24] 1419 	push	acc
      000778 75 82 30         [24] 1420 	mov	dpl,#0x30
      00077B D0 02            [24] 1421 	pop	ar2
      00077D D0 01            [24] 1422 	pop	ar1
      00077F D0 00            [24] 1423 	pop	ar0
      000781 12r00r00         [24] 1424 	lcall	__sdcc_banked_call
      000784 15 81            [12] 1425 	dec	sp
      000786 15 81            [12] 1426 	dec	sp
      000788 15 81            [12] 1427 	dec	sp
      00078A D0*00            [24] 1428 	pop	bits
      00078C D0 04            [24] 1429 	pop	ar4
      00078E D0 05            [24] 1430 	pop	ar5
      000790 D0 06            [24] 1431 	pop	ar6
      000792 D0 07            [24] 1432 	pop	ar7
      000794 0D               [12] 1433 	inc	r5
                                   1434 ;	printf_large.c:355: while (reqWidth-->minWidth)
      000795 80 AC            [24] 1435 	sjmp	00133$
      000797                       1436 00228$:
      000797 E5*00            [12] 1437 	mov	a,_bp
      000799 24 0A            [12] 1438 	add	a,#0x0a
      00079B F8               [12] 1439 	mov	r0,a
      00079C 86 03            [24] 1440 	mov	ar3,@r0
      00079E E5*00            [12] 1441 	mov	a,_bp
      0007A0 24 FC            [12] 1442 	add	a,#0xfc
      0007A2 F8               [12] 1443 	mov	r0,a
      0007A3 86 02            [24] 1444 	mov	ar2,@r0
      0007A5                       1445 00136$:
      0007A5 C0 07            [24] 1446 	push	ar7
      0007A7 8A 07            [24] 1447 	mov	ar7,r2
      0007A9 1A               [12] 1448 	dec	r2
      0007AA C3               [12] 1449 	clr	c
      0007AB EE               [12] 1450 	mov	a,r6
      0007AC 9F               [12] 1451 	subb	a,r7
      0007AD D0 07            [24] 1452 	pop	ar7
      0007AF 50 49            [24] 1453 	jnc	00251$
                                   1454 ;	printf_large.c:357: OUTPUT_CHAR(' ', p);
      0007B1 C0 07            [24] 1455 	push	ar7
      0007B3 C0 06            [24] 1456 	push	ar6
      0007B5 C0 03            [24] 1457 	push	ar3
      0007B7 C0 02            [24] 1458 	push	ar2
      0007B9 C0*00            [24] 1459 	push	bits
      0007BB E5*00            [12] 1460 	mov	a,_bp
      0007BD 24 F5            [12] 1461 	add	a,#0xf5
      0007BF F8               [12] 1462 	mov	r0,a
      0007C0 E6               [12] 1463 	mov	a,@r0
      0007C1 C0 E0            [24] 1464 	push	acc
      0007C3 08               [12] 1465 	inc	r0
      0007C4 E6               [12] 1466 	mov	a,@r0
      0007C5 C0 E0            [24] 1467 	push	acc
      0007C7 08               [12] 1468 	inc	r0
      0007C8 E6               [12] 1469 	mov	a,@r0
      0007C9 C0 E0            [24] 1470 	push	acc
      0007CB E5*00            [12] 1471 	mov	a,_bp
      0007CD 24 F8            [12] 1472 	add	a,#0xf8
      0007CF F8               [12] 1473 	mov	r0,a
      0007D0 E6               [12] 1474 	mov	a,@r0
      0007D1 C0 E0            [24] 1475 	push	acc
      0007D3 08               [12] 1476 	inc	r0
      0007D4 E6               [12] 1477 	mov	a,@r0
      0007D5 C0 E0            [24] 1478 	push	acc
      0007D7 08               [12] 1479 	inc	r0
      0007D8 E6               [12] 1480 	mov	a,@r0
      0007D9 C0 E0            [24] 1481 	push	acc
      0007DB 75 82 20         [24] 1482 	mov	dpl,#0x20
      0007DE D0 02            [24] 1483 	pop	ar2
      0007E0 D0 01            [24] 1484 	pop	ar1
      0007E2 D0 00            [24] 1485 	pop	ar0
      0007E4 12r00r00         [24] 1486 	lcall	__sdcc_banked_call
      0007E7 15 81            [12] 1487 	dec	sp
      0007E9 15 81            [12] 1488 	dec	sp
      0007EB 15 81            [12] 1489 	dec	sp
      0007ED D0*00            [24] 1490 	pop	bits
      0007EF D0 02            [24] 1491 	pop	ar2
      0007F1 D0 03            [24] 1492 	pop	ar3
      0007F3 D0 06            [24] 1493 	pop	ar6
      0007F5 D0 07            [24] 1494 	pop	ar7
      0007F7 0B               [12] 1495 	inc	r3
      0007F8 80 AB            [24] 1496 	sjmp	00136$
      0007FA                       1497 00251$:
      0007FA E5*00            [12] 1498 	mov	a,_bp
      0007FC 24 0A            [12] 1499 	add	a,#0x0a
      0007FE F8               [12] 1500 	mov	r0,a
      0007FF A6 03            [24] 1501 	mov	@r0,ar3
      000801 E5*00            [12] 1502 	mov	a,_bp
      000803 24 FC            [12] 1503 	add	a,#0xfc
      000805 F8               [12] 1504 	mov	r0,a
      000806 A6 02            [24] 1505 	mov	@r0,ar2
                                   1506 ;	printf_large.c:359: if (negative)
      000808 30*00 4D         [24] 1507 	jnb	b4,00145$
                                   1508 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
      00080B C0 07            [24] 1509 	push	ar7
      00080D C0 06            [24] 1510 	push	ar6
      00080F C0 03            [24] 1511 	push	ar3
      000811 C0*00            [24] 1512 	push	bits
      000813 E5*00            [12] 1513 	mov	a,_bp
      000815 24 F5            [12] 1514 	add	a,#0xf5
      000817 F8               [12] 1515 	mov	r0,a
      000818 E6               [12] 1516 	mov	a,@r0
      000819 C0 E0            [24] 1517 	push	acc
      00081B 08               [12] 1518 	inc	r0
      00081C E6               [12] 1519 	mov	a,@r0
      00081D C0 E0            [24] 1520 	push	acc
      00081F 08               [12] 1521 	inc	r0
      000820 E6               [12] 1522 	mov	a,@r0
      000821 C0 E0            [24] 1523 	push	acc
      000823 E5*00            [12] 1524 	mov	a,_bp
      000825 24 F8            [12] 1525 	add	a,#0xf8
      000827 F8               [12] 1526 	mov	r0,a
      000828 E6               [12] 1527 	mov	a,@r0
      000829 C0 E0            [24] 1528 	push	acc
      00082B 08               [12] 1529 	inc	r0
      00082C E6               [12] 1530 	mov	a,@r0
      00082D C0 E0            [24] 1531 	push	acc
      00082F 08               [12] 1532 	inc	r0
      000830 E6               [12] 1533 	mov	a,@r0
      000831 C0 E0            [24] 1534 	push	acc
      000833 75 82 2D         [24] 1535 	mov	dpl,#0x2D
      000836 D0 02            [24] 1536 	pop	ar2
      000838 D0 01            [24] 1537 	pop	ar1
      00083A D0 00            [24] 1538 	pop	ar0
      00083C 12r00r00         [24] 1539 	lcall	__sdcc_banked_call
      00083F 15 81            [12] 1540 	dec	sp
      000841 15 81            [12] 1541 	dec	sp
      000843 15 81            [12] 1542 	dec	sp
      000845 D0*00            [24] 1543 	pop	bits
      000847 D0 03            [24] 1544 	pop	ar3
      000849 D0 06            [24] 1545 	pop	ar6
      00084B D0 07            [24] 1546 	pop	ar7
      00084D E5*00            [12] 1547 	mov	a,_bp
      00084F 24 0A            [12] 1548 	add	a,#0x0a
      000851 F8               [12] 1549 	mov	r0,a
      000852 EB               [12] 1550 	mov	a,r3
      000853 04               [12] 1551 	inc	a
      000854 F6               [12] 1552 	mov	@r0,a
      000855 02r09rE5         [24] 1553 	ljmp	00160$
      000858                       1554 00145$:
                                   1555 ;	printf_large.c:363: else if (sign)
      000858 30*00 4D         [24] 1556 	jnb	b2,00142$
                                   1557 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
      00085B C0 07            [24] 1558 	push	ar7
      00085D C0 06            [24] 1559 	push	ar6
      00085F C0 03            [24] 1560 	push	ar3
      000861 C0*00            [24] 1561 	push	bits
      000863 E5*00            [12] 1562 	mov	a,_bp
      000865 24 F5            [12] 1563 	add	a,#0xf5
      000867 F8               [12] 1564 	mov	r0,a
      000868 E6               [12] 1565 	mov	a,@r0
      000869 C0 E0            [24] 1566 	push	acc
      00086B 08               [12] 1567 	inc	r0
      00086C E6               [12] 1568 	mov	a,@r0
      00086D C0 E0            [24] 1569 	push	acc
      00086F 08               [12] 1570 	inc	r0
      000870 E6               [12] 1571 	mov	a,@r0
      000871 C0 E0            [24] 1572 	push	acc
      000873 E5*00            [12] 1573 	mov	a,_bp
      000875 24 F8            [12] 1574 	add	a,#0xf8
      000877 F8               [12] 1575 	mov	r0,a
      000878 E6               [12] 1576 	mov	a,@r0
      000879 C0 E0            [24] 1577 	push	acc
      00087B 08               [12] 1578 	inc	r0
      00087C E6               [12] 1579 	mov	a,@r0
      00087D C0 E0            [24] 1580 	push	acc
      00087F 08               [12] 1581 	inc	r0
      000880 E6               [12] 1582 	mov	a,@r0
      000881 C0 E0            [24] 1583 	push	acc
      000883 75 82 2B         [24] 1584 	mov	dpl,#0x2B
      000886 D0 02            [24] 1585 	pop	ar2
      000888 D0 01            [24] 1586 	pop	ar1
      00088A D0 00            [24] 1587 	pop	ar0
      00088C 12r00r00         [24] 1588 	lcall	__sdcc_banked_call
      00088F 15 81            [12] 1589 	dec	sp
      000891 15 81            [12] 1590 	dec	sp
      000893 15 81            [12] 1591 	dec	sp
      000895 D0*00            [24] 1592 	pop	bits
      000897 D0 03            [24] 1593 	pop	ar3
      000899 D0 06            [24] 1594 	pop	ar6
      00089B D0 07            [24] 1595 	pop	ar7
      00089D E5*00            [12] 1596 	mov	a,_bp
      00089F 24 0A            [12] 1597 	add	a,#0x0a
      0008A1 F8               [12] 1598 	mov	r0,a
      0008A2 EB               [12] 1599 	mov	a,r3
      0008A3 04               [12] 1600 	inc	a
      0008A4 F6               [12] 1601 	mov	@r0,a
      0008A5 02r09rE5         [24] 1602 	ljmp	00160$
      0008A8                       1603 00142$:
                                   1604 ;	printf_large.c:367: else if (space)
      0008A8 20*00 03         [24] 1605 	jb	b3,00373$
      0008AB 02r09rE5         [24] 1606 	ljmp	00160$
      0008AE                       1607 00373$:
                                   1608 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
      0008AE C0 07            [24] 1609 	push	ar7
      0008B0 C0 06            [24] 1610 	push	ar6
      0008B2 C0 03            [24] 1611 	push	ar3
      0008B4 C0*00            [24] 1612 	push	bits
      0008B6 E5*00            [12] 1613 	mov	a,_bp
      0008B8 24 F5            [12] 1614 	add	a,#0xf5
      0008BA F8               [12] 1615 	mov	r0,a
      0008BB E6               [12] 1616 	mov	a,@r0
      0008BC C0 E0            [24] 1617 	push	acc
      0008BE 08               [12] 1618 	inc	r0
      0008BF E6               [12] 1619 	mov	a,@r0
      0008C0 C0 E0            [24] 1620 	push	acc
      0008C2 08               [12] 1621 	inc	r0
      0008C3 E6               [12] 1622 	mov	a,@r0
      0008C4 C0 E0            [24] 1623 	push	acc
      0008C6 E5*00            [12] 1624 	mov	a,_bp
      0008C8 24 F8            [12] 1625 	add	a,#0xf8
      0008CA F8               [12] 1626 	mov	r0,a
      0008CB E6               [12] 1627 	mov	a,@r0
      0008CC C0 E0            [24] 1628 	push	acc
      0008CE 08               [12] 1629 	inc	r0
      0008CF E6               [12] 1630 	mov	a,@r0
      0008D0 C0 E0            [24] 1631 	push	acc
      0008D2 08               [12] 1632 	inc	r0
      0008D3 E6               [12] 1633 	mov	a,@r0
      0008D4 C0 E0            [24] 1634 	push	acc
      0008D6 75 82 20         [24] 1635 	mov	dpl,#0x20
      0008D9 D0 02            [24] 1636 	pop	ar2
      0008DB D0 01            [24] 1637 	pop	ar1
      0008DD D0 00            [24] 1638 	pop	ar0
      0008DF 12r00r00         [24] 1639 	lcall	__sdcc_banked_call
      0008E2 15 81            [12] 1640 	dec	sp
      0008E4 15 81            [12] 1641 	dec	sp
      0008E6 15 81            [12] 1642 	dec	sp
      0008E8 D0*00            [24] 1643 	pop	bits
      0008EA D0 03            [24] 1644 	pop	ar3
      0008EC D0 06            [24] 1645 	pop	ar6
      0008EE D0 07            [24] 1646 	pop	ar7
      0008F0 E5*00            [12] 1647 	mov	a,_bp
      0008F2 24 0A            [12] 1648 	add	a,#0x0a
      0008F4 F8               [12] 1649 	mov	r0,a
      0008F5 EB               [12] 1650 	mov	a,r3
      0008F6 04               [12] 1651 	inc	a
      0008F7 F6               [12] 1652 	mov	@r0,a
      0008F8 02r09rE5         [24] 1653 	ljmp	00160$
      0008FB                       1654 00159$:
                                   1655 ;	printf_large.c:375: if (negative)
      0008FB 30*00 47         [24] 1656 	jnb	b4,00156$
                                   1657 ;	printf_large.c:377: OUTPUT_CHAR('-', p);
      0008FE C0 07            [24] 1658 	push	ar7
      000900 C0 06            [24] 1659 	push	ar6
      000902 C0*00            [24] 1660 	push	bits
      000904 E5*00            [12] 1661 	mov	a,_bp
      000906 24 F5            [12] 1662 	add	a,#0xf5
      000908 F8               [12] 1663 	mov	r0,a
      000909 E6               [12] 1664 	mov	a,@r0
      00090A C0 E0            [24] 1665 	push	acc
      00090C 08               [12] 1666 	inc	r0
      00090D E6               [12] 1667 	mov	a,@r0
      00090E C0 E0            [24] 1668 	push	acc
      000910 08               [12] 1669 	inc	r0
      000911 E6               [12] 1670 	mov	a,@r0
      000912 C0 E0            [24] 1671 	push	acc
      000914 E5*00            [12] 1672 	mov	a,_bp
      000916 24 F8            [12] 1673 	add	a,#0xf8
      000918 F8               [12] 1674 	mov	r0,a
      000919 E6               [12] 1675 	mov	a,@r0
      00091A C0 E0            [24] 1676 	push	acc
      00091C 08               [12] 1677 	inc	r0
      00091D E6               [12] 1678 	mov	a,@r0
      00091E C0 E0            [24] 1679 	push	acc
      000920 08               [12] 1680 	inc	r0
      000921 E6               [12] 1681 	mov	a,@r0
      000922 C0 E0            [24] 1682 	push	acc
      000924 75 82 2D         [24] 1683 	mov	dpl,#0x2D
      000927 D0 02            [24] 1684 	pop	ar2
      000929 D0 01            [24] 1685 	pop	ar1
      00092B D0 00            [24] 1686 	pop	ar0
      00092D 12r00r00         [24] 1687 	lcall	__sdcc_banked_call
      000930 15 81            [12] 1688 	dec	sp
      000932 15 81            [12] 1689 	dec	sp
      000934 15 81            [12] 1690 	dec	sp
      000936 D0*00            [24] 1691 	pop	bits
      000938 D0 06            [24] 1692 	pop	ar6
      00093A D0 07            [24] 1693 	pop	ar7
      00093C E5*00            [12] 1694 	mov	a,_bp
      00093E 24 0A            [12] 1695 	add	a,#0x0a
      000940 F8               [12] 1696 	mov	r0,a
      000941 06               [12] 1697 	inc	@r0
      000942 02r09rE5         [24] 1698 	ljmp	00160$
      000945                       1699 00156$:
                                   1700 ;	printf_large.c:379: else if (sign)
      000945 30*00 46         [24] 1701 	jnb	b2,00153$
                                   1702 ;	printf_large.c:381: OUTPUT_CHAR('+', p);
      000948 C0 07            [24] 1703 	push	ar7
      00094A C0 06            [24] 1704 	push	ar6
      00094C C0*00            [24] 1705 	push	bits
      00094E E5*00            [12] 1706 	mov	a,_bp
      000950 24 F5            [12] 1707 	add	a,#0xf5
      000952 F8               [12] 1708 	mov	r0,a
      000953 E6               [12] 1709 	mov	a,@r0
      000954 C0 E0            [24] 1710 	push	acc
      000956 08               [12] 1711 	inc	r0
      000957 E6               [12] 1712 	mov	a,@r0
      000958 C0 E0            [24] 1713 	push	acc
      00095A 08               [12] 1714 	inc	r0
      00095B E6               [12] 1715 	mov	a,@r0
      00095C C0 E0            [24] 1716 	push	acc
      00095E E5*00            [12] 1717 	mov	a,_bp
      000960 24 F8            [12] 1718 	add	a,#0xf8
      000962 F8               [12] 1719 	mov	r0,a
      000963 E6               [12] 1720 	mov	a,@r0
      000964 C0 E0            [24] 1721 	push	acc
      000966 08               [12] 1722 	inc	r0
      000967 E6               [12] 1723 	mov	a,@r0
      000968 C0 E0            [24] 1724 	push	acc
      00096A 08               [12] 1725 	inc	r0
      00096B E6               [12] 1726 	mov	a,@r0
      00096C C0 E0            [24] 1727 	push	acc
      00096E 75 82 2B         [24] 1728 	mov	dpl,#0x2B
      000971 D0 02            [24] 1729 	pop	ar2
      000973 D0 01            [24] 1730 	pop	ar1
      000975 D0 00            [24] 1731 	pop	ar0
      000977 12r00r00         [24] 1732 	lcall	__sdcc_banked_call
      00097A 15 81            [12] 1733 	dec	sp
      00097C 15 81            [12] 1734 	dec	sp
      00097E 15 81            [12] 1735 	dec	sp
      000980 D0*00            [24] 1736 	pop	bits
      000982 D0 06            [24] 1737 	pop	ar6
      000984 D0 07            [24] 1738 	pop	ar7
      000986 E5*00            [12] 1739 	mov	a,_bp
      000988 24 0A            [12] 1740 	add	a,#0x0a
      00098A F8               [12] 1741 	mov	r0,a
      00098B 06               [12] 1742 	inc	@r0
      00098C 80 57            [24] 1743 	sjmp	00160$
      00098E                       1744 00153$:
                                   1745 ;	printf_large.c:383: else if (space)
      00098E 30*00 54         [24] 1746 	jnb	b3,00160$
                                   1747 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000991 C0 07            [24] 1748 	push	ar7
      000993 C0 06            [24] 1749 	push	ar6
      000995 C0*00            [24] 1750 	push	bits
      000997 E5*00            [12] 1751 	mov	a,_bp
      000999 24 F5            [12] 1752 	add	a,#0xf5
      00099B F8               [12] 1753 	mov	r0,a
      00099C E6               [12] 1754 	mov	a,@r0
      00099D C0 E0            [24] 1755 	push	acc
      00099F 08               [12] 1756 	inc	r0
      0009A0 E6               [12] 1757 	mov	a,@r0
      0009A1 C0 E0            [24] 1758 	push	acc
      0009A3 08               [12] 1759 	inc	r0
      0009A4 E6               [12] 1760 	mov	a,@r0
      0009A5 C0 E0            [24] 1761 	push	acc
      0009A7 E5*00            [12] 1762 	mov	a,_bp
      0009A9 24 F8            [12] 1763 	add	a,#0xf8
      0009AB F8               [12] 1764 	mov	r0,a
      0009AC E6               [12] 1765 	mov	a,@r0
      0009AD C0 E0            [24] 1766 	push	acc
      0009AF 08               [12] 1767 	inc	r0
      0009B0 E6               [12] 1768 	mov	a,@r0
      0009B1 C0 E0            [24] 1769 	push	acc
      0009B3 08               [12] 1770 	inc	r0
      0009B4 E6               [12] 1771 	mov	a,@r0
      0009B5 C0 E0            [24] 1772 	push	acc
      0009B7 75 82 20         [24] 1773 	mov	dpl,#0x20
      0009BA D0 02            [24] 1774 	pop	ar2
      0009BC D0 01            [24] 1775 	pop	ar1
      0009BE D0 00            [24] 1776 	pop	ar0
      0009C0 12r00r00         [24] 1777 	lcall	__sdcc_banked_call
      0009C3 15 81            [12] 1778 	dec	sp
      0009C5 15 81            [12] 1779 	dec	sp
      0009C7 15 81            [12] 1780 	dec	sp
      0009C9 D0*00            [24] 1781 	pop	bits
      0009CB D0 06            [24] 1782 	pop	ar6
      0009CD D0 07            [24] 1783 	pop	ar7
      0009CF E5*00            [12] 1784 	mov	a,_bp
      0009D1 24 0A            [12] 1785 	add	a,#0x0a
      0009D3 F8               [12] 1786 	mov	r0,a
      0009D4 06               [12] 1787 	inc	@r0
                                   1788 ;	printf_large.c:426: return charsOutputted;
                                   1789 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      0009D5 80 0E            [24] 1790 	sjmp	00160$
      0009D7                       1791 00250$:
      0009D7 E5*00            [12] 1792 	mov	a,_bp
      0009D9 24 0A            [12] 1793 	add	a,#0x0a
      0009DB F8               [12] 1794 	mov	r0,a
      0009DC A6 05            [24] 1795 	mov	@r0,ar5
      0009DE E5*00            [12] 1796 	mov	a,_bp
      0009E0 24 FC            [12] 1797 	add	a,#0xfc
      0009E2 F8               [12] 1798 	mov	r0,a
      0009E3 A6 04            [24] 1799 	mov	@r0,ar4
      0009E5                       1800 00160$:
                                   1801 ;	printf_large.c:390: i=fpBI-1;
      0009E5 EF               [12] 1802 	mov	a,r7
      0009E6 14               [12] 1803 	dec	a
      0009E7 FD               [12] 1804 	mov	r5,a
                                   1805 ;	printf_large.c:391: do {
      0009E8 E5*00            [12] 1806 	mov	a,_bp
      0009EA 24 0A            [12] 1807 	add	a,#0x0a
      0009EC F8               [12] 1808 	mov	r0,a
      0009ED 86 04            [24] 1809 	mov	ar4,@r0
      0009EF                       1810 00162$:
                                   1811 ;	printf_large.c:392: OUTPUT_CHAR (fpBuffer[i], p);
      0009EF E5*00            [12] 1812 	mov	a,_bp
      0009F1 24 05            [12] 1813 	add	a,#0x05
      0009F3 F8               [12] 1814 	mov	r0,a
      0009F4 ED               [12] 1815 	mov	a,r5
      0009F5 26               [12] 1816 	add	a,@r0
      0009F6 F9               [12] 1817 	mov	r1,a
      0009F7 87 03            [24] 1818 	mov	ar3,@r1
      0009F9 C0 07            [24] 1819 	push	ar7
      0009FB C0 06            [24] 1820 	push	ar6
      0009FD C0 05            [24] 1821 	push	ar5
      0009FF C0 04            [24] 1822 	push	ar4
      000A01 C0*00            [24] 1823 	push	bits
      000A03 E5*00            [12] 1824 	mov	a,_bp
      000A05 24 F5            [12] 1825 	add	a,#0xf5
      000A07 F8               [12] 1826 	mov	r0,a
      000A08 E6               [12] 1827 	mov	a,@r0
      000A09 C0 E0            [24] 1828 	push	acc
      000A0B 08               [12] 1829 	inc	r0
      000A0C E6               [12] 1830 	mov	a,@r0
      000A0D C0 E0            [24] 1831 	push	acc
      000A0F 08               [12] 1832 	inc	r0
      000A10 E6               [12] 1833 	mov	a,@r0
      000A11 C0 E0            [24] 1834 	push	acc
      000A13 E5*00            [12] 1835 	mov	a,_bp
      000A15 24 F8            [12] 1836 	add	a,#0xf8
      000A17 F8               [12] 1837 	mov	r0,a
      000A18 E6               [12] 1838 	mov	a,@r0
      000A19 C0 E0            [24] 1839 	push	acc
      000A1B 08               [12] 1840 	inc	r0
      000A1C E6               [12] 1841 	mov	a,@r0
      000A1D C0 E0            [24] 1842 	push	acc
      000A1F 08               [12] 1843 	inc	r0
      000A20 E6               [12] 1844 	mov	a,@r0
      000A21 C0 E0            [24] 1845 	push	acc
      000A23 8B 82            [24] 1846 	mov	dpl,r3
      000A25 D0 02            [24] 1847 	pop	ar2
      000A27 D0 01            [24] 1848 	pop	ar1
      000A29 D0 00            [24] 1849 	pop	ar0
      000A2B 12r00r00         [24] 1850 	lcall	__sdcc_banked_call
      000A2E 15 81            [12] 1851 	dec	sp
      000A30 15 81            [12] 1852 	dec	sp
      000A32 15 81            [12] 1853 	dec	sp
      000A34 D0*00            [24] 1854 	pop	bits
      000A36 D0 04            [24] 1855 	pop	ar4
      000A38 D0 05            [24] 1856 	pop	ar5
      000A3A D0 06            [24] 1857 	pop	ar6
      000A3C D0 07            [24] 1858 	pop	ar7
      000A3E 0C               [12] 1859 	inc	r4
                                   1860 ;	printf_large.c:393: } while (i--);
      000A3F 8D 03            [24] 1861 	mov	ar3,r5
      000A41 1D               [12] 1862 	dec	r5
      000A42 EB               [12] 1863 	mov	a,r3
      000A43 70 AA            [24] 1864 	jnz	00162$
                                   1865 ;	printf_large.c:396: if (reqDecimals)
      000A45 E5*00            [12] 1866 	mov	a,_bp
      000A47 24 0A            [12] 1867 	add	a,#0x0a
      000A49 F8               [12] 1868 	mov	r0,a
      000A4A A6 04            [24] 1869 	mov	@r0,ar4
      000A4C E5*00            [12] 1870 	mov	a,_bp
      000A4E 24 FB            [12] 1871 	add	a,#0xfb
      000A50 F8               [12] 1872 	mov	r0,a
      000A51 E6               [12] 1873 	mov	a,@r0
      000A52 70 03            [24] 1874 	jnz	00378$
      000A54 02r0Br11         [24] 1875 	ljmp	00169$
      000A57                       1876 00378$:
                                   1877 ;	printf_large.c:398: OUTPUT_CHAR ('.', p);
      000A57 C0 07            [24] 1878 	push	ar7
      000A59 C0 06            [24] 1879 	push	ar6
      000A5B C0 04            [24] 1880 	push	ar4
      000A5D C0*00            [24] 1881 	push	bits
      000A5F E5*00            [12] 1882 	mov	a,_bp
      000A61 24 F5            [12] 1883 	add	a,#0xf5
      000A63 F8               [12] 1884 	mov	r0,a
      000A64 E6               [12] 1885 	mov	a,@r0
      000A65 C0 E0            [24] 1886 	push	acc
      000A67 08               [12] 1887 	inc	r0
      000A68 E6               [12] 1888 	mov	a,@r0
      000A69 C0 E0            [24] 1889 	push	acc
      000A6B 08               [12] 1890 	inc	r0
      000A6C E6               [12] 1891 	mov	a,@r0
      000A6D C0 E0            [24] 1892 	push	acc
      000A6F E5*00            [12] 1893 	mov	a,_bp
      000A71 24 F8            [12] 1894 	add	a,#0xf8
      000A73 F8               [12] 1895 	mov	r0,a
      000A74 E6               [12] 1896 	mov	a,@r0
      000A75 C0 E0            [24] 1897 	push	acc
      000A77 08               [12] 1898 	inc	r0
      000A78 E6               [12] 1899 	mov	a,@r0
      000A79 C0 E0            [24] 1900 	push	acc
      000A7B 08               [12] 1901 	inc	r0
      000A7C E6               [12] 1902 	mov	a,@r0
      000A7D C0 E0            [24] 1903 	push	acc
      000A7F 75 82 2E         [24] 1904 	mov	dpl,#0x2E
      000A82 D0 02            [24] 1905 	pop	ar2
      000A84 D0 01            [24] 1906 	pop	ar1
      000A86 D0 00            [24] 1907 	pop	ar0
      000A88 12r00r00         [24] 1908 	lcall	__sdcc_banked_call
      000A8B 15 81            [12] 1909 	dec	sp
      000A8D 15 81            [12] 1910 	dec	sp
      000A8F 15 81            [12] 1911 	dec	sp
      000A91 D0*00            [24] 1912 	pop	bits
      000A93 D0 04            [24] 1913 	pop	ar4
      000A95 D0 06            [24] 1914 	pop	ar6
      000A97 D0 07            [24] 1915 	pop	ar7
      000A99 E5*00            [12] 1916 	mov	a,_bp
      000A9B 24 0A            [12] 1917 	add	a,#0x0a
      000A9D F8               [12] 1918 	mov	r0,a
      000A9E EC               [12] 1919 	mov	a,r4
      000A9F 04               [12] 1920 	inc	a
      000AA0 F6               [12] 1921 	mov	@r0,a
                                   1922 ;	printf_large.c:400: while (reqDecimals--)
      000AA1 E5*00            [12] 1923 	mov	a,_bp
      000AA3 24 0A            [12] 1924 	add	a,#0x0a
      000AA5 F8               [12] 1925 	mov	r0,a
      000AA6 86 05            [24] 1926 	mov	ar5,@r0
      000AA8 E5*00            [12] 1927 	mov	a,_bp
      000AAA 24 FB            [12] 1928 	add	a,#0xfb
      000AAC F8               [12] 1929 	mov	r0,a
      000AAD 86 04            [24] 1930 	mov	ar4,@r0
      000AAF                       1931 00165$:
      000AAF 8C 03            [24] 1932 	mov	ar3,r4
      000AB1 1C               [12] 1933 	dec	r4
      000AB2 EB               [12] 1934 	mov	a,r3
      000AB3 60 55            [24] 1935 	jz	00253$
                                   1936 ;	printf_large.c:402: OUTPUT_CHAR (fpBuffer[i++], p);
      000AB5 8F 03            [24] 1937 	mov	ar3,r7
      000AB7 0F               [12] 1938 	inc	r7
      000AB8 E5*00            [12] 1939 	mov	a,_bp
      000ABA 24 05            [12] 1940 	add	a,#0x05
      000ABC F8               [12] 1941 	mov	r0,a
      000ABD EB               [12] 1942 	mov	a,r3
      000ABE 26               [12] 1943 	add	a,@r0
      000ABF F9               [12] 1944 	mov	r1,a
      000AC0 87 03            [24] 1945 	mov	ar3,@r1
      000AC2 C0 07            [24] 1946 	push	ar7
      000AC4 C0 06            [24] 1947 	push	ar6
      000AC6 C0 05            [24] 1948 	push	ar5
      000AC8 C0 04            [24] 1949 	push	ar4
      000ACA C0*00            [24] 1950 	push	bits
      000ACC E5*00            [12] 1951 	mov	a,_bp
      000ACE 24 F5            [12] 1952 	add	a,#0xf5
      000AD0 F8               [12] 1953 	mov	r0,a
      000AD1 E6               [12] 1954 	mov	a,@r0
      000AD2 C0 E0            [24] 1955 	push	acc
      000AD4 08               [12] 1956 	inc	r0
      000AD5 E6               [12] 1957 	mov	a,@r0
      000AD6 C0 E0            [24] 1958 	push	acc
      000AD8 08               [12] 1959 	inc	r0
      000AD9 E6               [12] 1960 	mov	a,@r0
      000ADA C0 E0            [24] 1961 	push	acc
      000ADC E5*00            [12] 1962 	mov	a,_bp
      000ADE 24 F8            [12] 1963 	add	a,#0xf8
      000AE0 F8               [12] 1964 	mov	r0,a
      000AE1 E6               [12] 1965 	mov	a,@r0
      000AE2 C0 E0            [24] 1966 	push	acc
      000AE4 08               [12] 1967 	inc	r0
      000AE5 E6               [12] 1968 	mov	a,@r0
      000AE6 C0 E0            [24] 1969 	push	acc
      000AE8 08               [12] 1970 	inc	r0
      000AE9 E6               [12] 1971 	mov	a,@r0
      000AEA C0 E0            [24] 1972 	push	acc
      000AEC 8B 82            [24] 1973 	mov	dpl,r3
      000AEE D0 02            [24] 1974 	pop	ar2
      000AF0 D0 01            [24] 1975 	pop	ar1
      000AF2 D0 00            [24] 1976 	pop	ar0
      000AF4 12r00r00         [24] 1977 	lcall	__sdcc_banked_call
      000AF7 15 81            [12] 1978 	dec	sp
      000AF9 15 81            [12] 1979 	dec	sp
      000AFB 15 81            [12] 1980 	dec	sp
      000AFD D0*00            [24] 1981 	pop	bits
      000AFF D0 04            [24] 1982 	pop	ar4
      000B01 D0 05            [24] 1983 	pop	ar5
      000B03 D0 06            [24] 1984 	pop	ar6
      000B05 D0 07            [24] 1985 	pop	ar7
      000B07 0D               [12] 1986 	inc	r5
      000B08 80 A5            [24] 1987 	sjmp	00165$
      000B0A                       1988 00253$:
      000B0A E5*00            [12] 1989 	mov	a,_bp
      000B0C 24 0A            [12] 1990 	add	a,#0x0a
      000B0E F8               [12] 1991 	mov	r0,a
      000B0F A6 05            [24] 1992 	mov	@r0,ar5
      000B11                       1993 00169$:
                                   1994 ;	printf_large.c:406: if (left && reqWidth>minWidth)
      000B11 30*00 68         [24] 1995 	jnb	b0,00174$
      000B14 E5*00            [12] 1996 	mov	a,_bp
      000B16 24 FC            [12] 1997 	add	a,#0xfc
      000B18 F8               [12] 1998 	mov	r0,a
      000B19 C3               [12] 1999 	clr	c
      000B1A EE               [12] 2000 	mov	a,r6
      000B1B 96               [12] 2001 	subb	a,@r0
      000B1C 50 5E            [24] 2002 	jnc	00174$
                                   2003 ;	printf_large.c:408: while (reqWidth-->minWidth)
      000B1E E5*00            [12] 2004 	mov	a,_bp
      000B20 24 0A            [12] 2005 	add	a,#0x0a
      000B22 F8               [12] 2006 	mov	r0,a
      000B23 86 07            [24] 2007 	mov	ar7,@r0
      000B25 E5*00            [12] 2008 	mov	a,_bp
      000B27 24 FC            [12] 2009 	add	a,#0xfc
      000B29 F8               [12] 2010 	mov	r0,a
      000B2A 86 05            [24] 2011 	mov	ar5,@r0
      000B2C                       2012 00170$:
      000B2C 8D 04            [24] 2013 	mov	ar4,r5
      000B2E 1D               [12] 2014 	dec	r5
      000B2F C3               [12] 2015 	clr	c
      000B30 EE               [12] 2016 	mov	a,r6
      000B31 9C               [12] 2017 	subb	a,r4
      000B32 50 41            [24] 2018 	jnc	00254$
                                   2019 ;	printf_large.c:410: OUTPUT_CHAR(' ', p);
      000B34 C0 07            [24] 2020 	push	ar7
      000B36 C0 06            [24] 2021 	push	ar6
      000B38 C0 05            [24] 2022 	push	ar5
      000B3A E5*00            [12] 2023 	mov	a,_bp
      000B3C 24 F5            [12] 2024 	add	a,#0xf5
      000B3E F8               [12] 2025 	mov	r0,a
      000B3F E6               [12] 2026 	mov	a,@r0
      000B40 C0 E0            [24] 2027 	push	acc
      000B42 08               [12] 2028 	inc	r0
      000B43 E6               [12] 2029 	mov	a,@r0
      000B44 C0 E0            [24] 2030 	push	acc
      000B46 08               [12] 2031 	inc	r0
      000B47 E6               [12] 2032 	mov	a,@r0
      000B48 C0 E0            [24] 2033 	push	acc
      000B4A E5*00            [12] 2034 	mov	a,_bp
      000B4C 24 F8            [12] 2035 	add	a,#0xf8
      000B4E F8               [12] 2036 	mov	r0,a
      000B4F E6               [12] 2037 	mov	a,@r0
      000B50 C0 E0            [24] 2038 	push	acc
      000B52 08               [12] 2039 	inc	r0
      000B53 E6               [12] 2040 	mov	a,@r0
      000B54 C0 E0            [24] 2041 	push	acc
      000B56 08               [12] 2042 	inc	r0
      000B57 E6               [12] 2043 	mov	a,@r0
      000B58 C0 E0            [24] 2044 	push	acc
      000B5A 75 82 20         [24] 2045 	mov	dpl,#0x20
      000B5D D0 02            [24] 2046 	pop	ar2
      000B5F D0 01            [24] 2047 	pop	ar1
      000B61 D0 00            [24] 2048 	pop	ar0
      000B63 12r00r00         [24] 2049 	lcall	__sdcc_banked_call
      000B66 15 81            [12] 2050 	dec	sp
      000B68 15 81            [12] 2051 	dec	sp
      000B6A 15 81            [12] 2052 	dec	sp
      000B6C D0 05            [24] 2053 	pop	ar5
      000B6E D0 06            [24] 2054 	pop	ar6
      000B70 D0 07            [24] 2055 	pop	ar7
      000B72 0F               [12] 2056 	inc	r7
      000B73 80 B7            [24] 2057 	sjmp	00170$
      000B75                       2058 00254$:
      000B75 E5*00            [12] 2059 	mov	a,_bp
      000B77 24 0A            [12] 2060 	add	a,#0x0a
      000B79 F8               [12] 2061 	mov	r0,a
      000B7A A6 07            [24] 2062 	mov	@r0,ar7
      000B7C                       2063 00174$:
                                   2064 ;	printf_large.c:414: if (exp != -128)
      000B7C E5*00            [12] 2065 	mov	a,_bp
      000B7E 24 09            [12] 2066 	add	a,#0x09
      000B80 F8               [12] 2067 	mov	r0,a
      000B81 B6 80 03         [24] 2068 	cjne	@r0,#0x80,00383$
      000B84 02r0CrAF         [24] 2069 	ljmp	00179$
      000B87                       2070 00383$:
                                   2071 ;	printf_large.c:416: OUTPUT_CHAR ('e', p);
      000B87 E5*00            [12] 2072 	mov	a,_bp
      000B89 24 F5            [12] 2073 	add	a,#0xf5
      000B8B F8               [12] 2074 	mov	r0,a
      000B8C E6               [12] 2075 	mov	a,@r0
      000B8D C0 E0            [24] 2076 	push	acc
      000B8F 08               [12] 2077 	inc	r0
      000B90 E6               [12] 2078 	mov	a,@r0
      000B91 C0 E0            [24] 2079 	push	acc
      000B93 08               [12] 2080 	inc	r0
      000B94 E6               [12] 2081 	mov	a,@r0
      000B95 C0 E0            [24] 2082 	push	acc
      000B97 E5*00            [12] 2083 	mov	a,_bp
      000B99 24 F8            [12] 2084 	add	a,#0xf8
      000B9B F8               [12] 2085 	mov	r0,a
      000B9C E6               [12] 2086 	mov	a,@r0
      000B9D C0 E0            [24] 2087 	push	acc
      000B9F 08               [12] 2088 	inc	r0
      000BA0 E6               [12] 2089 	mov	a,@r0
      000BA1 C0 E0            [24] 2090 	push	acc
      000BA3 08               [12] 2091 	inc	r0
      000BA4 E6               [12] 2092 	mov	a,@r0
      000BA5 C0 E0            [24] 2093 	push	acc
      000BA7 75 82 65         [24] 2094 	mov	dpl,#0x65
      000BAA D0 02            [24] 2095 	pop	ar2
      000BAC D0 01            [24] 2096 	pop	ar1
      000BAE D0 00            [24] 2097 	pop	ar0
      000BB0 12r00r00         [24] 2098 	lcall	__sdcc_banked_call
      000BB3 15 81            [12] 2099 	dec	sp
      000BB5 15 81            [12] 2100 	dec	sp
      000BB7 15 81            [12] 2101 	dec	sp
      000BB9 E5*00            [12] 2102 	mov	a,_bp
      000BBB 24 0A            [12] 2103 	add	a,#0x0a
      000BBD F8               [12] 2104 	mov	r0,a
      000BBE 06               [12] 2105 	inc	@r0
                                   2106 ;	printf_large.c:417: if (exp<0)
      000BBF E5*00            [12] 2107 	mov	a,_bp
      000BC1 24 09            [12] 2108 	add	a,#0x09
      000BC3 F8               [12] 2109 	mov	r0,a
      000BC4 E6               [12] 2110 	mov	a,@r0
      000BC5 30 E7 41         [24] 2111 	jnb	acc.7,00177$
                                   2112 ;	printf_large.c:419: OUTPUT_CHAR ('-', p);
      000BC8 E5*00            [12] 2113 	mov	a,_bp
      000BCA 24 F5            [12] 2114 	add	a,#0xf5
      000BCC F8               [12] 2115 	mov	r0,a
      000BCD E6               [12] 2116 	mov	a,@r0
      000BCE C0 E0            [24] 2117 	push	acc
      000BD0 08               [12] 2118 	inc	r0
      000BD1 E6               [12] 2119 	mov	a,@r0
      000BD2 C0 E0            [24] 2120 	push	acc
      000BD4 08               [12] 2121 	inc	r0
      000BD5 E6               [12] 2122 	mov	a,@r0
      000BD6 C0 E0            [24] 2123 	push	acc
      000BD8 E5*00            [12] 2124 	mov	a,_bp
      000BDA 24 F8            [12] 2125 	add	a,#0xf8
      000BDC F8               [12] 2126 	mov	r0,a
      000BDD E6               [12] 2127 	mov	a,@r0
      000BDE C0 E0            [24] 2128 	push	acc
      000BE0 08               [12] 2129 	inc	r0
      000BE1 E6               [12] 2130 	mov	a,@r0
      000BE2 C0 E0            [24] 2131 	push	acc
      000BE4 08               [12] 2132 	inc	r0
      000BE5 E6               [12] 2133 	mov	a,@r0
      000BE6 C0 E0            [24] 2134 	push	acc
      000BE8 75 82 2D         [24] 2135 	mov	dpl,#0x2D
      000BEB D0 02            [24] 2136 	pop	ar2
      000BED D0 01            [24] 2137 	pop	ar1
      000BEF D0 00            [24] 2138 	pop	ar0
      000BF1 12r00r00         [24] 2139 	lcall	__sdcc_banked_call
      000BF4 15 81            [12] 2140 	dec	sp
      000BF6 15 81            [12] 2141 	dec	sp
      000BF8 15 81            [12] 2142 	dec	sp
      000BFA E5*00            [12] 2143 	mov	a,_bp
      000BFC 24 0A            [12] 2144 	add	a,#0x0a
      000BFE F8               [12] 2145 	mov	r0,a
      000BFF 06               [12] 2146 	inc	@r0
                                   2147 ;	printf_large.c:420: exp = -exp;
      000C00 E5*00            [12] 2148 	mov	a,_bp
      000C02 24 09            [12] 2149 	add	a,#0x09
      000C04 F8               [12] 2150 	mov	r0,a
      000C05 C3               [12] 2151 	clr	c
      000C06 E4               [12] 2152 	clr	a
      000C07 96               [12] 2153 	subb	a,@r0
      000C08 F6               [12] 2154 	mov	@r0,a
      000C09                       2155 00177$:
                                   2156 ;	printf_large.c:422: OUTPUT_CHAR ('0'+exp/10, p);
      000C09 E5*00            [12] 2157 	mov	a,_bp
      000C0B 24 09            [12] 2158 	add	a,#0x09
      000C0D F8               [12] 2159 	mov	r0,a
      000C0E C2 D5            [12] 2160 	clr	F0
      000C10 75 F0 0A         [24] 2161 	mov	b,#0x0a
      000C13 E6               [12] 2162 	mov	a,@r0
      000C14 30 E7 04         [24] 2163 	jnb	acc.7,00385$
      000C17 B2 D5            [12] 2164 	cpl	F0
      000C19 F4               [12] 2165 	cpl	a
      000C1A 04               [12] 2166 	inc	a
      000C1B                       2167 00385$:
      000C1B 84               [48] 2168 	div	ab
      000C1C 30 D5 02         [24] 2169 	jnb	F0,00386$
      000C1F F4               [12] 2170 	cpl	a
      000C20 04               [12] 2171 	inc	a
      000C21                       2172 00386$:
      000C21 24 30            [12] 2173 	add	a,#0x30
      000C23 FF               [12] 2174 	mov	r7,a
      000C24 E5*00            [12] 2175 	mov	a,_bp
      000C26 24 F5            [12] 2176 	add	a,#0xf5
      000C28 F8               [12] 2177 	mov	r0,a
      000C29 E6               [12] 2178 	mov	a,@r0
      000C2A C0 E0            [24] 2179 	push	acc
      000C2C 08               [12] 2180 	inc	r0
      000C2D E6               [12] 2181 	mov	a,@r0
      000C2E C0 E0            [24] 2182 	push	acc
      000C30 08               [12] 2183 	inc	r0
      000C31 E6               [12] 2184 	mov	a,@r0
      000C32 C0 E0            [24] 2185 	push	acc
      000C34 E5*00            [12] 2186 	mov	a,_bp
      000C36 24 F8            [12] 2187 	add	a,#0xf8
      000C38 F8               [12] 2188 	mov	r0,a
      000C39 E6               [12] 2189 	mov	a,@r0
      000C3A C0 E0            [24] 2190 	push	acc
      000C3C 08               [12] 2191 	inc	r0
      000C3D E6               [12] 2192 	mov	a,@r0
      000C3E C0 E0            [24] 2193 	push	acc
      000C40 08               [12] 2194 	inc	r0
      000C41 E6               [12] 2195 	mov	a,@r0
      000C42 C0 E0            [24] 2196 	push	acc
      000C44 8F 82            [24] 2197 	mov	dpl,r7
      000C46 D0 02            [24] 2198 	pop	ar2
      000C48 D0 01            [24] 2199 	pop	ar1
      000C4A D0 00            [24] 2200 	pop	ar0
      000C4C 12r00r00         [24] 2201 	lcall	__sdcc_banked_call
      000C4F 15 81            [12] 2202 	dec	sp
      000C51 15 81            [12] 2203 	dec	sp
      000C53 15 81            [12] 2204 	dec	sp
      000C55 E5*00            [12] 2205 	mov	a,_bp
      000C57 24 0A            [12] 2206 	add	a,#0x0a
      000C59 F8               [12] 2207 	mov	r0,a
      000C5A 06               [12] 2208 	inc	@r0
                                   2209 ;	printf_large.c:423: OUTPUT_CHAR ('0'+exp%10, p);
      000C5B E5*00            [12] 2210 	mov	a,_bp
      000C5D 24 09            [12] 2211 	add	a,#0x09
      000C5F F8               [12] 2212 	mov	r0,a
      000C60 75 F0 0A         [24] 2213 	mov	b,#0x0a
      000C63 E6               [12] 2214 	mov	a,@r0
      000C64 C2 D5            [12] 2215 	clr	F0
      000C66 30 E7 04         [24] 2216 	jnb	acc.7,00387$
      000C69 D2 D5            [12] 2217 	setb	F0
      000C6B F4               [12] 2218 	cpl	a
      000C6C 04               [12] 2219 	inc	a
      000C6D                       2220 00387$:
      000C6D 84               [48] 2221 	div	ab
      000C6E E5 F0            [12] 2222 	mov	a,b
      000C70 30 D5 02         [24] 2223 	jnb	F0,00388$
      000C73 F4               [12] 2224 	cpl	a
      000C74 04               [12] 2225 	inc	a
      000C75                       2226 00388$:
      000C75 24 30            [12] 2227 	add	a,#0x30
      000C77 FF               [12] 2228 	mov	r7,a
      000C78 E5*00            [12] 2229 	mov	a,_bp
      000C7A 24 F5            [12] 2230 	add	a,#0xf5
      000C7C F8               [12] 2231 	mov	r0,a
      000C7D E6               [12] 2232 	mov	a,@r0
      000C7E C0 E0            [24] 2233 	push	acc
      000C80 08               [12] 2234 	inc	r0
      000C81 E6               [12] 2235 	mov	a,@r0
      000C82 C0 E0            [24] 2236 	push	acc
      000C84 08               [12] 2237 	inc	r0
      000C85 E6               [12] 2238 	mov	a,@r0
      000C86 C0 E0            [24] 2239 	push	acc
      000C88 E5*00            [12] 2240 	mov	a,_bp
      000C8A 24 F8            [12] 2241 	add	a,#0xf8
      000C8C F8               [12] 2242 	mov	r0,a
      000C8D E6               [12] 2243 	mov	a,@r0
      000C8E C0 E0            [24] 2244 	push	acc
      000C90 08               [12] 2245 	inc	r0
      000C91 E6               [12] 2246 	mov	a,@r0
      000C92 C0 E0            [24] 2247 	push	acc
      000C94 08               [12] 2248 	inc	r0
      000C95 E6               [12] 2249 	mov	a,@r0
      000C96 C0 E0            [24] 2250 	push	acc
      000C98 8F 82            [24] 2251 	mov	dpl,r7
      000C9A D0 02            [24] 2252 	pop	ar2
      000C9C D0 01            [24] 2253 	pop	ar1
      000C9E D0 00            [24] 2254 	pop	ar0
      000CA0 12r00r00         [24] 2255 	lcall	__sdcc_banked_call
      000CA3 15 81            [12] 2256 	dec	sp
      000CA5 15 81            [12] 2257 	dec	sp
      000CA7 15 81            [12] 2258 	dec	sp
      000CA9 E5*00            [12] 2259 	mov	a,_bp
      000CAB 24 0A            [12] 2260 	add	a,#0x0a
      000CAD F8               [12] 2261 	mov	r0,a
      000CAE 06               [12] 2262 	inc	@r0
      000CAF                       2263 00179$:
                                   2264 ;	printf_large.c:426: return charsOutputted;
      000CAF E5*00            [12] 2265 	mov	a,_bp
      000CB1 24 0A            [12] 2266 	add	a,#0x0a
      000CB3 F8               [12] 2267 	mov	r0,a
      000CB4 86 82            [24] 2268 	mov	dpl,@r0
      000CB6 85*00 81         [24] 2269 	mov	sp,_bp
      000CB9 D0*00            [24] 2270 	pop	_bp
      000CBB 02r00r00         [24] 2271 	ljmp	__sdcc_banked_ret
                                   2272 ;------------------------------------------------------------
                                   2273 ;Allocation info for local variables in function '_print_format'
                                   2274 ;------------------------------------------------------------
                                   2275 ;pvoid                     Allocated to stack - _bp -6
                                   2276 ;format                    Allocated to stack - _bp -9
                                   2277 ;ap                        Allocated to stack - _bp -10
                                   2278 ;pfn                       Allocated to stack - _bp +1
                                   2279 ;left_justify              Allocated to registers b0 
                                   2280 ;zero_padding              Allocated to registers b1 
                                   2281 ;prefix_sign               Allocated to registers b2 
                                   2282 ;prefix_space              Allocated to registers b3 
                                   2283 ;signed_argument           Allocated to registers b4 
                                   2284 ;char_argument             Allocated to registers b5 
                                   2285 ;long_argument             Allocated to registers b6 
                                   2286 ;float_argument            Allocated to registers b7 
                                   2287 ;lower_case                Allocated to stack - _bp +13
                                   2288 ;value                     Allocated to stack - _bp +14
                                   2289 ;charsOutputted            Allocated to stack - _bp +11
                                   2290 ;lsd                       Allocated to registers b5 
                                   2291 ;radix                     Allocated to stack - _bp +19
                                   2292 ;width                     Allocated to stack - _bp +20
                                   2293 ;decimals                  Allocated to stack - _bp +21
                                   2294 ;length                    Allocated to registers r3 
                                   2295 ;c                         Allocated to registers r4 
                                   2296 ;memtype                   Allocated to registers r7 
                                   2297 ;store                     Allocated to stack - _bp +22
                                   2298 ;pstore                    Allocated to registers r2 
                                   2299 ;sloc0                     Allocated to stack - _bp +7
                                   2300 ;sloc1                     Allocated to stack - _bp +4
                                   2301 ;sloc2                     Allocated to stack - _bp +38
                                   2302 ;sloc3                     Allocated to stack - _bp +8
                                   2303 ;sloc4                     Allocated to stack - _bp +9
                                   2304 ;sloc5                     Allocated to stack - _bp +10
                                   2305 ;sloc6                     Allocated to stack - _bp +11
                                   2306 ;------------------------------------------------------------
                                   2307 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                   2308 ;	-----------------------------------------
                                   2309 ;	 function _print_format
                                   2310 ;	-----------------------------------------
      000CBE                       2311 __print_format:
      000CBE C0*00            [24] 2312 	push	_bp
      000CC0 85 81*00         [24] 2313 	mov	_bp,sp
      000CC3 C0 82            [24] 2314 	push	dpl
      000CC5 C0 83            [24] 2315 	push	dph
      000CC7 C0 F0            [24] 2316 	push	b
      000CC9 E5 81            [12] 2317 	mov	a,sp
      000CCB 24 18            [12] 2318 	add	a,#0x18
      000CCD F5 81            [12] 2319 	mov	sp,a
                                   2320 ;	printf_large.c:466: charsOutputted = 0;
      000CCF E5*00            [12] 2321 	mov	a,_bp
      000CD1 24 0B            [12] 2322 	add	a,#0x0b
      000CD3 F8               [12] 2323 	mov	r0,a
      000CD4 E4               [12] 2324 	clr	a
      000CD5 F6               [12] 2325 	mov	@r0,a
      000CD6 08               [12] 2326 	inc	r0
      000CD7 F6               [12] 2327 	mov	@r0,a
                                   2328 ;	printf_large.c:475: while( c=*format++ )
      000CD8 E5*00            [12] 2329 	mov	a,_bp
      000CDA 24 0E            [12] 2330 	add	a,#0x0E
      000CDC F9               [12] 2331 	mov	r1,a
      000CDD E5*00            [12] 2332 	mov	a,_bp
      000CDF 24 16            [12] 2333 	add	a,#0x16
      000CE1 C8               [12] 2334 	xch	a,r0
      000CE2 E5*00            [12] 2335 	mov	a,_bp
      000CE4 24 08            [12] 2336 	add	a,#0x08
      000CE6 C8               [12] 2337 	xch	a,r0
      000CE7 24 05            [12] 2338 	add	a,#0x05
      000CE9 F6               [12] 2339 	mov	@r0,a
      000CEA E5*00            [12] 2340 	mov	a,_bp
      000CEC 24 09            [12] 2341 	add	a,#0x09
      000CEE F8               [12] 2342 	mov	r0,a
      000CEF E5*00            [12] 2343 	mov	a,_bp
      000CF1 24 0E            [12] 2344 	add	a,#0x0E
      000CF3 F6               [12] 2345 	mov	@r0,a
      000CF4 E5*00            [12] 2346 	mov	a,_bp
      000CF6 24 09            [12] 2347 	add	a,#0x09
      000CF8 F8               [12] 2348 	mov	r0,a
      000CF9 C0 01            [24] 2349 	push	ar1
      000CFB E5*00            [12] 2350 	mov	a,_bp
      000CFD 24 07            [12] 2351 	add	a,#0x07
      000CFF F9               [12] 2352 	mov	r1,a
      000D00 74 04            [12] 2353 	mov	a,#0x04
      000D02 26               [12] 2354 	add	a,@r0
      000D03 F7               [12] 2355 	mov	@r1,a
      000D04 D0 01            [24] 2356 	pop	ar1
      000D06                       2357 00240$:
      000D06 E5*00            [12] 2358 	mov	a,_bp
      000D08 24 F7            [12] 2359 	add	a,#0xf7
      000D0A F8               [12] 2360 	mov	r0,a
      000D0B 86 02            [24] 2361 	mov	ar2,@r0
      000D0D 08               [12] 2362 	inc	r0
      000D0E 86 06            [24] 2363 	mov	ar6,@r0
      000D10 08               [12] 2364 	inc	r0
      000D11 86 07            [24] 2365 	mov	ar7,@r0
      000D13 8A 82            [24] 2366 	mov	dpl,r2
      000D15 8E 83            [24] 2367 	mov	dph,r6
      000D17 8F F0            [24] 2368 	mov	b,r7
      000D19 12r00r00         [24] 2369 	lcall	__gptrget
      000D1C FD               [12] 2370 	mov	r5,a
      000D1D E5*00            [12] 2371 	mov	a,_bp
      000D1F 24 F7            [12] 2372 	add	a,#0xf7
      000D21 F8               [12] 2373 	mov	r0,a
      000D22 74 01            [12] 2374 	mov	a,#0x01
      000D24 2A               [12] 2375 	add	a,r2
      000D25 F6               [12] 2376 	mov	@r0,a
      000D26 E4               [12] 2377 	clr	a
      000D27 3E               [12] 2378 	addc	a,r6
      000D28 08               [12] 2379 	inc	r0
      000D29 F6               [12] 2380 	mov	@r0,a
      000D2A 08               [12] 2381 	inc	r0
      000D2B A6 07            [24] 2382 	mov	@r0,ar7
      000D2D ED               [12] 2383 	mov	a,r5
      000D2E FC               [12] 2384 	mov	r4,a
      000D2F 70 03            [24] 2385 	jnz	00491$
      000D31 02r1ArA1         [24] 2386 	ljmp	00242$
      000D34                       2387 00491$:
                                   2388 ;	printf_large.c:477: if ( c=='%' )
      000D34 BC 25 02         [24] 2389 	cjne	r4,#0x25,00492$
      000D37 80 03            [24] 2390 	sjmp	00493$
      000D39                       2391 00492$:
      000D39 02r1Ar60         [24] 2392 	ljmp	00238$
      000D3C                       2393 00493$:
                                   2394 ;	printf_large.c:479: left_justify    = 0;
      000D3C C2*00            [12] 2395 	clr	b0
                                   2396 ;	printf_large.c:480: zero_padding    = 0;
      000D3E C2*00            [12] 2397 	clr	b1
                                   2398 ;	printf_large.c:481: prefix_sign     = 0;
      000D40 C2*00            [12] 2399 	clr	b2
                                   2400 ;	printf_large.c:482: prefix_space    = 0;
      000D42 C2*00            [12] 2401 	clr	b3
                                   2402 ;	printf_large.c:483: signed_argument = 0;
      000D44 C2*00            [12] 2403 	clr	b4
                                   2404 ;	printf_large.c:484: char_argument   = 0;
      000D46 C2*00            [12] 2405 	clr	b5
                                   2406 ;	printf_large.c:485: long_argument   = 0;
      000D48 C2*00            [12] 2407 	clr	b6
                                   2408 ;	printf_large.c:486: float_argument  = 0;
      000D4A C2*00            [12] 2409 	clr	b7
                                   2410 ;	printf_large.c:487: radix           = 0;
      000D4C E5*00            [12] 2411 	mov	a,_bp
      000D4E 24 13            [12] 2412 	add	a,#0x13
      000D50 F8               [12] 2413 	mov	r0,a
      000D51 76 00            [12] 2414 	mov	@r0,#0x00
                                   2415 ;	printf_large.c:488: width           = 0;
      000D53 E5*00            [12] 2416 	mov	a,_bp
      000D55 24 14            [12] 2417 	add	a,#0x14
      000D57 F8               [12] 2418 	mov	r0,a
      000D58 76 00            [12] 2419 	mov	@r0,#0x00
                                   2420 ;	printf_large.c:489: decimals        = -1;
      000D5A E5*00            [12] 2421 	mov	a,_bp
      000D5C 24 15            [12] 2422 	add	a,#0x15
      000D5E F8               [12] 2423 	mov	r0,a
      000D5F 76 FF            [12] 2424 	mov	@r0,#0xFF
                                   2425 ;	printf_large.c:491: get_conversion_spec:
      000D61 E5*00            [12] 2426 	mov	a,_bp
      000D63 24 F7            [12] 2427 	add	a,#0xf7
      000D65 F8               [12] 2428 	mov	r0,a
      000D66 86 07            [24] 2429 	mov	ar7,@r0
      000D68 08               [12] 2430 	inc	r0
      000D69 86 06            [24] 2431 	mov	ar6,@r0
      000D6B 08               [12] 2432 	inc	r0
      000D6C 86 05            [24] 2433 	mov	ar5,@r0
      000D6E                       2434 00101$:
                                   2435 ;	printf_large.c:493: c = *format++;
      000D6E 8F 82            [24] 2436 	mov	dpl,r7
      000D70 8E 83            [24] 2437 	mov	dph,r6
      000D72 8D F0            [24] 2438 	mov	b,r5
      000D74 12r00r00         [24] 2439 	lcall	__gptrget
      000D77 FC               [12] 2440 	mov	r4,a
      000D78 A3               [24] 2441 	inc	dptr
      000D79 AF 82            [24] 2442 	mov	r7,dpl
      000D7B AE 83            [24] 2443 	mov	r6,dph
      000D7D E5*00            [12] 2444 	mov	a,_bp
      000D7F 24 F7            [12] 2445 	add	a,#0xf7
      000D81 F8               [12] 2446 	mov	r0,a
      000D82 A6 07            [24] 2447 	mov	@r0,ar7
      000D84 08               [12] 2448 	inc	r0
      000D85 A6 06            [24] 2449 	mov	@r0,ar6
      000D87 08               [12] 2450 	inc	r0
      000D88 A6 05            [24] 2451 	mov	@r0,ar5
                                   2452 ;	printf_large.c:495: if (c=='%')
      000D8A BC 25 41         [24] 2453 	cjne	r4,#0x25,00103$
                                   2454 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000D8D C0 01            [24] 2455 	push	ar1
      000D8F E5*00            [12] 2456 	mov	a,_bp
      000D91 24 FA            [12] 2457 	add	a,#0xfa
      000D93 F8               [12] 2458 	mov	r0,a
      000D94 E6               [12] 2459 	mov	a,@r0
      000D95 C0 E0            [24] 2460 	push	acc
      000D97 08               [12] 2461 	inc	r0
      000D98 E6               [12] 2462 	mov	a,@r0
      000D99 C0 E0            [24] 2463 	push	acc
      000D9B 08               [12] 2464 	inc	r0
      000D9C E6               [12] 2465 	mov	a,@r0
      000D9D C0 E0            [24] 2466 	push	acc
      000D9F A8*00            [24] 2467 	mov	r0,_bp
      000DA1 08               [12] 2468 	inc	r0
      000DA2 E6               [12] 2469 	mov	a,@r0
      000DA3 C0 E0            [24] 2470 	push	acc
      000DA5 08               [12] 2471 	inc	r0
      000DA6 E6               [12] 2472 	mov	a,@r0
      000DA7 C0 E0            [24] 2473 	push	acc
      000DA9 08               [12] 2474 	inc	r0
      000DAA E6               [12] 2475 	mov	a,@r0
      000DAB C0 E0            [24] 2476 	push	acc
      000DAD 8C 82            [24] 2477 	mov	dpl,r4
      000DAF D0 02            [24] 2478 	pop	ar2
      000DB1 D0 01            [24] 2479 	pop	ar1
      000DB3 D0 00            [24] 2480 	pop	ar0
      000DB5 12r00r00         [24] 2481 	lcall	__sdcc_banked_call
      000DB8 15 81            [12] 2482 	dec	sp
      000DBA 15 81            [12] 2483 	dec	sp
      000DBC 15 81            [12] 2484 	dec	sp
      000DBE D0 01            [24] 2485 	pop	ar1
      000DC0 E5*00            [12] 2486 	mov	a,_bp
      000DC2 24 0B            [12] 2487 	add	a,#0x0b
      000DC4 F8               [12] 2488 	mov	r0,a
      000DC5 06               [12] 2489 	inc	@r0
      000DC6 B6 00 02         [24] 2490 	cjne	@r0,#0x00,00496$
      000DC9 08               [12] 2491 	inc	r0
      000DCA 06               [12] 2492 	inc	@r0
      000DCB                       2493 00496$:
                                   2494 ;	printf_large.c:498: continue;
      000DCB 02r0Dr06         [24] 2495 	ljmp	00240$
      000DCE                       2496 00103$:
                                   2497 ;	printf_large.c:501: if (isdigit(c))
      000DCE 8C 03            [24] 2498 	mov	ar3,r4
      000DD0 BB 30 00         [24] 2499 	cjne	r3,#0x30,00497$
      000DD3                       2500 00497$:
      000DD3 40 4A            [24] 2501 	jc	00110$
      000DD5 EB               [12] 2502 	mov	a,r3
      000DD6 24 C6            [12] 2503 	add	a,#0xff - 0x39
      000DD8 40 45            [24] 2504 	jc	00110$
                                   2505 ;	printf_large.c:503: if (decimals==-1)
      000DDA E5*00            [12] 2506 	mov	a,_bp
      000DDC 24 15            [12] 2507 	add	a,#0x15
      000DDE F8               [12] 2508 	mov	r0,a
      000DDF B6 FF 25         [24] 2509 	cjne	@r0,#0xFF,00107$
                                   2510 ;	printf_large.c:505: width = 10*width + c - '0';
      000DE2 E5*00            [12] 2511 	mov	a,_bp
      000DE4 24 14            [12] 2512 	add	a,#0x14
      000DE6 F8               [12] 2513 	mov	r0,a
      000DE7 E6               [12] 2514 	mov	a,@r0
      000DE8 75 F0 0A         [24] 2515 	mov	b,#0x0A
      000DEB A4               [48] 2516 	mul	ab
      000DEC 2C               [12] 2517 	add	a,r4
      000DED FA               [12] 2518 	mov	r2,a
      000DEE E5*00            [12] 2519 	mov	a,_bp
      000DF0 24 14            [12] 2520 	add	a,#0x14
      000DF2 F8               [12] 2521 	mov	r0,a
      000DF3 EA               [12] 2522 	mov	a,r2
      000DF4 24 D0            [12] 2523 	add	a,#0xD0
      000DF6 F6               [12] 2524 	mov	@r0,a
                                   2525 ;	printf_large.c:506: if (width == 0)
      000DF7 E5*00            [12] 2526 	mov	a,_bp
      000DF9 24 14            [12] 2527 	add	a,#0x14
      000DFB F8               [12] 2528 	mov	r0,a
      000DFC E6               [12] 2529 	mov	a,@r0
      000DFD 60 03            [24] 2530 	jz	00502$
      000DFF 02r0Dr6E         [24] 2531 	ljmp	00101$
      000E02                       2532 00502$:
                                   2533 ;	printf_large.c:509: zero_padding = 1;
      000E02 D2*00            [12] 2534 	setb	b1
      000E04 02r0Dr6E         [24] 2535 	ljmp	00101$
      000E07                       2536 00107$:
                                   2537 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000E07 E5*00            [12] 2538 	mov	a,_bp
      000E09 24 15            [12] 2539 	add	a,#0x15
      000E0B F8               [12] 2540 	mov	r0,a
      000E0C E6               [12] 2541 	mov	a,@r0
      000E0D 75 F0 0A         [24] 2542 	mov	b,#0x0A
      000E10 A4               [48] 2543 	mul	ab
      000E11 2C               [12] 2544 	add	a,r4
      000E12 FA               [12] 2545 	mov	r2,a
      000E13 E5*00            [12] 2546 	mov	a,_bp
      000E15 24 15            [12] 2547 	add	a,#0x15
      000E17 F8               [12] 2548 	mov	r0,a
      000E18 EA               [12] 2549 	mov	a,r2
      000E19 24 D0            [12] 2550 	add	a,#0xD0
      000E1B F6               [12] 2551 	mov	@r0,a
                                   2552 ;	printf_large.c:516: goto get_conversion_spec;
      000E1C 02r0Dr6E         [24] 2553 	ljmp	00101$
      000E1F                       2554 00110$:
                                   2555 ;	printf_large.c:519: if (c=='.')
      000E1F BC 2E 17         [24] 2556 	cjne	r4,#0x2E,00115$
                                   2557 ;	printf_large.c:521: if (decimals==-1)
      000E22 E5*00            [12] 2558 	mov	a,_bp
      000E24 24 15            [12] 2559 	add	a,#0x15
      000E26 F8               [12] 2560 	mov	r0,a
      000E27 B6 FF 02         [24] 2561 	cjne	@r0,#0xFF,00505$
      000E2A 80 03            [24] 2562 	sjmp	00506$
      000E2C                       2563 00505$:
      000E2C 02r0Dr6E         [24] 2564 	ljmp	00101$
      000E2F                       2565 00506$:
                                   2566 ;	printf_large.c:522: decimals=0;
      000E2F E5*00            [12] 2567 	mov	a,_bp
      000E31 24 15            [12] 2568 	add	a,#0x15
      000E33 F8               [12] 2569 	mov	r0,a
      000E34 76 00            [12] 2570 	mov	@r0,#0x00
                                   2571 ;	printf_large.c:525: goto get_conversion_spec;
      000E36 02r0Dr6E         [24] 2572 	ljmp	00101$
      000E39                       2573 00115$:
                                   2574 ;	printf_large.c:528: if (islower(c))
      000E39 8C 03            [24] 2575 	mov	ar3,r4
      000E3B BB 61 00         [24] 2576 	cjne	r3,#0x61,00507$
      000E3E                       2577 00507$:
      000E3E 40 11            [24] 2578 	jc	00117$
      000E40 EB               [12] 2579 	mov	a,r3
      000E41 24 85            [12] 2580 	add	a,#0xff - 0x7A
      000E43 40 0C            [24] 2581 	jc	00117$
                                   2582 ;	printf_large.c:530: c = toupper(c);
      000E45 53 04 DF         [24] 2583 	anl	ar4,#0xDF
                                   2584 ;	printf_large.c:531: lower_case = 1;
      000E48 E5*00            [12] 2585 	mov	a,_bp
      000E4A 24 0D            [12] 2586 	add	a,#0x0d
      000E4C F8               [12] 2587 	mov	r0,a
      000E4D 76 01            [12] 2588 	mov	@r0,#0x01
      000E4F 80 07            [24] 2589 	sjmp	00118$
      000E51                       2590 00117$:
                                   2591 ;	printf_large.c:534: lower_case = 0;
      000E51 E5*00            [12] 2592 	mov	a,_bp
      000E53 24 0D            [12] 2593 	add	a,#0x0d
      000E55 F8               [12] 2594 	mov	r0,a
      000E56 76 00            [12] 2595 	mov	@r0,#0x00
      000E58                       2596 00118$:
                                   2597 ;	printf_large.c:536: switch( c )
      000E58 BC 20 02         [24] 2598 	cjne	r4,#0x20,00510$
      000E5B 80 6E            [24] 2599 	sjmp	00122$
      000E5D                       2600 00510$:
      000E5D BC 2B 02         [24] 2601 	cjne	r4,#0x2B,00511$
      000E60 80 64            [24] 2602 	sjmp	00121$
      000E62                       2603 00511$:
      000E62 BC 2D 02         [24] 2604 	cjne	r4,#0x2D,00512$
      000E65 80 5A            [24] 2605 	sjmp	00120$
      000E67                       2606 00512$:
      000E67 BC 42 02         [24] 2607 	cjne	r4,#0x42,00513$
      000E6A 80 64            [24] 2608 	sjmp	00123$
      000E6C                       2609 00513$:
      000E6C BC 43 02         [24] 2610 	cjne	r4,#0x43,00514$
      000E6F 80 69            [24] 2611 	sjmp	00129$
      000E71                       2612 00514$:
      000E71 BC 44 03         [24] 2613 	cjne	r4,#0x44,00515$
      000E74 02r13rD8         [24] 2614 	ljmp	00166$
      000E77                       2615 00515$:
      000E77 BC 46 03         [24] 2616 	cjne	r4,#0x46,00516$
      000E7A 02r13rFE         [24] 2617 	ljmp	00170$
      000E7D                       2618 00516$:
      000E7D BC 48 03         [24] 2619 	cjne	r4,#0x48,00517$
      000E80 02r0Dr6E         [24] 2620 	ljmp	00101$
      000E83                       2621 00517$:
      000E83 BC 49 03         [24] 2622 	cjne	r4,#0x49,00518$
      000E86 02r13rD8         [24] 2623 	ljmp	00166$
      000E89                       2624 00518$:
      000E89 BC 4A 03         [24] 2625 	cjne	r4,#0x4A,00519$
      000E8C 02r0Dr6E         [24] 2626 	ljmp	00101$
      000E8F                       2627 00519$:
      000E8F BC 4C 02         [24] 2628 	cjne	r4,#0x4C,00520$
      000E92 80 41            [24] 2629 	sjmp	00128$
      000E94                       2630 00520$:
      000E94 BC 4F 03         [24] 2631 	cjne	r4,#0x4F,00521$
      000E97 02r13rE3         [24] 2632 	ljmp	00167$
      000E9A                       2633 00521$:
      000E9A BC 50 03         [24] 2634 	cjne	r4,#0x50,00522$
      000E9D 02r11r9F         [24] 2635 	ljmp	00152$
      000EA0                       2636 00522$:
      000EA0 BC 53 03         [24] 2637 	cjne	r4,#0x53,00523$
      000EA3 02r0Fr50         [24] 2638 	ljmp	00133$
      000EA6                       2639 00523$:
      000EA6 BC 54 03         [24] 2640 	cjne	r4,#0x54,00524$
      000EA9 02r0Dr6E         [24] 2641 	ljmp	00101$
      000EAC                       2642 00524$:
      000EAC BC 55 03         [24] 2643 	cjne	r4,#0x55,00525$
      000EAF 02r13rEC         [24] 2644 	ljmp	00168$
      000EB2                       2645 00525$:
      000EB2 BC 58 03         [24] 2646 	cjne	r4,#0x58,00526$
      000EB5 02r13rF5         [24] 2647 	ljmp	00169$
      000EB8                       2648 00526$:
      000EB8 BC 5A 03         [24] 2649 	cjne	r4,#0x5A,00527$
      000EBB 02r0Dr6E         [24] 2650 	ljmp	00101$
      000EBE                       2651 00527$:
      000EBE 02r14r02         [24] 2652 	ljmp	00171$
                                   2653 ;	printf_large.c:538: case '-':
      000EC1                       2654 00120$:
                                   2655 ;	printf_large.c:539: left_justify = 1;
      000EC1 D2*00            [12] 2656 	setb	b0
                                   2657 ;	printf_large.c:540: goto get_conversion_spec;
      000EC3 02r0Dr6E         [24] 2658 	ljmp	00101$
                                   2659 ;	printf_large.c:541: case '+':
      000EC6                       2660 00121$:
                                   2661 ;	printf_large.c:542: prefix_sign = 1;
      000EC6 D2*00            [12] 2662 	setb	b2
                                   2663 ;	printf_large.c:543: goto get_conversion_spec;
      000EC8 02r0Dr6E         [24] 2664 	ljmp	00101$
                                   2665 ;	printf_large.c:544: case ' ':
      000ECB                       2666 00122$:
                                   2667 ;	printf_large.c:545: prefix_space = 1;
      000ECB D2*00            [12] 2668 	setb	b3
                                   2669 ;	printf_large.c:546: goto get_conversion_spec;
      000ECD 02r0Dr6E         [24] 2670 	ljmp	00101$
                                   2671 ;	printf_large.c:547: case 'B': /* byte */
      000ED0                       2672 00123$:
                                   2673 ;	printf_large.c:548: char_argument = 1;
      000ED0 D2*00            [12] 2674 	setb	b5
                                   2675 ;	printf_large.c:549: goto get_conversion_spec;
      000ED2 02r0Dr6E         [24] 2676 	ljmp	00101$
                                   2677 ;	printf_large.c:556: case 'L': /* long */
      000ED5                       2678 00128$:
                                   2679 ;	printf_large.c:557: long_argument = 1;
      000ED5 D2*00            [12] 2680 	setb	b6
                                   2681 ;	printf_large.c:558: goto get_conversion_spec;
      000ED7 02r0Dr6E         [24] 2682 	ljmp	00101$
                                   2683 ;	printf_large.c:560: case 'C':
      000EDA                       2684 00129$:
                                   2685 ;	printf_large.c:561: if( char_argument )
      000EDA 30*00 15         [24] 2686 	jnb	b5,00131$
                                   2687 ;	printf_large.c:562: c = va_arg(ap,char);
      000EDD E5*00            [12] 2688 	mov	a,_bp
      000EDF 24 F6            [12] 2689 	add	a,#0xf6
      000EE1 F8               [12] 2690 	mov	r0,a
      000EE2 E6               [12] 2691 	mov	a,@r0
      000EE3 14               [12] 2692 	dec	a
      000EE4 FA               [12] 2693 	mov	r2,a
      000EE5 E5*00            [12] 2694 	mov	a,_bp
      000EE7 24 F6            [12] 2695 	add	a,#0xf6
      000EE9 F8               [12] 2696 	mov	r0,a
      000EEA A6 02            [24] 2697 	mov	@r0,ar2
      000EEC A8 02            [24] 2698 	mov	r0,ar2
      000EEE 86 04            [24] 2699 	mov	ar4,@r0
      000EF0 80 19            [24] 2700 	sjmp	00132$
      000EF2                       2701 00131$:
                                   2702 ;	printf_large.c:564: c = va_arg(ap,int);
      000EF2 E5*00            [12] 2703 	mov	a,_bp
      000EF4 24 F6            [12] 2704 	add	a,#0xf6
      000EF6 F8               [12] 2705 	mov	r0,a
      000EF7 E6               [12] 2706 	mov	a,@r0
      000EF8 24 FE            [12] 2707 	add	a,#0xFE
      000EFA FA               [12] 2708 	mov	r2,a
      000EFB E5*00            [12] 2709 	mov	a,_bp
      000EFD 24 F6            [12] 2710 	add	a,#0xf6
      000EFF F8               [12] 2711 	mov	r0,a
      000F00 A6 02            [24] 2712 	mov	@r0,ar2
      000F02 A8 02            [24] 2713 	mov	r0,ar2
      000F04 86 02            [24] 2714 	mov	ar2,@r0
      000F06 08               [12] 2715 	inc	r0
      000F07 86 07            [24] 2716 	mov	ar7,@r0
      000F09 8A 04            [24] 2717 	mov	ar4,r2
                                   2718 ;	printf_large.c:872: return charsOutputted;
                                   2719 ;	printf_large.c:564: c = va_arg(ap,int);
      000F0B                       2720 00132$:
                                   2721 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000F0B C0 01            [24] 2722 	push	ar1
      000F0D C0*00            [24] 2723 	push	bits
      000F0F E5*00            [12] 2724 	mov	a,_bp
      000F11 24 FA            [12] 2725 	add	a,#0xfa
      000F13 F8               [12] 2726 	mov	r0,a
      000F14 E6               [12] 2727 	mov	a,@r0
      000F15 C0 E0            [24] 2728 	push	acc
      000F17 08               [12] 2729 	inc	r0
      000F18 E6               [12] 2730 	mov	a,@r0
      000F19 C0 E0            [24] 2731 	push	acc
      000F1B 08               [12] 2732 	inc	r0
      000F1C E6               [12] 2733 	mov	a,@r0
      000F1D C0 E0            [24] 2734 	push	acc
      000F1F A8*00            [24] 2735 	mov	r0,_bp
      000F21 08               [12] 2736 	inc	r0
      000F22 E6               [12] 2737 	mov	a,@r0
      000F23 C0 E0            [24] 2738 	push	acc
      000F25 08               [12] 2739 	inc	r0
      000F26 E6               [12] 2740 	mov	a,@r0
      000F27 C0 E0            [24] 2741 	push	acc
      000F29 08               [12] 2742 	inc	r0
      000F2A E6               [12] 2743 	mov	a,@r0
      000F2B C0 E0            [24] 2744 	push	acc
      000F2D 8C 82            [24] 2745 	mov	dpl,r4
      000F2F D0 02            [24] 2746 	pop	ar2
      000F31 D0 01            [24] 2747 	pop	ar1
      000F33 D0 00            [24] 2748 	pop	ar0
      000F35 12r00r00         [24] 2749 	lcall	__sdcc_banked_call
      000F38 15 81            [12] 2750 	dec	sp
      000F3A 15 81            [12] 2751 	dec	sp
      000F3C 15 81            [12] 2752 	dec	sp
      000F3E D0*00            [24] 2753 	pop	bits
      000F40 D0 01            [24] 2754 	pop	ar1
      000F42 E5*00            [12] 2755 	mov	a,_bp
      000F44 24 0B            [12] 2756 	add	a,#0x0b
      000F46 F8               [12] 2757 	mov	r0,a
      000F47 06               [12] 2758 	inc	@r0
      000F48 B6 00 02         [24] 2759 	cjne	@r0,#0x00,00529$
      000F4B 08               [12] 2760 	inc	r0
      000F4C 06               [12] 2761 	inc	@r0
      000F4D                       2762 00529$:
                                   2763 ;	printf_large.c:566: break;
      000F4D 02r14r57         [24] 2764 	ljmp	00172$
                                   2765 ;	printf_large.c:568: case 'S':
      000F50                       2766 00133$:
                                   2767 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000F50 E5*00            [12] 2768 	mov	a,_bp
      000F52 24 0E            [12] 2769 	add	a,#0x0E
      000F54 FF               [12] 2770 	mov	r7,a
      000F55 E5*00            [12] 2771 	mov	a,_bp
      000F57 24 F6            [12] 2772 	add	a,#0xf6
      000F59 F8               [12] 2773 	mov	r0,a
      000F5A E6               [12] 2774 	mov	a,@r0
      000F5B 24 FD            [12] 2775 	add	a,#0xFD
      000F5D FA               [12] 2776 	mov	r2,a
      000F5E E5*00            [12] 2777 	mov	a,_bp
      000F60 24 F6            [12] 2778 	add	a,#0xf6
      000F62 F8               [12] 2779 	mov	r0,a
      000F63 A6 02            [24] 2780 	mov	@r0,ar2
      000F65 A8 02            [24] 2781 	mov	r0,ar2
      000F67 86 02            [24] 2782 	mov	ar2,@r0
      000F69 08               [12] 2783 	inc	r0
      000F6A 86 05            [24] 2784 	mov	ar5,@r0
      000F6C 08               [12] 2785 	inc	r0
      000F6D 86 06            [24] 2786 	mov	ar6,@r0
      000F6F A8 07            [24] 2787 	mov	r0,ar7
      000F71 A6 02            [24] 2788 	mov	@r0,ar2
      000F73 08               [12] 2789 	inc	r0
      000F74 A6 05            [24] 2790 	mov	@r0,ar5
      000F76 08               [12] 2791 	inc	r0
      000F77 A6 06            [24] 2792 	mov	@r0,ar6
                                   2793 ;	printf_large.c:582: length = strlen(PTR);
      000F79 8A 82            [24] 2794 	mov	dpl,r2
      000F7B 8D 83            [24] 2795 	mov	dph,r5
      000F7D 8E F0            [24] 2796 	mov	b,r6
      000F7F C0 07            [24] 2797 	push	ar7
      000F81 C0 01            [24] 2798 	push	ar1
      000F83 C0*00            [24] 2799 	push	bits
      000F85 78r00            [12] 2800 	mov	r0,#_strlen
      000F87 79s00            [12] 2801 	mov	r1,#(_strlen >> 8)
      000F89 7As00            [12] 2802 	mov	r2,#(_strlen >> 16)
      000F8B 12r00r00         [24] 2803 	lcall	__sdcc_banked_call
      000F8E AD 82            [24] 2804 	mov	r5,dpl
      000F90 AE 83            [24] 2805 	mov	r6,dph
      000F92 D0*00            [24] 2806 	pop	bits
      000F94 D0 01            [24] 2807 	pop	ar1
      000F96 D0 07            [24] 2808 	pop	ar7
      000F98 8D 03            [24] 2809 	mov	ar3,r5
                                   2810 ;	printf_large.c:584: if ( decimals == -1 )
      000F9A E5*00            [12] 2811 	mov	a,_bp
      000F9C 24 15            [12] 2812 	add	a,#0x15
      000F9E F8               [12] 2813 	mov	r0,a
      000F9F B6 FF 07         [24] 2814 	cjne	@r0,#0xFF,00135$
                                   2815 ;	printf_large.c:586: decimals = length;
      000FA2 E5*00            [12] 2816 	mov	a,_bp
      000FA4 24 15            [12] 2817 	add	a,#0x15
      000FA6 F8               [12] 2818 	mov	r0,a
      000FA7 A6 03            [24] 2819 	mov	@r0,ar3
      000FA9                       2820 00135$:
                                   2821 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000FA9 30*00 03         [24] 2822 	jnb	b0,00532$
      000FAC 02r10r40         [24] 2823 	ljmp	00286$
      000FAF                       2824 00532$:
      000FAF E5*00            [12] 2825 	mov	a,_bp
      000FB1 24 14            [12] 2826 	add	a,#0x14
      000FB3 F8               [12] 2827 	mov	r0,a
      000FB4 C3               [12] 2828 	clr	c
      000FB5 EB               [12] 2829 	mov	a,r3
      000FB6 96               [12] 2830 	subb	a,@r0
      000FB7 40 03            [24] 2831 	jc	00533$
      000FB9 02r10r40         [24] 2832 	ljmp	00286$
      000FBC                       2833 00533$:
                                   2834 ;	printf_large.c:590: width -= length;
      000FBC E5*00            [12] 2835 	mov	a,_bp
      000FBE 24 14            [12] 2836 	add	a,#0x14
      000FC0 F8               [12] 2837 	mov	r0,a
      000FC1 E6               [12] 2838 	mov	a,@r0
      000FC2 C3               [12] 2839 	clr	c
      000FC3 9B               [12] 2840 	subb	a,r3
      000FC4 F6               [12] 2841 	mov	@r0,a
                                   2842 ;	printf_large.c:591: while( width-- != 0 )
      000FC5 E5*00            [12] 2843 	mov	a,_bp
      000FC7 24 0B            [12] 2844 	add	a,#0x0b
      000FC9 F8               [12] 2845 	mov	r0,a
      000FCA 86 05            [24] 2846 	mov	ar5,@r0
      000FCC 08               [12] 2847 	inc	r0
      000FCD 86 06            [24] 2848 	mov	ar6,@r0
      000FCF E5*00            [12] 2849 	mov	a,_bp
      000FD1 24 14            [12] 2850 	add	a,#0x14
      000FD3 F8               [12] 2851 	mov	r0,a
      000FD4 86 04            [24] 2852 	mov	ar4,@r0
      000FD6                       2853 00136$:
      000FD6 8C 02            [24] 2854 	mov	ar2,r4
      000FD8 1C               [12] 2855 	dec	r4
      000FD9 EA               [12] 2856 	mov	a,r2
      000FDA 60 53            [24] 2857 	jz	00324$
                                   2858 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000FDC C0 07            [24] 2859 	push	ar7
      000FDE C0 06            [24] 2860 	push	ar6
      000FE0 C0 05            [24] 2861 	push	ar5
      000FE2 C0 04            [24] 2862 	push	ar4
      000FE4 C0 03            [24] 2863 	push	ar3
      000FE6 C0 01            [24] 2864 	push	ar1
      000FE8 C0*00            [24] 2865 	push	bits
      000FEA E5*00            [12] 2866 	mov	a,_bp
      000FEC 24 FA            [12] 2867 	add	a,#0xfa
      000FEE F8               [12] 2868 	mov	r0,a
      000FEF E6               [12] 2869 	mov	a,@r0
      000FF0 C0 E0            [24] 2870 	push	acc
      000FF2 08               [12] 2871 	inc	r0
      000FF3 E6               [12] 2872 	mov	a,@r0
      000FF4 C0 E0            [24] 2873 	push	acc
      000FF6 08               [12] 2874 	inc	r0
      000FF7 E6               [12] 2875 	mov	a,@r0
      000FF8 C0 E0            [24] 2876 	push	acc
      000FFA A8*00            [24] 2877 	mov	r0,_bp
      000FFC 08               [12] 2878 	inc	r0
      000FFD E6               [12] 2879 	mov	a,@r0
      000FFE C0 E0            [24] 2880 	push	acc
      001000 08               [12] 2881 	inc	r0
      001001 E6               [12] 2882 	mov	a,@r0
      001002 C0 E0            [24] 2883 	push	acc
      001004 08               [12] 2884 	inc	r0
      001005 E6               [12] 2885 	mov	a,@r0
      001006 C0 E0            [24] 2886 	push	acc
      001008 75 82 20         [24] 2887 	mov	dpl,#0x20
      00100B D0 02            [24] 2888 	pop	ar2
      00100D D0 01            [24] 2889 	pop	ar1
      00100F D0 00            [24] 2890 	pop	ar0
      001011 12r00r00         [24] 2891 	lcall	__sdcc_banked_call
      001014 15 81            [12] 2892 	dec	sp
      001016 15 81            [12] 2893 	dec	sp
      001018 15 81            [12] 2894 	dec	sp
      00101A D0*00            [24] 2895 	pop	bits
      00101C D0 01            [24] 2896 	pop	ar1
      00101E D0 03            [24] 2897 	pop	ar3
      001020 D0 04            [24] 2898 	pop	ar4
      001022 D0 05            [24] 2899 	pop	ar5
      001024 D0 06            [24] 2900 	pop	ar6
      001026 D0 07            [24] 2901 	pop	ar7
      001028 0D               [12] 2902 	inc	r5
                                   2903 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      001029 BD 00 AA         [24] 2904 	cjne	r5,#0x00,00136$
      00102C 0E               [12] 2905 	inc	r6
      00102D 80 A7            [24] 2906 	sjmp	00136$
      00102F                       2907 00324$:
      00102F E5*00            [12] 2908 	mov	a,_bp
      001031 24 0B            [12] 2909 	add	a,#0x0b
      001033 F8               [12] 2910 	mov	r0,a
      001034 A6 05            [24] 2911 	mov	@r0,ar5
      001036 08               [12] 2912 	inc	r0
      001037 A6 06            [24] 2913 	mov	@r0,ar6
      001039 E5*00            [12] 2914 	mov	a,_bp
      00103B 24 14            [12] 2915 	add	a,#0x14
      00103D F8               [12] 2916 	mov	r0,a
      00103E A6 04            [24] 2917 	mov	@r0,ar4
      001040                       2918 00286$:
      001040 E5*00            [12] 2919 	mov	a,_bp
      001042 24 15            [12] 2920 	add	a,#0x15
      001044 F8               [12] 2921 	mov	r0,a
      001045 C0 01            [24] 2922 	push	ar1
      001047 E5*00            [12] 2923 	mov	a,_bp
      001049 24 0A            [12] 2924 	add	a,#0x0a
      00104B F9               [12] 2925 	mov	r1,a
      00104C E6               [12] 2926 	mov	a,@r0
      00104D F7               [12] 2927 	mov	@r1,a
      00104E E5*00            [12] 2928 	mov	a,_bp
      001050 24 0B            [12] 2929 	add	a,#0x0b
      001052 F8               [12] 2930 	mov	r0,a
      001053 E5*00            [12] 2931 	mov	a,_bp
      001055 24 04            [12] 2932 	add	a,#0x04
      001057 F9               [12] 2933 	mov	r1,a
      001058 E6               [12] 2934 	mov	a,@r0
      001059 F7               [12] 2935 	mov	@r1,a
      00105A 08               [12] 2936 	inc	r0
      00105B 09               [12] 2937 	inc	r1
      00105C E6               [12] 2938 	mov	a,@r0
      00105D F7               [12] 2939 	mov	@r1,a
      00105E D0 01            [24] 2940 	pop	ar1
      001060                       2941 00143$:
      001060 C0 01            [24] 2942 	push	ar1
      001062 A8 07            [24] 2943 	mov	r0,ar7
      001064 86 02            [24] 2944 	mov	ar2,@r0
      001066 08               [12] 2945 	inc	r0
      001067 86 05            [24] 2946 	mov	ar5,@r0
      001069 08               [12] 2947 	inc	r0
      00106A 86 06            [24] 2948 	mov	ar6,@r0
      00106C 8A 82            [24] 2949 	mov	dpl,r2
      00106E 8D 83            [24] 2950 	mov	dph,r5
      001070 8E F0            [24] 2951 	mov	b,r6
      001072 12r00r00         [24] 2952 	lcall	__gptrget
      001075 FA               [12] 2953 	mov	r2,a
      001076 FC               [12] 2954 	mov	r4,a
      001077 D0 01            [24] 2955 	pop	ar1
      001079 EA               [12] 2956 	mov	a,r2
      00107A 70 03            [24] 2957 	jnz	00536$
      00107C 02r10rFE         [24] 2958 	ljmp	00325$
      00107F                       2959 00536$:
      00107F E5*00            [12] 2960 	mov	a,_bp
      001081 24 0A            [12] 2961 	add	a,#0x0a
      001083 F8               [12] 2962 	mov	r0,a
      001084 86 06            [24] 2963 	mov	ar6,@r0
      001086 E5*00            [12] 2964 	mov	a,_bp
      001088 24 0A            [12] 2965 	add	a,#0x0a
      00108A F8               [12] 2966 	mov	r0,a
      00108B 16               [12] 2967 	dec	@r0
      00108C C3               [12] 2968 	clr	c
      00108D 74 80            [12] 2969 	mov	a,#(0x00 ^ 0x80)
      00108F 8E F0            [24] 2970 	mov	b,r6
      001091 63 F0 80         [24] 2971 	xrl	b,#0x80
      001094 95 F0            [12] 2972 	subb	a,b
      001096 50 66            [24] 2973 	jnc	00325$
                                   2974 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      001098 C0 07            [24] 2975 	push	ar7
      00109A C0 03            [24] 2976 	push	ar3
      00109C C0 01            [24] 2977 	push	ar1
      00109E C0*00            [24] 2978 	push	bits
      0010A0 E5*00            [12] 2979 	mov	a,_bp
      0010A2 24 FA            [12] 2980 	add	a,#0xfa
      0010A4 F8               [12] 2981 	mov	r0,a
      0010A5 E6               [12] 2982 	mov	a,@r0
      0010A6 C0 E0            [24] 2983 	push	acc
      0010A8 08               [12] 2984 	inc	r0
      0010A9 E6               [12] 2985 	mov	a,@r0
      0010AA C0 E0            [24] 2986 	push	acc
      0010AC 08               [12] 2987 	inc	r0
      0010AD E6               [12] 2988 	mov	a,@r0
      0010AE C0 E0            [24] 2989 	push	acc
      0010B0 A8*00            [24] 2990 	mov	r0,_bp
      0010B2 08               [12] 2991 	inc	r0
      0010B3 E6               [12] 2992 	mov	a,@r0
      0010B4 C0 E0            [24] 2993 	push	acc
      0010B6 08               [12] 2994 	inc	r0
      0010B7 E6               [12] 2995 	mov	a,@r0
      0010B8 C0 E0            [24] 2996 	push	acc
      0010BA 08               [12] 2997 	inc	r0
      0010BB E6               [12] 2998 	mov	a,@r0
      0010BC C0 E0            [24] 2999 	push	acc
      0010BE 8C 82            [24] 3000 	mov	dpl,r4
      0010C0 D0 02            [24] 3001 	pop	ar2
      0010C2 D0 01            [24] 3002 	pop	ar1
      0010C4 D0 00            [24] 3003 	pop	ar0
      0010C6 12r00r00         [24] 3004 	lcall	__sdcc_banked_call
      0010C9 15 81            [12] 3005 	dec	sp
      0010CB 15 81            [12] 3006 	dec	sp
      0010CD 15 81            [12] 3007 	dec	sp
      0010CF D0*00            [24] 3008 	pop	bits
      0010D1 D0 01            [24] 3009 	pop	ar1
      0010D3 D0 03            [24] 3010 	pop	ar3
      0010D5 D0 07            [24] 3011 	pop	ar7
      0010D7 E5*00            [12] 3012 	mov	a,_bp
      0010D9 24 04            [12] 3013 	add	a,#0x04
      0010DB F8               [12] 3014 	mov	r0,a
      0010DC 06               [12] 3015 	inc	@r0
      0010DD B6 00 02         [24] 3016 	cjne	@r0,#0x00,00538$
      0010E0 08               [12] 3017 	inc	r0
      0010E1 06               [12] 3018 	inc	@r0
      0010E2                       3019 00538$:
                                   3020 ;	printf_large.c:600: PTR++;
      0010E2 A8 07            [24] 3021 	mov	r0,ar7
      0010E4 86 02            [24] 3022 	mov	ar2,@r0
      0010E6 08               [12] 3023 	inc	r0
      0010E7 86 05            [24] 3024 	mov	ar5,@r0
      0010E9 08               [12] 3025 	inc	r0
      0010EA 86 06            [24] 3026 	mov	ar6,@r0
      0010EC 0A               [12] 3027 	inc	r2
      0010ED BA 00 01         [24] 3028 	cjne	r2,#0x00,00539$
      0010F0 0D               [12] 3029 	inc	r5
      0010F1                       3030 00539$:
      0010F1 A8 07            [24] 3031 	mov	r0,ar7
      0010F3 A6 02            [24] 3032 	mov	@r0,ar2
      0010F5 08               [12] 3033 	inc	r0
      0010F6 A6 05            [24] 3034 	mov	@r0,ar5
      0010F8 08               [12] 3035 	inc	r0
      0010F9 A6 06            [24] 3036 	mov	@r0,ar6
      0010FB 02r10r60         [24] 3037 	ljmp	00143$
      0010FE                       3038 00325$:
      0010FE E5*00            [12] 3039 	mov	a,_bp
      001100 24 0A            [12] 3040 	add	a,#0x0a
      001102 F8               [12] 3041 	mov	r0,a
      001103 C0 01            [24] 3042 	push	ar1
      001105 E5*00            [12] 3043 	mov	a,_bp
      001107 24 15            [12] 3044 	add	a,#0x15
      001109 F9               [12] 3045 	mov	r1,a
      00110A E6               [12] 3046 	mov	a,@r0
      00110B F7               [12] 3047 	mov	@r1,a
      00110C E5*00            [12] 3048 	mov	a,_bp
      00110E 24 04            [12] 3049 	add	a,#0x04
      001110 F8               [12] 3050 	mov	r0,a
      001111 E5*00            [12] 3051 	mov	a,_bp
      001113 24 0B            [12] 3052 	add	a,#0x0b
      001115 F9               [12] 3053 	mov	r1,a
      001116 E6               [12] 3054 	mov	a,@r0
      001117 F7               [12] 3055 	mov	@r1,a
      001118 08               [12] 3056 	inc	r0
      001119 09               [12] 3057 	inc	r1
      00111A E6               [12] 3058 	mov	a,@r0
      00111B F7               [12] 3059 	mov	@r1,a
      00111C D0 01            [24] 3060 	pop	ar1
                                   3061 ;	printf_large.c:603: if ( left_justify && (length < width))
      00111E 20*00 03         [24] 3062 	jb	b0,00540$
      001121 02r14r57         [24] 3063 	ljmp	00172$
      001124                       3064 00540$:
      001124 E5*00            [12] 3065 	mov	a,_bp
      001126 24 14            [12] 3066 	add	a,#0x14
      001128 F8               [12] 3067 	mov	r0,a
      001129 C3               [12] 3068 	clr	c
      00112A EB               [12] 3069 	mov	a,r3
      00112B 96               [12] 3070 	subb	a,@r0
      00112C 40 03            [24] 3071 	jc	00541$
      00112E 02r14r57         [24] 3072 	ljmp	00172$
      001131                       3073 00541$:
                                   3074 ;	printf_large.c:605: width -= length;
      001131 E5*00            [12] 3075 	mov	a,_bp
      001133 24 14            [12] 3076 	add	a,#0x14
      001135 F8               [12] 3077 	mov	r0,a
      001136 E6               [12] 3078 	mov	a,@r0
      001137 C3               [12] 3079 	clr	c
      001138 9B               [12] 3080 	subb	a,r3
      001139 F6               [12] 3081 	mov	@r0,a
                                   3082 ;	printf_large.c:606: while( width-- != 0 )
      00113A E5*00            [12] 3083 	mov	a,_bp
      00113C 24 04            [12] 3084 	add	a,#0x04
      00113E F8               [12] 3085 	mov	r0,a
      00113F 86 06            [24] 3086 	mov	ar6,@r0
      001141 08               [12] 3087 	inc	r0
      001142 86 07            [24] 3088 	mov	ar7,@r0
      001144 E5*00            [12] 3089 	mov	a,_bp
      001146 24 14            [12] 3090 	add	a,#0x14
      001148 F8               [12] 3091 	mov	r0,a
      001149 86 05            [24] 3092 	mov	ar5,@r0
      00114B                       3093 00146$:
      00114B 8D 02            [24] 3094 	mov	ar2,r5
      00114D 1D               [12] 3095 	dec	r5
      00114E EA               [12] 3096 	mov	a,r2
      00114F 70 03            [24] 3097 	jnz	00542$
      001151 02r14r46         [24] 3098 	ljmp	00326$
      001154                       3099 00542$:
                                   3100 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      001154 C0 07            [24] 3101 	push	ar7
      001156 C0 06            [24] 3102 	push	ar6
      001158 C0 05            [24] 3103 	push	ar5
      00115A C0 01            [24] 3104 	push	ar1
      00115C C0*00            [24] 3105 	push	bits
      00115E E5*00            [12] 3106 	mov	a,_bp
      001160 24 FA            [12] 3107 	add	a,#0xfa
      001162 F8               [12] 3108 	mov	r0,a
      001163 E6               [12] 3109 	mov	a,@r0
      001164 C0 E0            [24] 3110 	push	acc
      001166 08               [12] 3111 	inc	r0
      001167 E6               [12] 3112 	mov	a,@r0
      001168 C0 E0            [24] 3113 	push	acc
      00116A 08               [12] 3114 	inc	r0
      00116B E6               [12] 3115 	mov	a,@r0
      00116C C0 E0            [24] 3116 	push	acc
      00116E A8*00            [24] 3117 	mov	r0,_bp
      001170 08               [12] 3118 	inc	r0
      001171 E6               [12] 3119 	mov	a,@r0
      001172 C0 E0            [24] 3120 	push	acc
      001174 08               [12] 3121 	inc	r0
      001175 E6               [12] 3122 	mov	a,@r0
      001176 C0 E0            [24] 3123 	push	acc
      001178 08               [12] 3124 	inc	r0
      001179 E6               [12] 3125 	mov	a,@r0
      00117A C0 E0            [24] 3126 	push	acc
      00117C 75 82 20         [24] 3127 	mov	dpl,#0x20
      00117F D0 02            [24] 3128 	pop	ar2
      001181 D0 01            [24] 3129 	pop	ar1
      001183 D0 00            [24] 3130 	pop	ar0
      001185 12r00r00         [24] 3131 	lcall	__sdcc_banked_call
      001188 15 81            [12] 3132 	dec	sp
      00118A 15 81            [12] 3133 	dec	sp
      00118C 15 81            [12] 3134 	dec	sp
      00118E D0*00            [24] 3135 	pop	bits
      001190 D0 01            [24] 3136 	pop	ar1
      001192 D0 05            [24] 3137 	pop	ar5
      001194 D0 06            [24] 3138 	pop	ar6
      001196 D0 07            [24] 3139 	pop	ar7
      001198 0E               [12] 3140 	inc	r6
                                   3141 ;	printf_large.c:613: case 'P':
      001199 BE 00 AF         [24] 3142 	cjne	r6,#0x00,00146$
      00119C 0F               [12] 3143 	inc	r7
      00119D 80 AC            [24] 3144 	sjmp	00146$
      00119F                       3145 00152$:
                                   3146 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      00119F C0 01            [24] 3147 	push	ar1
      0011A1 E5*00            [12] 3148 	mov	a,_bp
      0011A3 24 0E            [12] 3149 	add	a,#0x0E
      0011A5 F8               [12] 3150 	mov	r0,a
      0011A6 C0 00            [24] 3151 	push	ar0
      0011A8 E5*00            [12] 3152 	mov	a,_bp
      0011AA 24 F6            [12] 3153 	add	a,#0xf6
      0011AC F8               [12] 3154 	mov	r0,a
      0011AD E6               [12] 3155 	mov	a,@r0
      0011AE 24 FD            [12] 3156 	add	a,#0xFD
      0011B0 FA               [12] 3157 	mov	r2,a
      0011B1 E5*00            [12] 3158 	mov	a,_bp
      0011B3 24 F6            [12] 3159 	add	a,#0xf6
      0011B5 F8               [12] 3160 	mov	r0,a
      0011B6 A6 02            [24] 3161 	mov	@r0,ar2
      0011B8 A8 02            [24] 3162 	mov	r0,ar2
      0011BA 86 02            [24] 3163 	mov	ar2,@r0
      0011BC 08               [12] 3164 	inc	r0
      0011BD 86 03            [24] 3165 	mov	ar3,@r0
      0011BF 08               [12] 3166 	inc	r0
      0011C0 86 04            [24] 3167 	mov	ar4,@r0
      0011C2 D0 00            [24] 3168 	pop	ar0
      0011C4 A6 02            [24] 3169 	mov	@r0,ar2
      0011C6 08               [12] 3170 	inc	r0
      0011C7 A6 03            [24] 3171 	mov	@r0,ar3
      0011C9 08               [12] 3172 	inc	r0
      0011CA A6 04            [24] 3173 	mov	@r0,ar4
      0011CC 18               [12] 3174 	dec	r0
      0011CD 18               [12] 3175 	dec	r0
                                   3176 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      0011CE E5*00            [12] 3177 	mov	a,_bp
      0011D0 24 0E            [12] 3178 	add	a,#0x0E
      0011D2 FE               [12] 3179 	mov	r6,a
      0011D3 24 02            [12] 3180 	add	a,#0x02
      0011D5 F9               [12] 3181 	mov	r1,a
      0011D6 87 07            [24] 3182 	mov	ar7,@r1
                                   3183 ;	printf_large.c:638: if (memtype >= 0x80)
      0011D8 BF 80 00         [24] 3184 	cjne	r7,#0x80,00544$
      0011DB                       3185 00544$:
      0011DB D0 01            [24] 3186 	pop	ar1
      0011DD 40 04            [24] 3187 	jc	00160$
                                   3188 ;	printf_large.c:639: c = 'C';
      0011DF 7C 43            [12] 3189 	mov	r4,#0x43
      0011E1 80 14            [24] 3190 	sjmp	00161$
      0011E3                       3191 00160$:
                                   3192 ;	printf_large.c:640: else if (memtype >= 0x60)
      0011E3 BF 60 00         [24] 3193 	cjne	r7,#0x60,00546$
      0011E6                       3194 00546$:
      0011E6 40 04            [24] 3195 	jc	00157$
                                   3196 ;	printf_large.c:641: c = 'P';
      0011E8 7C 50            [12] 3197 	mov	r4,#0x50
      0011EA 80 0B            [24] 3198 	sjmp	00161$
      0011EC                       3199 00157$:
                                   3200 ;	printf_large.c:642: else if (memtype >= 0x40)
      0011EC BF 40 00         [24] 3201 	cjne	r7,#0x40,00548$
      0011EF                       3202 00548$:
      0011EF 40 04            [24] 3203 	jc	00154$
                                   3204 ;	printf_large.c:643: c = 'I';
      0011F1 7C 49            [12] 3205 	mov	r4,#0x49
      0011F3 80 02            [24] 3206 	sjmp	00161$
      0011F5                       3207 00154$:
                                   3208 ;	printf_large.c:645: c = 'X';
      0011F5 7C 58            [12] 3209 	mov	r4,#0x58
      0011F7                       3210 00161$:
                                   3211 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      0011F7 C0 06            [24] 3212 	push	ar6
      0011F9 C0 04            [24] 3213 	push	ar4
      0011FB C0 01            [24] 3214 	push	ar1
      0011FD C0*00            [24] 3215 	push	bits
      0011FF E5*00            [12] 3216 	mov	a,_bp
      001201 24 FA            [12] 3217 	add	a,#0xfa
      001203 F8               [12] 3218 	mov	r0,a
      001204 E6               [12] 3219 	mov	a,@r0
      001205 C0 E0            [24] 3220 	push	acc
      001207 08               [12] 3221 	inc	r0
      001208 E6               [12] 3222 	mov	a,@r0
      001209 C0 E0            [24] 3223 	push	acc
      00120B 08               [12] 3224 	inc	r0
      00120C E6               [12] 3225 	mov	a,@r0
      00120D C0 E0            [24] 3226 	push	acc
      00120F A8*00            [24] 3227 	mov	r0,_bp
      001211 08               [12] 3228 	inc	r0
      001212 E6               [12] 3229 	mov	a,@r0
      001213 C0 E0            [24] 3230 	push	acc
      001215 08               [12] 3231 	inc	r0
      001216 E6               [12] 3232 	mov	a,@r0
      001217 C0 E0            [24] 3233 	push	acc
      001219 08               [12] 3234 	inc	r0
      00121A E6               [12] 3235 	mov	a,@r0
      00121B C0 E0            [24] 3236 	push	acc
      00121D 8C 82            [24] 3237 	mov	dpl,r4
      00121F D0 02            [24] 3238 	pop	ar2
      001221 D0 01            [24] 3239 	pop	ar1
      001223 D0 00            [24] 3240 	pop	ar0
      001225 12r00r00         [24] 3241 	lcall	__sdcc_banked_call
      001228 15 81            [12] 3242 	dec	sp
      00122A 15 81            [12] 3243 	dec	sp
      00122C 15 81            [12] 3244 	dec	sp
      00122E D0*00            [24] 3245 	pop	bits
      001230 D0 01            [24] 3246 	pop	ar1
      001232 D0 04            [24] 3247 	pop	ar4
      001234 D0 06            [24] 3248 	pop	ar6
      001236 E5*00            [12] 3249 	mov	a,_bp
      001238 24 0B            [12] 3250 	add	a,#0x0b
      00123A F8               [12] 3251 	mov	r0,a
      00123B 06               [12] 3252 	inc	@r0
      00123C B6 00 02         [24] 3253 	cjne	@r0,#0x00,00550$
      00123F 08               [12] 3254 	inc	r0
      001240 06               [12] 3255 	inc	@r0
      001241                       3256 00550$:
                                   3257 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      001241 C0 06            [24] 3258 	push	ar6
      001243 C0 04            [24] 3259 	push	ar4
      001245 C0 01            [24] 3260 	push	ar1
      001247 C0*00            [24] 3261 	push	bits
      001249 E5*00            [12] 3262 	mov	a,_bp
      00124B 24 FA            [12] 3263 	add	a,#0xfa
      00124D F8               [12] 3264 	mov	r0,a
      00124E E6               [12] 3265 	mov	a,@r0
      00124F C0 E0            [24] 3266 	push	acc
      001251 08               [12] 3267 	inc	r0
      001252 E6               [12] 3268 	mov	a,@r0
      001253 C0 E0            [24] 3269 	push	acc
      001255 08               [12] 3270 	inc	r0
      001256 E6               [12] 3271 	mov	a,@r0
      001257 C0 E0            [24] 3272 	push	acc
      001259 A8*00            [24] 3273 	mov	r0,_bp
      00125B 08               [12] 3274 	inc	r0
      00125C E6               [12] 3275 	mov	a,@r0
      00125D C0 E0            [24] 3276 	push	acc
      00125F 08               [12] 3277 	inc	r0
      001260 E6               [12] 3278 	mov	a,@r0
      001261 C0 E0            [24] 3279 	push	acc
      001263 08               [12] 3280 	inc	r0
      001264 E6               [12] 3281 	mov	a,@r0
      001265 C0 E0            [24] 3282 	push	acc
      001267 75 82 3A         [24] 3283 	mov	dpl,#0x3A
      00126A D0 02            [24] 3284 	pop	ar2
      00126C D0 01            [24] 3285 	pop	ar1
      00126E D0 00            [24] 3286 	pop	ar0
      001270 12r00r00         [24] 3287 	lcall	__sdcc_banked_call
      001273 15 81            [12] 3288 	dec	sp
      001275 15 81            [12] 3289 	dec	sp
      001277 15 81            [12] 3290 	dec	sp
      001279 D0*00            [24] 3291 	pop	bits
      00127B D0 01            [24] 3292 	pop	ar1
      00127D D0 04            [24] 3293 	pop	ar4
      00127F D0 06            [24] 3294 	pop	ar6
      001281 E5*00            [12] 3295 	mov	a,_bp
      001283 24 0B            [12] 3296 	add	a,#0x0b
      001285 F8               [12] 3297 	mov	r0,a
      001286 06               [12] 3298 	inc	@r0
      001287 B6 00 02         [24] 3299 	cjne	@r0,#0x00,00551$
      00128A 08               [12] 3300 	inc	r0
      00128B 06               [12] 3301 	inc	@r0
      00128C                       3302 00551$:
                                   3303 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      00128C C0 06            [24] 3304 	push	ar6
      00128E C0 04            [24] 3305 	push	ar4
      001290 C0 01            [24] 3306 	push	ar1
      001292 C0*00            [24] 3307 	push	bits
      001294 E5*00            [12] 3308 	mov	a,_bp
      001296 24 FA            [12] 3309 	add	a,#0xfa
      001298 F8               [12] 3310 	mov	r0,a
      001299 E6               [12] 3311 	mov	a,@r0
      00129A C0 E0            [24] 3312 	push	acc
      00129C 08               [12] 3313 	inc	r0
      00129D E6               [12] 3314 	mov	a,@r0
      00129E C0 E0            [24] 3315 	push	acc
      0012A0 08               [12] 3316 	inc	r0
      0012A1 E6               [12] 3317 	mov	a,@r0
      0012A2 C0 E0            [24] 3318 	push	acc
      0012A4 A8*00            [24] 3319 	mov	r0,_bp
      0012A6 08               [12] 3320 	inc	r0
      0012A7 E6               [12] 3321 	mov	a,@r0
      0012A8 C0 E0            [24] 3322 	push	acc
      0012AA 08               [12] 3323 	inc	r0
      0012AB E6               [12] 3324 	mov	a,@r0
      0012AC C0 E0            [24] 3325 	push	acc
      0012AE 08               [12] 3326 	inc	r0
      0012AF E6               [12] 3327 	mov	a,@r0
      0012B0 C0 E0            [24] 3328 	push	acc
      0012B2 75 82 30         [24] 3329 	mov	dpl,#0x30
      0012B5 D0 02            [24] 3330 	pop	ar2
      0012B7 D0 01            [24] 3331 	pop	ar1
      0012B9 D0 00            [24] 3332 	pop	ar0
      0012BB 12r00r00         [24] 3333 	lcall	__sdcc_banked_call
      0012BE 15 81            [12] 3334 	dec	sp
      0012C0 15 81            [12] 3335 	dec	sp
      0012C2 15 81            [12] 3336 	dec	sp
      0012C4 D0*00            [24] 3337 	pop	bits
      0012C6 D0 01            [24] 3338 	pop	ar1
      0012C8 D0 04            [24] 3339 	pop	ar4
      0012CA D0 06            [24] 3340 	pop	ar6
      0012CC E5*00            [12] 3341 	mov	a,_bp
      0012CE 24 0B            [12] 3342 	add	a,#0x0b
      0012D0 F8               [12] 3343 	mov	r0,a
      0012D1 06               [12] 3344 	inc	@r0
      0012D2 B6 00 02         [24] 3345 	cjne	@r0,#0x00,00552$
      0012D5 08               [12] 3346 	inc	r0
      0012D6 06               [12] 3347 	inc	@r0
      0012D7                       3348 00552$:
                                   3349 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      0012D7 C0 06            [24] 3350 	push	ar6
      0012D9 C0 04            [24] 3351 	push	ar4
      0012DB C0 01            [24] 3352 	push	ar1
      0012DD C0*00            [24] 3353 	push	bits
      0012DF E5*00            [12] 3354 	mov	a,_bp
      0012E1 24 FA            [12] 3355 	add	a,#0xfa
      0012E3 F8               [12] 3356 	mov	r0,a
      0012E4 E6               [12] 3357 	mov	a,@r0
      0012E5 C0 E0            [24] 3358 	push	acc
      0012E7 08               [12] 3359 	inc	r0
      0012E8 E6               [12] 3360 	mov	a,@r0
      0012E9 C0 E0            [24] 3361 	push	acc
      0012EB 08               [12] 3362 	inc	r0
      0012EC E6               [12] 3363 	mov	a,@r0
      0012ED C0 E0            [24] 3364 	push	acc
      0012EF A8*00            [24] 3365 	mov	r0,_bp
      0012F1 08               [12] 3366 	inc	r0
      0012F2 E6               [12] 3367 	mov	a,@r0
      0012F3 C0 E0            [24] 3368 	push	acc
      0012F5 08               [12] 3369 	inc	r0
      0012F6 E6               [12] 3370 	mov	a,@r0
      0012F7 C0 E0            [24] 3371 	push	acc
      0012F9 08               [12] 3372 	inc	r0
      0012FA E6               [12] 3373 	mov	a,@r0
      0012FB C0 E0            [24] 3374 	push	acc
      0012FD 75 82 78         [24] 3375 	mov	dpl,#0x78
      001300 D0 02            [24] 3376 	pop	ar2
      001302 D0 01            [24] 3377 	pop	ar1
      001304 D0 00            [24] 3378 	pop	ar0
      001306 12r00r00         [24] 3379 	lcall	__sdcc_banked_call
      001309 15 81            [12] 3380 	dec	sp
      00130B 15 81            [12] 3381 	dec	sp
      00130D 15 81            [12] 3382 	dec	sp
      00130F D0*00            [24] 3383 	pop	bits
      001311 D0 01            [24] 3384 	pop	ar1
      001313 D0 04            [24] 3385 	pop	ar4
      001315 D0 06            [24] 3386 	pop	ar6
      001317 E5*00            [12] 3387 	mov	a,_bp
      001319 24 0B            [12] 3388 	add	a,#0x0b
      00131B F8               [12] 3389 	mov	r0,a
      00131C 06               [12] 3390 	inc	@r0
      00131D B6 00 02         [24] 3391 	cjne	@r0,#0x00,00553$
      001320 08               [12] 3392 	inc	r0
      001321 06               [12] 3393 	inc	@r0
      001322                       3394 00553$:
                                   3395 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      001322 BC 49 02         [24] 3396 	cjne	r4,#0x49,00554$
      001325 80 5B            [24] 3397 	sjmp	00163$
      001327                       3398 00554$:
                                   3399 ;	printf_large.c:652: (c != 'P' /* pdata */))
      001327 BC 50 02         [24] 3400 	cjne	r4,#0x50,00555$
      00132A 80 56            [24] 3401 	sjmp	00163$
      00132C                       3402 00555$:
                                   3403 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      00132C EE               [12] 3404 	mov	a,r6
      00132D 04               [12] 3405 	inc	a
      00132E F8               [12] 3406 	mov	r0,a
      00132F 86 04            [24] 3407 	mov	ar4,@r0
      001331 C0 01            [24] 3408 	push	ar1
      001333 C0*00            [24] 3409 	push	bits
      001335 E5*00            [12] 3410 	mov	a,_bp
      001337 24 FA            [12] 3411 	add	a,#0xfa
      001339 F8               [12] 3412 	mov	r0,a
      00133A E6               [12] 3413 	mov	a,@r0
      00133B C0 E0            [24] 3414 	push	acc
      00133D 08               [12] 3415 	inc	r0
      00133E E6               [12] 3416 	mov	a,@r0
      00133F C0 E0            [24] 3417 	push	acc
      001341 08               [12] 3418 	inc	r0
      001342 E6               [12] 3419 	mov	a,@r0
      001343 C0 E0            [24] 3420 	push	acc
      001345 A8*00            [24] 3421 	mov	r0,_bp
      001347 08               [12] 3422 	inc	r0
      001348 E6               [12] 3423 	mov	a,@r0
      001349 C0 E0            [24] 3424 	push	acc
      00134B 08               [12] 3425 	inc	r0
      00134C E6               [12] 3426 	mov	a,@r0
      00134D C0 E0            [24] 3427 	push	acc
      00134F 08               [12] 3428 	inc	r0
      001350 E6               [12] 3429 	mov	a,@r0
      001351 C0 E0            [24] 3430 	push	acc
      001353 E5*00            [12] 3431 	mov	a,_bp
      001355 24 0D            [12] 3432 	add	a,#0x0d
      001357 F8               [12] 3433 	mov	r0,a
      001358 E6               [12] 3434 	mov	a,@r0
      001359 24 FF            [12] 3435 	add	a,#0xff
      00135B 92 F0            [24] 3436 	mov	b[0],c
      00135D 85 F0*00         [24] 3437 	mov	bits,b
      001360 8C 82            [24] 3438 	mov	dpl,r4
      001362 78r50            [12] 3439 	mov	r0,#_output_2digits
      001364 79s00            [12] 3440 	mov	r1,#(_output_2digits >> 8)
      001366 7As00            [12] 3441 	mov	r2,#(_output_2digits >> 16)
      001368 12r00r00         [24] 3442 	lcall	__sdcc_banked_call
      00136B E5 81            [12] 3443 	mov	a,sp
      00136D 24 FA            [12] 3444 	add	a,#0xfa
      00136F F5 81            [12] 3445 	mov	sp,a
      001371 D0*00            [24] 3446 	pop	bits
      001373 D0 01            [24] 3447 	pop	ar1
      001375 E5*00            [12] 3448 	mov	a,_bp
      001377 24 0B            [12] 3449 	add	a,#0x0b
      001379 F8               [12] 3450 	mov	r0,a
      00137A 74 02            [12] 3451 	mov	a,#0x02
      00137C 26               [12] 3452 	add	a,@r0
      00137D F6               [12] 3453 	mov	@r0,a
      00137E E4               [12] 3454 	clr	a
      00137F 08               [12] 3455 	inc	r0
      001380 36               [12] 3456 	addc	a,@r0
      001381 F6               [12] 3457 	mov	@r0,a
      001382                       3458 00163$:
                                   3459 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      001382 87 04            [24] 3460 	mov	ar4,@r1
      001384 C0 01            [24] 3461 	push	ar1
      001386 C0*00            [24] 3462 	push	bits
      001388 E5*00            [12] 3463 	mov	a,_bp
      00138A 24 FA            [12] 3464 	add	a,#0xfa
      00138C F8               [12] 3465 	mov	r0,a
      00138D E6               [12] 3466 	mov	a,@r0
      00138E C0 E0            [24] 3467 	push	acc
      001390 08               [12] 3468 	inc	r0
      001391 E6               [12] 3469 	mov	a,@r0
      001392 C0 E0            [24] 3470 	push	acc
      001394 08               [12] 3471 	inc	r0
      001395 E6               [12] 3472 	mov	a,@r0
      001396 C0 E0            [24] 3473 	push	acc
      001398 A8*00            [24] 3474 	mov	r0,_bp
      00139A 08               [12] 3475 	inc	r0
      00139B E6               [12] 3476 	mov	a,@r0
      00139C C0 E0            [24] 3477 	push	acc
      00139E 08               [12] 3478 	inc	r0
      00139F E6               [12] 3479 	mov	a,@r0
      0013A0 C0 E0            [24] 3480 	push	acc
      0013A2 08               [12] 3481 	inc	r0
      0013A3 E6               [12] 3482 	mov	a,@r0
      0013A4 C0 E0            [24] 3483 	push	acc
      0013A6 E5*00            [12] 3484 	mov	a,_bp
      0013A8 24 0D            [12] 3485 	add	a,#0x0d
      0013AA F8               [12] 3486 	mov	r0,a
      0013AB E6               [12] 3487 	mov	a,@r0
      0013AC 24 FF            [12] 3488 	add	a,#0xff
      0013AE 92 F0            [24] 3489 	mov	b[0],c
      0013B0 85 F0*00         [24] 3490 	mov	bits,b
      0013B3 8C 82            [24] 3491 	mov	dpl,r4
      0013B5 78r50            [12] 3492 	mov	r0,#_output_2digits
      0013B7 79s00            [12] 3493 	mov	r1,#(_output_2digits >> 8)
      0013B9 7As00            [12] 3494 	mov	r2,#(_output_2digits >> 16)
      0013BB 12r00r00         [24] 3495 	lcall	__sdcc_banked_call
      0013BE E5 81            [12] 3496 	mov	a,sp
      0013C0 24 FA            [12] 3497 	add	a,#0xfa
      0013C2 F5 81            [12] 3498 	mov	sp,a
      0013C4 D0*00            [24] 3499 	pop	bits
      0013C6 D0 01            [24] 3500 	pop	ar1
      0013C8 E5*00            [12] 3501 	mov	a,_bp
      0013CA 24 0B            [12] 3502 	add	a,#0x0b
      0013CC F8               [12] 3503 	mov	r0,a
      0013CD 74 02            [12] 3504 	mov	a,#0x02
      0013CF 26               [12] 3505 	add	a,@r0
      0013D0 F6               [12] 3506 	mov	@r0,a
      0013D1 E4               [12] 3507 	clr	a
      0013D2 08               [12] 3508 	inc	r0
      0013D3 36               [12] 3509 	addc	a,@r0
      0013D4 F6               [12] 3510 	mov	@r0,a
                                   3511 ;	printf_large.c:663: break;
      0013D5 02r14r57         [24] 3512 	ljmp	00172$
                                   3513 ;	printf_large.c:666: case 'I':
      0013D8                       3514 00166$:
                                   3515 ;	printf_large.c:667: signed_argument = 1;
      0013D8 D2*00            [12] 3516 	setb	b4
                                   3517 ;	printf_large.c:668: radix = 10;
      0013DA E5*00            [12] 3518 	mov	a,_bp
      0013DC 24 13            [12] 3519 	add	a,#0x13
      0013DE F8               [12] 3520 	mov	r0,a
      0013DF 76 0A            [12] 3521 	mov	@r0,#0x0A
                                   3522 ;	printf_large.c:669: break;
                                   3523 ;	printf_large.c:671: case 'O':
      0013E1 80 74            [24] 3524 	sjmp	00172$
      0013E3                       3525 00167$:
                                   3526 ;	printf_large.c:672: radix = 8;
      0013E3 E5*00            [12] 3527 	mov	a,_bp
      0013E5 24 13            [12] 3528 	add	a,#0x13
      0013E7 F8               [12] 3529 	mov	r0,a
      0013E8 76 08            [12] 3530 	mov	@r0,#0x08
                                   3531 ;	printf_large.c:673: break;
                                   3532 ;	printf_large.c:675: case 'U':
      0013EA 80 6B            [24] 3533 	sjmp	00172$
      0013EC                       3534 00168$:
                                   3535 ;	printf_large.c:676: radix = 10;
      0013EC E5*00            [12] 3536 	mov	a,_bp
      0013EE 24 13            [12] 3537 	add	a,#0x13
      0013F0 F8               [12] 3538 	mov	r0,a
      0013F1 76 0A            [12] 3539 	mov	@r0,#0x0A
                                   3540 ;	printf_large.c:677: break;
                                   3541 ;	printf_large.c:679: case 'X':
      0013F3 80 62            [24] 3542 	sjmp	00172$
      0013F5                       3543 00169$:
                                   3544 ;	printf_large.c:680: radix = 16;
      0013F5 E5*00            [12] 3545 	mov	a,_bp
      0013F7 24 13            [12] 3546 	add	a,#0x13
      0013F9 F8               [12] 3547 	mov	r0,a
      0013FA 76 10            [12] 3548 	mov	@r0,#0x10
                                   3549 ;	printf_large.c:681: break;
                                   3550 ;	printf_large.c:683: case 'F':
      0013FC 80 59            [24] 3551 	sjmp	00172$
      0013FE                       3552 00170$:
                                   3553 ;	printf_large.c:684: float_argument=1;
      0013FE D2*00            [12] 3554 	setb	b7
                                   3555 ;	printf_large.c:685: break;
                                   3556 ;	printf_large.c:687: default:
      001400 80 55            [24] 3557 	sjmp	00172$
      001402                       3558 00171$:
                                   3559 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      001402 C0 01            [24] 3560 	push	ar1
      001404 C0*00            [24] 3561 	push	bits
      001406 E5*00            [12] 3562 	mov	a,_bp
      001408 24 FA            [12] 3563 	add	a,#0xfa
      00140A F8               [12] 3564 	mov	r0,a
      00140B E6               [12] 3565 	mov	a,@r0
      00140C C0 E0            [24] 3566 	push	acc
      00140E 08               [12] 3567 	inc	r0
      00140F E6               [12] 3568 	mov	a,@r0
      001410 C0 E0            [24] 3569 	push	acc
      001412 08               [12] 3570 	inc	r0
      001413 E6               [12] 3571 	mov	a,@r0
      001414 C0 E0            [24] 3572 	push	acc
      001416 A8*00            [24] 3573 	mov	r0,_bp
      001418 08               [12] 3574 	inc	r0
      001419 E6               [12] 3575 	mov	a,@r0
      00141A C0 E0            [24] 3576 	push	acc
      00141C 08               [12] 3577 	inc	r0
      00141D E6               [12] 3578 	mov	a,@r0
      00141E C0 E0            [24] 3579 	push	acc
      001420 08               [12] 3580 	inc	r0
      001421 E6               [12] 3581 	mov	a,@r0
      001422 C0 E0            [24] 3582 	push	acc
      001424 8C 82            [24] 3583 	mov	dpl,r4
      001426 D0 02            [24] 3584 	pop	ar2
      001428 D0 01            [24] 3585 	pop	ar1
      00142A D0 00            [24] 3586 	pop	ar0
      00142C 12r00r00         [24] 3587 	lcall	__sdcc_banked_call
      00142F 15 81            [12] 3588 	dec	sp
      001431 15 81            [12] 3589 	dec	sp
      001433 15 81            [12] 3590 	dec	sp
      001435 D0*00            [24] 3591 	pop	bits
      001437 D0 01            [24] 3592 	pop	ar1
      001439 E5*00            [12] 3593 	mov	a,_bp
      00143B 24 0B            [12] 3594 	add	a,#0x0b
      00143D F8               [12] 3595 	mov	r0,a
      00143E 06               [12] 3596 	inc	@r0
      00143F B6 00 02         [24] 3597 	cjne	@r0,#0x00,00556$
      001442 08               [12] 3598 	inc	r0
      001443 06               [12] 3599 	inc	@r0
      001444                       3600 00556$:
                                   3601 ;	printf_large.c:872: return charsOutputted;
                                   3602 ;	printf_large.c:691: }
      001444 80 11            [24] 3603 	sjmp	00172$
      001446                       3604 00326$:
      001446 E5*00            [12] 3605 	mov	a,_bp
      001448 24 0B            [12] 3606 	add	a,#0x0b
      00144A F8               [12] 3607 	mov	r0,a
      00144B A6 06            [24] 3608 	mov	@r0,ar6
      00144D 08               [12] 3609 	inc	r0
      00144E A6 07            [24] 3610 	mov	@r0,ar7
      001450 E5*00            [12] 3611 	mov	a,_bp
      001452 24 14            [12] 3612 	add	a,#0x14
      001454 F8               [12] 3613 	mov	r0,a
      001455 A6 05            [24] 3614 	mov	@r0,ar5
      001457                       3615 00172$:
                                   3616 ;	printf_large.c:693: if (float_argument)
      001457 20*00 03         [24] 3617 	jb	b7,00557$
      00145A 02r15r09         [24] 3618 	ljmp	00235$
      00145D                       3619 00557$:
                                   3620 ;	printf_large.c:695: value.f = va_arg(ap, float);
      00145D E5*00            [12] 3621 	mov	a,_bp
      00145F 24 0E            [12] 3622 	add	a,#0x0E
      001461 F8               [12] 3623 	mov	r0,a
      001462 C0 00            [24] 3624 	push	ar0
      001464 E5*00            [12] 3625 	mov	a,_bp
      001466 24 F6            [12] 3626 	add	a,#0xf6
      001468 F8               [12] 3627 	mov	r0,a
      001469 E6               [12] 3628 	mov	a,@r0
      00146A 24 FC            [12] 3629 	add	a,#0xFC
      00146C FF               [12] 3630 	mov	r7,a
      00146D E5*00            [12] 3631 	mov	a,_bp
      00146F 24 F6            [12] 3632 	add	a,#0xf6
      001471 F8               [12] 3633 	mov	r0,a
      001472 A6 07            [24] 3634 	mov	@r0,ar7
      001474 A8 07            [24] 3635 	mov	r0,ar7
      001476 86 04            [24] 3636 	mov	ar4,@r0
      001478 08               [12] 3637 	inc	r0
      001479 86 05            [24] 3638 	mov	ar5,@r0
      00147B 08               [12] 3639 	inc	r0
      00147C 86 06            [24] 3640 	mov	ar6,@r0
      00147E 08               [12] 3641 	inc	r0
      00147F 86 07            [24] 3642 	mov	ar7,@r0
      001481 D0 00            [24] 3643 	pop	ar0
      001483 A6 04            [24] 3644 	mov	@r0,ar4
      001485 08               [12] 3645 	inc	r0
      001486 A6 05            [24] 3646 	mov	@r0,ar5
      001488 08               [12] 3647 	inc	r0
      001489 A6 06            [24] 3648 	mov	@r0,ar6
      00148B 08               [12] 3649 	inc	r0
      00148C A6 07            [24] 3650 	mov	@r0,ar7
      00148E 18               [12] 3651 	dec	r0
      00148F 18               [12] 3652 	dec	r0
      001490 18               [12] 3653 	dec	r0
                                   3654 ;	printf_large.c:710: charsOutputted += OUTPUT_FLOAT(value.f, width, decimals, left_justify,
      001491 E6               [12] 3655 	mov	a,@r0
      001492 08               [12] 3656 	inc	r0
      001493 E6               [12] 3657 	mov	a,@r0
      001494 08               [12] 3658 	inc	r0
      001495 E6               [12] 3659 	mov	a,@r0
      001496 08               [12] 3660 	inc	r0
      001497 E6               [12] 3661 	mov	a,@r0
      001498 18               [12] 3662 	dec	r0
      001499 18               [12] 3663 	dec	r0
      00149A 18               [12] 3664 	dec	r0
      00149B C0 01            [24] 3665 	push	ar1
      00149D E5*00            [12] 3666 	mov	a,_bp
      00149F 24 FA            [12] 3667 	add	a,#0xfa
      0014A1 F8               [12] 3668 	mov	r0,a
      0014A2 E6               [12] 3669 	mov	a,@r0
      0014A3 C0 E0            [24] 3670 	push	acc
      0014A5 08               [12] 3671 	inc	r0
      0014A6 E6               [12] 3672 	mov	a,@r0
      0014A7 C0 E0            [24] 3673 	push	acc
      0014A9 08               [12] 3674 	inc	r0
      0014AA E6               [12] 3675 	mov	a,@r0
      0014AB C0 E0            [24] 3676 	push	acc
      0014AD A8*00            [24] 3677 	mov	r0,_bp
      0014AF 08               [12] 3678 	inc	r0
      0014B0 E6               [12] 3679 	mov	a,@r0
      0014B1 C0 E0            [24] 3680 	push	acc
      0014B3 08               [12] 3681 	inc	r0
      0014B4 E6               [12] 3682 	mov	a,@r0
      0014B5 C0 E0            [24] 3683 	push	acc
      0014B7 08               [12] 3684 	inc	r0
      0014B8 E6               [12] 3685 	mov	a,@r0
      0014B9 C0 E0            [24] 3686 	push	acc
      0014BB E5*00            [12] 3687 	mov	a,_bp
      0014BD 24 15            [12] 3688 	add	a,#0x15
      0014BF F8               [12] 3689 	mov	r0,a
      0014C0 E6               [12] 3690 	mov	a,@r0
      0014C1 C0 E0            [24] 3691 	push	acc
      0014C3 E5*00            [12] 3692 	mov	a,_bp
      0014C5 24 14            [12] 3693 	add	a,#0x14
      0014C7 F8               [12] 3694 	mov	r0,a
      0014C8 E6               [12] 3695 	mov	a,@r0
      0014C9 C0 E0            [24] 3696 	push	acc
      0014CB A2*00            [12] 3697 	mov	c,b0
      0014CD 92 F0            [24] 3698 	mov	b[0],c
      0014CF A2*00            [12] 3699 	mov	c,b1
      0014D1 92 F1            [24] 3700 	mov	b[1],c
      0014D3 A2*00            [12] 3701 	mov	c,b2
      0014D5 92 F2            [24] 3702 	mov	b[2],c
      0014D7 A2*00            [12] 3703 	mov	c,b3
      0014D9 92 F3            [24] 3704 	mov	b[3],c
      0014DB 85 F0*00         [24] 3705 	mov	bits,b
      0014DE 8C 82            [24] 3706 	mov	dpl,r4
      0014E0 8D 83            [24] 3707 	mov	dph,r5
      0014E2 8E F0            [24] 3708 	mov	b,r6
      0014E4 EF               [12] 3709 	mov	a,r7
      0014E5 78r4C            [12] 3710 	mov	r0,#_output_float
      0014E7 79s01            [12] 3711 	mov	r1,#(_output_float >> 8)
      0014E9 7As00            [12] 3712 	mov	r2,#(_output_float >> 16)
      0014EB 12r00r00         [24] 3713 	lcall	__sdcc_banked_call
      0014EE AF 82            [24] 3714 	mov	r7,dpl
      0014F0 E5 81            [12] 3715 	mov	a,sp
      0014F2 24 F8            [12] 3716 	add	a,#0xf8
      0014F4 F5 81            [12] 3717 	mov	sp,a
      0014F6 D0 01            [24] 3718 	pop	ar1
      0014F8 7E 00            [12] 3719 	mov	r6,#0x00
      0014FA E5*00            [12] 3720 	mov	a,_bp
      0014FC 24 0B            [12] 3721 	add	a,#0x0b
      0014FE F8               [12] 3722 	mov	r0,a
      0014FF EF               [12] 3723 	mov	a,r7
      001500 26               [12] 3724 	add	a,@r0
      001501 F6               [12] 3725 	mov	@r0,a
      001502 EE               [12] 3726 	mov	a,r6
      001503 08               [12] 3727 	inc	r0
      001504 36               [12] 3728 	addc	a,@r0
      001505 F6               [12] 3729 	mov	@r0,a
      001506 02r0Dr06         [24] 3730 	ljmp	00240$
      001509                       3731 00235$:
                                   3732 ;	printf_large.c:718: else if (radix != 0)
      001509 E5*00            [12] 3733 	mov	a,_bp
      00150B 24 13            [12] 3734 	add	a,#0x13
      00150D F8               [12] 3735 	mov	r0,a
      00150E E6               [12] 3736 	mov	a,@r0
      00150F 70 03            [24] 3737 	jnz	00558$
      001511 02r0Dr06         [24] 3738 	ljmp	00240$
      001514                       3739 00558$:
                                   3740 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      001514 E5*00            [12] 3741 	mov	a,_bp
      001516 24 08            [12] 3742 	add	a,#0x08
      001518 F8               [12] 3743 	mov	r0,a
      001519 86 02            [24] 3744 	mov	ar2,@r0
                                   3745 ;	printf_large.c:726: if (char_argument)
      00151B 30*00 5C         [24] 3746 	jnb	b5,00181$
                                   3747 ;	printf_large.c:728: value.l = va_arg(ap, char);
      00151E E5*00            [12] 3748 	mov	a,_bp
      001520 24 0E            [12] 3749 	add	a,#0x0E
      001522 F8               [12] 3750 	mov	r0,a
      001523 C0 00            [24] 3751 	push	ar0
      001525 E5*00            [12] 3752 	mov	a,_bp
      001527 24 F6            [12] 3753 	add	a,#0xf6
      001529 F8               [12] 3754 	mov	r0,a
      00152A E6               [12] 3755 	mov	a,@r0
      00152B 14               [12] 3756 	dec	a
      00152C FF               [12] 3757 	mov	r7,a
      00152D E5*00            [12] 3758 	mov	a,_bp
      00152F 24 F6            [12] 3759 	add	a,#0xf6
      001531 F8               [12] 3760 	mov	r0,a
      001532 A6 07            [24] 3761 	mov	@r0,ar7
      001534 A8 07            [24] 3762 	mov	r0,ar7
      001536 86 07            [24] 3763 	mov	ar7,@r0
      001538 D0 00            [24] 3764 	pop	ar0
      00153A EF               [12] 3765 	mov	a,r7
      00153B 33               [12] 3766 	rlc	a
      00153C 95 E0            [12] 3767 	subb	a,acc
      00153E FE               [12] 3768 	mov	r6,a
      00153F FD               [12] 3769 	mov	r5,a
      001540 FC               [12] 3770 	mov	r4,a
      001541 A6 07            [24] 3771 	mov	@r0,ar7
      001543 08               [12] 3772 	inc	r0
      001544 A6 06            [24] 3773 	mov	@r0,ar6
      001546 08               [12] 3774 	inc	r0
      001547 A6 05            [24] 3775 	mov	@r0,ar5
      001549 08               [12] 3776 	inc	r0
      00154A A6 04            [24] 3777 	mov	@r0,ar4
      00154C 18               [12] 3778 	dec	r0
      00154D 18               [12] 3779 	dec	r0
      00154E 18               [12] 3780 	dec	r0
                                   3781 ;	printf_large.c:729: if (!signed_argument)
      00154F 30*00 03         [24] 3782 	jnb	b4,00560$
      001552 02r16r0A         [24] 3783 	ljmp	00182$
      001555                       3784 00560$:
                                   3785 ;	printf_large.c:731: value.l &= 0xFF;
      001555 86 04            [24] 3786 	mov	ar4,@r0
      001557 08               [12] 3787 	inc	r0
      001558 86 05            [24] 3788 	mov	ar5,@r0
      00155A 08               [12] 3789 	inc	r0
      00155B 86 06            [24] 3790 	mov	ar6,@r0
      00155D 08               [12] 3791 	inc	r0
      00155E 86 07            [24] 3792 	mov	ar7,@r0
      001560 18               [12] 3793 	dec	r0
      001561 18               [12] 3794 	dec	r0
      001562 18               [12] 3795 	dec	r0
      001563 7D 00            [12] 3796 	mov	r5,#0x00
      001565 7E 00            [12] 3797 	mov	r6,#0x00
      001567 7F 00            [12] 3798 	mov	r7,#0x00
      001569 A6 04            [24] 3799 	mov	@r0,ar4
      00156B 08               [12] 3800 	inc	r0
      00156C A6 05            [24] 3801 	mov	@r0,ar5
      00156E 08               [12] 3802 	inc	r0
      00156F A6 06            [24] 3803 	mov	@r0,ar6
      001571 08               [12] 3804 	inc	r0
      001572 A6 07            [24] 3805 	mov	@r0,ar7
      001574 18               [12] 3806 	dec	r0
      001575 18               [12] 3807 	dec	r0
      001576 18               [12] 3808 	dec	r0
      001577 02r16r0A         [24] 3809 	ljmp	00182$
      00157A                       3810 00181$:
                                   3811 ;	printf_large.c:734: else if (long_argument)
      00157A 30*00 36         [24] 3812 	jnb	b6,00178$
                                   3813 ;	printf_large.c:736: value.l = va_arg(ap, long);
      00157D E5*00            [12] 3814 	mov	a,_bp
      00157F 24 0E            [12] 3815 	add	a,#0x0E
      001581 F8               [12] 3816 	mov	r0,a
      001582 C0 00            [24] 3817 	push	ar0
      001584 E5*00            [12] 3818 	mov	a,_bp
      001586 24 F6            [12] 3819 	add	a,#0xf6
      001588 F8               [12] 3820 	mov	r0,a
      001589 E6               [12] 3821 	mov	a,@r0
      00158A 24 FC            [12] 3822 	add	a,#0xFC
      00158C FF               [12] 3823 	mov	r7,a
      00158D E5*00            [12] 3824 	mov	a,_bp
      00158F 24 F6            [12] 3825 	add	a,#0xf6
      001591 F8               [12] 3826 	mov	r0,a
      001592 A6 07            [24] 3827 	mov	@r0,ar7
      001594 A8 07            [24] 3828 	mov	r0,ar7
      001596 86 04            [24] 3829 	mov	ar4,@r0
      001598 08               [12] 3830 	inc	r0
      001599 86 05            [24] 3831 	mov	ar5,@r0
      00159B 08               [12] 3832 	inc	r0
      00159C 86 06            [24] 3833 	mov	ar6,@r0
      00159E 08               [12] 3834 	inc	r0
      00159F 86 07            [24] 3835 	mov	ar7,@r0
      0015A1 D0 00            [24] 3836 	pop	ar0
      0015A3 A6 04            [24] 3837 	mov	@r0,ar4
      0015A5 08               [12] 3838 	inc	r0
      0015A6 A6 05            [24] 3839 	mov	@r0,ar5
      0015A8 08               [12] 3840 	inc	r0
      0015A9 A6 06            [24] 3841 	mov	@r0,ar6
      0015AB 08               [12] 3842 	inc	r0
      0015AC A6 07            [24] 3843 	mov	@r0,ar7
      0015AE 18               [12] 3844 	dec	r0
      0015AF 18               [12] 3845 	dec	r0
      0015B0 18               [12] 3846 	dec	r0
      0015B1 80 57            [24] 3847 	sjmp	00182$
      0015B3                       3848 00178$:
                                   3849 ;	printf_large.c:740: value.l = va_arg(ap, int);
      0015B3 E5*00            [12] 3850 	mov	a,_bp
      0015B5 24 0E            [12] 3851 	add	a,#0x0E
      0015B7 F8               [12] 3852 	mov	r0,a
      0015B8 C0 00            [24] 3853 	push	ar0
      0015BA E5*00            [12] 3854 	mov	a,_bp
      0015BC 24 F6            [12] 3855 	add	a,#0xf6
      0015BE F8               [12] 3856 	mov	r0,a
      0015BF E6               [12] 3857 	mov	a,@r0
      0015C0 24 FE            [12] 3858 	add	a,#0xFE
      0015C2 FF               [12] 3859 	mov	r7,a
      0015C3 E5*00            [12] 3860 	mov	a,_bp
      0015C5 24 F6            [12] 3861 	add	a,#0xf6
      0015C7 F8               [12] 3862 	mov	r0,a
      0015C8 A6 07            [24] 3863 	mov	@r0,ar7
      0015CA A8 07            [24] 3864 	mov	r0,ar7
      0015CC 86 06            [24] 3865 	mov	ar6,@r0
      0015CE 08               [12] 3866 	inc	r0
      0015CF 86 07            [24] 3867 	mov	ar7,@r0
      0015D1 D0 00            [24] 3868 	pop	ar0
      0015D3 EF               [12] 3869 	mov	a,r7
      0015D4 33               [12] 3870 	rlc	a
      0015D5 95 E0            [12] 3871 	subb	a,acc
      0015D7 FD               [12] 3872 	mov	r5,a
      0015D8 FC               [12] 3873 	mov	r4,a
      0015D9 A6 06            [24] 3874 	mov	@r0,ar6
      0015DB 08               [12] 3875 	inc	r0
      0015DC A6 07            [24] 3876 	mov	@r0,ar7
      0015DE 08               [12] 3877 	inc	r0
      0015DF A6 05            [24] 3878 	mov	@r0,ar5
      0015E1 08               [12] 3879 	inc	r0
      0015E2 A6 04            [24] 3880 	mov	@r0,ar4
      0015E4 18               [12] 3881 	dec	r0
      0015E5 18               [12] 3882 	dec	r0
      0015E6 18               [12] 3883 	dec	r0
                                   3884 ;	printf_large.c:741: if (!signed_argument)
      0015E7 20*00 20         [24] 3885 	jb	b4,00182$
                                   3886 ;	printf_large.c:743: value.l &= 0xFFFF;
      0015EA 86 04            [24] 3887 	mov	ar4,@r0
      0015EC 08               [12] 3888 	inc	r0
      0015ED 86 05            [24] 3889 	mov	ar5,@r0
      0015EF 08               [12] 3890 	inc	r0
      0015F0 86 06            [24] 3891 	mov	ar6,@r0
      0015F2 08               [12] 3892 	inc	r0
      0015F3 86 07            [24] 3893 	mov	ar7,@r0
      0015F5 18               [12] 3894 	dec	r0
      0015F6 18               [12] 3895 	dec	r0
      0015F7 18               [12] 3896 	dec	r0
      0015F8 7E 00            [12] 3897 	mov	r6,#0x00
      0015FA 7F 00            [12] 3898 	mov	r7,#0x00
      0015FC A6 04            [24] 3899 	mov	@r0,ar4
      0015FE 08               [12] 3900 	inc	r0
      0015FF A6 05            [24] 3901 	mov	@r0,ar5
      001601 08               [12] 3902 	inc	r0
      001602 A6 06            [24] 3903 	mov	@r0,ar6
      001604 08               [12] 3904 	inc	r0
      001605 A6 07            [24] 3905 	mov	@r0,ar7
      001607 18               [12] 3906 	dec	r0
      001608 18               [12] 3907 	dec	r0
      001609 18               [12] 3908 	dec	r0
      00160A                       3909 00182$:
                                   3910 ;	printf_large.c:747: if ( signed_argument )
      00160A 30*00 44         [24] 3911 	jnb	b4,00187$
                                   3912 ;	printf_large.c:749: if (value.l < 0)
      00160D E5*00            [12] 3913 	mov	a,_bp
      00160F 24 0E            [12] 3914 	add	a,#0x0E
      001611 F8               [12] 3915 	mov	r0,a
      001612 86 04            [24] 3916 	mov	ar4,@r0
      001614 08               [12] 3917 	inc	r0
      001615 86 05            [24] 3918 	mov	ar5,@r0
      001617 08               [12] 3919 	inc	r0
      001618 86 06            [24] 3920 	mov	ar6,@r0
      00161A 08               [12] 3921 	inc	r0
      00161B 86 07            [24] 3922 	mov	ar7,@r0
      00161D 18               [12] 3923 	dec	r0
      00161E 18               [12] 3924 	dec	r0
      00161F 18               [12] 3925 	dec	r0
      001620 EF               [12] 3926 	mov	a,r7
      001621 30 E7 2B         [24] 3927 	jnb	acc.7,00184$
                                   3928 ;	printf_large.c:750: value.l = -value.l;
      001624 86 04            [24] 3929 	mov	ar4,@r0
      001626 08               [12] 3930 	inc	r0
      001627 86 05            [24] 3931 	mov	ar5,@r0
      001629 08               [12] 3932 	inc	r0
      00162A 86 06            [24] 3933 	mov	ar6,@r0
      00162C 08               [12] 3934 	inc	r0
      00162D 86 07            [24] 3935 	mov	ar7,@r0
      00162F 18               [12] 3936 	dec	r0
      001630 18               [12] 3937 	dec	r0
      001631 18               [12] 3938 	dec	r0
      001632 C3               [12] 3939 	clr	c
      001633 E4               [12] 3940 	clr	a
      001634 9C               [12] 3941 	subb	a,r4
      001635 FC               [12] 3942 	mov	r4,a
      001636 E4               [12] 3943 	clr	a
      001637 9D               [12] 3944 	subb	a,r5
      001638 FD               [12] 3945 	mov	r5,a
      001639 E4               [12] 3946 	clr	a
      00163A 9E               [12] 3947 	subb	a,r6
      00163B FE               [12] 3948 	mov	r6,a
      00163C E4               [12] 3949 	clr	a
      00163D 9F               [12] 3950 	subb	a,r7
      00163E FF               [12] 3951 	mov	r7,a
      00163F A6 04            [24] 3952 	mov	@r0,ar4
      001641 08               [12] 3953 	inc	r0
      001642 A6 05            [24] 3954 	mov	@r0,ar5
      001644 08               [12] 3955 	inc	r0
      001645 A6 06            [24] 3956 	mov	@r0,ar6
      001647 08               [12] 3957 	inc	r0
      001648 A6 07            [24] 3958 	mov	@r0,ar7
      00164A 18               [12] 3959 	dec	r0
      00164B 18               [12] 3960 	dec	r0
      00164C 18               [12] 3961 	dec	r0
      00164D 80 02            [24] 3962 	sjmp	00187$
      00164F                       3963 00184$:
                                   3964 ;	printf_large.c:752: signed_argument = 0;
      00164F C2*00            [12] 3965 	clr	b4
      001651                       3966 00187$:
                                   3967 ;	printf_large.c:756: lsd = 1;
      001651 D2*00            [12] 3968 	setb	b5
                                   3969 ;	printf_large.c:758: do {
      001653 8A 00            [24] 3970 	mov	ar0,r2
      001655 7F 00            [12] 3971 	mov	r7,#0x00
      001657                       3972 00191$:
                                   3973 ;	printf_large.c:759: value.byte[4] = 0;
      001657 E5*00            [12] 3974 	mov	a,_bp
      001659 24 0E            [12] 3975 	add	a,#0x0E
      00165B 24 04            [12] 3976 	add	a,#0x04
      00165D C0 00            [24] 3977 	push	ar0
      00165F F8               [12] 3978 	mov	r0,a
      001660 76 00            [12] 3979 	mov	@r0,#0x00
                                   3980 ;	printf_large.c:761: calculate_digit(&value, radix);
      001662 E5*00            [12] 3981 	mov	a,_bp
      001664 24 09            [12] 3982 	add	a,#0x09
      001666 F8               [12] 3983 	mov	r0,a
      001667 86 06            [24] 3984 	mov	ar6,@r0
      001669 D0 00            [24] 3985 	pop	ar0
      00166B C0 07            [24] 3986 	push	ar7
      00166D C0 01            [24] 3987 	push	ar1
      00166F C0 00            [24] 3988 	push	ar0
      001671 C0*00            [24] 3989 	push	bits
      001673 85 00 F0         [24] 3990 	mov	b,ar0
      001676 E5*00            [12] 3991 	mov	a,_bp
      001678 24 13            [12] 3992 	add	a,#0x13
      00167A F8               [12] 3993 	mov	r0,a
      00167B E6               [12] 3994 	mov	a,@r0
      00167C C0 E0            [24] 3995 	push	acc
      00167E 8E 82            [24] 3996 	mov	dpl,r6
      001680 78rDC            [12] 3997 	mov	r0,#_calculate_digit
      001682 79s00            [12] 3998 	mov	r1,#(_calculate_digit >> 8)
      001684 7As00            [12] 3999 	mov	r2,#(_calculate_digit >> 16)
      001686 12r00r00         [24] 4000 	lcall	__sdcc_banked_call
      001689 15 81            [12] 4001 	dec	sp
      00168B D0*00            [24] 4002 	pop	bits
      00168D D0 00            [24] 4003 	pop	ar0
      00168F D0 01            [24] 4004 	pop	ar1
      001691 D0 07            [24] 4005 	pop	ar7
                                   4006 ;	printf_large.c:765: if (!lsd)
      001693 20*00 19         [24] 4007 	jb	b5,00189$
                                   4008 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      001696 C0 00            [24] 4009 	push	ar0
      001698 E5*00            [12] 4010 	mov	a,_bp
      00169A 24 07            [12] 4011 	add	a,#0x07
      00169C F8               [12] 4012 	mov	r0,a
      00169D 86 00            [24] 4013 	mov	ar0,@r0
      00169F 86 06            [24] 4014 	mov	ar6,@r0
      0016A1 D0 00            [24] 4015 	pop	ar0
      0016A3 EE               [12] 4016 	mov	a,r6
      0016A4 C4               [12] 4017 	swap	a
      0016A5 FE               [12] 4018 	mov	r6,a
      0016A6 E6               [12] 4019 	mov	a,@r0
      0016A7 FD               [12] 4020 	mov	r5,a
      0016A8 42 06            [12] 4021 	orl	ar6,a
      0016AA A6 06            [24] 4022 	mov	@r0,ar6
                                   4023 ;	printf_large.c:768: pstore--;
      0016AC 18               [12] 4024 	dec	r0
      0016AD 80 0F            [24] 4025 	sjmp	00190$
      0016AF                       4026 00189$:
                                   4027 ;	printf_large.c:772: *pstore = value.byte[4];
      0016AF C0 00            [24] 4028 	push	ar0
      0016B1 E5*00            [12] 4029 	mov	a,_bp
      0016B3 24 07            [12] 4030 	add	a,#0x07
      0016B5 F8               [12] 4031 	mov	r0,a
      0016B6 86 00            [24] 4032 	mov	ar0,@r0
      0016B8 86 06            [24] 4033 	mov	ar6,@r0
      0016BA D0 00            [24] 4034 	pop	ar0
      0016BC A6 06            [24] 4035 	mov	@r0,ar6
      0016BE                       4036 00190$:
                                   4037 ;	printf_large.c:774: length++;
      0016BE 0F               [12] 4038 	inc	r7
                                   4039 ;	printf_large.c:775: lsd = !lsd;
      0016BF B2*00            [12] 4040 	cpl	b5
                                   4041 ;	printf_large.c:776: } while( value.ul );
      0016C1 C0 00            [24] 4042 	push	ar0
      0016C3 E5*00            [12] 4043 	mov	a,_bp
      0016C5 24 09            [12] 4044 	add	a,#0x09
      0016C7 F8               [12] 4045 	mov	r0,a
      0016C8 86 00            [24] 4046 	mov	ar0,@r0
      0016CA 86 03            [24] 4047 	mov	ar3,@r0
      0016CC 08               [12] 4048 	inc	r0
      0016CD 86 04            [24] 4049 	mov	ar4,@r0
      0016CF 08               [12] 4050 	inc	r0
      0016D0 86 05            [24] 4051 	mov	ar5,@r0
      0016D2 08               [12] 4052 	inc	r0
      0016D3 86 06            [24] 4053 	mov	ar6,@r0
      0016D5 18               [12] 4054 	dec	r0
      0016D6 18               [12] 4055 	dec	r0
      0016D7 18               [12] 4056 	dec	r0
      0016D8 D0 00            [24] 4057 	pop	ar0
      0016DA EB               [12] 4058 	mov	a,r3
      0016DB 4C               [12] 4059 	orl	a,r4
      0016DC 4D               [12] 4060 	orl	a,r5
      0016DD 4E               [12] 4061 	orl	a,r6
      0016DE 60 03            [24] 4062 	jz	00566$
      0016E0 02r16r57         [24] 4063 	ljmp	00191$
      0016E3                       4064 00566$:
                                   4065 ;	printf_large.c:778: if (width == 0)
      0016E3 88 02            [24] 4066 	mov	ar2,r0
      0016E5 8F 03            [24] 4067 	mov	ar3,r7
      0016E7 E5*00            [12] 4068 	mov	a,_bp
      0016E9 24 14            [12] 4069 	add	a,#0x14
      0016EB F8               [12] 4070 	mov	r0,a
      0016EC E6               [12] 4071 	mov	a,@r0
      0016ED 70 07            [24] 4072 	jnz	00195$
                                   4073 ;	printf_large.c:783: width = 1;
      0016EF E5*00            [12] 4074 	mov	a,_bp
      0016F1 24 14            [12] 4075 	add	a,#0x14
      0016F3 F8               [12] 4076 	mov	r0,a
      0016F4 76 01            [12] 4077 	mov	@r0,#0x01
      0016F6                       4078 00195$:
                                   4079 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      0016F6 30*00 03         [24] 4080 	jnb	b1,00568$
      0016F9 02r17r84         [24] 4081 	ljmp	00200$
      0016FC                       4082 00568$:
      0016FC 30*00 03         [24] 4083 	jnb	b0,00569$
      0016FF 02r17r84         [24] 4084 	ljmp	00200$
      001702                       4085 00569$:
                                   4086 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      001702 EB               [12] 4087 	mov	a,r3
      001703 04               [12] 4088 	inc	a
      001704 FF               [12] 4089 	mov	r7,a
      001705 E5*00            [12] 4090 	mov	a,_bp
      001707 24 0B            [12] 4091 	add	a,#0x0b
      001709 F8               [12] 4092 	mov	r0,a
      00170A 86 05            [24] 4093 	mov	ar5,@r0
      00170C 08               [12] 4094 	inc	r0
      00170D 86 06            [24] 4095 	mov	ar6,@r0
      00170F E5*00            [12] 4096 	mov	a,_bp
      001711 24 14            [12] 4097 	add	a,#0x14
      001713 F8               [12] 4098 	mov	r0,a
      001714 86 04            [24] 4099 	mov	ar4,@r0
      001716                       4100 00196$:
      001716 C3               [12] 4101 	clr	c
      001717 EF               [12] 4102 	mov	a,r7
      001718 9C               [12] 4103 	subb	a,r4
      001719 50 58            [24] 4104 	jnc	00328$
                                   4105 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      00171B C0 07            [24] 4106 	push	ar7
      00171D C0 06            [24] 4107 	push	ar6
      00171F C0 05            [24] 4108 	push	ar5
      001721 C0 04            [24] 4109 	push	ar4
      001723 C0 03            [24] 4110 	push	ar3
      001725 C0 02            [24] 4111 	push	ar2
      001727 C0 01            [24] 4112 	push	ar1
      001729 C0*00            [24] 4113 	push	bits
      00172B E5*00            [12] 4114 	mov	a,_bp
      00172D 24 FA            [12] 4115 	add	a,#0xfa
      00172F F8               [12] 4116 	mov	r0,a
      001730 E6               [12] 4117 	mov	a,@r0
      001731 C0 E0            [24] 4118 	push	acc
      001733 08               [12] 4119 	inc	r0
      001734 E6               [12] 4120 	mov	a,@r0
      001735 C0 E0            [24] 4121 	push	acc
      001737 08               [12] 4122 	inc	r0
      001738 E6               [12] 4123 	mov	a,@r0
      001739 C0 E0            [24] 4124 	push	acc
      00173B A8*00            [24] 4125 	mov	r0,_bp
      00173D 08               [12] 4126 	inc	r0
      00173E E6               [12] 4127 	mov	a,@r0
      00173F C0 E0            [24] 4128 	push	acc
      001741 08               [12] 4129 	inc	r0
      001742 E6               [12] 4130 	mov	a,@r0
      001743 C0 E0            [24] 4131 	push	acc
      001745 08               [12] 4132 	inc	r0
      001746 E6               [12] 4133 	mov	a,@r0
      001747 C0 E0            [24] 4134 	push	acc
      001749 75 82 20         [24] 4135 	mov	dpl,#0x20
      00174C D0 02            [24] 4136 	pop	ar2
      00174E D0 01            [24] 4137 	pop	ar1
      001750 D0 00            [24] 4138 	pop	ar0
      001752 12r00r00         [24] 4139 	lcall	__sdcc_banked_call
      001755 15 81            [12] 4140 	dec	sp
      001757 15 81            [12] 4141 	dec	sp
      001759 15 81            [12] 4142 	dec	sp
      00175B D0*00            [24] 4143 	pop	bits
      00175D D0 01            [24] 4144 	pop	ar1
      00175F D0 02            [24] 4145 	pop	ar2
      001761 D0 03            [24] 4146 	pop	ar3
      001763 D0 04            [24] 4147 	pop	ar4
      001765 D0 05            [24] 4148 	pop	ar5
      001767 D0 06            [24] 4149 	pop	ar6
      001769 D0 07            [24] 4150 	pop	ar7
      00176B 0D               [12] 4151 	inc	r5
      00176C BD 00 01         [24] 4152 	cjne	r5,#0x00,00571$
      00176F 0E               [12] 4153 	inc	r6
      001770                       4154 00571$:
                                   4155 ;	printf_large.c:792: width--;
      001770 1C               [12] 4156 	dec	r4
      001771 80 A3            [24] 4157 	sjmp	00196$
      001773                       4158 00328$:
      001773 E5*00            [12] 4159 	mov	a,_bp
      001775 24 0B            [12] 4160 	add	a,#0x0b
      001777 F8               [12] 4161 	mov	r0,a
      001778 A6 05            [24] 4162 	mov	@r0,ar5
      00177A 08               [12] 4163 	inc	r0
      00177B A6 06            [24] 4164 	mov	@r0,ar6
      00177D E5*00            [12] 4165 	mov	a,_bp
      00177F 24 14            [12] 4166 	add	a,#0x14
      001781 F8               [12] 4167 	mov	r0,a
      001782 A6 04            [24] 4168 	mov	@r0,ar4
      001784                       4169 00200$:
                                   4170 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      001784 30*00 54         [24] 4171 	jnb	b4,00210$
                                   4172 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      001787 C0 03            [24] 4173 	push	ar3
      001789 C0 02            [24] 4174 	push	ar2
      00178B C0 01            [24] 4175 	push	ar1
      00178D C0*00            [24] 4176 	push	bits
      00178F E5*00            [12] 4177 	mov	a,_bp
      001791 24 FA            [12] 4178 	add	a,#0xfa
      001793 F8               [12] 4179 	mov	r0,a
      001794 E6               [12] 4180 	mov	a,@r0
      001795 C0 E0            [24] 4181 	push	acc
      001797 08               [12] 4182 	inc	r0
      001798 E6               [12] 4183 	mov	a,@r0
      001799 C0 E0            [24] 4184 	push	acc
      00179B 08               [12] 4185 	inc	r0
      00179C E6               [12] 4186 	mov	a,@r0
      00179D C0 E0            [24] 4187 	push	acc
      00179F A8*00            [24] 4188 	mov	r0,_bp
      0017A1 08               [12] 4189 	inc	r0
      0017A2 E6               [12] 4190 	mov	a,@r0
      0017A3 C0 E0            [24] 4191 	push	acc
      0017A5 08               [12] 4192 	inc	r0
      0017A6 E6               [12] 4193 	mov	a,@r0
      0017A7 C0 E0            [24] 4194 	push	acc
      0017A9 08               [12] 4195 	inc	r0
      0017AA E6               [12] 4196 	mov	a,@r0
      0017AB C0 E0            [24] 4197 	push	acc
      0017AD 75 82 2D         [24] 4198 	mov	dpl,#0x2D
      0017B0 D0 02            [24] 4199 	pop	ar2
      0017B2 D0 01            [24] 4200 	pop	ar1
      0017B4 D0 00            [24] 4201 	pop	ar0
      0017B6 12r00r00         [24] 4202 	lcall	__sdcc_banked_call
      0017B9 15 81            [12] 4203 	dec	sp
      0017BB 15 81            [12] 4204 	dec	sp
      0017BD 15 81            [12] 4205 	dec	sp
      0017BF D0*00            [24] 4206 	pop	bits
      0017C1 D0 01            [24] 4207 	pop	ar1
      0017C3 D0 02            [24] 4208 	pop	ar2
      0017C5 D0 03            [24] 4209 	pop	ar3
      0017C7 E5*00            [12] 4210 	mov	a,_bp
      0017C9 24 0B            [12] 4211 	add	a,#0x0b
      0017CB F8               [12] 4212 	mov	r0,a
      0017CC 06               [12] 4213 	inc	@r0
      0017CD B6 00 02         [24] 4214 	cjne	@r0,#0x00,00573$
      0017D0 08               [12] 4215 	inc	r0
      0017D1 06               [12] 4216 	inc	@r0
      0017D2                       4217 00573$:
                                   4218 ;	printf_large.c:800: width--;
      0017D2 E5*00            [12] 4219 	mov	a,_bp
      0017D4 24 14            [12] 4220 	add	a,#0x14
      0017D6 F8               [12] 4221 	mov	r0,a
      0017D7 16               [12] 4222 	dec	@r0
      0017D8 02r18r8B         [24] 4223 	ljmp	00211$
      0017DB                       4224 00210$:
                                   4225 ;	printf_large.c:802: else if (length != 0)
      0017DB EB               [12] 4226 	mov	a,r3
      0017DC 70 03            [24] 4227 	jnz	00574$
      0017DE 02r18r8B         [24] 4228 	ljmp	00211$
      0017E1                       4229 00574$:
                                   4230 ;	printf_large.c:805: if (prefix_sign)
      0017E1 30*00 53         [24] 4231 	jnb	b2,00205$
                                   4232 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      0017E4 C0 03            [24] 4233 	push	ar3
      0017E6 C0 02            [24] 4234 	push	ar2
      0017E8 C0 01            [24] 4235 	push	ar1
      0017EA C0*00            [24] 4236 	push	bits
      0017EC E5*00            [12] 4237 	mov	a,_bp
      0017EE 24 FA            [12] 4238 	add	a,#0xfa
      0017F0 F8               [12] 4239 	mov	r0,a
      0017F1 E6               [12] 4240 	mov	a,@r0
      0017F2 C0 E0            [24] 4241 	push	acc
      0017F4 08               [12] 4242 	inc	r0
      0017F5 E6               [12] 4243 	mov	a,@r0
      0017F6 C0 E0            [24] 4244 	push	acc
      0017F8 08               [12] 4245 	inc	r0
      0017F9 E6               [12] 4246 	mov	a,@r0
      0017FA C0 E0            [24] 4247 	push	acc
      0017FC A8*00            [24] 4248 	mov	r0,_bp
      0017FE 08               [12] 4249 	inc	r0
      0017FF E6               [12] 4250 	mov	a,@r0
      001800 C0 E0            [24] 4251 	push	acc
      001802 08               [12] 4252 	inc	r0
      001803 E6               [12] 4253 	mov	a,@r0
      001804 C0 E0            [24] 4254 	push	acc
      001806 08               [12] 4255 	inc	r0
      001807 E6               [12] 4256 	mov	a,@r0
      001808 C0 E0            [24] 4257 	push	acc
      00180A 75 82 2B         [24] 4258 	mov	dpl,#0x2B
      00180D D0 02            [24] 4259 	pop	ar2
      00180F D0 01            [24] 4260 	pop	ar1
      001811 D0 00            [24] 4261 	pop	ar0
      001813 12r00r00         [24] 4262 	lcall	__sdcc_banked_call
      001816 15 81            [12] 4263 	dec	sp
      001818 15 81            [12] 4264 	dec	sp
      00181A 15 81            [12] 4265 	dec	sp
      00181C D0*00            [24] 4266 	pop	bits
      00181E D0 01            [24] 4267 	pop	ar1
      001820 D0 02            [24] 4268 	pop	ar2
      001822 D0 03            [24] 4269 	pop	ar3
      001824 E5*00            [12] 4270 	mov	a,_bp
      001826 24 0B            [12] 4271 	add	a,#0x0b
      001828 F8               [12] 4272 	mov	r0,a
      001829 06               [12] 4273 	inc	@r0
      00182A B6 00 02         [24] 4274 	cjne	@r0,#0x00,00576$
      00182D 08               [12] 4275 	inc	r0
      00182E 06               [12] 4276 	inc	@r0
      00182F                       4277 00576$:
                                   4278 ;	printf_large.c:809: width--;
      00182F E5*00            [12] 4279 	mov	a,_bp
      001831 24 14            [12] 4280 	add	a,#0x14
      001833 F8               [12] 4281 	mov	r0,a
      001834 16               [12] 4282 	dec	@r0
      001835 80 54            [24] 4283 	sjmp	00211$
      001837                       4284 00205$:
                                   4285 ;	printf_large.c:811: else if (prefix_space)
      001837 30*00 51         [24] 4286 	jnb	b3,00211$
                                   4287 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      00183A C0 03            [24] 4288 	push	ar3
      00183C C0 02            [24] 4289 	push	ar2
      00183E C0 01            [24] 4290 	push	ar1
      001840 C0*00            [24] 4291 	push	bits
      001842 E5*00            [12] 4292 	mov	a,_bp
      001844 24 FA            [12] 4293 	add	a,#0xfa
      001846 F8               [12] 4294 	mov	r0,a
      001847 E6               [12] 4295 	mov	a,@r0
      001848 C0 E0            [24] 4296 	push	acc
      00184A 08               [12] 4297 	inc	r0
      00184B E6               [12] 4298 	mov	a,@r0
      00184C C0 E0            [24] 4299 	push	acc
      00184E 08               [12] 4300 	inc	r0
      00184F E6               [12] 4301 	mov	a,@r0
      001850 C0 E0            [24] 4302 	push	acc
      001852 A8*00            [24] 4303 	mov	r0,_bp
      001854 08               [12] 4304 	inc	r0
      001855 E6               [12] 4305 	mov	a,@r0
      001856 C0 E0            [24] 4306 	push	acc
      001858 08               [12] 4307 	inc	r0
      001859 E6               [12] 4308 	mov	a,@r0
      00185A C0 E0            [24] 4309 	push	acc
      00185C 08               [12] 4310 	inc	r0
      00185D E6               [12] 4311 	mov	a,@r0
      00185E C0 E0            [24] 4312 	push	acc
      001860 75 82 20         [24] 4313 	mov	dpl,#0x20
      001863 D0 02            [24] 4314 	pop	ar2
      001865 D0 01            [24] 4315 	pop	ar1
      001867 D0 00            [24] 4316 	pop	ar0
      001869 12r00r00         [24] 4317 	lcall	__sdcc_banked_call
      00186C 15 81            [12] 4318 	dec	sp
      00186E 15 81            [12] 4319 	dec	sp
      001870 15 81            [12] 4320 	dec	sp
      001872 D0*00            [24] 4321 	pop	bits
      001874 D0 01            [24] 4322 	pop	ar1
      001876 D0 02            [24] 4323 	pop	ar2
      001878 D0 03            [24] 4324 	pop	ar3
      00187A E5*00            [12] 4325 	mov	a,_bp
      00187C 24 0B            [12] 4326 	add	a,#0x0b
      00187E F8               [12] 4327 	mov	r0,a
      00187F 06               [12] 4328 	inc	@r0
      001880 B6 00 02         [24] 4329 	cjne	@r0,#0x00,00578$
      001883 08               [12] 4330 	inc	r0
      001884 06               [12] 4331 	inc	@r0
      001885                       4332 00578$:
                                   4333 ;	printf_large.c:815: width--;
      001885 E5*00            [12] 4334 	mov	a,_bp
      001887 24 14            [12] 4335 	add	a,#0x14
      001889 F8               [12] 4336 	mov	r0,a
      00188A 16               [12] 4337 	dec	@r0
      00188B                       4338 00211$:
                                   4339 ;	printf_large.c:820: if (!left_justify)
      00188B 20*00 74         [24] 4340 	jb	b0,00219$
                                   4341 ;	printf_large.c:822: while ( width-- > length )
      00188E E5*00            [12] 4342 	mov	a,_bp
      001890 24 0B            [12] 4343 	add	a,#0x0b
      001892 F8               [12] 4344 	mov	r0,a
      001893 86 06            [24] 4345 	mov	ar6,@r0
      001895 08               [12] 4346 	inc	r0
      001896 86 07            [24] 4347 	mov	ar7,@r0
      001898 E5*00            [12] 4348 	mov	a,_bp
      00189A 24 14            [12] 4349 	add	a,#0x14
      00189C F8               [12] 4350 	mov	r0,a
      00189D 86 05            [24] 4351 	mov	ar5,@r0
      00189F                       4352 00212$:
      00189F 8D 04            [24] 4353 	mov	ar4,r5
      0018A1 1D               [12] 4354 	dec	r5
      0018A2 C3               [12] 4355 	clr	c
      0018A3 EB               [12] 4356 	mov	a,r3
      0018A4 9C               [12] 4357 	subb	a,r4
      0018A5 50 79            [24] 4358 	jnc	00329$
                                   4359 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      0018A7 30*00 04         [24] 4360 	jnb	b1,00245$
      0018AA 7C 30            [12] 4361 	mov	r4,#0x30
      0018AC 80 02            [24] 4362 	sjmp	00246$
      0018AE                       4363 00245$:
      0018AE 7C 20            [12] 4364 	mov	r4,#0x20
      0018B0                       4365 00246$:
      0018B0 C0 07            [24] 4366 	push	ar7
      0018B2 C0 06            [24] 4367 	push	ar6
      0018B4 C0 05            [24] 4368 	push	ar5
      0018B6 C0 03            [24] 4369 	push	ar3
      0018B8 C0 02            [24] 4370 	push	ar2
      0018BA C0 01            [24] 4371 	push	ar1
      0018BC C0*00            [24] 4372 	push	bits
      0018BE E5*00            [12] 4373 	mov	a,_bp
      0018C0 24 FA            [12] 4374 	add	a,#0xfa
      0018C2 F8               [12] 4375 	mov	r0,a
      0018C3 E6               [12] 4376 	mov	a,@r0
      0018C4 C0 E0            [24] 4377 	push	acc
      0018C6 08               [12] 4378 	inc	r0
      0018C7 E6               [12] 4379 	mov	a,@r0
      0018C8 C0 E0            [24] 4380 	push	acc
      0018CA 08               [12] 4381 	inc	r0
      0018CB E6               [12] 4382 	mov	a,@r0
      0018CC C0 E0            [24] 4383 	push	acc
      0018CE A8*00            [24] 4384 	mov	r0,_bp
      0018D0 08               [12] 4385 	inc	r0
      0018D1 E6               [12] 4386 	mov	a,@r0
      0018D2 C0 E0            [24] 4387 	push	acc
      0018D4 08               [12] 4388 	inc	r0
      0018D5 E6               [12] 4389 	mov	a,@r0
      0018D6 C0 E0            [24] 4390 	push	acc
      0018D8 08               [12] 4391 	inc	r0
      0018D9 E6               [12] 4392 	mov	a,@r0
      0018DA C0 E0            [24] 4393 	push	acc
      0018DC 8C 82            [24] 4394 	mov	dpl,r4
      0018DE D0 02            [24] 4395 	pop	ar2
      0018E0 D0 01            [24] 4396 	pop	ar1
      0018E2 D0 00            [24] 4397 	pop	ar0
      0018E4 12r00r00         [24] 4398 	lcall	__sdcc_banked_call
      0018E7 15 81            [12] 4399 	dec	sp
      0018E9 15 81            [12] 4400 	dec	sp
      0018EB 15 81            [12] 4401 	dec	sp
      0018ED D0*00            [24] 4402 	pop	bits
      0018EF D0 01            [24] 4403 	pop	ar1
      0018F1 D0 02            [24] 4404 	pop	ar2
      0018F3 D0 03            [24] 4405 	pop	ar3
      0018F5 D0 05            [24] 4406 	pop	ar5
      0018F7 D0 06            [24] 4407 	pop	ar6
      0018F9 D0 07            [24] 4408 	pop	ar7
      0018FB 0E               [12] 4409 	inc	r6
      0018FC BE 00 A0         [24] 4410 	cjne	r6,#0x00,00212$
      0018FF 0F               [12] 4411 	inc	r7
      001900 80 9D            [24] 4412 	sjmp	00212$
      001902                       4413 00219$:
                                   4414 ;	printf_large.c:830: if (width > length)
      001902 E5*00            [12] 4415 	mov	a,_bp
      001904 24 14            [12] 4416 	add	a,#0x14
      001906 F8               [12] 4417 	mov	r0,a
      001907 C3               [12] 4418 	clr	c
      001908 EB               [12] 4419 	mov	a,r3
      001909 96               [12] 4420 	subb	a,@r0
      00190A 50 0B            [24] 4421 	jnc	00216$
                                   4422 ;	printf_large.c:831: width -= length;
      00190C E5*00            [12] 4423 	mov	a,_bp
      00190E 24 14            [12] 4424 	add	a,#0x14
      001910 F8               [12] 4425 	mov	r0,a
      001911 E6               [12] 4426 	mov	a,@r0
      001912 C3               [12] 4427 	clr	c
      001913 9B               [12] 4428 	subb	a,r3
      001914 F6               [12] 4429 	mov	@r0,a
      001915 80 1A            [24] 4430 	sjmp	00321$
      001917                       4431 00216$:
                                   4432 ;	printf_large.c:833: width = 0;
      001917 E5*00            [12] 4433 	mov	a,_bp
      001919 24 14            [12] 4434 	add	a,#0x14
      00191B F8               [12] 4435 	mov	r0,a
      00191C 76 00            [12] 4436 	mov	@r0,#0x00
                                   4437 ;	printf_large.c:872: return charsOutputted;
                                   4438 ;	printf_large.c:837: while( length-- )
      00191E 80 11            [24] 4439 	sjmp	00321$
      001920                       4440 00329$:
      001920 E5*00            [12] 4441 	mov	a,_bp
      001922 24 0B            [12] 4442 	add	a,#0x0b
      001924 F8               [12] 4443 	mov	r0,a
      001925 A6 06            [24] 4444 	mov	@r0,ar6
      001927 08               [12] 4445 	inc	r0
      001928 A6 07            [24] 4446 	mov	@r0,ar7
      00192A E5*00            [12] 4447 	mov	a,_bp
      00192C 24 14            [12] 4448 	add	a,#0x14
      00192E F8               [12] 4449 	mov	r0,a
      00192F A6 05            [24] 4450 	mov	@r0,ar5
      001931                       4451 00321$:
      001931 8A 00            [24] 4452 	mov	ar0,r2
      001933 C0 00            [24] 4453 	push	ar0
      001935 E5*00            [12] 4454 	mov	a,_bp
      001937 24 0B            [12] 4455 	add	a,#0x0b
      001939 F8               [12] 4456 	mov	r0,a
      00193A 86 06            [24] 4457 	mov	ar6,@r0
      00193C 08               [12] 4458 	inc	r0
      00193D 86 07            [24] 4459 	mov	ar7,@r0
      00193F D0 00            [24] 4460 	pop	ar0
      001941 8B 05            [24] 4461 	mov	ar5,r3
      001943                       4462 00224$:
      001943 8D 04            [24] 4463 	mov	ar4,r5
      001945 1D               [12] 4464 	dec	r5
      001946 EC               [12] 4465 	mov	a,r4
      001947 70 03            [24] 4466 	jnz	00584$
      001949 02r19rEF         [24] 4467 	ljmp	00330$
      00194C                       4468 00584$:
                                   4469 ;	printf_large.c:839: lsd = !lsd;
      00194C B2*00            [12] 4470 	cpl	b5
                                   4471 ;	printf_large.c:840: if (!lsd)
      00194E 20*00 15         [24] 4472 	jb	b5,00222$
                                   4473 ;	printf_large.c:842: pstore++;
      001951 08               [12] 4474 	inc	r0
                                   4475 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      001952 E6               [12] 4476 	mov	a,@r0
      001953 C4               [12] 4477 	swap	a
      001954 54 0F            [12] 4478 	anl	a,#0x0F
      001956 FC               [12] 4479 	mov	r4,a
      001957 C0 00            [24] 4480 	push	ar0
      001959 E5*00            [12] 4481 	mov	a,_bp
      00195B 24 07            [12] 4482 	add	a,#0x07
      00195D F8               [12] 4483 	mov	r0,a
      00195E 86 00            [24] 4484 	mov	ar0,@r0
      001960 A6 04            [24] 4485 	mov	@r0,ar4
      001962 D0 00            [24] 4486 	pop	ar0
      001964 80 12            [24] 4487 	sjmp	00223$
      001966                       4488 00222$:
                                   4489 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      001966 86 04            [24] 4490 	mov	ar4,@r0
      001968 74 0F            [12] 4491 	mov	a,#0x0F
      00196A 5C               [12] 4492 	anl	a,r4
      00196B C0 00            [24] 4493 	push	ar0
      00196D C8               [12] 4494 	xch	a,r0
      00196E E5*00            [12] 4495 	mov	a,_bp
      001970 24 07            [12] 4496 	add	a,#0x07
      001972 C8               [12] 4497 	xch	a,r0
      001973 86 00            [24] 4498 	mov	ar0,@r0
      001975 F6               [12] 4499 	mov	@r0,a
      001976 D0 00            [24] 4500 	pop	ar0
      001978                       4501 00223$:
                                   4502 ;	printf_large.c:850: output_digit( value.byte[4], lower_case, output_char, p );
      001978 C0 00            [24] 4503 	push	ar0
      00197A E5*00            [12] 4504 	mov	a,_bp
      00197C 24 07            [12] 4505 	add	a,#0x07
      00197E F8               [12] 4506 	mov	r0,a
      00197F 86 00            [24] 4507 	mov	ar0,@r0
      001981 86 04            [24] 4508 	mov	ar4,@r0
      001983 D0 00            [24] 4509 	pop	ar0
      001985 C0 07            [24] 4510 	push	ar7
      001987 C0 06            [24] 4511 	push	ar6
      001989 C0 05            [24] 4512 	push	ar5
      00198B C0 01            [24] 4513 	push	ar1
      00198D C0 00            [24] 4514 	push	ar0
      00198F C0*00            [24] 4515 	push	bits
      001991 85 00 F0         [24] 4516 	mov	b,ar0
      001994 E5*00            [12] 4517 	mov	a,_bp
      001996 24 FA            [12] 4518 	add	a,#0xfa
      001998 F8               [12] 4519 	mov	r0,a
      001999 E6               [12] 4520 	mov	a,@r0
      00199A C0 E0            [24] 4521 	push	acc
      00199C 08               [12] 4522 	inc	r0
      00199D E6               [12] 4523 	mov	a,@r0
      00199E C0 E0            [24] 4524 	push	acc
      0019A0 08               [12] 4525 	inc	r0
      0019A1 E6               [12] 4526 	mov	a,@r0
      0019A2 C0 E0            [24] 4527 	push	acc
      0019A4 A8 F0            [24] 4528 	mov	r0,b
      0019A6 85 00 F0         [24] 4529 	mov	b,ar0
      0019A9 A8*00            [24] 4530 	mov	r0,_bp
      0019AB 08               [12] 4531 	inc	r0
      0019AC E6               [12] 4532 	mov	a,@r0
      0019AD C0 E0            [24] 4533 	push	acc
      0019AF 08               [12] 4534 	inc	r0
      0019B0 E6               [12] 4535 	mov	a,@r0
      0019B1 C0 E0            [24] 4536 	push	acc
      0019B3 08               [12] 4537 	inc	r0
      0019B4 E6               [12] 4538 	mov	a,@r0
      0019B5 C0 E0            [24] 4539 	push	acc
      0019B7 A8 F0            [24] 4540 	mov	r0,b
      0019B9 C0 00            [24] 4541 	push	ar0
      0019BB E5*00            [12] 4542 	mov	a,_bp
      0019BD 24 0D            [12] 4543 	add	a,#0x0d
      0019BF F8               [12] 4544 	mov	r0,a
      0019C0 E6               [12] 4545 	mov	a,@r0
      0019C1 24 FF            [12] 4546 	add	a,#0xff
      0019C3 92 F0            [24] 4547 	mov	b[0],c
      0019C5 D0 00            [24] 4548 	pop	ar0
      0019C7 85 F0*00         [24] 4549 	mov	bits,b
      0019CA 8C 82            [24] 4550 	mov	dpl,r4
      0019CC 78r00            [12] 4551 	mov	r0,#_output_digit
      0019CE 79s00            [12] 4552 	mov	r1,#(_output_digit >> 8)
      0019D0 7As00            [12] 4553 	mov	r2,#(_output_digit >> 16)
      0019D2 12r00r00         [24] 4554 	lcall	__sdcc_banked_call
      0019D5 E5 81            [12] 4555 	mov	a,sp
      0019D7 24 FA            [12] 4556 	add	a,#0xfa
      0019D9 F5 81            [12] 4557 	mov	sp,a
      0019DB D0*00            [24] 4558 	pop	bits
      0019DD D0 00            [24] 4559 	pop	ar0
      0019DF D0 01            [24] 4560 	pop	ar1
      0019E1 D0 05            [24] 4561 	pop	ar5
      0019E3 D0 06            [24] 4562 	pop	ar6
      0019E5 D0 07            [24] 4563 	pop	ar7
                                   4564 ;	printf_large.c:851: charsOutputted++;
      0019E7 0E               [12] 4565 	inc	r6
      0019E8 BE 00 01         [24] 4566 	cjne	r6,#0x00,00586$
      0019EB 0F               [12] 4567 	inc	r7
      0019EC                       4568 00586$:
      0019EC 02r19r43         [24] 4569 	ljmp	00224$
      0019EF                       4570 00330$:
      0019EF E5*00            [12] 4571 	mov	a,_bp
      0019F1 24 0B            [12] 4572 	add	a,#0x0b
      0019F3 F8               [12] 4573 	mov	r0,a
      0019F4 A6 06            [24] 4574 	mov	@r0,ar6
      0019F6 08               [12] 4575 	inc	r0
      0019F7 A6 07            [24] 4576 	mov	@r0,ar7
                                   4577 ;	printf_large.c:856: if (left_justify)
      0019F9 20*00 03         [24] 4578 	jb	b0,00587$
      0019FC 02r0Dr06         [24] 4579 	ljmp	00240$
      0019FF                       4580 00587$:
                                   4581 ;	printf_large.c:858: while (width-- > 0)
      0019FF E5*00            [12] 4582 	mov	a,_bp
      001A01 24 14            [12] 4583 	add	a,#0x14
      001A03 F8               [12] 4584 	mov	r0,a
      001A04 86 05            [24] 4585 	mov	ar5,@r0
      001A06                       4586 00227$:
      001A06 8D 04            [24] 4587 	mov	ar4,r5
      001A08 1D               [12] 4588 	dec	r5
      001A09 EC               [12] 4589 	mov	a,r4
      001A0A 70 03            [24] 4590 	jnz	00588$
      001A0C 02r0Dr06         [24] 4591 	ljmp	00240$
      001A0F                       4592 00588$:
                                   4593 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      001A0F C0 07            [24] 4594 	push	ar7
      001A11 C0 06            [24] 4595 	push	ar6
      001A13 C0 05            [24] 4596 	push	ar5
      001A15 C0 01            [24] 4597 	push	ar1
      001A17 E5*00            [12] 4598 	mov	a,_bp
      001A19 24 FA            [12] 4599 	add	a,#0xfa
      001A1B F8               [12] 4600 	mov	r0,a
      001A1C E6               [12] 4601 	mov	a,@r0
      001A1D C0 E0            [24] 4602 	push	acc
      001A1F 08               [12] 4603 	inc	r0
      001A20 E6               [12] 4604 	mov	a,@r0
      001A21 C0 E0            [24] 4605 	push	acc
      001A23 08               [12] 4606 	inc	r0
      001A24 E6               [12] 4607 	mov	a,@r0
      001A25 C0 E0            [24] 4608 	push	acc
      001A27 A8*00            [24] 4609 	mov	r0,_bp
      001A29 08               [12] 4610 	inc	r0
      001A2A E6               [12] 4611 	mov	a,@r0
      001A2B C0 E0            [24] 4612 	push	acc
      001A2D 08               [12] 4613 	inc	r0
      001A2E E6               [12] 4614 	mov	a,@r0
      001A2F C0 E0            [24] 4615 	push	acc
      001A31 08               [12] 4616 	inc	r0
      001A32 E6               [12] 4617 	mov	a,@r0
      001A33 C0 E0            [24] 4618 	push	acc
      001A35 75 82 20         [24] 4619 	mov	dpl,#0x20
      001A38 D0 02            [24] 4620 	pop	ar2
      001A3A D0 01            [24] 4621 	pop	ar1
      001A3C D0 00            [24] 4622 	pop	ar0
      001A3E 12r00r00         [24] 4623 	lcall	__sdcc_banked_call
      001A41 15 81            [12] 4624 	dec	sp
      001A43 15 81            [12] 4625 	dec	sp
      001A45 15 81            [12] 4626 	dec	sp
      001A47 D0 01            [24] 4627 	pop	ar1
      001A49 D0 05            [24] 4628 	pop	ar5
      001A4B D0 06            [24] 4629 	pop	ar6
      001A4D D0 07            [24] 4630 	pop	ar7
      001A4F 0E               [12] 4631 	inc	r6
      001A50 BE 00 01         [24] 4632 	cjne	r6,#0x00,00589$
      001A53 0F               [12] 4633 	inc	r7
      001A54                       4634 00589$:
      001A54 E5*00            [12] 4635 	mov	a,_bp
      001A56 24 0B            [12] 4636 	add	a,#0x0b
      001A58 F8               [12] 4637 	mov	r0,a
      001A59 A6 06            [24] 4638 	mov	@r0,ar6
      001A5B 08               [12] 4639 	inc	r0
      001A5C A6 07            [24] 4640 	mov	@r0,ar7
      001A5E 80 A6            [24] 4641 	sjmp	00227$
      001A60                       4642 00238$:
                                   4643 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      001A60 C0 01            [24] 4644 	push	ar1
      001A62 E5*00            [12] 4645 	mov	a,_bp
      001A64 24 FA            [12] 4646 	add	a,#0xfa
      001A66 F8               [12] 4647 	mov	r0,a
      001A67 E6               [12] 4648 	mov	a,@r0
      001A68 C0 E0            [24] 4649 	push	acc
      001A6A 08               [12] 4650 	inc	r0
      001A6B E6               [12] 4651 	mov	a,@r0
      001A6C C0 E0            [24] 4652 	push	acc
      001A6E 08               [12] 4653 	inc	r0
      001A6F E6               [12] 4654 	mov	a,@r0
      001A70 C0 E0            [24] 4655 	push	acc
      001A72 A8*00            [24] 4656 	mov	r0,_bp
      001A74 08               [12] 4657 	inc	r0
      001A75 E6               [12] 4658 	mov	a,@r0
      001A76 C0 E0            [24] 4659 	push	acc
      001A78 08               [12] 4660 	inc	r0
      001A79 E6               [12] 4661 	mov	a,@r0
      001A7A C0 E0            [24] 4662 	push	acc
      001A7C 08               [12] 4663 	inc	r0
      001A7D E6               [12] 4664 	mov	a,@r0
      001A7E C0 E0            [24] 4665 	push	acc
      001A80 8C 82            [24] 4666 	mov	dpl,r4
      001A82 D0 02            [24] 4667 	pop	ar2
      001A84 D0 01            [24] 4668 	pop	ar1
      001A86 D0 00            [24] 4669 	pop	ar0
      001A88 12r00r00         [24] 4670 	lcall	__sdcc_banked_call
      001A8B 15 81            [12] 4671 	dec	sp
      001A8D 15 81            [12] 4672 	dec	sp
      001A8F 15 81            [12] 4673 	dec	sp
      001A91 D0 01            [24] 4674 	pop	ar1
      001A93 E5*00            [12] 4675 	mov	a,_bp
      001A95 24 0B            [12] 4676 	add	a,#0x0b
      001A97 F8               [12] 4677 	mov	r0,a
      001A98 06               [12] 4678 	inc	@r0
      001A99 B6 00 02         [24] 4679 	cjne	@r0,#0x00,00590$
      001A9C 08               [12] 4680 	inc	r0
      001A9D 06               [12] 4681 	inc	@r0
      001A9E                       4682 00590$:
      001A9E 02r0Dr06         [24] 4683 	ljmp	00240$
      001AA1                       4684 00242$:
                                   4685 ;	printf_large.c:872: return charsOutputted;
      001AA1 E5*00            [12] 4686 	mov	a,_bp
      001AA3 24 0B            [12] 4687 	add	a,#0x0b
      001AA5 F8               [12] 4688 	mov	r0,a
      001AA6 86 82            [24] 4689 	mov	dpl,@r0
      001AA8 08               [12] 4690 	inc	r0
      001AA9 86 83            [24] 4691 	mov	dph,@r0
      001AAB 85*00 81         [24] 4692 	mov	sp,_bp
      001AAE D0*00            [24] 4693 	pop	_bp
      001AB0 02r00r00         [24] 4694 	ljmp	__sdcc_banked_ret
                                   4695 	.area CSEG    (CODE)
                                   4696 	.area CONST   (CODE)
                                   4697 	.area XINIT   (CODE)
                                   4698 	.area CABS    (ABS,CODE)
