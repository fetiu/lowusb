                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:19 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _malloc
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_first_memheader
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
      000000                         65 __sdcc_first_memheader::
      000000                         66 	.ds 2
                                     67 	.area HOME    (CODE)
                                     68 	.area GSINIT0 (CODE)
                                     69 	.area GSINIT1 (CODE)
                                     70 	.area GSINIT2 (CODE)
                                     71 	.area GSINIT3 (CODE)
                                     72 	.area GSINIT4 (CODE)
                                     73 	.area GSINIT5 (CODE)
                                     74 	.area GSINIT  (CODE)
                                     75 	.area GSFINAL (CODE)
                                     76 	.area CSEG    (CODE)
                                     77 ;--------------------------------------------------------
                                     78 ; global & static initialisations
                                     79 ;--------------------------------------------------------
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 	.area GSFINAL (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 ;--------------------------------------------------------
                                     85 ; Home
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area HOME    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; code
                                     91 ;--------------------------------------------------------
                                     92 	.area CSEG    (CODE)
                                     93 ;------------------------------------------------------------
                                     94 ;Allocation info for local variables in function 'init_dynamic_memory'
                                     95 ;------------------------------------------------------------
                                     96 ;heap                      Allocated to registers r6 r7 
                                     97 ;size                      Allocated to registers r4 r5 
                                     98 ;------------------------------------------------------------
                                     99 ;	_malloc.c:166: static void init_dynamic_memory(void)
                                    100 ;	-----------------------------------------
                                    101 ;	 function init_dynamic_memory
                                    102 ;	-----------------------------------------
      000000                        103 _init_dynamic_memory:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
                                    112 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
      000000 7Er00            [12]  113 	mov	r6,#__sdcc_heap
      000002 7Fs00            [12]  114 	mov	r7,#(__sdcc_heap >> 8)
                                    115 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
      000004 90r00r00         [24]  116 	mov	dptr,#__sdcc_heap_size
      000007 E4               [12]  117 	clr	a
      000008 93               [24]  118 	movc	a,@a+dptr
      000009 FC               [12]  119 	mov	r4,a
      00000A 74 01            [12]  120 	mov	a,#0x01
      00000C 93               [24]  121 	movc	a,@a+dptr
      00000D FD               [12]  122 	mov	r5,a
                                    123 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
      00000E EE               [12]  124 	mov	a,r6
      00000F 4F               [12]  125 	orl	a,r7
      000010 70 0A            [24]  126 	jnz	00102$
                                    127 ;	_malloc.c:173: heap++;
      000012 0E               [12]  128 	inc	r6
      000013 BE 00 01         [24]  129 	cjne	r6,#0x00,00109$
      000016 0F               [12]  130 	inc	r7
      000017                        131 00109$:
                                    132 ;	_malloc.c:174: size--;
      000017 1C               [12]  133 	dec	r4
      000018 BC FF 01         [24]  134 	cjne	r4,#0xFF,00110$
      00001B 1D               [12]  135 	dec	r5
      00001C                        136 00110$:
      00001C                        137 00102$:
                                    138 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
      00001C 8E 02            [24]  139 	mov	ar2,r6
      00001E 8F 03            [24]  140 	mov	ar3,r7
      000020 90r00r00         [24]  141 	mov	dptr,#__sdcc_first_memheader
      000023 EA               [12]  142 	mov	a,r2
      000024 F0               [24]  143 	movx	@dptr,a
      000025 EB               [12]  144 	mov	a,r3
      000026 A3               [24]  145 	inc	dptr
      000027 F0               [24]  146 	movx	@dptr,a
                                    147 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
      000028 EC               [12]  148 	mov	a,r4
      000029 2E               [12]  149 	add	a,r6
      00002A FE               [12]  150 	mov	r6,a
      00002B ED               [12]  151 	mov	a,r5
      00002C 3F               [12]  152 	addc	a,r7
      00002D FF               [12]  153 	mov	r7,a
      00002E EE               [12]  154 	mov	a,r6
      00002F 24 FE            [12]  155 	add	a,#0xFE
      000031 FE               [12]  156 	mov	r6,a
      000032 EF               [12]  157 	mov	a,r7
      000033 34 FF            [12]  158 	addc	a,#0xFF
      000035 FF               [12]  159 	mov	r7,a
      000036 8A 82            [24]  160 	mov	dpl,r2
      000038 8B 83            [24]  161 	mov	dph,r3
      00003A EE               [12]  162 	mov	a,r6
      00003B F0               [24]  163 	movx	@dptr,a
      00003C EF               [12]  164 	mov	a,r7
      00003D A3               [24]  165 	inc	dptr
      00003E F0               [24]  166 	movx	@dptr,a
                                    167 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
      00003F 8E 82            [24]  168 	mov	dpl,r6
      000041 8F 83            [24]  169 	mov	dph,r7
      000043 E4               [12]  170 	clr	a
      000044 F0               [24]  171 	movx	@dptr,a
      000045 A3               [24]  172 	inc	dptr
      000046 F0               [24]  173 	movx	@dptr,a
                                    174 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
      000047 8A 82            [24]  175 	mov	dpl,r2
      000049 8B 83            [24]  176 	mov	dph,r3
      00004B A3               [24]  177 	inc	dptr
      00004C A3               [24]  178 	inc	dptr
      00004D F0               [24]  179 	movx	@dptr,a
      00004E A3               [24]  180 	inc	dptr
      00004F F0               [24]  181 	movx	@dptr,a
      000050 02r00r00         [24]  182 	ljmp	__sdcc_banked_ret
                                    183 ;------------------------------------------------------------
                                    184 ;Allocation info for local variables in function 'malloc'
                                    185 ;------------------------------------------------------------
                                    186 ;size                      Allocated to stack - _bp +1
                                    187 ;current_header            Allocated to stack - _bp +3
                                    188 ;new_header                Allocated to registers r2 r3 
                                    189 ;ret                       Allocated to registers r6 r7 
                                    190 ;------------------------------------------------------------
                                    191 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                                    192 ;	-----------------------------------------
                                    193 ;	 function malloc
                                    194 ;	-----------------------------------------
      000053                        195 _malloc:
      000053 C0*00            [24]  196 	push	_bp
      000055 85 81*00         [24]  197 	mov	_bp,sp
      000058 C0 82            [24]  198 	push	dpl
      00005A C0 83            [24]  199 	push	dph
      00005C 05 81            [12]  200 	inc	sp
      00005E 05 81            [12]  201 	inc	sp
                                    202 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
      000060 A8*00            [24]  203 	mov	r0,_bp
      000062 08               [12]  204 	inc	r0
      000063 C3               [12]  205 	clr	c
      000064 74 FB            [12]  206 	mov	a,#0xFB
      000066 96               [12]  207 	subb	a,@r0
      000067 74 FF            [12]  208 	mov	a,#0xFF
      000069 08               [12]  209 	inc	r0
      00006A 96               [12]  210 	subb	a,@r0
      00006B 50 06            [24]  211 	jnc	00102$
                                    212 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
      00006D 90 00 00         [24]  213 	mov	dptr,#0x0000
      000070 02r01rA8         [24]  214 	ljmp	00117$
      000073                        215 00102$:
                                    216 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
      000073 A8*00            [24]  217 	mov	r0,_bp
      000075 08               [12]  218 	inc	r0
      000076 74 04            [12]  219 	mov	a,#0x04
      000078 26               [12]  220 	add	a,@r0
      000079 F6               [12]  221 	mov	@r0,a
      00007A E4               [12]  222 	clr	a
      00007B 08               [12]  223 	inc	r0
      00007C 36               [12]  224 	addc	a,@r0
      00007D F6               [12]  225 	mov	@r0,a
                                    226 ;	_malloc.c:193: if (!_sdcc_first_memheader)
      00007E 90r00r00         [24]  227 	mov	dptr,#__sdcc_first_memheader
      000081 E0               [24]  228 	movx	a,@dptr
      000082 F5 F0            [12]  229 	mov	b,a
      000084 A3               [24]  230 	inc	dptr
      000085 E0               [24]  231 	movx	a,@dptr
      000086 45 F0            [12]  232 	orl	a,b
      000088 70 09            [24]  233 	jnz	00104$
                                    234 ;	_malloc.c:194: init_dynamic_memory();
      00008A 78r00            [12]  235 	mov	r0,#_init_dynamic_memory
      00008C 79s00            [12]  236 	mov	r1,#(_init_dynamic_memory >> 8)
      00008E 7As00            [12]  237 	mov	r2,#(_init_dynamic_memory >> 16)
      000090 12r00r00         [24]  238 	lcall	__sdcc_banked_call
      000093                        239 00104$:
                                    240 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
      000093 90r00r00         [24]  241 	mov	dptr,#__sdcc_first_memheader
      000096 E0               [24]  242 	movx	a,@dptr
      000097 FC               [12]  243 	mov	r4,a
      000098 A3               [24]  244 	inc	dptr
      000099 E0               [24]  245 	movx	a,@dptr
      00009A FD               [12]  246 	mov	r5,a
      00009B E5*00            [12]  247 	mov	a,_bp
      00009D 24 03            [12]  248 	add	a,#0x03
      00009F F8               [12]  249 	mov	r0,a
      0000A0 A6 04            [24]  250 	mov	@r0,ar4
      0000A2 08               [12]  251 	inc	r0
      0000A3 A6 05            [24]  252 	mov	@r0,ar5
                                    253 ;	_malloc.c:238: }
      0000A5 D3               [12]  254 	setb	c
      0000A6 10 AF 01         [24]  255 	jbc	ea,00142$
      0000A9 C3               [12]  256 	clr	c
      0000AA                        257 00142$:
      0000AA C0 D0            [24]  258 	push	psw
                                    259 ;	_malloc.c:199: while (1)
      0000AC                        260 00110$:
                                    261 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
      0000AC E5*00            [12]  262 	mov	a,_bp
      0000AE 24 03            [12]  263 	add	a,#0x03
      0000B0 F8               [12]  264 	mov	r0,a
      0000B1 86 82            [24]  265 	mov	dpl,@r0
      0000B3 08               [12]  266 	inc	r0
      0000B4 86 83            [24]  267 	mov	dph,@r0
      0000B6 E0               [24]  268 	movx	a,@dptr
      0000B7 FA               [12]  269 	mov	r2,a
      0000B8 A3               [24]  270 	inc	dptr
      0000B9 E0               [24]  271 	movx	a,@dptr
      0000BA FB               [12]  272 	mov	r3,a
      0000BB 8A 06            [24]  273 	mov	ar6,r2
      0000BD 8B 07            [24]  274 	mov	ar7,r3
                                    275 ;	_malloc.c:210: ((unsigned int)current_header) -
      0000BF E5*00            [12]  276 	mov	a,_bp
      0000C1 24 03            [12]  277 	add	a,#0x03
      0000C3 F8               [12]  278 	mov	r0,a
      0000C4 86 04            [24]  279 	mov	ar4,@r0
      0000C6 08               [12]  280 	inc	r0
      0000C7 86 05            [24]  281 	mov	ar5,@r0
      0000C9 EE               [12]  282 	mov	a,r6
      0000CA C3               [12]  283 	clr	c
      0000CB 9C               [12]  284 	subb	a,r4
      0000CC FE               [12]  285 	mov	r6,a
      0000CD EF               [12]  286 	mov	a,r7
      0000CE 9D               [12]  287 	subb	a,r5
      0000CF FF               [12]  288 	mov	r7,a
                                    289 ;	_malloc.c:211: current_header->len) >= size)
      0000D0 E5*00            [12]  290 	mov	a,_bp
      0000D2 24 03            [12]  291 	add	a,#0x03
      0000D4 F8               [12]  292 	mov	r0,a
      0000D5 86 82            [24]  293 	mov	dpl,@r0
      0000D7 08               [12]  294 	inc	r0
      0000D8 86 83            [24]  295 	mov	dph,@r0
      0000DA A3               [24]  296 	inc	dptr
      0000DB A3               [24]  297 	inc	dptr
      0000DC E0               [24]  298 	movx	a,@dptr
      0000DD FC               [12]  299 	mov	r4,a
      0000DE A3               [24]  300 	inc	dptr
      0000DF E0               [24]  301 	movx	a,@dptr
      0000E0 FD               [12]  302 	mov	r5,a
      0000E1 EE               [12]  303 	mov	a,r6
      0000E2 C3               [12]  304 	clr	c
      0000E3 9C               [12]  305 	subb	a,r4
      0000E4 FE               [12]  306 	mov	r6,a
      0000E5 EF               [12]  307 	mov	a,r7
      0000E6 9D               [12]  308 	subb	a,r5
      0000E7 FF               [12]  309 	mov	r7,a
      0000E8 A8*00            [24]  310 	mov	r0,_bp
      0000EA 08               [12]  311 	inc	r0
      0000EB C3               [12]  312 	clr	c
      0000EC EE               [12]  313 	mov	a,r6
      0000ED 96               [12]  314 	subb	a,@r0
      0000EE EF               [12]  315 	mov	a,r7
      0000EF 08               [12]  316 	inc	r0
      0000F0 96               [12]  317 	subb	a,@r0
      0000F1 40 0F            [24]  318 	jc	00106$
                                    319 ;	_malloc.c:213: ret = current_header->mem;
      0000F3 E5*00            [12]  320 	mov	a,_bp
      0000F5 24 03            [12]  321 	add	a,#0x03
      0000F7 F8               [12]  322 	mov	r0,a
      0000F8 74 04            [12]  323 	mov	a,#0x04
      0000FA 26               [12]  324 	add	a,@r0
      0000FB FE               [12]  325 	mov	r6,a
      0000FC E4               [12]  326 	clr	a
      0000FD 08               [12]  327 	inc	r0
      0000FE 36               [12]  328 	addc	a,@r0
      0000FF FF               [12]  329 	mov	r7,a
                                    330 ;	_malloc.c:214: break;
      000100 80 1E            [24]  331 	sjmp	00111$
      000102                        332 00106$:
                                    333 ;	_malloc.c:216: current_header = current_header->next;    //else try next
      000102 E5*00            [12]  334 	mov	a,_bp
      000104 24 03            [12]  335 	add	a,#0x03
      000106 F8               [12]  336 	mov	r0,a
      000107 A6 02            [24]  337 	mov	@r0,ar2
      000109 08               [12]  338 	inc	r0
      00010A A6 03            [24]  339 	mov	@r0,ar3
                                    340 ;	_malloc.c:217: if (!current_header->next)
      00010C E5*00            [12]  341 	mov	a,_bp
      00010E 24 03            [12]  342 	add	a,#0x03
      000110 F8               [12]  343 	mov	r0,a
      000111 86 82            [24]  344 	mov	dpl,@r0
      000113 08               [12]  345 	inc	r0
      000114 86 83            [24]  346 	mov	dph,@r0
      000116 E0               [24]  347 	movx	a,@dptr
      000117 FC               [12]  348 	mov	r4,a
      000118 A3               [24]  349 	inc	dptr
      000119 E0               [24]  350 	movx	a,@dptr
      00011A FD               [12]  351 	mov	r5,a
      00011B 4C               [12]  352 	orl	a,r4
                                    353 ;	_malloc.c:219: ret = (void __xdata *) NULL;
      00011C 70 8E            [24]  354 	jnz	00110$
      00011E FE               [12]  355 	mov	r6,a
      00011F FF               [12]  356 	mov	r7,a
                                    357 ;	_malloc.c:220: break;
      000120                        358 00111$:
                                    359 ;	_malloc.c:223: if (ret)
      000120 EE               [12]  360 	mov	a,r6
      000121 4F               [12]  361 	orl	a,r7
      000122 70 03            [24]  362 	jnz	00145$
      000124 02r01rA0         [24]  363 	ljmp	00116$
      000127                        364 00145$:
                                    365 ;	_malloc.c:225: if (!current_header->len)
      000127 E5*00            [12]  366 	mov	a,_bp
      000129 24 03            [12]  367 	add	a,#0x03
      00012B F8               [12]  368 	mov	r0,a
      00012C 74 02            [12]  369 	mov	a,#0x02
      00012E 26               [12]  370 	add	a,@r0
      00012F FC               [12]  371 	mov	r4,a
      000130 E4               [12]  372 	clr	a
      000131 08               [12]  373 	inc	r0
      000132 36               [12]  374 	addc	a,@r0
      000133 FD               [12]  375 	mov	r5,a
      000134 8C 82            [24]  376 	mov	dpl,r4
      000136 8D 83            [24]  377 	mov	dph,r5
      000138 E0               [24]  378 	movx	a,@dptr
      000139 FA               [12]  379 	mov	r2,a
      00013A A3               [24]  380 	inc	dptr
      00013B E0               [24]  381 	movx	a,@dptr
      00013C FB               [12]  382 	mov	r3,a
      00013D 4A               [12]  383 	orl	a,r2
      00013E 70 0F            [24]  384 	jnz	00113$
                                    385 ;	_malloc.c:227: current_header->len = size; //for first allocation
      000140 8C 82            [24]  386 	mov	dpl,r4
      000142 8D 83            [24]  387 	mov	dph,r5
      000144 A8*00            [24]  388 	mov	r0,_bp
      000146 08               [12]  389 	inc	r0
      000147 E6               [12]  390 	mov	a,@r0
      000148 F0               [24]  391 	movx	@dptr,a
      000149 08               [12]  392 	inc	r0
      00014A E6               [12]  393 	mov	a,@r0
      00014B A3               [24]  394 	inc	dptr
      00014C F0               [24]  395 	movx	@dptr,a
      00014D 80 51            [24]  396 	sjmp	00116$
      00014F                        397 00113$:
                                    398 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
      00014F E5*00            [12]  399 	mov	a,_bp
      000151 24 03            [12]  400 	add	a,#0x03
      000153 F8               [12]  401 	mov	r0,a
      000154 86 04            [24]  402 	mov	ar4,@r0
      000156 08               [12]  403 	inc	r0
      000157 86 05            [24]  404 	mov	ar5,@r0
      000159 EA               [12]  405 	mov	a,r2
      00015A 2C               [12]  406 	add	a,r4
      00015B FA               [12]  407 	mov	r2,a
      00015C EB               [12]  408 	mov	a,r3
      00015D 3D               [12]  409 	addc	a,r5
      00015E FB               [12]  410 	mov	r3,a
                                    411 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
      00015F E5*00            [12]  412 	mov	a,_bp
      000161 24 03            [12]  413 	add	a,#0x03
      000163 F8               [12]  414 	mov	r0,a
      000164 86 82            [24]  415 	mov	dpl,@r0
      000166 08               [12]  416 	inc	r0
      000167 86 83            [24]  417 	mov	dph,@r0
      000169 E0               [24]  418 	movx	a,@dptr
      00016A FC               [12]  419 	mov	r4,a
      00016B A3               [24]  420 	inc	dptr
      00016C E0               [24]  421 	movx	a,@dptr
      00016D FD               [12]  422 	mov	r5,a
      00016E 8A 82            [24]  423 	mov	dpl,r2
      000170 8B 83            [24]  424 	mov	dph,r3
      000172 EC               [12]  425 	mov	a,r4
      000173 F0               [24]  426 	movx	@dptr,a
      000174 ED               [12]  427 	mov	a,r5
      000175 A3               [24]  428 	inc	dptr
      000176 F0               [24]  429 	movx	@dptr,a
                                    430 ;	_malloc.c:233: current_header->next  = new_header;
      000177 E5*00            [12]  431 	mov	a,_bp
      000179 24 03            [12]  432 	add	a,#0x03
      00017B F8               [12]  433 	mov	r0,a
      00017C 86 82            [24]  434 	mov	dpl,@r0
      00017E 08               [12]  435 	inc	r0
      00017F 86 83            [24]  436 	mov	dph,@r0
      000181 EA               [12]  437 	mov	a,r2
      000182 F0               [24]  438 	movx	@dptr,a
      000183 EB               [12]  439 	mov	a,r3
      000184 A3               [24]  440 	inc	dptr
      000185 F0               [24]  441 	movx	@dptr,a
                                    442 ;	_malloc.c:234: new_header->len  = size; //mark as used
      000186 8A 82            [24]  443 	mov	dpl,r2
      000188 8B 83            [24]  444 	mov	dph,r3
      00018A A3               [24]  445 	inc	dptr
      00018B A3               [24]  446 	inc	dptr
      00018C A8*00            [24]  447 	mov	r0,_bp
      00018E 08               [12]  448 	inc	r0
      00018F E6               [12]  449 	mov	a,@r0
      000190 F0               [24]  450 	movx	@dptr,a
      000191 08               [12]  451 	inc	r0
      000192 E6               [12]  452 	mov	a,@r0
      000193 A3               [24]  453 	inc	dptr
      000194 F0               [24]  454 	movx	@dptr,a
                                    455 ;	_malloc.c:235: ret = new_header->mem;
      000195 74 04            [12]  456 	mov	a,#0x04
      000197 2A               [12]  457 	add	a,r2
      000198 FA               [12]  458 	mov	r2,a
      000199 E4               [12]  459 	clr	a
      00019A 3B               [12]  460 	addc	a,r3
      00019B FB               [12]  461 	mov	r3,a
      00019C 8A 06            [24]  462 	mov	ar6,r2
      00019E 8B 07            [24]  463 	mov	ar7,r3
      0001A0                        464 00116$:
      0001A0 D0 D0            [24]  465 	pop	psw
      0001A2 92 AF            [24]  466 	mov	ea,c
                                    467 ;	_malloc.c:239: return ret;
      0001A4 8E 82            [24]  468 	mov	dpl,r6
      0001A6 8F 83            [24]  469 	mov	dph,r7
      0001A8                        470 00117$:
      0001A8 85*00 81         [24]  471 	mov	sp,_bp
      0001AB D0*00            [24]  472 	pop	_bp
      0001AD 02r00r00         [24]  473 	ljmp	__sdcc_banked_ret
                                    474 	.area CSEG    (CODE)
                                    475 	.area CONST   (CODE)
                                    476 	.area XINIT   (CODE)
      000000                        477 __xinit___sdcc_first_memheader:
      000000 00 00                  478 	.byte #0x00,#0x00
                                    479 	.area CABS    (ABS,CODE)
