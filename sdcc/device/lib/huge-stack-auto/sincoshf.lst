                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:14 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +5
                                    110 ;y                         Allocated to registers r2 r3 r6 r7 
                                    111 ;w                         Allocated to registers r7 r6 r4 r3 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b1 
                                    114 ;sloc0                     Allocated to stack - _bp +1
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(float x, bool iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C8               [12]  131 	xch	a,r0
      000006 E5 81            [12]  132 	mov	a,sp
      000008 24 0C            [12]  133 	add	a,#0x0C
      00000A F5 81            [12]  134 	mov	sp,a
      00000C E5*00            [12]  135 	mov	a,_bp
      00000E 24 05            [12]  136 	add	a,#0x05
      000010 C8               [12]  137 	xch	a,r0
      000011 A6 82            [24]  138 	mov	@r0,dpl
      000013 08               [12]  139 	inc	r0
      000014 A6 83            [24]  140 	mov	@r0,dph
      000016 08               [12]  141 	inc	r0
      000017 A6 F0            [24]  142 	mov	@r0,b
      000019 08               [12]  143 	inc	r0
      00001A F6               [12]  144 	mov	@r0,a
                                    145 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      00001B C0*00            [24]  146 	push	bits
      00001D E4               [12]  147 	clr	a
      00001E C0 E0            [24]  148 	push	acc
      000020 C0 E0            [24]  149 	push	acc
      000022 C0 E0            [24]  150 	push	acc
      000024 C0 E0            [24]  151 	push	acc
      000026 E5*00            [12]  152 	mov	a,_bp
      000028 24 05            [12]  153 	add	a,#0x05
      00002A F8               [12]  154 	mov	r0,a
      00002B 86 82            [24]  155 	mov	dpl,@r0
      00002D 08               [12]  156 	inc	r0
      00002E 86 83            [24]  157 	mov	dph,@r0
      000030 08               [12]  158 	inc	r0
      000031 86 F0            [24]  159 	mov	b,@r0
      000033 08               [12]  160 	inc	r0
      000034 E6               [12]  161 	mov	a,@r0
      000035 12r00r00         [24]  162 	lcall	___fslt
      000038 AB 82            [24]  163 	mov	r3,dpl
      00003A E5 81            [12]  164 	mov	a,sp
      00003C 24 FC            [12]  165 	add	a,#0xfc
      00003E F5 81            [12]  166 	mov	sp,a
      000040 D0*00            [24]  167 	pop	bits
      000042 EB               [12]  168 	mov	a,r3
      000043 60 1A            [24]  169 	jz	00102$
      000045 E5*00            [12]  170 	mov	a,_bp
      000047 24 05            [12]  171 	add	a,#0x05
      000049 F8               [12]  172 	mov	r0,a
      00004A 86 04            [24]  173 	mov	ar4,@r0
      00004C 08               [12]  174 	inc	r0
      00004D 86 05            [24]  175 	mov	ar5,@r0
      00004F 08               [12]  176 	inc	r0
      000050 86 06            [24]  177 	mov	ar6,@r0
      000052 08               [12]  178 	inc	r0
      000053 E6               [12]  179 	mov	a,@r0
      000054 B2 E7            [12]  180 	cpl	acc.7
      000056 FF               [12]  181 	mov	r7,a
      000057 8C 02            [24]  182 	mov	ar2,r4
      000059 8D 03            [24]  183 	mov	ar3,r5
      00005B D2*00            [12]  184 	setb	b1
      00005D 80 12            [24]  185 	sjmp	00103$
      00005F                        186 00102$:
                                    187 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00005F E5*00            [12]  188 	mov	a,_bp
      000061 24 05            [12]  189 	add	a,#0x05
      000063 F8               [12]  190 	mov	r0,a
      000064 86 02            [24]  191 	mov	ar2,@r0
      000066 08               [12]  192 	inc	r0
      000067 86 03            [24]  193 	mov	ar3,@r0
      000069 08               [12]  194 	inc	r0
      00006A 86 06            [24]  195 	mov	ar6,@r0
      00006C 08               [12]  196 	inc	r0
      00006D 86 07            [24]  197 	mov	ar7,@r0
      00006F C2*00            [12]  198 	clr	b1
      000071                        199 00103$:
                                    200 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      000071 C0 07            [24]  201 	push	ar7
      000073 C0 06            [24]  202 	push	ar6
      000075 C0 03            [24]  203 	push	ar3
      000077 C0 02            [24]  204 	push	ar2
      000079 C0*00            [24]  205 	push	bits
      00007B E4               [12]  206 	clr	a
      00007C C0 E0            [24]  207 	push	acc
      00007E C0 E0            [24]  208 	push	acc
      000080 74 80            [12]  209 	mov	a,#0x80
      000082 C0 E0            [24]  210 	push	acc
      000084 74 3F            [12]  211 	mov	a,#0x3F
      000086 C0 E0            [24]  212 	push	acc
      000088 8A 82            [24]  213 	mov	dpl,r2
      00008A 8B 83            [24]  214 	mov	dph,r3
      00008C 8E F0            [24]  215 	mov	b,r6
      00008E EF               [12]  216 	mov	a,r7
      00008F 12r00r00         [24]  217 	lcall	___fsgt
      000092 AD 82            [24]  218 	mov	r5,dpl
      000094 E5 81            [12]  219 	mov	a,sp
      000096 24 FC            [12]  220 	add	a,#0xfc
      000098 F5 81            [12]  221 	mov	sp,a
      00009A D0*00            [24]  222 	pop	bits
      00009C D0 02            [24]  223 	pop	ar2
      00009E D0 03            [24]  224 	pop	ar3
      0000A0 D0 06            [24]  225 	pop	ar6
      0000A2 D0 07            [24]  226 	pop	ar7
      0000A4 ED               [12]  227 	mov	a,r5
      0000A5 70 06            [24]  228 	jnz	00117$
      0000A7 20*00 03         [24]  229 	jb	b0,00146$
      0000AA 02r02rF0         [24]  230 	ljmp	00118$
      0000AD                        231 00146$:
      0000AD                        232 00117$:
                                    233 ;	sincoshf.c:66: if(y>YBAR)
      0000AD C0 07            [24]  234 	push	ar7
      0000AF C0 06            [24]  235 	push	ar6
      0000B1 C0 03            [24]  236 	push	ar3
      0000B3 C0 02            [24]  237 	push	ar2
      0000B5 C0*00            [24]  238 	push	bits
      0000B7 E4               [12]  239 	clr	a
      0000B8 C0 E0            [24]  240 	push	acc
      0000BA C0 E0            [24]  241 	push	acc
      0000BC 74 10            [12]  242 	mov	a,#0x10
      0000BE C0 E0            [24]  243 	push	acc
      0000C0 74 41            [12]  244 	mov	a,#0x41
      0000C2 C0 E0            [24]  245 	push	acc
      0000C4 8A 82            [24]  246 	mov	dpl,r2
      0000C6 8B 83            [24]  247 	mov	dph,r3
      0000C8 8E F0            [24]  248 	mov	b,r6
      0000CA EF               [12]  249 	mov	a,r7
      0000CB 12r00r00         [24]  250 	lcall	___fsgt
      0000CE AD 82            [24]  251 	mov	r5,dpl
      0000D0 E5 81            [12]  252 	mov	a,sp
      0000D2 24 FC            [12]  253 	add	a,#0xfc
      0000D4 F5 81            [12]  254 	mov	sp,a
      0000D6 D0*00            [24]  255 	pop	bits
      0000D8 D0 02            [24]  256 	pop	ar2
      0000DA D0 03            [24]  257 	pop	ar3
      0000DC D0 06            [24]  258 	pop	ar6
      0000DE D0 07            [24]  259 	pop	ar7
      0000E0 ED               [12]  260 	mov	a,r5
      0000E1 70 03            [24]  261 	jnz	00147$
      0000E3 02r02r00         [24]  262 	ljmp	00110$
      0000E6                        263 00147$:
                                    264 ;	sincoshf.c:68: w=y-K1;
      0000E6 C0*00            [24]  265 	push	bits
      0000E8 E4               [12]  266 	clr	a
      0000E9 C0 E0            [24]  267 	push	acc
      0000EB 74 73            [12]  268 	mov	a,#0x73
      0000ED C0 E0            [24]  269 	push	acc
      0000EF 74 31            [12]  270 	mov	a,#0x31
      0000F1 C0 E0            [24]  271 	push	acc
      0000F3 74 3F            [12]  272 	mov	a,#0x3F
      0000F5 C0 E0            [24]  273 	push	acc
      0000F7 8A 82            [24]  274 	mov	dpl,r2
      0000F9 8B 83            [24]  275 	mov	dph,r3
      0000FB 8E F0            [24]  276 	mov	b,r6
      0000FD EF               [12]  277 	mov	a,r7
      0000FE 12r00r00         [24]  278 	lcall	___fssub
      000101 AF 82            [24]  279 	mov	r7,dpl
      000103 AE 83            [24]  280 	mov	r6,dph
      000105 AC F0            [24]  281 	mov	r4,b
      000107 FD               [12]  282 	mov	r5,a
      000108 E5 81            [12]  283 	mov	a,sp
      00010A 24 FC            [12]  284 	add	a,#0xfc
      00010C F5 81            [12]  285 	mov	sp,a
      00010E D0*00            [24]  286 	pop	bits
      000110 8D 03            [24]  287 	mov	ar3,r5
                                    288 ;	sincoshf.c:69: if (w>WMAX)
      000112 C0 07            [24]  289 	push	ar7
      000114 C0 06            [24]  290 	push	ar6
      000116 C0 04            [24]  291 	push	ar4
      000118 C0 03            [24]  292 	push	ar3
      00011A C0*00            [24]  293 	push	bits
      00011C 74 CF            [12]  294 	mov	a,#0xCF
      00011E C0 E0            [24]  295 	push	acc
      000120 74 BD            [12]  296 	mov	a,#0xBD
      000122 C0 E0            [24]  297 	push	acc
      000124 74 33            [12]  298 	mov	a,#0x33
      000126 C0 E0            [24]  299 	push	acc
      000128 74 42            [12]  300 	mov	a,#0x42
      00012A C0 E0            [24]  301 	push	acc
      00012C 8F 82            [24]  302 	mov	dpl,r7
      00012E 8E 83            [24]  303 	mov	dph,r6
      000130 8C F0            [24]  304 	mov	b,r4
      000132 EB               [12]  305 	mov	a,r3
      000133 12r00r00         [24]  306 	lcall	___fsgt
      000136 AD 82            [24]  307 	mov	r5,dpl
      000138 E5 81            [12]  308 	mov	a,sp
      00013A 24 FC            [12]  309 	add	a,#0xfc
      00013C F5 81            [12]  310 	mov	sp,a
      00013E D0*00            [24]  311 	pop	bits
      000140 D0 03            [24]  312 	pop	ar3
      000142 D0 04            [24]  313 	pop	ar4
      000144 D0 06            [24]  314 	pop	ar6
      000146 D0 07            [24]  315 	pop	ar7
      000148 ED               [12]  316 	mov	a,r5
      000149 60 1C            [24]  317 	jz	00105$
                                    318 ;	sincoshf.c:71: errno=ERANGE;
      00014B 90r00r00         [24]  319 	mov	dptr,#_errno
      00014E 74 22            [12]  320 	mov	a,#0x22
      000150 F0               [24]  321 	movx	@dptr,a
      000151 E4               [12]  322 	clr	a
      000152 A3               [24]  323 	inc	dptr
      000153 F0               [24]  324 	movx	@dptr,a
                                    325 ;	sincoshf.c:72: z=HUGE_VALF;
      000154 E5*00            [12]  326 	mov	a,_bp
      000156 24 09            [12]  327 	add	a,#0x09
      000158 F8               [12]  328 	mov	r0,a
      000159 76 FF            [12]  329 	mov	@r0,#0xFF
      00015B 08               [12]  330 	inc	r0
      00015C 76 FF            [12]  331 	mov	@r0,#0xFF
      00015E 08               [12]  332 	inc	r0
      00015F 76 7F            [12]  333 	mov	@r0,#0x7F
      000161 08               [12]  334 	inc	r0
      000162 76 7F            [12]  335 	mov	@r0,#0x7F
      000164 02r02rD5         [24]  336 	ljmp	00111$
      000167                        337 00105$:
                                    338 ;	sincoshf.c:76: z=expf(w);
      000167 8F 82            [24]  339 	mov	dpl,r7
      000169 8E 83            [24]  340 	mov	dph,r6
      00016B 8C F0            [24]  341 	mov	b,r4
      00016D EB               [12]  342 	mov	a,r3
      00016E C0*00            [24]  343 	push	bits
      000170 78r00            [12]  344 	mov	r0,#_expf
      000172 79s00            [12]  345 	mov	r1,#(_expf >> 8)
      000174 7As00            [12]  346 	mov	r2,#(_expf >> 16)
      000176 12r00r00         [24]  347 	lcall	__sdcc_banked_call
      000179 AF 82            [24]  348 	mov	r7,dpl
      00017B AE 83            [24]  349 	mov	r6,dph
      00017D AD F0            [24]  350 	mov	r5,b
      00017F FC               [12]  351 	mov	r4,a
      000180 D0*00            [24]  352 	pop	bits
      000182 E5*00            [12]  353 	mov	a,_bp
      000184 24 09            [12]  354 	add	a,#0x09
      000186 F8               [12]  355 	mov	r0,a
      000187 A6 07            [24]  356 	mov	@r0,ar7
      000189 08               [12]  357 	inc	r0
      00018A A6 06            [24]  358 	mov	@r0,ar6
      00018C 08               [12]  359 	inc	r0
      00018D A6 05            [24]  360 	mov	@r0,ar5
      00018F 08               [12]  361 	inc	r0
      000190 A6 04            [24]  362 	mov	@r0,ar4
                                    363 ;	sincoshf.c:77: z+=K3*z;
      000192 C0*00            [24]  364 	push	bits
      000194 E5*00            [12]  365 	mov	a,_bp
      000196 24 09            [12]  366 	add	a,#0x09
      000198 F8               [12]  367 	mov	r0,a
      000199 E6               [12]  368 	mov	a,@r0
      00019A C0 E0            [24]  369 	push	acc
      00019C 08               [12]  370 	inc	r0
      00019D E6               [12]  371 	mov	a,@r0
      00019E C0 E0            [24]  372 	push	acc
      0001A0 08               [12]  373 	inc	r0
      0001A1 E6               [12]  374 	mov	a,@r0
      0001A2 C0 E0            [24]  375 	push	acc
      0001A4 08               [12]  376 	inc	r0
      0001A5 E6               [12]  377 	mov	a,@r0
      0001A6 C0 E0            [24]  378 	push	acc
      0001A8 90 08 97         [24]  379 	mov	dptr,#0x0897
      0001AB 75 F0 68         [24]  380 	mov	b,#0x68
      0001AE 74 37            [12]  381 	mov	a,#0x37
      0001B0 12r00r00         [24]  382 	lcall	___fsmul
      0001B3 AF 82            [24]  383 	mov	r7,dpl
      0001B5 AE 83            [24]  384 	mov	r6,dph
      0001B7 AD F0            [24]  385 	mov	r5,b
      0001B9 FC               [12]  386 	mov	r4,a
      0001BA E5 81            [12]  387 	mov	a,sp
      0001BC 24 FC            [12]  388 	add	a,#0xfc
      0001BE F5 81            [12]  389 	mov	sp,a
      0001C0 D0*00            [24]  390 	pop	bits
      0001C2 C0*00            [24]  391 	push	bits
      0001C4 C0 07            [24]  392 	push	ar7
      0001C6 C0 06            [24]  393 	push	ar6
      0001C8 C0 05            [24]  394 	push	ar5
      0001CA C0 04            [24]  395 	push	ar4
      0001CC E5*00            [12]  396 	mov	a,_bp
      0001CE 24 09            [12]  397 	add	a,#0x09
      0001D0 F8               [12]  398 	mov	r0,a
      0001D1 86 82            [24]  399 	mov	dpl,@r0
      0001D3 08               [12]  400 	inc	r0
      0001D4 86 83            [24]  401 	mov	dph,@r0
      0001D6 08               [12]  402 	inc	r0
      0001D7 86 F0            [24]  403 	mov	b,@r0
      0001D9 08               [12]  404 	inc	r0
      0001DA E6               [12]  405 	mov	a,@r0
      0001DB 12r00r00         [24]  406 	lcall	___fsadd
      0001DE AF 82            [24]  407 	mov	r7,dpl
      0001E0 AE 83            [24]  408 	mov	r6,dph
      0001E2 AD F0            [24]  409 	mov	r5,b
      0001E4 FC               [12]  410 	mov	r4,a
      0001E5 E5 81            [12]  411 	mov	a,sp
      0001E7 24 FC            [12]  412 	add	a,#0xfc
      0001E9 F5 81            [12]  413 	mov	sp,a
      0001EB D0*00            [24]  414 	pop	bits
      0001ED E5*00            [12]  415 	mov	a,_bp
      0001EF 24 09            [12]  416 	add	a,#0x09
      0001F1 F8               [12]  417 	mov	r0,a
      0001F2 A6 07            [24]  418 	mov	@r0,ar7
      0001F4 08               [12]  419 	inc	r0
      0001F5 A6 06            [24]  420 	mov	@r0,ar6
      0001F7 08               [12]  421 	inc	r0
      0001F8 A6 05            [24]  422 	mov	@r0,ar5
      0001FA 08               [12]  423 	inc	r0
      0001FB A6 04            [24]  424 	mov	@r0,ar4
      0001FD 02r02rD5         [24]  425 	ljmp	00111$
      000200                        426 00110$:
                                    427 ;	sincoshf.c:82: z=expf(y);
      000200 8A 82            [24]  428 	mov	dpl,r2
      000202 8B 83            [24]  429 	mov	dph,r3
      000204 8E F0            [24]  430 	mov	b,r6
      000206 EF               [12]  431 	mov	a,r7
      000207 C0*00            [24]  432 	push	bits
      000209 78r00            [12]  433 	mov	r0,#_expf
      00020B 79s00            [12]  434 	mov	r1,#(_expf >> 8)
      00020D 7As00            [12]  435 	mov	r2,#(_expf >> 16)
      00020F 12r00r00         [24]  436 	lcall	__sdcc_banked_call
      000212 AF 82            [24]  437 	mov	r7,dpl
      000214 AE 83            [24]  438 	mov	r6,dph
      000216 AD F0            [24]  439 	mov	r5,b
      000218 FC               [12]  440 	mov	r4,a
      000219 D0*00            [24]  441 	pop	bits
      00021B E5*00            [12]  442 	mov	a,_bp
      00021D 24 09            [12]  443 	add	a,#0x09
      00021F F8               [12]  444 	mov	r0,a
      000220 A6 07            [24]  445 	mov	@r0,ar7
      000222 08               [12]  446 	inc	r0
      000223 A6 06            [24]  447 	mov	@r0,ar6
      000225 08               [12]  448 	inc	r0
      000226 A6 05            [24]  449 	mov	@r0,ar5
      000228 08               [12]  450 	inc	r0
      000229 A6 04            [24]  451 	mov	@r0,ar4
                                    452 ;	sincoshf.c:83: w=1.0/z;
      00022B C0*00            [24]  453 	push	bits
      00022D E5*00            [12]  454 	mov	a,_bp
      00022F 24 09            [12]  455 	add	a,#0x09
      000231 F8               [12]  456 	mov	r0,a
      000232 E6               [12]  457 	mov	a,@r0
      000233 C0 E0            [24]  458 	push	acc
      000235 08               [12]  459 	inc	r0
      000236 E6               [12]  460 	mov	a,@r0
      000237 C0 E0            [24]  461 	push	acc
      000239 08               [12]  462 	inc	r0
      00023A E6               [12]  463 	mov	a,@r0
      00023B C0 E0            [24]  464 	push	acc
      00023D 08               [12]  465 	inc	r0
      00023E E6               [12]  466 	mov	a,@r0
      00023F C0 E0            [24]  467 	push	acc
      000241 90 00 00         [24]  468 	mov	dptr,#0x0000
      000244 75 F0 80         [24]  469 	mov	b,#0x80
      000247 74 3F            [12]  470 	mov	a,#0x3F
      000249 12r00r00         [24]  471 	lcall	___fsdiv
      00024C A8*00            [24]  472 	mov	r0,_bp
      00024E 08               [12]  473 	inc	r0
      00024F A6 82            [24]  474 	mov	@r0,dpl
      000251 08               [12]  475 	inc	r0
      000252 A6 83            [24]  476 	mov	@r0,dph
      000254 08               [12]  477 	inc	r0
      000255 A6 F0            [24]  478 	mov	@r0,b
      000257 08               [12]  479 	inc	r0
      000258 F6               [12]  480 	mov	@r0,a
      000259 E5 81            [12]  481 	mov	a,sp
      00025B 24 FC            [12]  482 	add	a,#0xfc
      00025D F5 81            [12]  483 	mov	sp,a
      00025F D0*00            [24]  484 	pop	bits
      000261 A8*00            [24]  485 	mov	r0,_bp
      000263 08               [12]  486 	inc	r0
      000264 86 07            [24]  487 	mov	ar7,@r0
      000266 08               [12]  488 	inc	r0
      000267 86 06            [24]  489 	mov	ar6,@r0
      000269 08               [12]  490 	inc	r0
      00026A 86 04            [24]  491 	mov	ar4,@r0
      00026C 08               [12]  492 	inc	r0
      00026D 86 03            [24]  493 	mov	ar3,@r0
                                    494 ;	sincoshf.c:84: if(!iscosh) w=-w;
      00026F 20*00 04         [24]  495 	jb	b0,00108$
      000272 EB               [12]  496 	mov	a,r3
      000273 B2 E7            [12]  497 	cpl	acc.7
      000275 FB               [12]  498 	mov	r3,a
      000276                        499 00108$:
                                    500 ;	sincoshf.c:85: z=(z+w)*0.5;
      000276 C0*00            [24]  501 	push	bits
      000278 C0 07            [24]  502 	push	ar7
      00027A C0 06            [24]  503 	push	ar6
      00027C C0 04            [24]  504 	push	ar4
      00027E C0 03            [24]  505 	push	ar3
      000280 E5*00            [12]  506 	mov	a,_bp
      000282 24 09            [12]  507 	add	a,#0x09
      000284 F8               [12]  508 	mov	r0,a
      000285 86 82            [24]  509 	mov	dpl,@r0
      000287 08               [12]  510 	inc	r0
      000288 86 83            [24]  511 	mov	dph,@r0
      00028A 08               [12]  512 	inc	r0
      00028B 86 F0            [24]  513 	mov	b,@r0
      00028D 08               [12]  514 	inc	r0
      00028E E6               [12]  515 	mov	a,@r0
      00028F 12r00r00         [24]  516 	lcall	___fsadd
      000292 AF 82            [24]  517 	mov	r7,dpl
      000294 AE 83            [24]  518 	mov	r6,dph
      000296 AD F0            [24]  519 	mov	r5,b
      000298 FC               [12]  520 	mov	r4,a
      000299 E5 81            [12]  521 	mov	a,sp
      00029B 24 FC            [12]  522 	add	a,#0xfc
      00029D F5 81            [12]  523 	mov	sp,a
      00029F D0*00            [24]  524 	pop	bits
      0002A1 C0*00            [24]  525 	push	bits
      0002A3 C0 07            [24]  526 	push	ar7
      0002A5 C0 06            [24]  527 	push	ar6
      0002A7 C0 05            [24]  528 	push	ar5
      0002A9 C0 04            [24]  529 	push	ar4
      0002AB 90 00 00         [24]  530 	mov	dptr,#(0x00&0x00ff)
      0002AE E4               [12]  531 	clr	a
      0002AF F5 F0            [12]  532 	mov	b,a
      0002B1 74 3F            [12]  533 	mov	a,#0x3F
      0002B3 12r00r00         [24]  534 	lcall	___fsmul
      0002B6 AF 82            [24]  535 	mov	r7,dpl
      0002B8 AE 83            [24]  536 	mov	r6,dph
      0002BA AD F0            [24]  537 	mov	r5,b
      0002BC FC               [12]  538 	mov	r4,a
      0002BD E5 81            [12]  539 	mov	a,sp
      0002BF 24 FC            [12]  540 	add	a,#0xfc
      0002C1 F5 81            [12]  541 	mov	sp,a
      0002C3 D0*00            [24]  542 	pop	bits
      0002C5 E5*00            [12]  543 	mov	a,_bp
      0002C7 24 09            [12]  544 	add	a,#0x09
      0002C9 F8               [12]  545 	mov	r0,a
      0002CA A6 07            [24]  546 	mov	@r0,ar7
      0002CC 08               [12]  547 	inc	r0
      0002CD A6 06            [24]  548 	mov	@r0,ar6
      0002CF 08               [12]  549 	inc	r0
      0002D0 A6 05            [24]  550 	mov	@r0,ar5
      0002D2 08               [12]  551 	inc	r0
      0002D3 A6 04            [24]  552 	mov	@r0,ar4
      0002D5                        553 00111$:
                                    554 ;	sincoshf.c:87: if(sign) z=-z;
      0002D5 20*00 03         [24]  555 	jb	b1,00150$
      0002D8 02r04rB2         [24]  556 	ljmp	00119$
      0002DB                        557 00150$:
      0002DB E5*00            [12]  558 	mov	a,_bp
      0002DD 24 09            [12]  559 	add	a,#0x09
      0002DF F8               [12]  560 	mov	r0,a
      0002E0 E6               [12]  561 	mov	a,@r0
      0002E1 F6               [12]  562 	mov	@r0,a
      0002E2 08               [12]  563 	inc	r0
      0002E3 E6               [12]  564 	mov	a,@r0
      0002E4 F6               [12]  565 	mov	@r0,a
      0002E5 08               [12]  566 	inc	r0
      0002E6 E6               [12]  567 	mov	a,@r0
      0002E7 F6               [12]  568 	mov	@r0,a
      0002E8 08               [12]  569 	inc	r0
      0002E9 E6               [12]  570 	mov	a,@r0
      0002EA B2 E7            [12]  571 	cpl	acc.7
      0002EC F6               [12]  572 	mov	@r0,a
      0002ED 02r04rB2         [24]  573 	ljmp	00119$
      0002F0                        574 00118$:
                                    575 ;	sincoshf.c:91: if (y<EPS)
      0002F0 E4               [12]  576 	clr	a
      0002F1 C0 E0            [24]  577 	push	acc
      0002F3 C0 E0            [24]  578 	push	acc
      0002F5 74 80            [12]  579 	mov	a,#0x80
      0002F7 C0 E0            [24]  580 	push	acc
      0002F9 74 39            [12]  581 	mov	a,#0x39
      0002FB C0 E0            [24]  582 	push	acc
      0002FD 8A 82            [24]  583 	mov	dpl,r2
      0002FF 8B 83            [24]  584 	mov	dph,r3
      000301 8E F0            [24]  585 	mov	b,r6
      000303 EF               [12]  586 	mov	a,r7
      000304 12r00r00         [24]  587 	lcall	___fslt
      000307 AF 82            [24]  588 	mov	r7,dpl
      000309 E5 81            [12]  589 	mov	a,sp
      00030B 24 FC            [12]  590 	add	a,#0xfc
      00030D F5 81            [12]  591 	mov	sp,a
      00030F EF               [12]  592 	mov	a,r7
      000310 60 1B            [24]  593 	jz	00115$
                                    594 ;	sincoshf.c:92: z=x;
      000312 E5*00            [12]  595 	mov	a,_bp
      000314 24 05            [12]  596 	add	a,#0x05
      000316 F8               [12]  597 	mov	r0,a
      000317 E5*00            [12]  598 	mov	a,_bp
      000319 24 09            [12]  599 	add	a,#0x09
      00031B F9               [12]  600 	mov	r1,a
      00031C E6               [12]  601 	mov	a,@r0
      00031D F7               [12]  602 	mov	@r1,a
      00031E 08               [12]  603 	inc	r0
      00031F 09               [12]  604 	inc	r1
      000320 E6               [12]  605 	mov	a,@r0
      000321 F7               [12]  606 	mov	@r1,a
      000322 08               [12]  607 	inc	r0
      000323 09               [12]  608 	inc	r1
      000324 E6               [12]  609 	mov	a,@r0
      000325 F7               [12]  610 	mov	@r1,a
      000326 08               [12]  611 	inc	r0
      000327 09               [12]  612 	inc	r1
      000328 E6               [12]  613 	mov	a,@r0
      000329 F7               [12]  614 	mov	@r1,a
      00032A 02r04rB2         [24]  615 	ljmp	00119$
      00032D                        616 00115$:
                                    617 ;	sincoshf.c:95: z=x*x;
      00032D E5*00            [12]  618 	mov	a,_bp
      00032F 24 05            [12]  619 	add	a,#0x05
      000331 F8               [12]  620 	mov	r0,a
      000332 E6               [12]  621 	mov	a,@r0
      000333 C0 E0            [24]  622 	push	acc
      000335 08               [12]  623 	inc	r0
      000336 E6               [12]  624 	mov	a,@r0
      000337 C0 E0            [24]  625 	push	acc
      000339 08               [12]  626 	inc	r0
      00033A E6               [12]  627 	mov	a,@r0
      00033B C0 E0            [24]  628 	push	acc
      00033D 08               [12]  629 	inc	r0
      00033E E6               [12]  630 	mov	a,@r0
      00033F C0 E0            [24]  631 	push	acc
      000341 E5*00            [12]  632 	mov	a,_bp
      000343 24 05            [12]  633 	add	a,#0x05
      000345 F8               [12]  634 	mov	r0,a
      000346 86 82            [24]  635 	mov	dpl,@r0
      000348 08               [12]  636 	inc	r0
      000349 86 83            [24]  637 	mov	dph,@r0
      00034B 08               [12]  638 	inc	r0
      00034C 86 F0            [24]  639 	mov	b,@r0
      00034E 08               [12]  640 	inc	r0
      00034F E6               [12]  641 	mov	a,@r0
      000350 12r00r00         [24]  642 	lcall	___fsmul
      000353 AC 82            [24]  643 	mov	r4,dpl
      000355 AD 83            [24]  644 	mov	r5,dph
      000357 AE F0            [24]  645 	mov	r6,b
      000359 FF               [12]  646 	mov	r7,a
      00035A E5 81            [12]  647 	mov	a,sp
      00035C 24 FC            [12]  648 	add	a,#0xfc
      00035E F5 81            [12]  649 	mov	sp,a
      000360 E5*00            [12]  650 	mov	a,_bp
      000362 24 09            [12]  651 	add	a,#0x09
      000364 F8               [12]  652 	mov	r0,a
      000365 A6 04            [24]  653 	mov	@r0,ar4
      000367 08               [12]  654 	inc	r0
      000368 A6 05            [24]  655 	mov	@r0,ar5
      00036A 08               [12]  656 	inc	r0
      00036B A6 06            [24]  657 	mov	@r0,ar6
      00036D 08               [12]  658 	inc	r0
      00036E A6 07            [24]  659 	mov	@r0,ar7
                                    660 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000370 E5*00            [12]  661 	mov	a,_bp
      000372 24 09            [12]  662 	add	a,#0x09
      000374 F8               [12]  663 	mov	r0,a
      000375 E6               [12]  664 	mov	a,@r0
      000376 C0 E0            [24]  665 	push	acc
      000378 08               [12]  666 	inc	r0
      000379 E6               [12]  667 	mov	a,@r0
      00037A C0 E0            [24]  668 	push	acc
      00037C 08               [12]  669 	inc	r0
      00037D E6               [12]  670 	mov	a,@r0
      00037E C0 E0            [24]  671 	push	acc
      000380 08               [12]  672 	inc	r0
      000381 E6               [12]  673 	mov	a,@r0
      000382 C0 E0            [24]  674 	push	acc
      000384 E5*00            [12]  675 	mov	a,_bp
      000386 24 05            [12]  676 	add	a,#0x05
      000388 F8               [12]  677 	mov	r0,a
      000389 86 82            [24]  678 	mov	dpl,@r0
      00038B 08               [12]  679 	inc	r0
      00038C 86 83            [24]  680 	mov	dph,@r0
      00038E 08               [12]  681 	inc	r0
      00038F 86 F0            [24]  682 	mov	b,@r0
      000391 08               [12]  683 	inc	r0
      000392 E6               [12]  684 	mov	a,@r0
      000393 12r00r00         [24]  685 	lcall	___fsmul
      000396 A8*00            [24]  686 	mov	r0,_bp
      000398 08               [12]  687 	inc	r0
      000399 A6 82            [24]  688 	mov	@r0,dpl
      00039B 08               [12]  689 	inc	r0
      00039C A6 83            [24]  690 	mov	@r0,dph
      00039E 08               [12]  691 	inc	r0
      00039F A6 F0            [24]  692 	mov	@r0,b
      0003A1 08               [12]  693 	inc	r0
      0003A2 F6               [12]  694 	mov	@r0,a
      0003A3 E5 81            [12]  695 	mov	a,sp
      0003A5 24 FC            [12]  696 	add	a,#0xfc
      0003A7 F5 81            [12]  697 	mov	sp,a
      0003A9 E5*00            [12]  698 	mov	a,_bp
      0003AB 24 09            [12]  699 	add	a,#0x09
      0003AD F8               [12]  700 	mov	r0,a
      0003AE E6               [12]  701 	mov	a,@r0
      0003AF C0 E0            [24]  702 	push	acc
      0003B1 08               [12]  703 	inc	r0
      0003B2 E6               [12]  704 	mov	a,@r0
      0003B3 C0 E0            [24]  705 	push	acc
      0003B5 08               [12]  706 	inc	r0
      0003B6 E6               [12]  707 	mov	a,@r0
      0003B7 C0 E0            [24]  708 	push	acc
      0003B9 08               [12]  709 	inc	r0
      0003BA E6               [12]  710 	mov	a,@r0
      0003BB C0 E0            [24]  711 	push	acc
      0003BD 90 E6 EA         [24]  712 	mov	dptr,#0xE6EA
      0003C0 75 F0 42         [24]  713 	mov	b,#0x42
      0003C3 74 BE            [12]  714 	mov	a,#0xBE
      0003C5 12r00r00         [24]  715 	lcall	___fsmul
      0003C8 AA 82            [24]  716 	mov	r2,dpl
      0003CA AB 83            [24]  717 	mov	r3,dph
      0003CC AE F0            [24]  718 	mov	r6,b
      0003CE FF               [12]  719 	mov	r7,a
      0003CF E5 81            [12]  720 	mov	a,sp
      0003D1 24 FC            [12]  721 	add	a,#0xfc
      0003D3 F5 81            [12]  722 	mov	sp,a
      0003D5 74 F0            [12]  723 	mov	a,#0xF0
      0003D7 C0 E0            [24]  724 	push	acc
      0003D9 74 69            [12]  725 	mov	a,#0x69
      0003DB C0 E0            [24]  726 	push	acc
      0003DD 74 E4            [12]  727 	mov	a,#0xE4
      0003DF C0 E0            [24]  728 	push	acc
      0003E1 74 C0            [12]  729 	mov	a,#0xC0
      0003E3 C0 E0            [24]  730 	push	acc
      0003E5 8A 82            [24]  731 	mov	dpl,r2
      0003E7 8B 83            [24]  732 	mov	dph,r3
      0003E9 8E F0            [24]  733 	mov	b,r6
      0003EB EF               [12]  734 	mov	a,r7
      0003EC 12r00r00         [24]  735 	lcall	___fsadd
      0003EF AC 82            [24]  736 	mov	r4,dpl
      0003F1 AD 83            [24]  737 	mov	r5,dph
      0003F3 AE F0            [24]  738 	mov	r6,b
      0003F5 FF               [12]  739 	mov	r7,a
      0003F6 E5 81            [12]  740 	mov	a,sp
      0003F8 24 FC            [12]  741 	add	a,#0xfc
      0003FA F5 81            [12]  742 	mov	sp,a
      0003FC C0 04            [24]  743 	push	ar4
      0003FE C0 05            [24]  744 	push	ar5
      000400 C0 06            [24]  745 	push	ar6
      000402 C0 07            [24]  746 	push	ar7
      000404 A8*00            [24]  747 	mov	r0,_bp
      000406 08               [12]  748 	inc	r0
      000407 86 82            [24]  749 	mov	dpl,@r0
      000409 08               [12]  750 	inc	r0
      00040A 86 83            [24]  751 	mov	dph,@r0
      00040C 08               [12]  752 	inc	r0
      00040D 86 F0            [24]  753 	mov	b,@r0
      00040F 08               [12]  754 	inc	r0
      000410 E6               [12]  755 	mov	a,@r0
      000411 12r00r00         [24]  756 	lcall	___fsmul
      000414 A8*00            [24]  757 	mov	r0,_bp
      000416 08               [12]  758 	inc	r0
      000417 A6 82            [24]  759 	mov	@r0,dpl
      000419 08               [12]  760 	inc	r0
      00041A A6 83            [24]  761 	mov	@r0,dph
      00041C 08               [12]  762 	inc	r0
      00041D A6 F0            [24]  763 	mov	@r0,b
      00041F 08               [12]  764 	inc	r0
      000420 F6               [12]  765 	mov	@r0,a
      000421 E5 81            [12]  766 	mov	a,sp
      000423 24 FC            [12]  767 	add	a,#0xfc
      000425 F5 81            [12]  768 	mov	sp,a
      000427 74 93            [12]  769 	mov	a,#0x93
      000429 C0 E0            [24]  770 	push	acc
      00042B 74 4F            [12]  771 	mov	a,#0x4F
      00042D C0 E0            [24]  772 	push	acc
      00042F 74 2B            [12]  773 	mov	a,#0x2B
      000431 C0 E0            [24]  774 	push	acc
      000433 74 C2            [12]  775 	mov	a,#0xC2
      000435 C0 E0            [24]  776 	push	acc
      000437 E5*00            [12]  777 	mov	a,_bp
      000439 24 09            [12]  778 	add	a,#0x09
      00043B F8               [12]  779 	mov	r0,a
      00043C 86 82            [24]  780 	mov	dpl,@r0
      00043E 08               [12]  781 	inc	r0
      00043F 86 83            [24]  782 	mov	dph,@r0
      000441 08               [12]  783 	inc	r0
      000442 86 F0            [24]  784 	mov	b,@r0
      000444 08               [12]  785 	inc	r0
      000445 E6               [12]  786 	mov	a,@r0
      000446 12r00r00         [24]  787 	lcall	___fsadd
      000449 AA 82            [24]  788 	mov	r2,dpl
      00044B AB 83            [24]  789 	mov	r3,dph
      00044D AE F0            [24]  790 	mov	r6,b
      00044F FF               [12]  791 	mov	r7,a
      000450 E5 81            [12]  792 	mov	a,sp
      000452 24 FC            [12]  793 	add	a,#0xfc
      000454 F5 81            [12]  794 	mov	sp,a
      000456 C0 02            [24]  795 	push	ar2
      000458 C0 03            [24]  796 	push	ar3
      00045A C0 06            [24]  797 	push	ar6
      00045C C0 07            [24]  798 	push	ar7
      00045E A8*00            [24]  799 	mov	r0,_bp
      000460 08               [12]  800 	inc	r0
      000461 86 82            [24]  801 	mov	dpl,@r0
      000463 08               [12]  802 	inc	r0
      000464 86 83            [24]  803 	mov	dph,@r0
      000466 08               [12]  804 	inc	r0
      000467 86 F0            [24]  805 	mov	b,@r0
      000469 08               [12]  806 	inc	r0
      00046A E6               [12]  807 	mov	a,@r0
      00046B 12r00r00         [24]  808 	lcall	___fsdiv
      00046E AC 82            [24]  809 	mov	r4,dpl
      000470 AD 83            [24]  810 	mov	r5,dph
      000472 AE F0            [24]  811 	mov	r6,b
      000474 FF               [12]  812 	mov	r7,a
      000475 E5 81            [12]  813 	mov	a,sp
      000477 24 FC            [12]  814 	add	a,#0xfc
      000479 F5 81            [12]  815 	mov	sp,a
      00047B C0 04            [24]  816 	push	ar4
      00047D C0 05            [24]  817 	push	ar5
      00047F C0 06            [24]  818 	push	ar6
      000481 C0 07            [24]  819 	push	ar7
      000483 E5*00            [12]  820 	mov	a,_bp
      000485 24 05            [12]  821 	add	a,#0x05
      000487 F8               [12]  822 	mov	r0,a
      000488 86 82            [24]  823 	mov	dpl,@r0
      00048A 08               [12]  824 	inc	r0
      00048B 86 83            [24]  825 	mov	dph,@r0
      00048D 08               [12]  826 	inc	r0
      00048E 86 F0            [24]  827 	mov	b,@r0
      000490 08               [12]  828 	inc	r0
      000491 E6               [12]  829 	mov	a,@r0
      000492 12r00r00         [24]  830 	lcall	___fsadd
      000495 AC 82            [24]  831 	mov	r4,dpl
      000497 AD 83            [24]  832 	mov	r5,dph
      000499 AE F0            [24]  833 	mov	r6,b
      00049B FF               [12]  834 	mov	r7,a
      00049C E5 81            [12]  835 	mov	a,sp
      00049E 24 FC            [12]  836 	add	a,#0xfc
      0004A0 F5 81            [12]  837 	mov	sp,a
      0004A2 E5*00            [12]  838 	mov	a,_bp
      0004A4 24 09            [12]  839 	add	a,#0x09
      0004A6 F8               [12]  840 	mov	r0,a
      0004A7 A6 04            [24]  841 	mov	@r0,ar4
      0004A9 08               [12]  842 	inc	r0
      0004AA A6 05            [24]  843 	mov	@r0,ar5
      0004AC 08               [12]  844 	inc	r0
      0004AD A6 06            [24]  845 	mov	@r0,ar6
      0004AF 08               [12]  846 	inc	r0
      0004B0 A6 07            [24]  847 	mov	@r0,ar7
      0004B2                        848 00119$:
                                    849 ;	sincoshf.c:99: return z;
      0004B2 E5*00            [12]  850 	mov	a,_bp
      0004B4 24 09            [12]  851 	add	a,#0x09
      0004B6 F8               [12]  852 	mov	r0,a
      0004B7 86 82            [24]  853 	mov	dpl,@r0
      0004B9 08               [12]  854 	inc	r0
      0004BA 86 83            [24]  855 	mov	dph,@r0
      0004BC 08               [12]  856 	inc	r0
      0004BD 86 F0            [24]  857 	mov	b,@r0
      0004BF 08               [12]  858 	inc	r0
      0004C0 E6               [12]  859 	mov	a,@r0
      0004C1 85*00 81         [24]  860 	mov	sp,_bp
      0004C4 D0*00            [24]  861 	pop	_bp
      0004C6 02r00r00         [24]  862 	ljmp	__sdcc_banked_ret
                                    863 	.area CSEG    (CODE)
                                    864 	.area CONST   (CODE)
                                    865 	.area XINIT   (CODE)
                                    866 	.area CABS    (ABS,CODE)
