                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:39:23 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _memmove
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _memmove
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'memmove'
                                     92 ;------------------------------------------------------------
                                     93 ;src                       Allocated to stack - _bp -6
                                     94 ;acount                    Allocated to stack - _bp -8
                                     95 ;dst                       Allocated to stack - _bp +4
                                     96 ;ret                       Allocated to stack - _bp +11
                                     97 ;d                         Allocated to registers r5 r6 r7 
                                     98 ;s                         Allocated to registers r2 r3 r4 
                                     99 ;sloc0                     Allocated to stack - _bp +7
                                    100 ;sloc1                     Allocated to stack - _bp +1
                                    101 ;------------------------------------------------------------
                                    102 ;	_memmove.c:40: void * memmove (void * dst, const void * src, size_t acount)
                                    103 ;	-----------------------------------------
                                    104 ;	 function memmove
                                    105 ;	-----------------------------------------
      000000                        106 _memmove:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 E5 81            [12]  116 	mov	a,sp
      000004 F5*00            [12]  117 	mov	_bp,a
      000006 24 0D            [12]  118 	add	a,#0x0D
      000008 F5 81            [12]  119 	mov	sp,a
      00000A C8               [12]  120 	xch	a,r0
      00000B E5*00            [12]  121 	mov	a,_bp
      00000D 24 04            [12]  122 	add	a,#0x04
      00000F C8               [12]  123 	xch	a,r0
      000010 A6 82            [24]  124 	mov	@r0,dpl
      000012 08               [12]  125 	inc	r0
      000013 A6 83            [24]  126 	mov	@r0,dph
      000015 08               [12]  127 	inc	r0
      000016 A6 F0            [24]  128 	mov	@r0,b
                                    129 ;	_memmove.c:42: void * ret = dst;
      000018 E5*00            [12]  130 	mov	a,_bp
      00001A 24 04            [12]  131 	add	a,#0x04
      00001C F8               [12]  132 	mov	r0,a
      00001D E5*00            [12]  133 	mov	a,_bp
      00001F 24 0B            [12]  134 	add	a,#0x0b
      000021 F9               [12]  135 	mov	r1,a
      000022 E6               [12]  136 	mov	a,@r0
      000023 F7               [12]  137 	mov	@r1,a
      000024 08               [12]  138 	inc	r0
      000025 09               [12]  139 	inc	r1
      000026 E6               [12]  140 	mov	a,@r0
      000027 F7               [12]  141 	mov	@r1,a
      000028 08               [12]  142 	inc	r0
      000029 09               [12]  143 	inc	r1
      00002A E6               [12]  144 	mov	a,@r0
      00002B F7               [12]  145 	mov	@r1,a
                                    146 ;	_memmove.c:46: if ((uintptr_t)src < (uintptr_t)dst) {
      00002C E5*00            [12]  147 	mov	a,_bp
      00002E 24 FA            [12]  148 	add	a,#0xfa
      000030 F8               [12]  149 	mov	r0,a
      000031 E5*00            [12]  150 	mov	a,_bp
      000033 24 07            [12]  151 	add	a,#0x07
      000035 F9               [12]  152 	mov	r1,a
      000036 E6               [12]  153 	mov	a,@r0
      000037 F7               [12]  154 	mov	@r1,a
      000038 08               [12]  155 	inc	r0
      000039 09               [12]  156 	inc	r1
      00003A E6               [12]  157 	mov	a,@r0
      00003B F7               [12]  158 	mov	@r1,a
      00003C 08               [12]  159 	inc	r0
      00003D 09               [12]  160 	inc	r1
      00003E E6               [12]  161 	mov	a,@r0
      00003F F7               [12]  162 	mov	@r1,a
      000040 09               [12]  163 	inc	r1
      000041 77 00            [12]  164 	mov	@r1,#0x00
      000043 E5*00            [12]  165 	mov	a,_bp
      000045 24 04            [12]  166 	add	a,#0x04
      000047 F8               [12]  167 	mov	r0,a
      000048 86 04            [24]  168 	mov	ar4,@r0
      00004A 08               [12]  169 	inc	r0
      00004B 86 05            [24]  170 	mov	ar5,@r0
      00004D 08               [12]  171 	inc	r0
      00004E 86 06            [24]  172 	mov	ar6,@r0
      000050 7F 00            [12]  173 	mov	r7,#0x00
      000052 E5*00            [12]  174 	mov	a,_bp
      000054 24 07            [12]  175 	add	a,#0x07
      000056 F8               [12]  176 	mov	r0,a
      000057 C3               [12]  177 	clr	c
      000058 E6               [12]  178 	mov	a,@r0
      000059 9C               [12]  179 	subb	a,r4
      00005A 08               [12]  180 	inc	r0
      00005B E6               [12]  181 	mov	a,@r0
      00005C 9D               [12]  182 	subb	a,r5
      00005D 08               [12]  183 	inc	r0
      00005E E6               [12]  184 	mov	a,@r0
      00005F 9E               [12]  185 	subb	a,r6
      000060 08               [12]  186 	inc	r0
      000061 E6               [12]  187 	mov	a,@r0
      000062 9F               [12]  188 	subb	a,r7
      000063 40 03            [24]  189 	jc	00129$
      000065 02r01r04         [24]  190 	ljmp	00108$
      000068                        191 00129$:
                                    192 ;	_memmove.c:50: d = ((char *)dst)+acount-1;
      000068 E5*00            [12]  193 	mov	a,_bp
      00006A 24 04            [12]  194 	add	a,#0x04
      00006C F8               [12]  195 	mov	r0,a
      00006D 86 05            [24]  196 	mov	ar5,@r0
      00006F 08               [12]  197 	inc	r0
      000070 86 06            [24]  198 	mov	ar6,@r0
      000072 08               [12]  199 	inc	r0
      000073 86 07            [24]  200 	mov	ar7,@r0
      000075 E5*00            [12]  201 	mov	a,_bp
      000077 24 F8            [12]  202 	add	a,#0xf8
      000079 F8               [12]  203 	mov	r0,a
      00007A E6               [12]  204 	mov	a,@r0
      00007B 2D               [12]  205 	add	a,r5
      00007C FD               [12]  206 	mov	r5,a
      00007D 08               [12]  207 	inc	r0
      00007E E6               [12]  208 	mov	a,@r0
      00007F 3E               [12]  209 	addc	a,r6
      000080 FE               [12]  210 	mov	r6,a
      000081 1D               [12]  211 	dec	r5
      000082 BD FF 01         [24]  212 	cjne	r5,#0xFF,00130$
      000085 1E               [12]  213 	dec	r6
      000086                        214 00130$:
                                    215 ;	_memmove.c:51: s = ((char *)src)+acount-1;
      000086 E5*00            [12]  216 	mov	a,_bp
      000088 24 FA            [12]  217 	add	a,#0xfa
      00008A F8               [12]  218 	mov	r0,a
      00008B 86 02            [24]  219 	mov	ar2,@r0
      00008D 08               [12]  220 	inc	r0
      00008E 86 03            [24]  221 	mov	ar3,@r0
      000090 08               [12]  222 	inc	r0
      000091 86 04            [24]  223 	mov	ar4,@r0
      000093 E5*00            [12]  224 	mov	a,_bp
      000095 24 F8            [12]  225 	add	a,#0xf8
      000097 F8               [12]  226 	mov	r0,a
      000098 E6               [12]  227 	mov	a,@r0
      000099 2A               [12]  228 	add	a,r2
      00009A FA               [12]  229 	mov	r2,a
      00009B 08               [12]  230 	inc	r0
      00009C E6               [12]  231 	mov	a,@r0
      00009D 3B               [12]  232 	addc	a,r3
      00009E FB               [12]  233 	mov	r3,a
      00009F 1A               [12]  234 	dec	r2
      0000A0 BA FF 01         [24]  235 	cjne	r2,#0xFF,00131$
      0000A3 1B               [12]  236 	dec	r3
      0000A4                        237 00131$:
                                    238 ;	_memmove.c:52: while (acount--) {
      0000A4 A8*00            [24]  239 	mov	r0,_bp
      0000A6 08               [12]  240 	inc	r0
      0000A7 A6 02            [24]  241 	mov	@r0,ar2
      0000A9 08               [12]  242 	inc	r0
      0000AA A6 03            [24]  243 	mov	@r0,ar3
      0000AC 08               [12]  244 	inc	r0
      0000AD A6 04            [24]  245 	mov	@r0,ar4
      0000AF E5*00            [12]  246 	mov	a,_bp
      0000B1 24 F8            [12]  247 	add	a,#0xf8
      0000B3 F8               [12]  248 	mov	r0,a
      0000B4 E5*00            [12]  249 	mov	a,_bp
      0000B6 24 07            [12]  250 	add	a,#0x07
      0000B8 F9               [12]  251 	mov	r1,a
      0000B9 E6               [12]  252 	mov	a,@r0
      0000BA F7               [12]  253 	mov	@r1,a
      0000BB 08               [12]  254 	inc	r0
      0000BC 09               [12]  255 	inc	r1
      0000BD E6               [12]  256 	mov	a,@r0
      0000BE F7               [12]  257 	mov	@r1,a
      0000BF                        258 00101$:
      0000BF E5*00            [12]  259 	mov	a,_bp
      0000C1 24 07            [12]  260 	add	a,#0x07
      0000C3 F8               [12]  261 	mov	r0,a
      0000C4 86 03            [24]  262 	mov	ar3,@r0
      0000C6 08               [12]  263 	inc	r0
      0000C7 86 04            [24]  264 	mov	ar4,@r0
      0000C9 E5*00            [12]  265 	mov	a,_bp
      0000CB 24 07            [12]  266 	add	a,#0x07
      0000CD F8               [12]  267 	mov	r0,a
      0000CE 16               [12]  268 	dec	@r0
      0000CF B6 FF 02         [24]  269 	cjne	@r0,#0xFF,00132$
      0000D2 08               [12]  270 	inc	r0
      0000D3 16               [12]  271 	dec	@r0
      0000D4                        272 00132$:
      0000D4 EB               [12]  273 	mov	a,r3
      0000D5 4C               [12]  274 	orl	a,r4
      0000D6 70 03            [24]  275 	jnz	00133$
      0000D8 02r01r72         [24]  276 	ljmp	00109$
      0000DB                        277 00133$:
                                    278 ;	_memmove.c:53: *d-- = *s--;
      0000DB A8*00            [24]  279 	mov	r0,_bp
      0000DD 08               [12]  280 	inc	r0
      0000DE 86 82            [24]  281 	mov	dpl,@r0
      0000E0 08               [12]  282 	inc	r0
      0000E1 86 83            [24]  283 	mov	dph,@r0
      0000E3 08               [12]  284 	inc	r0
      0000E4 86 F0            [24]  285 	mov	b,@r0
      0000E6 12r00r00         [24]  286 	lcall	__gptrget
      0000E9 FC               [12]  287 	mov	r4,a
      0000EA A8*00            [24]  288 	mov	r0,_bp
      0000EC 08               [12]  289 	inc	r0
      0000ED 16               [12]  290 	dec	@r0
      0000EE B6 FF 02         [24]  291 	cjne	@r0,#0xFF,00134$
      0000F1 08               [12]  292 	inc	r0
      0000F2 16               [12]  293 	dec	@r0
      0000F3                        294 00134$:
      0000F3 8D 82            [24]  295 	mov	dpl,r5
      0000F5 8E 83            [24]  296 	mov	dph,r6
      0000F7 8F F0            [24]  297 	mov	b,r7
      0000F9 EC               [12]  298 	mov	a,r4
      0000FA 12r00r00         [24]  299 	lcall	__gptrput
      0000FD 1D               [12]  300 	dec	r5
      0000FE BD FF 01         [24]  301 	cjne	r5,#0xFF,00135$
      000101 1E               [12]  302 	dec	r6
      000102                        303 00135$:
      000102 80 BB            [24]  304 	sjmp	00101$
      000104                        305 00108$:
                                    306 ;	_memmove.c:60: d = dst;
      000104 E5*00            [12]  307 	mov	a,_bp
      000106 24 04            [12]  308 	add	a,#0x04
      000108 F8               [12]  309 	mov	r0,a
      000109 86 05            [24]  310 	mov	ar5,@r0
      00010B 08               [12]  311 	inc	r0
      00010C 86 06            [24]  312 	mov	ar6,@r0
      00010E 08               [12]  313 	inc	r0
      00010F 86 07            [24]  314 	mov	ar7,@r0
                                    315 ;	_memmove.c:61: s = src;
      000111 E5*00            [12]  316 	mov	a,_bp
      000113 24 FA            [12]  317 	add	a,#0xfa
      000115 F8               [12]  318 	mov	r0,a
      000116 E5*00            [12]  319 	mov	a,_bp
      000118 24 07            [12]  320 	add	a,#0x07
      00011A F9               [12]  321 	mov	r1,a
      00011B E6               [12]  322 	mov	a,@r0
      00011C F7               [12]  323 	mov	@r1,a
      00011D 08               [12]  324 	inc	r0
      00011E 09               [12]  325 	inc	r1
      00011F E6               [12]  326 	mov	a,@r0
      000120 F7               [12]  327 	mov	@r1,a
      000121 08               [12]  328 	inc	r0
      000122 09               [12]  329 	inc	r1
      000123 E6               [12]  330 	mov	a,@r0
      000124 F7               [12]  331 	mov	@r1,a
                                    332 ;	_memmove.c:62: while (acount--) {
      000125 E5*00            [12]  333 	mov	a,_bp
      000127 24 F8            [12]  334 	add	a,#0xf8
      000129 F8               [12]  335 	mov	r0,a
      00012A A9*00            [24]  336 	mov	r1,_bp
      00012C 09               [12]  337 	inc	r1
      00012D E6               [12]  338 	mov	a,@r0
      00012E F7               [12]  339 	mov	@r1,a
      00012F 08               [12]  340 	inc	r0
      000130 09               [12]  341 	inc	r1
      000131 E6               [12]  342 	mov	a,@r0
      000132 F7               [12]  343 	mov	@r1,a
      000133                        344 00104$:
      000133 A8*00            [24]  345 	mov	r0,_bp
      000135 08               [12]  346 	inc	r0
      000136 86 03            [24]  347 	mov	ar3,@r0
      000138 08               [12]  348 	inc	r0
      000139 86 04            [24]  349 	mov	ar4,@r0
      00013B A8*00            [24]  350 	mov	r0,_bp
      00013D 08               [12]  351 	inc	r0
      00013E 16               [12]  352 	dec	@r0
      00013F B6 FF 02         [24]  353 	cjne	@r0,#0xFF,00136$
      000142 08               [12]  354 	inc	r0
      000143 16               [12]  355 	dec	@r0
      000144                        356 00136$:
      000144 EB               [12]  357 	mov	a,r3
      000145 4C               [12]  358 	orl	a,r4
      000146 60 2A            [24]  359 	jz	00109$
                                    360 ;	_memmove.c:63: *d++ = *s++;
      000148 E5*00            [12]  361 	mov	a,_bp
      00014A 24 07            [12]  362 	add	a,#0x07
      00014C F8               [12]  363 	mov	r0,a
      00014D 86 82            [24]  364 	mov	dpl,@r0
      00014F 08               [12]  365 	inc	r0
      000150 86 83            [24]  366 	mov	dph,@r0
      000152 08               [12]  367 	inc	r0
      000153 86 F0            [24]  368 	mov	b,@r0
      000155 12r00r00         [24]  369 	lcall	__gptrget
      000158 FC               [12]  370 	mov	r4,a
      000159 A3               [24]  371 	inc	dptr
      00015A 18               [12]  372 	dec	r0
      00015B 18               [12]  373 	dec	r0
      00015C A6 82            [24]  374 	mov	@r0,dpl
      00015E 08               [12]  375 	inc	r0
      00015F A6 83            [24]  376 	mov	@r0,dph
      000161 8D 82            [24]  377 	mov	dpl,r5
      000163 8E 83            [24]  378 	mov	dph,r6
      000165 8F F0            [24]  379 	mov	b,r7
      000167 EC               [12]  380 	mov	a,r4
      000168 12r00r00         [24]  381 	lcall	__gptrput
      00016B A3               [24]  382 	inc	dptr
      00016C AD 82            [24]  383 	mov	r5,dpl
      00016E AE 83            [24]  384 	mov	r6,dph
      000170 80 C1            [24]  385 	sjmp	00104$
      000172                        386 00109$:
                                    387 ;	_memmove.c:67: return(ret);
      000172 E5*00            [12]  388 	mov	a,_bp
      000174 24 0B            [12]  389 	add	a,#0x0b
      000176 F8               [12]  390 	mov	r0,a
      000177 86 82            [24]  391 	mov	dpl,@r0
      000179 08               [12]  392 	inc	r0
      00017A 86 83            [24]  393 	mov	dph,@r0
      00017C 08               [12]  394 	inc	r0
      00017D 86 F0            [24]  395 	mov	b,@r0
      00017F 85*00 81         [24]  396 	mov	sp,_bp
      000182 D0*00            [24]  397 	pop	_bp
      000184 02r00r00         [24]  398 	ljmp	__sdcc_banked_ret
                                    399 	.area CSEG    (CODE)
                                    400 	.area CONST   (CODE)
                                    401 	.area XINIT   (CODE)
                                    402 	.area CABS    (ABS,CODE)
