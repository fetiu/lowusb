                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:41:00 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _free
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_find_memheader
                                     13 	.globl __sdcc_prev_memheader
                                     14 	.globl _free
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
      000000                         19 __sdcc_prev_memheader::
      000000                         20 	.ds 2
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area INITIALIZED
                                     25 ;--------------------------------------------------------
                                     26 ; absolute external ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area DABS (ABS)
                                     29 ;--------------------------------------------------------
                                     30 ; global & static initialisations
                                     31 ;--------------------------------------------------------
                                     32 	.area HOME
                                     33 	.area GSINIT
                                     34 	.area GSFINAL
                                     35 	.area GSINIT
                                     36 ;--------------------------------------------------------
                                     37 ; Home
                                     38 ;--------------------------------------------------------
                                     39 	.area HOME
                                     40 	.area HOME
                                     41 ;--------------------------------------------------------
                                     42 ; code
                                     43 ;--------------------------------------------------------
                                     44 	.area CODE
                                     45 ;	../_free.c: 62: _sdcc_find_memheader(void * p)
                                     46 ;	-----------------------------------------
                                     47 ;	 function _sdcc_find_memheader
                                     48 ;	-----------------------------------------
      000000                         49 __sdcc_find_memheader:
                                     50 ;	../_free.c: 65: if (!p)
      000000 1E 03            [ 2]   51 	ldw	x, (0x03, sp)
      000002 26 03            [ 1]   52 	jrne	00102$
                                     53 ;	../_free.c: 66: return NULL;
      000004 5F               [ 1]   54 	clrw	x
      000005 20 0D            [ 2]   55 	jra	00103$
      000007                         56 00102$:
                                     57 ;	../_free.c: 67: pthis = (MEMHEADER * )((char *)  p - HEADER_SIZE); //to start of header
      000007 16 03            [ 2]   58 	ldw	y, (0x03, sp)
      000009 72 A2 00 06      [ 2]   59 	subw	y, #0x0006
                                     60 ;	../_free.c: 68: _sdcc_prev_memheader = pthis->prev;
      00000D 93               [ 1]   61 	ldw	x, y
      00000E EE 02            [ 2]   62 	ldw	x, (0x2, x)
      000010 CFu00u00         [ 2]   63 	ldw	__sdcc_prev_memheader+0, x
                                     64 ;	../_free.c: 70: return (pthis);
      000013 93               [ 1]   65 	ldw	x, y
      000014                         66 00103$:
      000014 81               [ 4]   67 	ret
                                     68 ;	../_free.c: 74: free (void *p)
                                     69 ;	-----------------------------------------
                                     70 ;	 function free
                                     71 ;	-----------------------------------------
      000015                         72 _free:
      000015 52 02            [ 2]   73 	sub	sp, #2
                                     74 ;	../_free.c: 78: if ( p ) //For allocated pointers only!
      000017 1E 05            [ 2]   75 	ldw	x, (0x05, sp)
      000019 27 2A            [ 1]   76 	jreq	00108$
                                     77 ;	../_free.c: 95: }
      00001B 9B               [ 1]   78 	sim
                                     79 ;	../_free.c: 81: pthis = (MEMHEADER * )((char *)  p - HEADER_SIZE); //to start of header
      00001C 1E 05            [ 2]   80 	ldw	x, (0x05, sp)
      00001E 1D 00 06         [ 2]   81 	subw	x, #0x0006
      000021 1F 01            [ 2]   82 	ldw	(0x01, sp), x
                                     83 ;	../_free.c: 82: if ( pthis->prev ) // For the regular header
      000023 16 01            [ 2]   84 	ldw	y, (0x01, sp)
      000025 90 EE 02         [ 2]   85 	ldw	y, (0x2, y)
      000028 90 5D            [ 2]   86 	tnzw	y
      00002A 27 10            [ 1]   87 	jreq	00104$
                                     88 ;	../_free.c: 84: prev_header = pthis->prev;
                                     89 ;	../_free.c: 85: prev_header->next = pthis->next;
      00002C 1E 01            [ 2]   90 	ldw	x, (0x01, sp)
      00002E FE               [ 2]   91 	ldw	x, (x)
      00002F 90 FF            [ 2]   92 	ldw	(y), x
                                     93 ;	../_free.c: 86: if (pthis->next)
      000031 1E 01            [ 2]   94 	ldw	x, (0x01, sp)
      000033 FE               [ 2]   95 	ldw	x, (x)
      000034 5D               [ 2]   96 	tnzw	x
      000035 27 0D            [ 1]   97 	jreq	00105$
                                     98 ;	../_free.c: 88: pthis->next->prev = prev_header;
      000037 5C               [ 2]   99 	incw	x
      000038 5C               [ 2]  100 	incw	x
      000039 FF               [ 2]  101 	ldw	(x), y
      00003A 20 08            [ 2]  102 	jra	00105$
      00003C                        103 00104$:
                                    104 ;	../_free.c: 93: pthis->len = 0; //For the first header
      00003C 1E 01            [ 2]  105 	ldw	x, (0x01, sp)
      00003E 1C 00 04         [ 2]  106 	addw	x, #0x0004
      000041 6F 01            [ 1]  107 	clr	(0x1, x)
      000043 7F               [ 1]  108 	clr	(x)
      000044                        109 00105$:
      000044 9A               [ 1]  110 	rim
      000045                        111 00108$:
      000045 5B 02            [ 2]  112 	addw	sp, #2
      000047 81               [ 4]  113 	ret
                                    114 	.area CODE
                                    115 	.area INITIALIZER
                                    116 	.area CABS (ABS)
