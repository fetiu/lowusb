                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:40:13 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 	.globl _toupper
                                     14 	.globl _isspace
                                     15 	.globl _atof
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area DATA
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area INITIALIZED
                                     24 ;--------------------------------------------------------
                                     25 ; absolute external ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area DABS (ABS)
                                     28 ;--------------------------------------------------------
                                     29 ; global & static initialisations
                                     30 ;--------------------------------------------------------
                                     31 	.area HOME
                                     32 	.area GSINIT
                                     33 	.area GSFINAL
                                     34 	.area GSINIT
                                     35 ;--------------------------------------------------------
                                     36 ; Home
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
                                     39 	.area HOME
                                     40 ;--------------------------------------------------------
                                     41 ; code
                                     42 ;--------------------------------------------------------
                                     43 	.area CODE
                                     44 ;	../_atof.c: 33: float atof(const char * s)
                                     45 ;	-----------------------------------------
                                     46 ;	 function atof
                                     47 ;	-----------------------------------------
      000000                         48 _atof:
      000000 52 21            [ 2]   49 	sub	sp, #33
                                     50 ;	../_atof.c: 40: while (isspace(*s)) s++;
      000002 16 24            [ 2]   51 	ldw	y, (0x24, sp)
      000004                         52 00101$:
      000004 90 F6            [ 1]   53 	ld	a, (y)
      000006 97               [ 1]   54 	ld	xl, a
      000007 49               [ 1]   55 	rlc	a
      000008 4F               [ 1]   56 	clr	a
      000009 A2 00            [ 1]   57 	sbc	a, #0x00
      00000B 95               [ 1]   58 	ld	xh, a
      00000C 90 89            [ 2]   59 	pushw	y
      00000E 89               [ 2]   60 	pushw	x
      00000F CDr00r00         [ 4]   61 	call	_isspace
      000012 5B 02            [ 2]   62 	addw	sp, #2
      000014 1F 22            [ 2]   63 	ldw	(0x22, sp), x
      000016 90 85            [ 2]   64 	popw	y
      000018 93               [ 1]   65 	ldw	x, y
      000019 5C               [ 2]   66 	incw	x
      00001A 1F 1E            [ 2]   67 	ldw	(0x1e, sp), x
      00001C 1E 20            [ 2]   68 	ldw	x, (0x20, sp)
      00001E 27 04            [ 1]   69 	jreq	00145$
      000020 16 1E            [ 2]   70 	ldw	y, (0x1e, sp)
      000022 20 E0            [ 2]   71 	jra	00101$
      000024                         72 00145$:
      000024 17 24            [ 2]   73 	ldw	(0x24, sp), y
                                     74 ;	../_atof.c: 43: if (*s == '-')
      000026 90 F6            [ 1]   75 	ld	a, (y)
      000028 A1 2D            [ 1]   76 	cp	a, #0x2d
      00002A 26 0A            [ 1]   77 	jrne	00107$
                                     78 ;	../_atof.c: 45: sign=1;
      00002C A6 01            [ 1]   79 	ld	a, #0x01
      00002E 6B 01            [ 1]   80 	ld	(0x01, sp), a
                                     81 ;	../_atof.c: 46: s++;
      000030 16 1E            [ 2]   82 	ldw	y, (0x1e, sp)
      000032 17 24            [ 2]   83 	ldw	(0x24, sp), y
      000034 20 0A            [ 2]   84 	jra	00108$
      000036                         85 00107$:
                                     86 ;	../_atof.c: 50: sign=0;
      000036 0F 01            [ 1]   87 	clr	(0x01, sp)
                                     88 ;	../_atof.c: 51: if (*s == '+') s++;
      000038 A1 2B            [ 1]   89 	cp	a, #0x2b
      00003A 26 04            [ 1]   90 	jrne	00108$
      00003C 16 1E            [ 2]   91 	ldw	y, (0x1e, sp)
      00003E 17 24            [ 2]   92 	ldw	(0x24, sp), y
      000040                         93 00108$:
                                     94 ;	../_atof.c: 55: for (value=0.0; isdigit(*s); s++)
      000040 5F               [ 1]   95 	clrw	x
      000041 1F 09            [ 2]   96 	ldw	(0x09, sp), x
      000043 1F 07            [ 2]   97 	ldw	(0x07, sp), x
      000045 16 24            [ 2]   98 	ldw	y, (0x24, sp)
      000047 17 1C            [ 2]   99 	ldw	(0x1c, sp), y
      000049                        100 00124$:
      000049 1E 1C            [ 2]  101 	ldw	x, (0x1c, sp)
      00004B F6               [ 1]  102 	ld	a, (x)
      00004C 97               [ 1]  103 	ld	xl, a
      00004D 49               [ 1]  104 	rlc	a
      00004E 4F               [ 1]  105 	clr	a
      00004F A2 00            [ 1]  106 	sbc	a, #0x00
      000051 95               [ 1]  107 	ld	xh, a
      000052 89               [ 2]  108 	pushw	x
      000053 CDr00r00         [ 4]  109 	call	_isdigit
      000056 5B 02            [ 2]  110 	addw	sp, #2
      000058 16 1C            [ 2]  111 	ldw	y, (0x1c, sp)
      00005A 90 F6            [ 1]  112 	ld	a, (y)
      00005C 16 1C            [ 2]  113 	ldw	y, (0x1c, sp)
      00005E 90 5C            [ 2]  114 	incw	y
      000060 17 1A            [ 2]  115 	ldw	(0x1a, sp), y
      000062 5D               [ 2]  116 	tnzw	x
      000063 27 3E            [ 1]  117 	jreq	00146$
                                    118 ;	../_atof.c: 57: value=10.0*value+(*s-'0');
      000065 88               [ 1]  119 	push	a
      000066 1E 0A            [ 2]  120 	ldw	x, (0x0a, sp)
      000068 89               [ 2]  121 	pushw	x
      000069 1E 0A            [ 2]  122 	ldw	x, (0x0a, sp)
      00006B 89               [ 2]  123 	pushw	x
      00006C 5F               [ 1]  124 	clrw	x
      00006D 89               [ 2]  125 	pushw	x
      00006E 4B 20            [ 1]  126 	push	#0x20
      000070 4B 41            [ 1]  127 	push	#0x41
      000072 CDr00r00         [ 4]  128 	call	___fsmul
      000075 5B 08            [ 2]  129 	addw	sp, #8
      000077 1F 19            [ 2]  130 	ldw	(0x19, sp), x
      000079 17 17            [ 2]  131 	ldw	(0x17, sp), y
      00007B 84               [ 1]  132 	pop	a
      00007C 97               [ 1]  133 	ld	xl, a
      00007D 49               [ 1]  134 	rlc	a
      00007E 4F               [ 1]  135 	clr	a
      00007F A2 00            [ 1]  136 	sbc	a, #0x00
      000081 95               [ 1]  137 	ld	xh, a
      000082 1D 00 30         [ 2]  138 	subw	x, #0x0030
      000085 89               [ 2]  139 	pushw	x
      000086 CDr00r00         [ 4]  140 	call	___sint2fs
      000089 5B 02            [ 2]  141 	addw	sp, #2
      00008B 89               [ 2]  142 	pushw	x
      00008C 90 89            [ 2]  143 	pushw	y
      00008E 1E 1C            [ 2]  144 	ldw	x, (0x1c, sp)
      000090 89               [ 2]  145 	pushw	x
      000091 1E 1C            [ 2]  146 	ldw	x, (0x1c, sp)
      000093 89               [ 2]  147 	pushw	x
      000094 CDr00r00         [ 4]  148 	call	___fsadd
      000097 5B 08            [ 2]  149 	addw	sp, #8
      000099 1F 09            [ 2]  150 	ldw	(0x09, sp), x
      00009B 17 07            [ 2]  151 	ldw	(0x07, sp), y
                                    152 ;	../_atof.c: 55: for (value=0.0; isdigit(*s); s++)
      00009D 16 1A            [ 2]  153 	ldw	y, (0x1a, sp)
      00009F 17 1C            [ 2]  154 	ldw	(0x1c, sp), y
      0000A1 20 A6            [ 2]  155 	jra	00124$
      0000A3                        156 00146$:
      0000A3 16 1C            [ 2]  157 	ldw	y, (0x1c, sp)
      0000A5 17 24            [ 2]  158 	ldw	(0x24, sp), y
                                    159 ;	../_atof.c: 61: if (*s == '.')
      0000A7 A1 2E            [ 1]  160 	cp	a, #0x2e
      0000A9 27 03            [ 1]  161 	jreq	00200$
      0000AB CCr01r30         [ 2]  162 	jp	00112$
      0000AE                        163 00200$:
                                    164 ;	../_atof.c: 64: for (fraction=0.1; isdigit(*s); s++)
      0000AE AE CC CD         [ 2]  165 	ldw	x, #0xcccd
      0000B1 1F 05            [ 2]  166 	ldw	(0x05, sp), x
      0000B3 AE 3D CC         [ 2]  167 	ldw	x, #0x3dcc
      0000B6 1F 03            [ 2]  168 	ldw	(0x03, sp), x
      0000B8 16 1A            [ 2]  169 	ldw	y, (0x1a, sp)
      0000BA 17 14            [ 2]  170 	ldw	(0x14, sp), y
      0000BC                        171 00127$:
      0000BC 1E 14            [ 2]  172 	ldw	x, (0x14, sp)
      0000BE F6               [ 1]  173 	ld	a, (x)
      0000BF 6B 13            [ 1]  174 	ld	(0x13, sp), a
      0000C1 7B 13            [ 1]  175 	ld	a, (0x13, sp)
      0000C3 6B 12            [ 1]  176 	ld	(0x12, sp), a
      0000C5 7B 12            [ 1]  177 	ld	a, (0x12, sp)
      0000C7 49               [ 1]  178 	rlc	a
      0000C8 4F               [ 1]  179 	clr	a
      0000C9 A2 00            [ 1]  180 	sbc	a, #0x00
      0000CB 6B 11            [ 1]  181 	ld	(0x11, sp), a
      0000CD 1E 11            [ 2]  182 	ldw	x, (0x11, sp)
      0000CF 89               [ 2]  183 	pushw	x
      0000D0 CDr00r00         [ 4]  184 	call	_isdigit
      0000D3 5B 02            [ 2]  185 	addw	sp, #2
      0000D5 5D               [ 2]  186 	tnzw	x
      0000D6 27 54            [ 1]  187 	jreq	00147$
                                    188 ;	../_atof.c: 66: value+=(*s-'0')*fraction;
      0000D8 1E 14            [ 2]  189 	ldw	x, (0x14, sp)
      0000DA F6               [ 1]  190 	ld	a, (x)
      0000DB 97               [ 1]  191 	ld	xl, a
      0000DC 49               [ 1]  192 	rlc	a
      0000DD 4F               [ 1]  193 	clr	a
      0000DE A2 00            [ 1]  194 	sbc	a, #0x00
      0000E0 95               [ 1]  195 	ld	xh, a
      0000E1 1D 00 30         [ 2]  196 	subw	x, #0x0030
      0000E4 89               [ 2]  197 	pushw	x
      0000E5 CDr00r00         [ 4]  198 	call	___sint2fs
      0000E8 5B 02            [ 2]  199 	addw	sp, #2
      0000EA 1F 0F            [ 2]  200 	ldw	(0x0f, sp), x
      0000EC 1E 05            [ 2]  201 	ldw	x, (0x05, sp)
      0000EE 89               [ 2]  202 	pushw	x
      0000EF 1E 05            [ 2]  203 	ldw	x, (0x05, sp)
      0000F1 89               [ 2]  204 	pushw	x
      0000F2 1E 13            [ 2]  205 	ldw	x, (0x13, sp)
      0000F4 89               [ 2]  206 	pushw	x
      0000F5 90 89            [ 2]  207 	pushw	y
      0000F7 CDr00r00         [ 4]  208 	call	___fsmul
      0000FA 5B 08            [ 2]  209 	addw	sp, #8
      0000FC 89               [ 2]  210 	pushw	x
      0000FD 90 89            [ 2]  211 	pushw	y
      0000FF 1E 0D            [ 2]  212 	ldw	x, (0x0d, sp)
      000101 89               [ 2]  213 	pushw	x
      000102 1E 0D            [ 2]  214 	ldw	x, (0x0d, sp)
      000104 89               [ 2]  215 	pushw	x
      000105 CDr00r00         [ 4]  216 	call	___fsadd
      000108 5B 08            [ 2]  217 	addw	sp, #8
      00010A 1F 09            [ 2]  218 	ldw	(0x09, sp), x
      00010C 17 07            [ 2]  219 	ldw	(0x07, sp), y
                                    220 ;	../_atof.c: 67: fraction*=0.1;
      00010E 1E 05            [ 2]  221 	ldw	x, (0x05, sp)
      000110 89               [ 2]  222 	pushw	x
      000111 1E 05            [ 2]  223 	ldw	x, (0x05, sp)
      000113 89               [ 2]  224 	pushw	x
      000114 4B CD            [ 1]  225 	push	#0xcd
      000116 4B CC            [ 1]  226 	push	#0xcc
      000118 4B CC            [ 1]  227 	push	#0xcc
      00011A 4B 3D            [ 1]  228 	push	#0x3d
      00011C CDr00r00         [ 4]  229 	call	___fsmul
      00011F 5B 08            [ 2]  230 	addw	sp, #8
      000121 1F 05            [ 2]  231 	ldw	(0x05, sp), x
      000123 17 03            [ 2]  232 	ldw	(0x03, sp), y
                                    233 ;	../_atof.c: 64: for (fraction=0.1; isdigit(*s); s++)
      000125 1E 14            [ 2]  234 	ldw	x, (0x14, sp)
      000127 5C               [ 2]  235 	incw	x
      000128 1F 14            [ 2]  236 	ldw	(0x14, sp), x
      00012A 20 90            [ 2]  237 	jra	00127$
      00012C                        238 00147$:
      00012C 16 14            [ 2]  239 	ldw	y, (0x14, sp)
      00012E 17 24            [ 2]  240 	ldw	(0x24, sp), y
      000130                        241 00112$:
                                    242 ;	../_atof.c: 72: if (toupper(*s)=='E')
      000130 16 24            [ 2]  243 	ldw	y, (0x24, sp)
      000132 17 0B            [ 2]  244 	ldw	(0x0b, sp), y
      000134 1E 0B            [ 2]  245 	ldw	x, (0x0b, sp)
      000136 F6               [ 1]  246 	ld	a, (x)
      000137 97               [ 1]  247 	ld	xl, a
      000138 49               [ 1]  248 	rlc	a
      000139 4F               [ 1]  249 	clr	a
      00013A A2 00            [ 1]  250 	sbc	a, #0x00
      00013C 95               [ 1]  251 	ld	xh, a
      00013D 89               [ 2]  252 	pushw	x
      00013E CDr00r00         [ 4]  253 	call	_toupper
      000141 5B 02            [ 2]  254 	addw	sp, #2
      000143 A3 00 45         [ 2]  255 	cpw	x, #0x0045
      000146 26 52            [ 1]  256 	jrne	00120$
                                    257 ;	../_atof.c: 74: s++;
      000148 1E 0B            [ 2]  258 	ldw	x, (0x0b, sp)
      00014A 5C               [ 2]  259 	incw	x
      00014B 1F 24            [ 2]  260 	ldw	(0x24, sp), x
                                    261 ;	../_atof.c: 75: iexp=(signed char)atoi(s);
      00014D 1E 24            [ 2]  262 	ldw	x, (0x24, sp)
      00014F 89               [ 2]  263 	pushw	x
      000150 CDr00r00         [ 4]  264 	call	_atoi
      000153 5B 02            [ 2]  265 	addw	sp, #2
      000155 9F               [ 1]  266 	ld	a, xl
      000156 6B 02            [ 1]  267 	ld	(0x02, sp), a
                                    268 ;	../_atof.c: 77: while(iexp!=0)
      000158                        269 00116$:
      000158 0D 02            [ 1]  270 	tnz	(0x02, sp)
      00015A 27 3E            [ 1]  271 	jreq	00120$
                                    272 ;	../_atof.c: 79: if(iexp<0)
      00015C 0D 02            [ 1]  273 	tnz	(0x02, sp)
      00015E 2A 1E            [ 1]  274 	jrpl	00114$
                                    275 ;	../_atof.c: 81: value*=0.1;
      000160 1E 09            [ 2]  276 	ldw	x, (0x09, sp)
      000162 89               [ 2]  277 	pushw	x
      000163 1E 09            [ 2]  278 	ldw	x, (0x09, sp)
      000165 89               [ 2]  279 	pushw	x
      000166 4B CD            [ 1]  280 	push	#0xcd
      000168 4B CC            [ 1]  281 	push	#0xcc
      00016A 4B CC            [ 1]  282 	push	#0xcc
      00016C 4B 3D            [ 1]  283 	push	#0x3d
      00016E CDr00r00         [ 4]  284 	call	___fsmul
      000171 5B 08            [ 2]  285 	addw	sp, #8
      000173 1F 09            [ 2]  286 	ldw	(0x09, sp), x
      000175 17 07            [ 2]  287 	ldw	(0x07, sp), y
                                    288 ;	../_atof.c: 82: iexp++;
      000177 7B 02            [ 1]  289 	ld	a, (0x02, sp)
      000179 4C               [ 1]  290 	inc	a
      00017A 6B 02            [ 1]  291 	ld	(0x02, sp), a
      00017C 20 DA            [ 2]  292 	jra	00116$
      00017E                        293 00114$:
                                    294 ;	../_atof.c: 86: value*=10.0;
      00017E 1E 09            [ 2]  295 	ldw	x, (0x09, sp)
      000180 89               [ 2]  296 	pushw	x
      000181 1E 09            [ 2]  297 	ldw	x, (0x09, sp)
      000183 89               [ 2]  298 	pushw	x
      000184 5F               [ 1]  299 	clrw	x
      000185 89               [ 2]  300 	pushw	x
      000186 4B 20            [ 1]  301 	push	#0x20
      000188 4B 41            [ 1]  302 	push	#0x41
      00018A CDr00r00         [ 4]  303 	call	___fsmul
      00018D 5B 08            [ 2]  304 	addw	sp, #8
      00018F 1F 09            [ 2]  305 	ldw	(0x09, sp), x
      000191 17 07            [ 2]  306 	ldw	(0x07, sp), y
                                    307 ;	../_atof.c: 87: iexp--;
      000193 7B 02            [ 1]  308 	ld	a, (0x02, sp)
      000195 4A               [ 1]  309 	dec	a
      000196 6B 02            [ 1]  310 	ld	(0x02, sp), a
      000198 20 BE            [ 2]  311 	jra	00116$
      00019A                        312 00120$:
                                    313 ;	../_atof.c: 93: if(sign) value*=-1.0;
      00019A 0D 01            [ 1]  314 	tnz	(0x01, sp)
      00019C 27 0B            [ 1]  315 	jreq	00122$
      00019E 16 09            [ 2]  316 	ldw	y, (0x09, sp)
      0001A0 1E 07            [ 2]  317 	ldw	x, (0x07, sp)
      0001A2 58               [ 2]  318 	sllw	x
      0001A3 8C               [ 1]  319 	ccf
      0001A4 56               [ 2]  320 	rrcw	x
      0001A5 17 09            [ 2]  321 	ldw	(0x09, sp), y
      0001A7 1F 07            [ 2]  322 	ldw	(0x07, sp), x
      0001A9                        323 00122$:
                                    324 ;	../_atof.c: 94: return (value);
      0001A9 1E 09            [ 2]  325 	ldw	x, (0x09, sp)
      0001AB 16 07            [ 2]  326 	ldw	y, (0x07, sp)
      0001AD 5B 21            [ 2]  327 	addw	sp, #33
      0001AF 81               [ 4]  328 	ret
                                    329 	.area CODE
                                    330 	.area INITIALIZER
                                    331 	.area CABS (ABS)
