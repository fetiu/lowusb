                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:41:16 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _RtcRead
                                     13 	.globl _sprintf
                                     14 	.globl ___day
                                     15 	.globl ___month
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DATA
      000000                         26 _ascTimeBuffer:
      000000                         27 	.ds 32
      000020                         28 _lastTime:
      000020                         29 	.ds 12
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area INITIALIZED
      000000                         34 _monthDays:
      000000                         35 	.ds 12
      00000C                         36 ___month::
      00000C                         37 	.ds 24
      000024                         38 ___day::
      000024                         39 	.ds 14
                                     40 ;--------------------------------------------------------
                                     41 ; absolute external ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area DABS (ABS)
                                     44 ;--------------------------------------------------------
                                     45 ; global & static initialisations
                                     46 ;--------------------------------------------------------
                                     47 	.area HOME
                                     48 	.area GSINIT
                                     49 	.area GSFINAL
                                     50 	.area GSINIT
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
                                     55 	.area HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area CODE
                                     60 ;	../time.c: 42: unsigned char RtcRead(struct tm *timeptr) {
                                     61 ;	-----------------------------------------
                                     62 ;	 function RtcRead
                                     63 ;	-----------------------------------------
      000000                         64 _RtcRead:
                                     65 ;	../time.c: 45: return 0;
      000000 4F               [ 1]   66 	clr	a
      000001 81               [ 4]   67 	ret
                                     68 ;	../time.c: 50: time_t time(time_t *timeptr) {
                                     69 ;	-----------------------------------------
                                     70 ;	 function time
                                     71 ;	-----------------------------------------
      000002                         72 _time:
      000002 52 10            [ 2]   73 	sub	sp, #16
                                     74 ;	../time.c: 52: time_t t=-1;
      000004 AE FF FF         [ 2]   75 	ldw	x, #0xffff
      000007 1F 03            [ 2]   76 	ldw	(0x03, sp), x
      000009 AE FF FF         [ 2]   77 	ldw	x, #0xffff
      00000C 1F 01            [ 2]   78 	ldw	(0x01, sp), x
                                     79 ;	../time.c: 54: if (RtcRead(&now)) {
      00000E 96               [ 1]   80 	ldw	x, sp
      00000F 1C 00 05         [ 2]   81 	addw	x, #5
      000012 90 93            [ 1]   82 	ldw	y, x
      000014 89               [ 2]   83 	pushw	x
      000015 90 89            [ 2]   84 	pushw	y
      000017 CDr00r00         [ 4]   85 	call	_RtcRead
      00001A 5B 02            [ 2]   86 	addw	sp, #2
      00001C 85               [ 2]   87 	popw	x
      00001D 4D               [ 1]   88 	tnz	a
      00001E 27 0A            [ 1]   89 	jreq	00102$
                                     90 ;	../time.c: 55: t=mktime(&now);
      000020 89               [ 2]   91 	pushw	x
      000021 CDr03r24         [ 4]   92 	call	_mktime
      000024 5B 02            [ 2]   93 	addw	sp, #2
      000026 1F 03            [ 2]   94 	ldw	(0x03, sp), x
      000028 17 01            [ 2]   95 	ldw	(0x01, sp), y
      00002A                         96 00102$:
                                     97 ;	../time.c: 57: if (timeptr) {
      00002A 1E 13            [ 2]   98 	ldw	x, (0x13, sp)
      00002C 27 09            [ 1]   99 	jreq	00104$
                                    100 ;	../time.c: 58: *timeptr=t;
      00002E 1E 13            [ 2]  101 	ldw	x, (0x13, sp)
      000030 16 03            [ 2]  102 	ldw	y, (0x03, sp)
      000032 EF 02            [ 2]  103 	ldw	(0x2, x), y
      000034 16 01            [ 2]  104 	ldw	y, (0x01, sp)
      000036 FF               [ 2]  105 	ldw	(x), y
      000037                        106 00104$:
                                    107 ;	../time.c: 60: return t;
      000037 1E 03            [ 2]  108 	ldw	x, (0x03, sp)
      000039 16 01            [ 2]  109 	ldw	y, (0x01, sp)
      00003B 5B 10            [ 2]  110 	addw	sp, #16
      00003D 81               [ 4]  111 	ret
                                    112 ;	../time.c: 73: static void CheckTime(struct tm *timeptr) {
                                    113 ;	-----------------------------------------
                                    114 ;	 function CheckTime
                                    115 ;	-----------------------------------------
      00003E                        116 _CheckTime:
                                    117 ;	../time.c: 84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      00003E 16 03            [ 2]  118 	ldw	y, (0x03, sp)
      000040 90 F6            [ 1]  119 	ld	a, (y)
      000042 A1 3B            [ 1]  120 	cp	a, #0x3b
      000044 23 04            [ 2]  121 	jrule	00102$
      000046 A6 3B            [ 1]  122 	ld	a, #0x3b
      000048 90 F7            [ 1]  123 	ld	(y), a
      00004A                        124 00102$:
                                    125 ;	../time.c: 85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      00004A 93               [ 1]  126 	ldw	x, y
      00004B 5C               [ 2]  127 	incw	x
      00004C F6               [ 1]  128 	ld	a, (x)
      00004D A1 3B            [ 1]  129 	cp	a, #0x3b
      00004F 23 03            [ 2]  130 	jrule	00104$
      000051 A6 3B            [ 1]  131 	ld	a, #0x3b
      000053 F7               [ 1]  132 	ld	(x), a
      000054                        133 00104$:
                                    134 ;	../time.c: 86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      000054 93               [ 1]  135 	ldw	x, y
      000055 5C               [ 2]  136 	incw	x
      000056 5C               [ 2]  137 	incw	x
      000057 F6               [ 1]  138 	ld	a, (x)
      000058 A1 17            [ 1]  139 	cp	a, #0x17
      00005A 23 03            [ 2]  140 	jrule	00106$
      00005C A6 17            [ 1]  141 	ld	a, #0x17
      00005E F7               [ 1]  142 	ld	(x), a
      00005F                        143 00106$:
                                    144 ;	../time.c: 87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      00005F 93               [ 1]  145 	ldw	x, y
      000060 1C 00 07         [ 2]  146 	addw	x, #0x0007
      000063 F6               [ 1]  147 	ld	a, (x)
      000064 A1 06            [ 1]  148 	cp	a, #0x06
      000066 23 03            [ 2]  149 	jrule	00108$
      000068 A6 06            [ 1]  150 	ld	a, #0x06
      00006A F7               [ 1]  151 	ld	(x), a
      00006B                        152 00108$:
                                    153 ;	../time.c: 88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      00006B 93               [ 1]  154 	ldw	x, y
      00006C 1C 00 03         [ 2]  155 	addw	x, #0x0003
      00006F F6               [ 1]  156 	ld	a, (x)
      000070 A1 01            [ 1]  157 	cp	a, #0x01
      000072 24 05            [ 1]  158 	jrnc	00112$
      000074 A6 01            [ 1]  159 	ld	a, #0x01
      000076 F7               [ 1]  160 	ld	(x), a
      000077 20 07            [ 2]  161 	jra	00113$
      000079                        162 00112$:
                                    163 ;	../time.c: 89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000079 A1 1F            [ 1]  164 	cp	a, #0x1f
      00007B 23 03            [ 2]  165 	jrule	00113$
      00007D A6 1F            [ 1]  166 	ld	a, #0x1f
      00007F F7               [ 1]  167 	ld	(x), a
      000080                        168 00113$:
                                    169 ;	../time.c: 90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000080 93               [ 1]  170 	ldw	x, y
      000081 1C 00 04         [ 2]  171 	addw	x, #0x0004
      000084 F6               [ 1]  172 	ld	a, (x)
      000085 A1 0B            [ 1]  173 	cp	a, #0x0b
      000087 23 03            [ 2]  174 	jrule	00115$
      000089 A6 0B            [ 1]  175 	ld	a, #0x0b
      00008B F7               [ 1]  176 	ld	(x), a
      00008C                        177 00115$:
                                    178 ;	../time.c: 91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      00008C 72 A9 00 05      [ 2]  179 	addw	y, #0x0005
      000090 93               [ 1]  180 	ldw	x, y
      000091 FE               [ 2]  181 	ldw	x, (x)
      000092 5D               [ 2]  182 	tnzw	x
      000093 2A 04            [ 1]  183 	jrpl	00118$
      000095 93               [ 1]  184 	ldw	x, y
      000096 6F 01            [ 1]  185 	clr	(0x1, x)
      000098 7F               [ 1]  186 	clr	(x)
      000099                        187 00118$:
      000099 81               [ 4]  188 	ret
                                    189 ;	../time.c: 95: char *asctime(struct tm *timeptr) {
                                    190 ;	-----------------------------------------
                                    191 ;	 function asctime
                                    192 ;	-----------------------------------------
      00009A                        193 _asctime:
      00009A 52 16            [ 2]  194 	sub	sp, #22
                                    195 ;	../time.c: 96: CheckTime(timeptr);
      00009C 1E 19            [ 2]  196 	ldw	x, (0x19, sp)
      00009E 89               [ 2]  197 	pushw	x
      00009F CDr00r3E         [ 4]  198 	call	_CheckTime
      0000A2 5B 02            [ 2]  199 	addw	sp, #2
                                    200 ;	../time.c: 100: timeptr->tm_year+1900);
      0000A4 16 19            [ 2]  201 	ldw	y, (0x19, sp)
      0000A6 93               [ 1]  202 	ldw	x, y
      0000A7 EE 05            [ 2]  203 	ldw	x, (0x5, x)
      0000A9 1C 07 6C         [ 2]  204 	addw	x, #0x076c
      0000AC 1F 15            [ 2]  205 	ldw	(0x15, sp), x
                                    206 ;	../time.c: 99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0000AE 90 F6            [ 1]  207 	ld	a, (y)
      0000B0 6B 14            [ 1]  208 	ld	(0x14, sp), a
      0000B2 0F 13            [ 1]  209 	clr	(0x13, sp)
      0000B4 93               [ 1]  210 	ldw	x, y
      0000B5 E6 01            [ 1]  211 	ld	a, (0x1, x)
      0000B7 6B 12            [ 1]  212 	ld	(0x12, sp), a
      0000B9 0F 11            [ 1]  213 	clr	(0x11, sp)
      0000BB 93               [ 1]  214 	ldw	x, y
      0000BC E6 02            [ 1]  215 	ld	a, (0x2, x)
      0000BE 6B 10            [ 1]  216 	ld	(0x10, sp), a
      0000C0 0F 0F            [ 1]  217 	clr	(0x0f, sp)
                                    218 ;	../time.c: 98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      0000C2 93               [ 1]  219 	ldw	x, y
      0000C3 E6 03            [ 1]  220 	ld	a, (0x3, x)
      0000C5 6B 0E            [ 1]  221 	ld	(0x0e, sp), a
      0000C7 0F 0D            [ 1]  222 	clr	(0x0d, sp)
      0000C9 AEr00r0C         [ 2]  223 	ldw	x, #___month+0
      0000CC 1F 0B            [ 2]  224 	ldw	(0x0b, sp), x
      0000CE 93               [ 1]  225 	ldw	x, y
      0000CF E6 04            [ 1]  226 	ld	a, (0x4, x)
      0000D1 5F               [ 1]  227 	clrw	x
      0000D2 97               [ 1]  228 	ld	xl, a
      0000D3 58               [ 2]  229 	sllw	x
      0000D4 72 FB 0B         [ 2]  230 	addw	x, (0x0b, sp)
      0000D7 FE               [ 2]  231 	ldw	x, (x)
      0000D8 1F 09            [ 2]  232 	ldw	(0x09, sp), x
      0000DA AEr00r24         [ 2]  233 	ldw	x, #___day+0
      0000DD 1F 07            [ 2]  234 	ldw	(0x07, sp), x
      0000DF 90 E6 07         [ 1]  235 	ld	a, (0x7, y)
      0000E2 5F               [ 1]  236 	clrw	x
      0000E3 97               [ 1]  237 	ld	xl, a
      0000E4 58               [ 2]  238 	sllw	x
      0000E5 72 FB 07         [ 2]  239 	addw	x, (0x07, sp)
      0000E8 FE               [ 2]  240 	ldw	x, (x)
      0000E9 1F 05            [ 2]  241 	ldw	(0x05, sp), x
                                    242 ;	../time.c: 97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      0000EB AEr04rAF         [ 2]  243 	ldw	x, #___str_0+0
      0000EE 1F 03            [ 2]  244 	ldw	(0x03, sp), x
      0000F0 AEr00r00         [ 2]  245 	ldw	x, #_ascTimeBuffer+0
      0000F3 1F 01            [ 2]  246 	ldw	(0x01, sp), x
      0000F5 16 01            [ 2]  247 	ldw	y, (0x01, sp)
      0000F7 1E 15            [ 2]  248 	ldw	x, (0x15, sp)
      0000F9 89               [ 2]  249 	pushw	x
      0000FA 1E 15            [ 2]  250 	ldw	x, (0x15, sp)
      0000FC 89               [ 2]  251 	pushw	x
      0000FD 1E 15            [ 2]  252 	ldw	x, (0x15, sp)
      0000FF 89               [ 2]  253 	pushw	x
      000100 1E 15            [ 2]  254 	ldw	x, (0x15, sp)
      000102 89               [ 2]  255 	pushw	x
      000103 1E 15            [ 2]  256 	ldw	x, (0x15, sp)
      000105 89               [ 2]  257 	pushw	x
      000106 1E 13            [ 2]  258 	ldw	x, (0x13, sp)
      000108 89               [ 2]  259 	pushw	x
      000109 1E 11            [ 2]  260 	ldw	x, (0x11, sp)
      00010B 89               [ 2]  261 	pushw	x
      00010C 1E 11            [ 2]  262 	ldw	x, (0x11, sp)
      00010E 89               [ 2]  263 	pushw	x
      00010F 90 89            [ 2]  264 	pushw	y
      000111 CDr00r00         [ 4]  265 	call	_sprintf
      000114 5B 12            [ 2]  266 	addw	sp, #18
                                    267 ;	../time.c: 101: return ascTimeBuffer;
      000116 1E 01            [ 2]  268 	ldw	x, (0x01, sp)
      000118 5B 16            [ 2]  269 	addw	sp, #22
      00011A 81               [ 4]  270 	ret
                                    271 ;	../time.c: 104: char *ctime(time_t *timep) {
                                    272 ;	-----------------------------------------
                                    273 ;	 function ctime
                                    274 ;	-----------------------------------------
      00011B                        275 _ctime:
                                    276 ;	../time.c: 105: return asctime(localtime(timep));
      00011B 1E 03            [ 2]  277 	ldw	x, (0x03, sp)
      00011D 89               [ 2]  278 	pushw	x
      00011E CDr01r2A         [ 4]  279 	call	_localtime
      000121 5B 02            [ 2]  280 	addw	sp, #2
      000123 89               [ 2]  281 	pushw	x
      000124 CDr00r9A         [ 4]  282 	call	_asctime
      000127 5B 02            [ 2]  283 	addw	sp, #2
      000129 81               [ 4]  284 	ret
                                    285 ;	../time.c: 121: struct tm *localtime(time_t *timep) {
                                    286 ;	-----------------------------------------
                                    287 ;	 function localtime
                                    288 ;	-----------------------------------------
      00012A                        289 _localtime:
                                    290 ;	../time.c: 122: return gmtime(timep);
      00012A 1E 03            [ 2]  291 	ldw	x, (0x03, sp)
      00012C 89               [ 2]  292 	pushw	x
      00012D CDr01r33         [ 4]  293 	call	_gmtime
      000130 5B 02            [ 2]  294 	addw	sp, #2
      000132 81               [ 4]  295 	ret
                                    296 ;	../time.c: 125: struct tm *gmtime(time_t *timep) {
                                    297 ;	-----------------------------------------
                                    298 ;	 function gmtime
                                    299 ;	-----------------------------------------
      000133                        300 _gmtime:
      000133 52 45            [ 2]  301 	sub	sp, #69
                                    302 ;	../time.c: 126: unsigned long epoch=*timep;
      000135 1E 48            [ 2]  303 	ldw	x, (0x48, sp)
      000137 E6 03            [ 1]  304 	ld	a, (0x3, x)
      000139 90 97            [ 1]  305 	ld	yl, a
      00013B E6 02            [ 1]  306 	ld	a, (0x2, x)
      00013D FE               [ 2]  307 	ldw	x, (x)
      00013E 1F 42            [ 2]  308 	ldw	(0x42, sp), x
      000140 90 95            [ 1]  309 	ld	yh, a
                                    310 ;	../time.c: 131: lastTime.tm_sec=epoch%60;
      000142 AEr00r20         [ 2]  311 	ldw	x, #_lastTime+0
      000145 1F 40            [ 2]  312 	ldw	(0x40, sp), x
      000147 90 89            [ 2]  313 	pushw	y
      000149 4B 3C            [ 1]  314 	push	#0x3c
      00014B 5F               [ 1]  315 	clrw	x
      00014C 89               [ 2]  316 	pushw	x
      00014D 4B 00            [ 1]  317 	push	#0x00
      00014F 90 89            [ 2]  318 	pushw	y
      000151 1E 4A            [ 2]  319 	ldw	x, (0x4a, sp)
      000153 89               [ 2]  320 	pushw	x
      000154 CDr00r00         [ 4]  321 	call	__modulong
      000157 5B 08            [ 2]  322 	addw	sp, #8
      000159 17 3E            [ 2]  323 	ldw	(0x3e, sp), y
      00015B 90 85            [ 2]  324 	popw	y
      00015D 9F               [ 1]  325 	ld	a, xl
      00015E 1E 40            [ 2]  326 	ldw	x, (0x40, sp)
      000160 F7               [ 1]  327 	ld	(x), a
                                    328 ;	../time.c: 132: epoch/=60; // now it is minutes
      000161 4B 3C            [ 1]  329 	push	#0x3c
      000163 5F               [ 1]  330 	clrw	x
      000164 89               [ 2]  331 	pushw	x
      000165 4B 00            [ 1]  332 	push	#0x00
      000167 90 89            [ 2]  333 	pushw	y
      000169 1E 48            [ 2]  334 	ldw	x, (0x48, sp)
      00016B 89               [ 2]  335 	pushw	x
      00016C CDr00r00         [ 4]  336 	call	__divulong
      00016F 5B 08            [ 2]  337 	addw	sp, #8
      000171 1F 3A            [ 2]  338 	ldw	(0x3a, sp), x
      000173 17 38            [ 2]  339 	ldw	(0x38, sp), y
                                    340 ;	../time.c: 133: lastTime.tm_min=epoch%60;
      000175 AEr00r20         [ 2]  341 	ldw	x, #_lastTime+0
      000178 1F 36            [ 2]  342 	ldw	(0x36, sp), x
      00017A 1E 36            [ 2]  343 	ldw	x, (0x36, sp)
      00017C 5C               [ 2]  344 	incw	x
      00017D 1F 34            [ 2]  345 	ldw	(0x34, sp), x
      00017F 4B 3C            [ 1]  346 	push	#0x3c
      000181 5F               [ 1]  347 	clrw	x
      000182 89               [ 2]  348 	pushw	x
      000183 4B 00            [ 1]  349 	push	#0x00
      000185 1E 3E            [ 2]  350 	ldw	x, (0x3e, sp)
      000187 89               [ 2]  351 	pushw	x
      000188 1E 3E            [ 2]  352 	ldw	x, (0x3e, sp)
      00018A 89               [ 2]  353 	pushw	x
      00018B CDr00r00         [ 4]  354 	call	__modulong
      00018E 5B 08            [ 2]  355 	addw	sp, #8
      000190 9F               [ 1]  356 	ld	a, xl
      000191 1E 34            [ 2]  357 	ldw	x, (0x34, sp)
      000193 F7               [ 1]  358 	ld	(x), a
                                    359 ;	../time.c: 134: epoch/=60; // now it is hours
      000194 4B 3C            [ 1]  360 	push	#0x3c
      000196 5F               [ 1]  361 	clrw	x
      000197 89               [ 2]  362 	pushw	x
      000198 4B 00            [ 1]  363 	push	#0x00
      00019A 1E 3E            [ 2]  364 	ldw	x, (0x3e, sp)
      00019C 89               [ 2]  365 	pushw	x
      00019D 1E 3E            [ 2]  366 	ldw	x, (0x3e, sp)
      00019F 89               [ 2]  367 	pushw	x
      0001A0 CDr00r00         [ 4]  368 	call	__divulong
      0001A3 5B 08            [ 2]  369 	addw	sp, #8
      0001A5 1F 0A            [ 2]  370 	ldw	(0x0a, sp), x
      0001A7 17 08            [ 2]  371 	ldw	(0x08, sp), y
                                    372 ;	../time.c: 135: lastTime.tm_hour=epoch%24;
      0001A9 1E 36            [ 2]  373 	ldw	x, (0x36, sp)
      0001AB 5C               [ 2]  374 	incw	x
      0001AC 5C               [ 2]  375 	incw	x
      0001AD 1F 32            [ 2]  376 	ldw	(0x32, sp), x
      0001AF 4B 18            [ 1]  377 	push	#0x18
      0001B1 5F               [ 1]  378 	clrw	x
      0001B2 89               [ 2]  379 	pushw	x
      0001B3 4B 00            [ 1]  380 	push	#0x00
      0001B5 1E 0E            [ 2]  381 	ldw	x, (0x0e, sp)
      0001B7 89               [ 2]  382 	pushw	x
      0001B8 1E 0E            [ 2]  383 	ldw	x, (0x0e, sp)
      0001BA 89               [ 2]  384 	pushw	x
      0001BB CDr00r00         [ 4]  385 	call	__modulong
      0001BE 5B 08            [ 2]  386 	addw	sp, #8
      0001C0 9F               [ 1]  387 	ld	a, xl
      0001C1 1E 32            [ 2]  388 	ldw	x, (0x32, sp)
      0001C3 F7               [ 1]  389 	ld	(x), a
                                    390 ;	../time.c: 136: epoch/=24; // now it is days
      0001C4 4B 18            [ 1]  391 	push	#0x18
      0001C6 5F               [ 1]  392 	clrw	x
      0001C7 89               [ 2]  393 	pushw	x
      0001C8 4B 00            [ 1]  394 	push	#0x00
      0001CA 1E 0E            [ 2]  395 	ldw	x, (0x0e, sp)
      0001CC 89               [ 2]  396 	pushw	x
      0001CD 1E 0E            [ 2]  397 	ldw	x, (0x0e, sp)
      0001CF 89               [ 2]  398 	pushw	x
      0001D0 CDr00r00         [ 4]  399 	call	__divulong
      0001D3 5B 08            [ 2]  400 	addw	sp, #8
      0001D5 1F 30            [ 2]  401 	ldw	(0x30, sp), x
      0001D7 17 2E            [ 2]  402 	ldw	(0x2e, sp), y
                                    403 ;	../time.c: 137: lastTime.tm_wday=(epoch+4)%7;
      0001D9 1E 36            [ 2]  404 	ldw	x, (0x36, sp)
      0001DB 1C 00 07         [ 2]  405 	addw	x, #0x0007
      0001DE 1F 2C            [ 2]  406 	ldw	(0x2c, sp), x
      0001E0 16 30            [ 2]  407 	ldw	y, (0x30, sp)
      0001E2 72 A9 00 04      [ 2]  408 	addw	y, #0x0004
      0001E6 7B 2F            [ 1]  409 	ld	a, (0x2f, sp)
      0001E8 A9 00            [ 1]  410 	adc	a, #0x00
      0001EA 97               [ 1]  411 	ld	xl, a
      0001EB 7B 2E            [ 1]  412 	ld	a, (0x2e, sp)
      0001ED A9 00            [ 1]  413 	adc	a, #0x00
      0001EF 95               [ 1]  414 	ld	xh, a
      0001F0 4B 07            [ 1]  415 	push	#0x07
      0001F2 4B 00            [ 1]  416 	push	#0x00
      0001F4 4B 00            [ 1]  417 	push	#0x00
      0001F6 4B 00            [ 1]  418 	push	#0x00
      0001F8 90 89            [ 2]  419 	pushw	y
      0001FA 89               [ 2]  420 	pushw	x
      0001FB CDr00r00         [ 4]  421 	call	__modulong
      0001FE 5B 08            [ 2]  422 	addw	sp, #8
      000200 9F               [ 1]  423 	ld	a, xl
      000201 1E 2C            [ 2]  424 	ldw	x, (0x2c, sp)
      000203 F7               [ 1]  425 	ld	(x), a
                                    426 ;	../time.c: 140: days=0;
      000204 5F               [ 1]  427 	clrw	x
      000205 1F 2A            [ 2]  428 	ldw	(0x2a, sp), x
      000207 1F 28            [ 2]  429 	ldw	(0x28, sp), x
                                    430 ;	../time.c: 141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      000209 AE 07 B2         [ 2]  431 	ldw	x, #0x07b2
      00020C 1F 06            [ 2]  432 	ldw	(0x06, sp), x
      00020E                        433 00101$:
      00020E 7B 07            [ 1]  434 	ld	a, (0x07, sp)
      000210 A4 03            [ 1]  435 	and	a, #0x03
      000212 6B 27            [ 1]  436 	ld	(0x27, sp), a
      000214 0F 26            [ 1]  437 	clr	(0x26, sp)
      000216 1E 26            [ 2]  438 	ldw	x, (0x26, sp)
      000218 26 07            [ 1]  439 	jrne	00118$
      00021A AE 01 6E         [ 2]  440 	ldw	x, #0x016e
      00021D 1F 24            [ 2]  441 	ldw	(0x24, sp), x
      00021F 20 05            [ 2]  442 	jra	00119$
      000221                        443 00118$:
      000221 AE 01 6D         [ 2]  444 	ldw	x, #0x016d
      000224 1F 24            [ 2]  445 	ldw	(0x24, sp), x
      000226                        446 00119$:
      000226 16 24            [ 2]  447 	ldw	y, (0x24, sp)
      000228 5F               [ 1]  448 	clrw	x
      000229 90 5D            [ 2]  449 	tnzw	y
      00022B 2A 01            [ 1]  450 	jrpl	00157$
      00022D 5A               [ 2]  451 	decw	x
      00022E                        452 00157$:
      00022E 72 F9 2A         [ 2]  453 	addw	y, (0x2a, sp)
      000231 17 22            [ 2]  454 	ldw	(0x22, sp), y
      000233 9F               [ 1]  455 	ld	a, xl
      000234 19 29            [ 1]  456 	adc	a, (0x29, sp)
      000236 6B 21            [ 1]  457 	ld	(0x21, sp), a
      000238 9E               [ 1]  458 	ld	a, xh
      000239 19 28            [ 1]  459 	adc	a, (0x28, sp)
      00023B 6B 20            [ 1]  460 	ld	(0x20, sp), a
      00023D 16 22            [ 2]  461 	ldw	y, (0x22, sp)
      00023F 17 2A            [ 2]  462 	ldw	(0x2a, sp), y
      000241 16 20            [ 2]  463 	ldw	y, (0x20, sp)
      000243 17 28            [ 2]  464 	ldw	(0x28, sp), y
      000245 1E 30            [ 2]  465 	ldw	x, (0x30, sp)
      000247 13 22            [ 2]  466 	cpw	x, (0x22, sp)
      000249 7B 2F            [ 1]  467 	ld	a, (0x2f, sp)
      00024B 12 21            [ 1]  468 	sbc	a, (0x21, sp)
      00024D 7B 2E            [ 1]  469 	ld	a, (0x2e, sp)
      00024F 12 20            [ 1]  470 	sbc	a, (0x20, sp)
      000251 25 07            [ 1]  471 	jrc	00103$
                                    472 ;	../time.c: 142: year++;
      000253 1E 06            [ 2]  473 	ldw	x, (0x06, sp)
      000255 5C               [ 2]  474 	incw	x
      000256 1F 06            [ 2]  475 	ldw	(0x06, sp), x
      000258 20 B4            [ 2]  476 	jra	00101$
      00025A                        477 00103$:
                                    478 ;	../time.c: 144: lastTime.tm_year=year-1900;
      00025A 1E 36            [ 2]  479 	ldw	x, (0x36, sp)
      00025C 1C 00 05         [ 2]  480 	addw	x, #0x0005
      00025F 16 06            [ 2]  481 	ldw	y, (0x06, sp)
      000261 72 A2 07 6C      [ 2]  482 	subw	y, #0x076c
      000265 FF               [ 2]  483 	ldw	(x), y
                                    484 ;	../time.c: 146: days -= LEAP_YEAR(year) ? 366 : 365;
      000266 16 26            [ 2]  485 	ldw	y, (0x26, sp)
      000268 17 1E            [ 2]  486 	ldw	(0x1e, sp), y
      00026A 1E 26            [ 2]  487 	ldw	x, (0x26, sp)
      00026C 26 07            [ 1]  488 	jrne	00120$
      00026E AE 01 6E         [ 2]  489 	ldw	x, #0x016e
      000271 1F 1C            [ 2]  490 	ldw	(0x1c, sp), x
      000273 20 05            [ 2]  491 	jra	00121$
      000275                        492 00120$:
      000275 AE 01 6D         [ 2]  493 	ldw	x, #0x016d
      000278 1F 1C            [ 2]  494 	ldw	(0x1c, sp), x
      00027A                        495 00121$:
      00027A 16 1C            [ 2]  496 	ldw	y, (0x1c, sp)
      00027C 17 1A            [ 2]  497 	ldw	(0x1a, sp), y
      00027E 5F               [ 1]  498 	clrw	x
      00027F 0D 1A            [ 1]  499 	tnz	(0x1a, sp)
      000281 2A 01            [ 1]  500 	jrpl	00160$
      000283 5A               [ 2]  501 	decw	x
      000284                        502 00160$:
      000284 16 2A            [ 2]  503 	ldw	y, (0x2a, sp)
      000286 72 F2 1A         [ 2]  504 	subw	y, (0x1a, sp)
      000289 7B 29            [ 1]  505 	ld	a, (0x29, sp)
      00028B 89               [ 2]  506 	pushw	x
      00028C 12 02            [ 1]  507 	sbc	a, (#2, sp)
      00028E 85               [ 2]  508 	popw	x
      00028F 97               [ 1]  509 	ld	xl, a
      000290 7B 28            [ 1]  510 	ld	a, (0x28, sp)
      000292 89               [ 2]  511 	pushw	x
      000293 12 01            [ 1]  512 	sbc	a, (#1, sp)
      000295 85               [ 2]  513 	popw	x
      000296 95               [ 1]  514 	ld	xh, a
      000297 17 03            [ 2]  515 	ldw	(0x03, sp), y
      000299 1F 01            [ 2]  516 	ldw	(0x01, sp), x
                                    517 ;	../time.c: 147: epoch -= days; // now it is days in this year, starting at 0
      00029B 16 30            [ 2]  518 	ldw	y, (0x30, sp)
      00029D 72 F2 03         [ 2]  519 	subw	y, (0x03, sp)
      0002A0 7B 2F            [ 1]  520 	ld	a, (0x2f, sp)
      0002A2 12 02            [ 1]  521 	sbc	a, (0x02, sp)
      0002A4 97               [ 1]  522 	ld	xl, a
      0002A5 7B 2E            [ 1]  523 	ld	a, (0x2e, sp)
      0002A7 12 01            [ 1]  524 	sbc	a, (0x01, sp)
      0002A9 95               [ 1]  525 	ld	xh, a
      0002AA 17 16            [ 2]  526 	ldw	(0x16, sp), y
      0002AC 1F 14            [ 2]  527 	ldw	(0x14, sp), x
                                    528 ;	../time.c: 148: lastTime.tm_yday=epoch;
      0002AE 1E 36            [ 2]  529 	ldw	x, (0x36, sp)
      0002B0 16 16            [ 2]  530 	ldw	y, (0x16, sp)
      0002B2 EF 08            [ 2]  531 	ldw	(0x0008, x), y
                                    532 ;	../time.c: 153: for (month=0; month<12; month++) {
      0002B4 AEr00r00         [ 2]  533 	ldw	x, #_monthDays+0
      0002B7 1F 12            [ 2]  534 	ldw	(0x12, sp), x
      0002B9 0F 05            [ 1]  535 	clr	(0x05, sp)
      0002BB                        536 00114$:
                                    537 ;	../time.c: 154: if (month==1) { // februari
      0002BB 7B 05            [ 1]  538 	ld	a, (0x05, sp)
      0002BD A1 01            [ 1]  539 	cp	a, #0x01
      0002BF 26 0C            [ 1]  540 	jrne	00108$
                                    541 ;	../time.c: 155: if (LEAP_YEAR(year)) {
      0002C1 1E 1E            [ 2]  542 	ldw	x, (0x1e, sp)
      0002C3 26 04            [ 1]  543 	jrne	00105$
                                    544 ;	../time.c: 156: monthLength=29;
      0002C5 A6 1D            [ 1]  545 	ld	a, #0x1d
      0002C7 20 10            [ 2]  546 	jra	00109$
      0002C9                        547 00105$:
                                    548 ;	../time.c: 158: monthLength=28;
      0002C9 A6 1C            [ 1]  549 	ld	a, #0x1c
      0002CB 20 0C            [ 2]  550 	jra	00109$
      0002CD                        551 00108$:
                                    552 ;	../time.c: 161: monthLength = monthDays[month];
      0002CD 5F               [ 1]  553 	clrw	x
      0002CE 7B 05            [ 1]  554 	ld	a, (0x05, sp)
      0002D0 97               [ 1]  555 	ld	xl, a
      0002D1 72 FB 12         [ 2]  556 	addw	x, (0x12, sp)
      0002D4 1F 10            [ 2]  557 	ldw	(0x10, sp), x
      0002D6 1E 10            [ 2]  558 	ldw	x, (0x10, sp)
      0002D8 F6               [ 1]  559 	ld	a, (x)
      0002D9                        560 00109$:
                                    561 ;	../time.c: 164: if (epoch>=monthLength) {
      0002D9 6B 0F            [ 1]  562 	ld	(0x0f, sp), a
      0002DB 0F 0E            [ 1]  563 	clr	(0x0e, sp)
      0002DD 0F 0D            [ 1]  564 	clr	(0x0d, sp)
      0002DF 0F 0C            [ 1]  565 	clr	(0x0c, sp)
      0002E1 1E 16            [ 2]  566 	ldw	x, (0x16, sp)
      0002E3 13 0E            [ 2]  567 	cpw	x, (0x0e, sp)
      0002E5 7B 15            [ 1]  568 	ld	a, (0x15, sp)
      0002E7 12 0D            [ 1]  569 	sbc	a, (0x0d, sp)
      0002E9 7B 14            [ 1]  570 	ld	a, (0x14, sp)
      0002EB 12 0C            [ 1]  571 	sbc	a, (0x0c, sp)
      0002ED 25 1B            [ 1]  572 	jrc	00113$
                                    573 ;	../time.c: 165: epoch-=monthLength;
      0002EF 16 16            [ 2]  574 	ldw	y, (0x16, sp)
      0002F1 72 F2 0E         [ 2]  575 	subw	y, (0x0e, sp)
      0002F4 7B 15            [ 1]  576 	ld	a, (0x15, sp)
      0002F6 12 0D            [ 1]  577 	sbc	a, (0x0d, sp)
      0002F8 97               [ 1]  578 	ld	xl, a
      0002F9 7B 14            [ 1]  579 	ld	a, (0x14, sp)
      0002FB 12 0C            [ 1]  580 	sbc	a, (0x0c, sp)
      0002FD 95               [ 1]  581 	ld	xh, a
      0002FE 17 16            [ 2]  582 	ldw	(0x16, sp), y
      000300 1F 14            [ 2]  583 	ldw	(0x14, sp), x
                                    584 ;	../time.c: 153: for (month=0; month<12; month++) {
      000302 0C 05            [ 1]  585 	inc	(0x05, sp)
      000304 7B 05            [ 1]  586 	ld	a, (0x05, sp)
      000306 A1 0C            [ 1]  587 	cp	a, #0x0c
      000308 25 B1            [ 1]  588 	jrc	00114$
      00030A                        589 00113$:
                                    590 ;	../time.c: 170: lastTime.tm_mon=month;
      00030A 1E 36            [ 2]  591 	ldw	x, (0x36, sp)
      00030C 7B 05            [ 1]  592 	ld	a, (0x05, sp)
      00030E E7 04            [ 1]  593 	ld	(0x0004, x), a
                                    594 ;	../time.c: 171: lastTime.tm_mday=epoch+1;
      000310 1E 36            [ 2]  595 	ldw	x, (0x36, sp)
      000312 1C 00 03         [ 2]  596 	addw	x, #0x0003
      000315 7B 17            [ 1]  597 	ld	a, (0x17, sp)
      000317 4C               [ 1]  598 	inc	a
      000318 F7               [ 1]  599 	ld	(x), a
                                    600 ;	../time.c: 173: lastTime.tm_isdst=0;
      000319 1E 36            [ 2]  601 	ldw	x, (0x36, sp)
      00031B 1C 00 0A         [ 2]  602 	addw	x, #0x000a
      00031E 7F               [ 1]  603 	clr	(x)
                                    604 ;	../time.c: 175: return &lastTime;
      00031F 1E 36            [ 2]  605 	ldw	x, (0x36, sp)
      000321 5B 45            [ 2]  606 	addw	sp, #69
      000323 81               [ 4]  607 	ret
                                    608 ;	../time.c: 179: time_t mktime(struct tm *timeptr) {
                                    609 ;	-----------------------------------------
                                    610 ;	 function mktime
                                    611 ;	-----------------------------------------
      000324                        612 _mktime:
      000324 52 28            [ 2]  613 	sub	sp, #40
                                    614 ;	../time.c: 180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      000326 16 2B            [ 2]  615 	ldw	y, (0x2b, sp)
      000328 17 27            [ 2]  616 	ldw	(0x27, sp), y
      00032A 1E 27            [ 2]  617 	ldw	x, (0x27, sp)
      00032C EE 05            [ 2]  618 	ldw	x, (0x5, x)
      00032E 1C 07 6C         [ 2]  619 	addw	x, #0x076c
      000331 1F 09            [ 2]  620 	ldw	(0x09, sp), x
      000333 1E 27            [ 2]  621 	ldw	x, (0x27, sp)
      000335 E6 04            [ 1]  622 	ld	a, (0x4, x)
      000337 5F               [ 1]  623 	clrw	x
      000338 97               [ 1]  624 	ld	xl, a
      000339 1F 07            [ 2]  625 	ldw	(0x07, sp), x
                                    626 ;	../time.c: 183: CheckTime(timeptr);
      00033B 1E 27            [ 2]  627 	ldw	x, (0x27, sp)
      00033D 89               [ 2]  628 	pushw	x
      00033E CDr00r3E         [ 4]  629 	call	_CheckTime
      000341 5B 02            [ 2]  630 	addw	sp, #2
                                    631 ;	../time.c: 186: seconds= (year-1970)*(60*60*24L*365);
      000343 16 09            [ 2]  632 	ldw	y, (0x09, sp)
      000345 72 A2 07 B2      [ 2]  633 	subw	y, #0x07b2
      000349 5F               [ 1]  634 	clrw	x
      00034A 90 5D            [ 2]  635 	tnzw	y
      00034C 2A 01            [ 1]  636 	jrpl	00147$
      00034E 5A               [ 2]  637 	decw	x
      00034F                        638 00147$:
      00034F 90 89            [ 2]  639 	pushw	y
      000351 89               [ 2]  640 	pushw	x
      000352 4B 80            [ 1]  641 	push	#0x80
      000354 4B 33            [ 1]  642 	push	#0x33
      000356 4B E1            [ 1]  643 	push	#0xe1
      000358 4B 01            [ 1]  644 	push	#0x01
      00035A CDr00r00         [ 4]  645 	call	__mullong
      00035D 5B 08            [ 2]  646 	addw	sp, #8
                                    647 ;	../time.c: 189: for (i=1970; i<year; i++) {
      00035F 1F 25            [ 2]  648 	ldw	(0x25, sp), x
      000361 17 23            [ 2]  649 	ldw	(0x23, sp), y
      000363 AE 07 B2         [ 2]  650 	ldw	x, #0x07b2
      000366 1F 05            [ 2]  651 	ldw	(0x05, sp), x
      000368                        652 00110$:
      000368 1E 05            [ 2]  653 	ldw	x, (0x05, sp)
      00036A 13 09            [ 2]  654 	cpw	x, (0x09, sp)
      00036C 2E 29            [ 1]  655 	jrsge	00124$
                                    656 ;	../time.c: 190: if (LEAP_YEAR(i)) {
      00036E 4B 04            [ 1]  657 	push	#0x04
      000370 4B 00            [ 1]  658 	push	#0x00
      000372 1E 07            [ 2]  659 	ldw	x, (0x07, sp)
      000374 89               [ 2]  660 	pushw	x
      000375 CDr00r00         [ 4]  661 	call	__modsint
      000378 5B 04            [ 2]  662 	addw	sp, #4
      00037A 5D               [ 2]  663 	tnzw	x
      00037B 26 13            [ 1]  664 	jrne	00111$
                                    665 ;	../time.c: 191: seconds+= 60*60*24L;
      00037D 1E 25            [ 2]  666 	ldw	x, (0x25, sp)
      00037F 1C 51 80         [ 2]  667 	addw	x, #0x5180
      000382 1F 25            [ 2]  668 	ldw	(0x25, sp), x
      000384 7B 24            [ 1]  669 	ld	a, (0x24, sp)
      000386 A9 01            [ 1]  670 	adc	a, #0x01
      000388 6B 24            [ 1]  671 	ld	(0x24, sp), a
      00038A 7B 23            [ 1]  672 	ld	a, (0x23, sp)
      00038C A9 00            [ 1]  673 	adc	a, #0x00
      00038E 6B 23            [ 1]  674 	ld	(0x23, sp), a
      000390                        675 00111$:
                                    676 ;	../time.c: 189: for (i=1970; i<year; i++) {
      000390 1E 05            [ 2]  677 	ldw	x, (0x05, sp)
      000392 5C               [ 2]  678 	incw	x
      000393 1F 05            [ 2]  679 	ldw	(0x05, sp), x
      000395 20 D1            [ 2]  680 	jra	00110$
      000397                        681 00124$:
      000397 16 25            [ 2]  682 	ldw	y, (0x25, sp)
      000399 17 21            [ 2]  683 	ldw	(0x21, sp), y
      00039B 16 23            [ 2]  684 	ldw	y, (0x23, sp)
      00039D 17 1F            [ 2]  685 	ldw	(0x1f, sp), y
                                    686 ;	../time.c: 196: for (i=0; i<month; i++) {
      00039F 4B 04            [ 1]  687 	push	#0x04
      0003A1 4B 00            [ 1]  688 	push	#0x00
      0003A3 1E 0B            [ 2]  689 	ldw	x, (0x0b, sp)
      0003A5 89               [ 2]  690 	pushw	x
      0003A6 CDr00r00         [ 4]  691 	call	__modsint
      0003A9 5B 04            [ 2]  692 	addw	sp, #4
      0003AB 1F 1D            [ 2]  693 	ldw	(0x1d, sp), x
      0003AD AEr00r00         [ 2]  694 	ldw	x, #_monthDays+0
      0003B0 1F 1B            [ 2]  695 	ldw	(0x1b, sp), x
      0003B2 5F               [ 1]  696 	clrw	x
      0003B3 1F 05            [ 2]  697 	ldw	(0x05, sp), x
      0003B5                        698 00113$:
      0003B5 1E 05            [ 2]  699 	ldw	x, (0x05, sp)
      0003B7 13 07            [ 2]  700 	cpw	x, (0x07, sp)
      0003B9 2E 58            [ 1]  701 	jrsge	00108$
                                    702 ;	../time.c: 197: if (i==1 && LEAP_YEAR(year)) { 
      0003BB 1E 05            [ 2]  703 	ldw	x, (0x05, sp)
      0003BD A3 00 01         [ 2]  704 	cpw	x, #0x0001
      0003C0 26 1A            [ 1]  705 	jrne	00105$
      0003C2 1E 1D            [ 2]  706 	ldw	x, (0x1d, sp)
      0003C4 26 16            [ 1]  707 	jrne	00105$
                                    708 ;	../time.c: 198: seconds+= 60*60*24L*29;
      0003C6 16 21            [ 2]  709 	ldw	y, (0x21, sp)
      0003C8 72 A9 3B 80      [ 2]  710 	addw	y, #0x3b80
      0003CC 7B 20            [ 1]  711 	ld	a, (0x20, sp)
      0003CE A9 26            [ 1]  712 	adc	a, #0x26
      0003D0 97               [ 1]  713 	ld	xl, a
      0003D1 7B 1F            [ 1]  714 	ld	a, (0x1f, sp)
      0003D3 A9 00            [ 1]  715 	adc	a, #0x00
      0003D5 95               [ 1]  716 	ld	xh, a
      0003D6 17 21            [ 2]  717 	ldw	(0x21, sp), y
      0003D8 1F 1F            [ 2]  718 	ldw	(0x1f, sp), x
      0003DA 20 30            [ 2]  719 	jra	00114$
      0003DC                        720 00105$:
                                    721 ;	../time.c: 200: seconds+= 60*60*24L*monthDays[i];
      0003DC 1E 1B            [ 2]  722 	ldw	x, (0x1b, sp)
      0003DE 72 FB 05         [ 2]  723 	addw	x, (0x05, sp)
      0003E1 F6               [ 1]  724 	ld	a, (x)
      0003E2 97               [ 1]  725 	ld	xl, a
      0003E3 49               [ 1]  726 	rlc	a
      0003E4 4F               [ 1]  727 	clr	a
      0003E5 A2 00            [ 1]  728 	sbc	a, #0x00
      0003E7 95               [ 1]  729 	ld	xh, a
      0003E8 90 97            [ 1]  730 	ld	yl, a
      0003EA 90 95            [ 1]  731 	ld	yh, a
      0003EC 89               [ 2]  732 	pushw	x
      0003ED 90 89            [ 2]  733 	pushw	y
      0003EF 4B 80            [ 1]  734 	push	#0x80
      0003F1 4B 51            [ 1]  735 	push	#0x51
      0003F3 4B 01            [ 1]  736 	push	#0x01
      0003F5 4B 00            [ 1]  737 	push	#0x00
      0003F7 CDr00r00         [ 4]  738 	call	__mullong
      0003FA 5B 08            [ 2]  739 	addw	sp, #8
      0003FC 51               [ 1]  740 	exgw	x, y
      0003FD 72 F9 21         [ 2]  741 	addw	y, (0x21, sp)
      000400 9F               [ 1]  742 	ld	a, xl
      000401 19 20            [ 1]  743 	adc	a, (0x20, sp)
      000403 97               [ 1]  744 	ld	xl, a
      000404 9E               [ 1]  745 	ld	a, xh
      000405 19 1F            [ 1]  746 	adc	a, (0x1f, sp)
      000407 95               [ 1]  747 	ld	xh, a
      000408 17 21            [ 2]  748 	ldw	(0x21, sp), y
      00040A 1F 1F            [ 2]  749 	ldw	(0x1f, sp), x
      00040C                        750 00114$:
                                    751 ;	../time.c: 196: for (i=0; i<month; i++) {
      00040C 1E 05            [ 2]  752 	ldw	x, (0x05, sp)
      00040E 5C               [ 2]  753 	incw	x
      00040F 1F 05            [ 2]  754 	ldw	(0x05, sp), x
      000411 20 A2            [ 2]  755 	jra	00113$
      000413                        756 00108$:
                                    757 ;	../time.c: 204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      000413 1E 27            [ 2]  758 	ldw	x, (0x27, sp)
      000415 E6 03            [ 1]  759 	ld	a, (0x3, x)
      000417 5F               [ 1]  760 	clrw	x
      000418 97               [ 1]  761 	ld	xl, a
      000419 5A               [ 2]  762 	decw	x
      00041A 90 5F            [ 1]  763 	clrw	y
      00041C 5D               [ 2]  764 	tnzw	x
      00041D 2A 02            [ 1]  765 	jrpl	00155$
      00041F 90 5A            [ 2]  766 	decw	y
      000421                        767 00155$:
      000421 89               [ 2]  768 	pushw	x
      000422 90 89            [ 2]  769 	pushw	y
      000424 4B 80            [ 1]  770 	push	#0x80
      000426 4B 51            [ 1]  771 	push	#0x51
      000428 4B 01            [ 1]  772 	push	#0x01
      00042A 4B 00            [ 1]  773 	push	#0x00
      00042C CDr00r00         [ 4]  774 	call	__mullong
      00042F 5B 08            [ 2]  775 	addw	sp, #8
      000431 51               [ 1]  776 	exgw	x, y
      000432 72 F9 21         [ 2]  777 	addw	y, (0x21, sp)
      000435 9F               [ 1]  778 	ld	a, xl
      000436 19 20            [ 1]  779 	adc	a, (0x20, sp)
      000438 97               [ 1]  780 	ld	xl, a
      000439 9E               [ 1]  781 	ld	a, xh
      00043A 19 1F            [ 1]  782 	adc	a, (0x1f, sp)
      00043C 95               [ 1]  783 	ld	xh, a
      00043D 17 19            [ 2]  784 	ldw	(0x19, sp), y
      00043F 1F 17            [ 2]  785 	ldw	(0x17, sp), x
                                    786 ;	../time.c: 205: seconds+= timeptr->tm_hour*60*60L;
      000441 1E 27            [ 2]  787 	ldw	x, (0x27, sp)
      000443 E6 02            [ 1]  788 	ld	a, (0x2, x)
      000445 5F               [ 1]  789 	clrw	x
      000446 97               [ 1]  790 	ld	xl, a
      000447 90 5F            [ 1]  791 	clrw	y
      000449 89               [ 2]  792 	pushw	x
      00044A 90 89            [ 2]  793 	pushw	y
      00044C 4B 10            [ 1]  794 	push	#0x10
      00044E 4B 0E            [ 1]  795 	push	#0x0e
      000450 5F               [ 1]  796 	clrw	x
      000451 89               [ 2]  797 	pushw	x
      000452 CDr00r00         [ 4]  798 	call	__mullong
      000455 5B 08            [ 2]  799 	addw	sp, #8
      000457 1F 15            [ 2]  800 	ldw	(0x15, sp), x
      000459 17 13            [ 2]  801 	ldw	(0x13, sp), y
      00045B 16 19            [ 2]  802 	ldw	y, (0x19, sp)
      00045D 72 F9 15         [ 2]  803 	addw	y, (0x15, sp)
      000460 7B 18            [ 1]  804 	ld	a, (0x18, sp)
      000462 19 14            [ 1]  805 	adc	a, (0x14, sp)
      000464 97               [ 1]  806 	ld	xl, a
      000465 7B 17            [ 1]  807 	ld	a, (0x17, sp)
      000467 19 13            [ 1]  808 	adc	a, (0x13, sp)
      000469 6B 0F            [ 1]  809 	ld	(0x0f, sp), a
      00046B 9F               [ 1]  810 	ld	a, xl
                                    811 ;	../time.c: 206: seconds+= timeptr->tm_min*60;
      00046C 1E 27            [ 2]  812 	ldw	x, (0x27, sp)
      00046E 88               [ 1]  813 	push	a
      00046F E6 01            [ 1]  814 	ld	a, (0x1, x)
      000471 97               [ 1]  815 	ld	xl, a
      000472 A6 3C            [ 1]  816 	ld	a, #0x3c
      000474 42               [ 4]  817 	mul	x, a
      000475 84               [ 1]  818 	pop	a
      000476 1F 0D            [ 2]  819 	ldw	(0x0d, sp), x
      000478 88               [ 1]  820 	push	a
      000479 7B 0E            [ 1]  821 	ld	a, (0x0e, sp)
      00047B 49               [ 1]  822 	rlc	a
      00047C 4F               [ 1]  823 	clr	a
      00047D A2 00            [ 1]  824 	sbc	a, #0x00
      00047F 6B 0D            [ 1]  825 	ld	(0x0d, sp), a
      000481 95               [ 1]  826 	ld	xh, a
      000482 84               [ 1]  827 	pop	a
      000483 72 F9 0D         [ 2]  828 	addw	y, (0x0d, sp)
      000486 19 0C            [ 1]  829 	adc	a, (0x0c, sp)
      000488 97               [ 1]  830 	ld	xl, a
      000489 9E               [ 1]  831 	ld	a, xh
      00048A 19 0F            [ 1]  832 	adc	a, (0x0f, sp)
      00048C 95               [ 1]  833 	ld	xh, a
      00048D 17 03            [ 2]  834 	ldw	(0x03, sp), y
      00048F 1F 01            [ 2]  835 	ldw	(0x01, sp), x
                                    836 ;	../time.c: 207: seconds+= timeptr->tm_sec;
      000491 1E 27            [ 2]  837 	ldw	x, (0x27, sp)
      000493 F6               [ 1]  838 	ld	a, (x)
      000494 5F               [ 1]  839 	clrw	x
      000495 97               [ 1]  840 	ld	xl, a
      000496 9E               [ 1]  841 	ld	a, xh
      000497 49               [ 1]  842 	rlc	a
      000498 4F               [ 1]  843 	clr	a
      000499 A2 00            [ 1]  844 	sbc	a, #0x00
      00049B 88               [ 1]  845 	push	a
      00049C 90 95            [ 1]  846 	ld	yh, a
      00049E 84               [ 1]  847 	pop	a
      00049F 72 FB 03         [ 2]  848 	addw	x, (0x03, sp)
      0004A2 19 02            [ 1]  849 	adc	a, (0x02, sp)
      0004A4 90 97            [ 1]  850 	ld	yl, a
      0004A6 90 9E            [ 1]  851 	ld	a, yh
      0004A8 19 01            [ 1]  852 	adc	a, (0x01, sp)
      0004AA 90 95            [ 1]  853 	ld	yh, a
                                    854 ;	../time.c: 208: return seconds;
      0004AC 5B 28            [ 2]  855 	addw	sp, #40
      0004AE 81               [ 4]  856 	ret
                                    857 	.area CODE
      0004AF                        858 ___str_0:
      0004AF 25 73 20 25 73 20 25   859 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      0004CC 0A                     860 	.db 0x0A
      0004CD 00                     861 	.db 0x00
      0004CE                        862 ___str_1:
      0004CE 4A 61 6E               863 	.ascii "Jan"
      0004D1 00                     864 	.db 0x00
      0004D2                        865 ___str_2:
      0004D2 46 65 62               866 	.ascii "Feb"
      0004D5 00                     867 	.db 0x00
      0004D6                        868 ___str_3:
      0004D6 4D 61 72               869 	.ascii "Mar"
      0004D9 00                     870 	.db 0x00
      0004DA                        871 ___str_4:
      0004DA 41 70 72               872 	.ascii "Apr"
      0004DD 00                     873 	.db 0x00
      0004DE                        874 ___str_5:
      0004DE 4D 61 79               875 	.ascii "May"
      0004E1 00                     876 	.db 0x00
      0004E2                        877 ___str_6:
      0004E2 4A 75 6E               878 	.ascii "Jun"
      0004E5 00                     879 	.db 0x00
      0004E6                        880 ___str_7:
      0004E6 4A 75 6C               881 	.ascii "Jul"
      0004E9 00                     882 	.db 0x00
      0004EA                        883 ___str_8:
      0004EA 41 75 67               884 	.ascii "Aug"
      0004ED 00                     885 	.db 0x00
      0004EE                        886 ___str_9:
      0004EE 53 65 70               887 	.ascii "Sep"
      0004F1 00                     888 	.db 0x00
      0004F2                        889 ___str_10:
      0004F2 4F 63 74               890 	.ascii "Oct"
      0004F5 00                     891 	.db 0x00
      0004F6                        892 ___str_11:
      0004F6 4E 6F 76               893 	.ascii "Nov"
      0004F9 00                     894 	.db 0x00
      0004FA                        895 ___str_12:
      0004FA 44 65 63               896 	.ascii "Dec"
      0004FD 00                     897 	.db 0x00
      0004FE                        898 ___str_13:
      0004FE 53 75 6E               899 	.ascii "Sun"
      000501 00                     900 	.db 0x00
      000502                        901 ___str_14:
      000502 4D 6F 6E               902 	.ascii "Mon"
      000505 00                     903 	.db 0x00
      000506                        904 ___str_15:
      000506 54 75 65               905 	.ascii "Tue"
      000509 00                     906 	.db 0x00
      00050A                        907 ___str_16:
      00050A 57 65 64               908 	.ascii "Wed"
      00050D 00                     909 	.db 0x00
      00050E                        910 ___str_17:
      00050E 54 68 75               911 	.ascii "Thu"
      000511 00                     912 	.db 0x00
      000512                        913 ___str_18:
      000512 46 72 69               914 	.ascii "Fri"
      000515 00                     915 	.db 0x00
      000516                        916 ___str_19:
      000516 53 61 74               917 	.ascii "Sat"
      000519 00                     918 	.db 0x00
                                    919 	.area INITIALIZER
      000000                        920 __xinit__monthDays:
      000000 1F                     921 	.db #0x1F	;  31
      000001 1C                     922 	.db #0x1C	;  28
      000002 1F                     923 	.db #0x1F	;  31
      000003 1E                     924 	.db #0x1E	;  30
      000004 1F                     925 	.db #0x1F	;  31
      000005 1E                     926 	.db #0x1E	;  30
      000006 1F                     927 	.db #0x1F	;  31
      000007 1F                     928 	.db #0x1F	;  31
      000008 1E                     929 	.db #0x1E	;  30
      000009 1F                     930 	.db #0x1F	;  31
      00000A 1E                     931 	.db #0x1E	;  30
      00000B 1F                     932 	.db #0x1F	;  31
      00000C                        933 __xinit____month:
      00000Cr04rCE                  934 	.dw ___str_1
      00000Er04rD2                  935 	.dw ___str_2
      000010r04rD6                  936 	.dw ___str_3
      000012r04rDA                  937 	.dw ___str_4
      000014r04rDE                  938 	.dw ___str_5
      000016r04rE2                  939 	.dw ___str_6
      000018r04rE6                  940 	.dw ___str_7
      00001Ar04rEA                  941 	.dw ___str_8
      00001Cr04rEE                  942 	.dw ___str_9
      00001Er04rF2                  943 	.dw ___str_10
      000020r04rF6                  944 	.dw ___str_11
      000022r04rFA                  945 	.dw ___str_12
      000024                        946 __xinit____day:
      000024r04rFE                  947 	.dw ___str_13
      000026r05r02                  948 	.dw ___str_14
      000028r05r06                  949 	.dw ___str_15
      00002Ar05r0A                  950 	.dw ___str_16
      00002Cr05r0E                  951 	.dw ___str_17
      00002Er05r12                  952 	.dw ___str_18
      000030r05r16                  953 	.dw ___str_19
                                    954 	.area CABS (ABS)
