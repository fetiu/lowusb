                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:40:54 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _atol
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atol
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../_atol.c: 29: long atol(char * s)
                                     42 ;	-----------------------------------------
                                     43 ;	 function atol
                                     44 ;	-----------------------------------------
      000000                         45 _atol:
      000000 52 11            [ 2]   46 	sub	sp, #17
                                     47 ;	../_atol.c: 31: register long rv=0; 
      000002 5F               [ 1]   48 	clrw	x
      000003 1F 03            [ 2]   49 	ldw	(0x03, sp), x
      000005 1F 01            [ 2]   50 	ldw	(0x01, sp), x
                                     51 ;	../_atol.c: 35: while (*s) {
      000007 1E 14            [ 2]   52 	ldw	x, (0x14, sp)
      000009                         53 00107$:
      000009 F6               [ 1]   54 	ld	a, (x)
                                     55 ;	../_atol.c: 38: if (*s == '-' || *s == '+') 
      00000A A1 2D            [ 1]   56 	cp	a, #0x2d
      00000C 26 08            [ 1]   57 	jrne	00169$
      00000E 88               [ 1]   58 	push	a
      00000F A6 01            [ 1]   59 	ld	a, #0x01
      000011 6B 12            [ 1]   60 	ld	(0x12, sp), a
      000013 84               [ 1]   61 	pop	a
      000014 20 02            [ 2]   62 	jra	00170$
      000016                         63 00169$:
      000016 0F 11            [ 1]   64 	clr	(0x11, sp)
      000018                         65 00170$:
      000018 A1 2B            [ 1]   66 	cp	a, #0x2b
      00001A 26 08            [ 1]   67 	jrne	00172$
      00001C 88               [ 1]   68 	push	a
      00001D A6 01            [ 1]   69 	ld	a, #0x01
      00001F 6B 11            [ 1]   70 	ld	(0x11, sp), a
      000021 84               [ 1]   71 	pop	a
      000022 20 02            [ 2]   72 	jra	00173$
      000024                         73 00172$:
      000024 0F 10            [ 1]   74 	clr	(0x10, sp)
      000026                         75 00173$:
                                     76 ;	../_atol.c: 35: while (*s) {
      000026 4D               [ 1]   77 	tnz	a
      000027 27 13            [ 1]   78 	jreq	00133$
                                     79 ;	../_atol.c: 36: if (*s <= '9' && *s >= '0')
      000029 A1 39            [ 1]   80 	cp	a, #0x39
      00002B 2C 04            [ 1]   81 	jrsgt	00102$
      00002D A1 30            [ 1]   82 	cp	a, #0x30
      00002F 2E 0B            [ 1]   83 	jrsge	00133$
                                     84 ;	../_atol.c: 37: break;
      000031                         85 00102$:
                                     86 ;	../_atol.c: 38: if (*s == '-' || *s == '+') 
      000031 0D 11            [ 1]   87 	tnz	(0x11, sp)
      000033 26 07            [ 1]   88 	jrne	00133$
      000035 0D 10            [ 1]   89 	tnz	(0x10, sp)
      000037 26 03            [ 1]   90 	jrne	00133$
                                     91 ;	../_atol.c: 40: s++;
      000039 5C               [ 2]   92 	incw	x
      00003A 20 CD            [ 2]   93 	jra	00107$
      00003C                         94 00133$:
      00003C 1F 14            [ 2]   95 	ldw	(0x14, sp), x
                                     96 ;	../_atol.c: 43: sign = (*s == '-');
      00003E 7B 11            [ 1]   97 	ld	a, (0x11, sp)
      000040 6B 0F            [ 1]   98 	ld	(0x0f, sp), a
                                     99 ;	../_atol.c: 44: if (*s == '-' || *s == '+') s++;
      000042 0D 11            [ 1]  100 	tnz	(0x11, sp)
      000044 26 04            [ 1]  101 	jrne	00110$
      000046 0D 10            [ 1]  102 	tnz	(0x10, sp)
      000048 27 03            [ 1]  103 	jreq	00131$
      00004A                        104 00110$:
      00004A 5C               [ 2]  105 	incw	x
      00004B 1F 14            [ 2]  106 	ldw	(0x14, sp), x
                                    107 ;	../_atol.c: 46: while (*s && *s >= '0' && *s <= '9') {
      00004D                        108 00131$:
      00004D 16 14            [ 2]  109 	ldw	y, (0x14, sp)
      00004F 17 0D            [ 2]  110 	ldw	(0x0d, sp), y
      000051                        111 00115$:
      000051 1E 0D            [ 2]  112 	ldw	x, (0x0d, sp)
      000053 F6               [ 1]  113 	ld	a, (x)
      000054 4D               [ 1]  114 	tnz	a
      000055 27 46            [ 1]  115 	jreq	00117$
      000057 A1 30            [ 1]  116 	cp	a, #0x30
      000059 2F 42            [ 1]  117 	jrslt	00117$
      00005B A1 39            [ 1]  118 	cp	a, #0x39
      00005D 2C 3E            [ 1]  119 	jrsgt	00117$
                                    120 ;	../_atol.c: 47: rv = (rv * 10) + (*s - '0');
      00005F 88               [ 1]  121 	push	a
      000060 1E 04            [ 2]  122 	ldw	x, (0x04, sp)
      000062 89               [ 2]  123 	pushw	x
      000063 1E 04            [ 2]  124 	ldw	x, (0x04, sp)
      000065 89               [ 2]  125 	pushw	x
      000066 4B 0A            [ 1]  126 	push	#0x0a
      000068 5F               [ 1]  127 	clrw	x
      000069 89               [ 2]  128 	pushw	x
      00006A 4B 00            [ 1]  129 	push	#0x00
      00006C CDr00r00         [ 4]  130 	call	__mullong
      00006F 5B 08            [ 2]  131 	addw	sp, #8
      000071 1F 0C            [ 2]  132 	ldw	(0x0c, sp), x
      000073 17 0A            [ 2]  133 	ldw	(0x0a, sp), y
      000075 84               [ 1]  134 	pop	a
      000076 97               [ 1]  135 	ld	xl, a
      000077 49               [ 1]  136 	rlc	a
      000078 4F               [ 1]  137 	clr	a
      000079 A2 00            [ 1]  138 	sbc	a, #0x00
      00007B 95               [ 1]  139 	ld	xh, a
      00007C 1D 00 30         [ 2]  140 	subw	x, #0x0030
      00007F 90 93            [ 1]  141 	ldw	y, x
      000081 5F               [ 1]  142 	clrw	x
      000082 90 5D            [ 2]  143 	tnzw	y
      000084 2A 01            [ 1]  144 	jrpl	00184$
      000086 5A               [ 2]  145 	decw	x
      000087                        146 00184$:
      000087 72 F9 0B         [ 2]  147 	addw	y, (0x0b, sp)
      00008A 9F               [ 1]  148 	ld	a, xl
      00008B 19 0A            [ 1]  149 	adc	a, (0x0a, sp)
      00008D 97               [ 1]  150 	ld	xl, a
      00008E 9E               [ 1]  151 	ld	a, xh
      00008F 19 09            [ 1]  152 	adc	a, (0x09, sp)
      000091 95               [ 1]  153 	ld	xh, a
      000092 17 03            [ 2]  154 	ldw	(0x03, sp), y
      000094 1F 01            [ 2]  155 	ldw	(0x01, sp), x
                                    156 ;	../_atol.c: 48: s++;
      000096 1E 0D            [ 2]  157 	ldw	x, (0x0d, sp)
      000098 5C               [ 2]  158 	incw	x
      000099 1F 0D            [ 2]  159 	ldw	(0x0d, sp), x
      00009B 20 B4            [ 2]  160 	jra	00115$
      00009D                        161 00117$:
                                    162 ;	../_atol.c: 51: return (sign ? -rv : rv);
      00009D 0D 0F            [ 1]  163 	tnz	(0x0f, sp)
      00009F 27 10            [ 1]  164 	jreq	00120$
      0000A1 16 03            [ 2]  165 	ldw	y, (0x03, sp)
      0000A3 90 50            [ 2]  166 	negw	y
      0000A5 4F               [ 1]  167 	clr	a
      0000A6 12 02            [ 1]  168 	sbc	a, (0x02, sp)
      0000A8 97               [ 1]  169 	ld	xl, a
      0000A9 4F               [ 1]  170 	clr	a
      0000AA 12 01            [ 1]  171 	sbc	a, (0x01, sp)
      0000AC 95               [ 1]  172 	ld	xh, a
      0000AD 1F 05            [ 2]  173 	ldw	(0x05, sp), x
      0000AF 20 06            [ 2]  174 	jra	00121$
      0000B1                        175 00120$:
      0000B1 16 01            [ 2]  176 	ldw	y, (0x01, sp)
      0000B3 17 05            [ 2]  177 	ldw	(0x05, sp), y
      0000B5 16 03            [ 2]  178 	ldw	y, (0x03, sp)
      0000B7                        179 00121$:
      0000B7 93               [ 1]  180 	ldw	x, y
      0000B8 16 05            [ 2]  181 	ldw	y, (0x05, sp)
      0000BA 5B 11            [ 2]  182 	addw	sp, #17
      0000BC 81               [ 4]  183 	ret
                                    184 	.area CODE
                                    185 	.area INITIALIZER
                                    186 	.area CABS (ABS)
