                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:40:59 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _malloc
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_heap_init
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	../_malloc.c: 59: _sdcc_heap_init(void)
                                     43 ;	-----------------------------------------
                                     44 ;	 function _sdcc_heap_init
                                     45 ;	-----------------------------------------
      000000                         46 __sdcc_heap_init:
      000000 52 02            [ 2]   47 	sub	sp, #2
                                     48 ;	../_malloc.c: 61: MEMHEADER *pbase = &_sdcc_heap_start;
      000002 90 AEr00r00      [ 2]   49 	ldw	y, #__sdcc_heap_start+0
                                     50 ;	../_malloc.c: 62: unsigned int size = &_sdcc_heap_end - (char *)pbase;
      000006 AEr00r00         [ 2]   51 	ldw	x, #__sdcc_heap_end+0
      000009 17 01            [ 2]   52 	ldw	(0x01, sp), y
      00000B 72 F0 01         [ 2]   53 	subw	x, (0x01, sp)
                                     54 ;	../_malloc.c: 64: pbase->next = (MEMHEADER *)((char *)pbase + size - HEADER_SIZE);
      00000E 72 FB 01         [ 2]   55 	addw	x, (0x01, sp)
      000011 1D 00 06         [ 2]   56 	subw	x, #0x0006
      000014 90 FF            [ 2]   57 	ldw	(y), x
                                     58 ;	../_malloc.c: 65: pbase->next->next = NULL; //And mark it as last
      000016 6F 01            [ 1]   59 	clr	(0x1, x)
      000018 7F               [ 1]   60 	clr	(x)
                                     61 ;	../_malloc.c: 66: pbase->prev       = NULL; //and mark first as first
      000019 93               [ 1]   62 	ldw	x, y
      00001A 5C               [ 2]   63 	incw	x
      00001B 5C               [ 2]   64 	incw	x
      00001C 6F 01            [ 1]   65 	clr	(0x1, x)
      00001E 7F               [ 1]   66 	clr	(x)
                                     67 ;	../_malloc.c: 67: pbase->len        = 0;    //Empty and ready.
      00001F 93               [ 1]   68 	ldw	x, y
      000020 1C 00 04         [ 2]   69 	addw	x, #0x0004
      000023 6F 01            [ 1]   70 	clr	(0x1, x)
      000025 7F               [ 1]   71 	clr	(x)
      000026 5B 02            [ 2]   72 	addw	sp, #2
      000028 81               [ 4]   73 	ret
                                     74 ;	../_malloc.c: 71: malloc (unsigned int size)
                                     75 ;	-----------------------------------------
                                     76 ;	 function malloc
                                     77 ;	-----------------------------------------
      000029                         78 _malloc:
      000029 52 0E            [ 2]   79 	sub	sp, #14
                                     80 ;	../_malloc.c: 77: if (size>(0xFFFF-HEADER_SIZE))
      00002B 1E 11            [ 2]   81 	ldw	x, (0x11, sp)
      00002D A3 FF F9         [ 2]   82 	cpw	x, #0xfff9
      000030 23 04            [ 2]   83 	jrule	00102$
                                     84 ;	../_malloc.c: 79: return NULL; //To prevent overflow in next line
      000032 5F               [ 1]   85 	clrw	x
      000033 CCr00rC3         [ 2]   86 	jp	00117$
      000036                         87 00102$:
                                     88 ;	../_malloc.c: 82: size += HEADER_SIZE; //We need a memory for header too
      000036 1E 11            [ 2]   89 	ldw	x, (0x11, sp)
      000038 1C 00 06         [ 2]   90 	addw	x, #0x0006
      00003B 1F 11            [ 2]   91 	ldw	(0x11, sp), x
                                     92 ;	../_malloc.c: 83: current_header = &_sdcc_heap_start;
      00003D AEr00r00         [ 2]   93 	ldw	x, #__sdcc_heap_start+0
      000040 1F 05            [ 2]   94 	ldw	(0x05, sp), x
                                     95 ;	../_malloc.c: 132: }
      000042 9B               [ 1]   96 	sim
                                     97 ;	../_malloc.c: 87: while (1)
      000043                         98 00108$:
                                     99 ;	../_malloc.c: 96: if ((((unsigned int)current_header->next) -
      000043 1E 05            [ 2]  100 	ldw	x, (0x05, sp)
      000045 FE               [ 2]  101 	ldw	x, (x)
      000046 1F 0D            [ 2]  102 	ldw	(0x0d, sp), x
      000048 16 0D            [ 2]  103 	ldw	y, (0x0d, sp)
                                    104 ;	../_malloc.c: 97: ((unsigned int)current_header) -
      00004A 1E 05            [ 2]  105 	ldw	x, (0x05, sp)
      00004C 1F 0B            [ 2]  106 	ldw	(0x0b, sp), x
      00004E 72 F2 0B         [ 2]  107 	subw	y, (0x0b, sp)
                                    108 ;	../_malloc.c: 98: current_header->len) >= size)
      000051 1E 05            [ 2]  109 	ldw	x, (0x05, sp)
      000053 EE 04            [ 2]  110 	ldw	x, (0x4, x)
      000055 1F 09            [ 2]  111 	ldw	(0x09, sp), x
      000057 72 F2 09         [ 2]  112 	subw	y, (0x09, sp)
      00005A 93               [ 1]  113 	ldw	x, y
      00005B 13 11            [ 2]  114 	cpw	x, (0x11, sp)
      00005D 25 09            [ 1]  115 	jrc	00104$
                                    116 ;	../_malloc.c: 100: ret = &current_header->mem;
      00005F 1E 05            [ 2]  117 	ldw	x, (0x05, sp)
      000061 1C 00 06         [ 2]  118 	addw	x, #0x0006
      000064 1F 01            [ 2]  119 	ldw	(0x01, sp), x
                                    120 ;	../_malloc.c: 101: break;
      000066 20 10            [ 2]  121 	jra	00109$
      000068                        122 00104$:
                                    123 ;	../_malloc.c: 103: current_header = current_header->next;    //else try next
      000068 16 0D            [ 2]  124 	ldw	y, (0x0d, sp)
      00006A 17 05            [ 2]  125 	ldw	(0x05, sp), y
                                    126 ;	../_malloc.c: 96: if ((((unsigned int)current_header->next) -
      00006C 1E 05            [ 2]  127 	ldw	x, (0x05, sp)
      00006E FE               [ 2]  128 	ldw	x, (x)
      00006F 1F 0D            [ 2]  129 	ldw	(0x0d, sp), x
                                    130 ;	../_malloc.c: 104: if (!current_header->next)
      000071 1E 0D            [ 2]  131 	ldw	x, (0x0d, sp)
      000073 26 CE            [ 1]  132 	jrne	00108$
                                    133 ;	../_malloc.c: 106: ret = NULL;
      000075 5F               [ 1]  134 	clrw	x
      000076 1F 01            [ 2]  135 	ldw	(0x01, sp), x
                                    136 ;	../_malloc.c: 107: break;
      000078                        137 00109$:
                                    138 ;	../_malloc.c: 111: if (ret)
      000078 1E 01            [ 2]  139 	ldw	x, (0x01, sp)
      00007A 27 44            [ 1]  140 	jreq	00116$
                                    141 ;	../_malloc.c: 113: if (!current_header->len)
      00007C 16 05            [ 2]  142 	ldw	y, (0x05, sp)
      00007E 72 A9 00 04      [ 2]  143 	addw	y, #0x0004
      000082 93               [ 1]  144 	ldw	x, y
      000083 FE               [ 2]  145 	ldw	x, (x)
      000084 5D               [ 2]  146 	tnzw	x
      000085 26 06            [ 1]  147 	jrne	00113$
                                    148 ;	../_malloc.c: 115: current_header->len = size; //for first allocation
      000087 93               [ 1]  149 	ldw	x, y
      000088 16 11            [ 2]  150 	ldw	y, (0x11, sp)
      00008A FF               [ 2]  151 	ldw	(x), y
      00008B 20 33            [ 2]  152 	jra	00116$
      00008D                        153 00113$:
                                    154 ;	../_malloc.c: 120: new_header = (MEMHEADER * )((char *)current_header + current_header->len);
      00008D 16 05            [ 2]  155 	ldw	y, (0x05, sp)
      00008F 17 07            [ 2]  156 	ldw	(0x07, sp), y
      000091 72 FB 07         [ 2]  157 	addw	x, (0x07, sp)
      000094 1F 03            [ 2]  158 	ldw	(0x03, sp), x
                                    159 ;	../_malloc.c: 121: new_header->next = current_header->next; //and plug it into the chain
      000096 1E 03            [ 2]  160 	ldw	x, (0x03, sp)
      000098 16 0D            [ 2]  161 	ldw	y, (0x0d, sp)
      00009A FF               [ 2]  162 	ldw	(x), y
                                    163 ;	../_malloc.c: 122: new_header->prev = current_header;
      00009B 1E 03            [ 2]  164 	ldw	x, (0x03, sp)
      00009D 5C               [ 2]  165 	incw	x
      00009E 5C               [ 2]  166 	incw	x
      00009F 16 05            [ 2]  167 	ldw	y, (0x05, sp)
      0000A1 FF               [ 2]  168 	ldw	(x), y
                                    169 ;	../_malloc.c: 123: current_header->next  = new_header;
      0000A2 1E 05            [ 2]  170 	ldw	x, (0x05, sp)
      0000A4 16 03            [ 2]  171 	ldw	y, (0x03, sp)
      0000A6 FF               [ 2]  172 	ldw	(x), y
                                    173 ;	../_malloc.c: 124: if (new_header->next)
      0000A7 1E 03            [ 2]  174 	ldw	x, (0x03, sp)
      0000A9 FE               [ 2]  175 	ldw	x, (x)
      0000AA 16 0D            [ 2]  176 	ldw	y, (0x0d, sp)
      0000AC 27 05            [ 1]  177 	jreq	00111$
                                    178 ;	../_malloc.c: 126: new_header->next->prev = new_header;
      0000AE 5C               [ 2]  179 	incw	x
      0000AF 5C               [ 2]  180 	incw	x
      0000B0 16 03            [ 2]  181 	ldw	y, (0x03, sp)
      0000B2 FF               [ 2]  182 	ldw	(x), y
      0000B3                        183 00111$:
                                    184 ;	../_malloc.c: 128: new_header->len  = size; //mark as used
      0000B3 1E 03            [ 2]  185 	ldw	x, (0x03, sp)
      0000B5 16 11            [ 2]  186 	ldw	y, (0x11, sp)
      0000B7 EF 04            [ 2]  187 	ldw	(0x0004, x), y
                                    188 ;	../_malloc.c: 129: ret = &new_header->mem;
      0000B9 1E 03            [ 2]  189 	ldw	x, (0x03, sp)
      0000BB 1C 00 06         [ 2]  190 	addw	x, #0x0006
      0000BE 1F 01            [ 2]  191 	ldw	(0x01, sp), x
      0000C0                        192 00116$:
      0000C0 9A               [ 1]  193 	rim
                                    194 ;	../_malloc.c: 133: return ret;
      0000C1 1E 01            [ 2]  195 	ldw	x, (0x01, sp)
      0000C3                        196 00117$:
      0000C3 5B 0E            [ 2]  197 	addw	sp, #14
      0000C5 81               [ 4]  198 	ret
                                    199 	.area CODE
                                    200 	.area INITIALIZER
                                    201 	.area CABS (ABS)
