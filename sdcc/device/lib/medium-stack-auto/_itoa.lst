                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:55 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _itoa
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __itoa
                                     13 	.globl __uitoa
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function '_uitoa'
                                     93 ;------------------------------------------------------------
                                     94 ;string                    Allocated to stack - _bp -5
                                     95 ;radix                     Allocated to stack - _bp -6
                                     96 ;value                     Allocated to stack - _bp +6
                                     97 ;index                     Allocated to registers 
                                     98 ;i                         Allocated to stack - _bp +8
                                     99 ;tmp                       Allocated to registers r3 
                                    100 ;sloc0                     Allocated to stack - _bp +1
                                    101 ;sloc1                     Allocated to stack - _bp +3
                                    102 ;------------------------------------------------------------
                                    103 ;	_itoa.c:40: void _uitoa(unsigned int value, char* string, unsigned char radix)
                                    104 ;	-----------------------------------------
                                    105 ;	 function _uitoa
                                    106 ;	-----------------------------------------
      000000                        107 __uitoa:
                           000007   108 	ar7 = 0x07
                           000006   109 	ar6 = 0x06
                           000005   110 	ar5 = 0x05
                           000004   111 	ar4 = 0x04
                           000003   112 	ar3 = 0x03
                           000002   113 	ar2 = 0x02
                           000001   114 	ar1 = 0x01
                           000000   115 	ar0 = 0x00
      000000 C0*00            [24]  116 	push	_bp
      000002 E5 81            [12]  117 	mov	a,sp
      000004 F5*00            [12]  118 	mov	_bp,a
      000006 24 08            [12]  119 	add	a,#0x08
      000008 F5 81            [12]  120 	mov	sp,a
      00000A C8               [12]  121 	xch	a,r0
      00000B E5*00            [12]  122 	mov	a,_bp
      00000D 24 06            [12]  123 	add	a,#0x06
      00000F C8               [12]  124 	xch	a,r0
      000010 A6 82            [24]  125 	mov	@r0,dpl
      000012 08               [12]  126 	inc	r0
      000013 A6 83            [24]  127 	mov	@r0,dph
                                    128 ;	_itoa.c:45: do {
      000015 7E 00            [12]  129 	mov	r6,#0x00
      000017                        130 00103$:
                                    131 ;	_itoa.c:46: string[index] = '0' + (value % radix);
      000017 E5*00            [12]  132 	mov	a,_bp
      000019 24 FB            [12]  133 	add	a,#0xfb
      00001B F8               [12]  134 	mov	r0,a
      00001C EE               [12]  135 	mov	a,r6
      00001D 26               [12]  136 	add	a,@r0
      00001E FA               [12]  137 	mov	r2,a
      00001F E4               [12]  138 	clr	a
      000020 08               [12]  139 	inc	r0
      000021 36               [12]  140 	addc	a,@r0
      000022 FB               [12]  141 	mov	r3,a
      000023 08               [12]  142 	inc	r0
      000024 86 04            [24]  143 	mov	ar4,@r0
      000026 E5*00            [12]  144 	mov	a,_bp
      000028 24 FA            [12]  145 	add	a,#0xfa
      00002A F8               [12]  146 	mov	r0,a
      00002B A9*00            [24]  147 	mov	r1,_bp
      00002D 09               [12]  148 	inc	r1
      00002E E6               [12]  149 	mov	a,@r0
      00002F F7               [12]  150 	mov	@r1,a
      000030 09               [12]  151 	inc	r1
      000031 77 00            [12]  152 	mov	@r1,#0x00
      000033 C0 06            [24]  153 	push	ar6
      000035 C0 04            [24]  154 	push	ar4
      000037 C0 03            [24]  155 	push	ar3
      000039 C0 02            [24]  156 	push	ar2
      00003B A8*00            [24]  157 	mov	r0,_bp
      00003D 08               [12]  158 	inc	r0
      00003E E6               [12]  159 	mov	a,@r0
      00003F C0 E0            [24]  160 	push	acc
      000041 08               [12]  161 	inc	r0
      000042 E6               [12]  162 	mov	a,@r0
      000043 C0 E0            [24]  163 	push	acc
      000045 E5*00            [12]  164 	mov	a,_bp
      000047 24 06            [12]  165 	add	a,#0x06
      000049 F8               [12]  166 	mov	r0,a
      00004A 86 82            [24]  167 	mov	dpl,@r0
      00004C 08               [12]  168 	inc	r0
      00004D 86 83            [24]  169 	mov	dph,@r0
      00004F 12r00r00         [24]  170 	lcall	__moduint
      000052 AD 82            [24]  171 	mov	r5,dpl
      000054 AF 83            [24]  172 	mov	r7,dph
      000056 15 81            [12]  173 	dec	sp
      000058 15 81            [12]  174 	dec	sp
      00005A D0 02            [24]  175 	pop	ar2
      00005C D0 03            [24]  176 	pop	ar3
      00005E D0 04            [24]  177 	pop	ar4
      000060 D0 06            [24]  178 	pop	ar6
      000062 74 30            [12]  179 	mov	a,#0x30
      000064 2D               [12]  180 	add	a,r5
      000065 FD               [12]  181 	mov	r5,a
      000066 8A 82            [24]  182 	mov	dpl,r2
      000068 8B 83            [24]  183 	mov	dph,r3
      00006A 8C F0            [24]  184 	mov	b,r4
      00006C 12r00r00         [24]  185 	lcall	__gptrput
                                    186 ;	_itoa.c:47: if (string[index] > '9')
      00006F C3               [12]  187 	clr	c
      000070 74 B9            [12]  188 	mov	a,#(0x39 ^ 0x80)
      000072 8D F0            [24]  189 	mov	b,r5
      000074 63 F0 80         [24]  190 	xrl	b,#0x80
      000077 95 F0            [12]  191 	subb	a,b
      000079 50 15            [24]  192 	jnc	00102$
                                    193 ;	_itoa.c:48: string[index] += 'A' - '9' - 1;
      00007B 8A 82            [24]  194 	mov	dpl,r2
      00007D 8B 83            [24]  195 	mov	dph,r3
      00007F 8C F0            [24]  196 	mov	b,r4
      000081 12r00r00         [24]  197 	lcall	__gptrget
      000084 24 07            [12]  198 	add	a,#0x07
      000086 FF               [12]  199 	mov	r7,a
      000087 8A 82            [24]  200 	mov	dpl,r2
      000089 8B 83            [24]  201 	mov	dph,r3
      00008B 8C F0            [24]  202 	mov	b,r4
      00008D 12r00r00         [24]  203 	lcall	__gptrput
      000090                        204 00102$:
                                    205 ;	_itoa.c:49: value /= radix;
      000090 C0 06            [24]  206 	push	ar6
      000092 A8*00            [24]  207 	mov	r0,_bp
      000094 08               [12]  208 	inc	r0
      000095 E6               [12]  209 	mov	a,@r0
      000096 C0 E0            [24]  210 	push	acc
      000098 08               [12]  211 	inc	r0
      000099 E6               [12]  212 	mov	a,@r0
      00009A C0 E0            [24]  213 	push	acc
      00009C E5*00            [12]  214 	mov	a,_bp
      00009E 24 06            [12]  215 	add	a,#0x06
      0000A0 F8               [12]  216 	mov	r0,a
      0000A1 86 82            [24]  217 	mov	dpl,@r0
      0000A3 08               [12]  218 	inc	r0
      0000A4 86 83            [24]  219 	mov	dph,@r0
      0000A6 12r00r00         [24]  220 	lcall	__divuint
      0000A9 C8               [12]  221 	xch	a,r0
      0000AA E5*00            [12]  222 	mov	a,_bp
      0000AC 24 06            [12]  223 	add	a,#0x06
      0000AE C8               [12]  224 	xch	a,r0
      0000AF A6 82            [24]  225 	mov	@r0,dpl
      0000B1 08               [12]  226 	inc	r0
      0000B2 A6 83            [24]  227 	mov	@r0,dph
      0000B4 15 81            [12]  228 	dec	sp
      0000B6 15 81            [12]  229 	dec	sp
      0000B8 D0 06            [24]  230 	pop	ar6
                                    231 ;	_itoa.c:50: ++index;
      0000BA 0E               [12]  232 	inc	r6
                                    233 ;	_itoa.c:51: } while (value != 0);
      0000BB E5*00            [12]  234 	mov	a,_bp
      0000BD 24 06            [12]  235 	add	a,#0x06
      0000BF F8               [12]  236 	mov	r0,a
      0000C0 E6               [12]  237 	mov	a,@r0
      0000C1 08               [12]  238 	inc	r0
      0000C2 46               [12]  239 	orl	a,@r0
      0000C3 60 03            [24]  240 	jz	00129$
      0000C5 02r00r17         [24]  241 	ljmp	00103$
      0000C8                        242 00129$:
                                    243 ;	_itoa.c:54: string[index--] = '\0';
      0000C8 EE               [12]  244 	mov	a,r6
      0000C9 14               [12]  245 	dec	a
      0000CA FF               [12]  246 	mov	r7,a
      0000CB E5*00            [12]  247 	mov	a,_bp
      0000CD 24 FB            [12]  248 	add	a,#0xfb
      0000CF F8               [12]  249 	mov	r0,a
      0000D0 EE               [12]  250 	mov	a,r6
      0000D1 26               [12]  251 	add	a,@r0
      0000D2 FC               [12]  252 	mov	r4,a
      0000D3 E4               [12]  253 	clr	a
      0000D4 08               [12]  254 	inc	r0
      0000D5 36               [12]  255 	addc	a,@r0
      0000D6 FD               [12]  256 	mov	r5,a
      0000D7 08               [12]  257 	inc	r0
      0000D8 86 06            [24]  258 	mov	ar6,@r0
      0000DA 8C 82            [24]  259 	mov	dpl,r4
      0000DC 8D 83            [24]  260 	mov	dph,r5
      0000DE 8E F0            [24]  261 	mov	b,r6
      0000E0 E4               [12]  262 	clr	a
      0000E1 12r00r00         [24]  263 	lcall	__gptrput
                                    264 ;	_itoa.c:57: while (index > i) {
      0000E4 E5*00            [12]  265 	mov	a,_bp
      0000E6 24 08            [12]  266 	add	a,#0x08
      0000E8 F8               [12]  267 	mov	r0,a
      0000E9 76 00            [12]  268 	mov	@r0,#0x00
      0000EB                        269 00106$:
      0000EB E5*00            [12]  270 	mov	a,_bp
      0000ED 24 08            [12]  271 	add	a,#0x08
      0000EF F8               [12]  272 	mov	r0,a
      0000F0 C3               [12]  273 	clr	c
      0000F1 E6               [12]  274 	mov	a,@r0
      0000F2 64 80            [12]  275 	xrl	a,#0x80
      0000F4 8F F0            [24]  276 	mov	b,r7
      0000F6 63 F0 80         [24]  277 	xrl	b,#0x80
      0000F9 95 F0            [12]  278 	subb	a,b
      0000FB 50 76            [24]  279 	jnc	00109$
                                    280 ;	_itoa.c:58: char tmp = string[i];
      0000FD E5*00            [12]  281 	mov	a,_bp
      0000FF 24 FB            [12]  282 	add	a,#0xfb
      000101 F8               [12]  283 	mov	r0,a
      000102 E5*00            [12]  284 	mov	a,_bp
      000104 24 08            [12]  285 	add	a,#0x08
      000106 F9               [12]  286 	mov	r1,a
      000107 E7               [12]  287 	mov	a,@r1
      000108 26               [12]  288 	add	a,@r0
      000109 C0 E0            [24]  289 	push	acc
      00010B E4               [12]  290 	clr	a
      00010C 08               [12]  291 	inc	r0
      00010D 36               [12]  292 	addc	a,@r0
      00010E C0 E0            [24]  293 	push	acc
      000110 08               [12]  294 	inc	r0
      000111 E6               [12]  295 	mov	a,@r0
      000112 C0 E0            [24]  296 	push	acc
      000114 E5*00            [12]  297 	mov	a,_bp
      000116 24 05            [12]  298 	add	a,#0x05
      000118 F8               [12]  299 	mov	r0,a
      000119 D0 E0            [24]  300 	pop	acc
      00011B F6               [12]  301 	mov	@r0,a
      00011C 18               [12]  302 	dec	r0
      00011D D0 E0            [24]  303 	pop	acc
      00011F F6               [12]  304 	mov	@r0,a
      000120 18               [12]  305 	dec	r0
      000121 D0 E0            [24]  306 	pop	acc
      000123 F6               [12]  307 	mov	@r0,a
      000124 E5*00            [12]  308 	mov	a,_bp
      000126 24 03            [12]  309 	add	a,#0x03
      000128 F8               [12]  310 	mov	r0,a
      000129 86 82            [24]  311 	mov	dpl,@r0
      00012B 08               [12]  312 	inc	r0
      00012C 86 83            [24]  313 	mov	dph,@r0
      00012E 08               [12]  314 	inc	r0
      00012F 86 F0            [24]  315 	mov	b,@r0
      000131 12r00r00         [24]  316 	lcall	__gptrget
      000134 FB               [12]  317 	mov	r3,a
                                    318 ;	_itoa.c:59: string[i] = string[index];
      000135 E5*00            [12]  319 	mov	a,_bp
      000137 24 FB            [12]  320 	add	a,#0xfb
      000139 F8               [12]  321 	mov	r0,a
      00013A EF               [12]  322 	mov	a,r7
      00013B 26               [12]  323 	add	a,@r0
      00013C FA               [12]  324 	mov	r2,a
      00013D E4               [12]  325 	clr	a
      00013E 08               [12]  326 	inc	r0
      00013F 36               [12]  327 	addc	a,@r0
      000140 FD               [12]  328 	mov	r5,a
      000141 08               [12]  329 	inc	r0
      000142 86 06            [24]  330 	mov	ar6,@r0
      000144 8A 82            [24]  331 	mov	dpl,r2
      000146 8D 83            [24]  332 	mov	dph,r5
      000148 8E F0            [24]  333 	mov	b,r6
      00014A 12r00r00         [24]  334 	lcall	__gptrget
      00014D FC               [12]  335 	mov	r4,a
      00014E E5*00            [12]  336 	mov	a,_bp
      000150 24 03            [12]  337 	add	a,#0x03
      000152 F8               [12]  338 	mov	r0,a
      000153 86 82            [24]  339 	mov	dpl,@r0
      000155 08               [12]  340 	inc	r0
      000156 86 83            [24]  341 	mov	dph,@r0
      000158 08               [12]  342 	inc	r0
      000159 86 F0            [24]  343 	mov	b,@r0
      00015B EC               [12]  344 	mov	a,r4
      00015C 12r00r00         [24]  345 	lcall	__gptrput
                                    346 ;	_itoa.c:60: string[index] = tmp;
      00015F 8A 82            [24]  347 	mov	dpl,r2
      000161 8D 83            [24]  348 	mov	dph,r5
      000163 8E F0            [24]  349 	mov	b,r6
      000165 EB               [12]  350 	mov	a,r3
      000166 12r00r00         [24]  351 	lcall	__gptrput
                                    352 ;	_itoa.c:61: ++i;
      000169 E5*00            [12]  353 	mov	a,_bp
      00016B 24 08            [12]  354 	add	a,#0x08
      00016D F8               [12]  355 	mov	r0,a
      00016E 06               [12]  356 	inc	@r0
                                    357 ;	_itoa.c:62: --index;
      00016F 1F               [12]  358 	dec	r7
      000170 02r00rEB         [24]  359 	ljmp	00106$
      000173                        360 00109$:
      000173 85*00 81         [24]  361 	mov	sp,_bp
      000176 D0*00            [24]  362 	pop	_bp
      000178 22               [24]  363 	ret
                                    364 ;------------------------------------------------------------
                                    365 ;Allocation info for local variables in function '_itoa'
                                    366 ;------------------------------------------------------------
                                    367 ;string                    Allocated to stack - _bp -5
                                    368 ;radix                     Allocated to stack - _bp -6
                                    369 ;value                     Allocated to registers r6 r7 
                                    370 ;------------------------------------------------------------
                                    371 ;	_itoa.c:66: void _itoa(int value, char* string, unsigned char radix)
                                    372 ;	-----------------------------------------
                                    373 ;	 function _itoa
                                    374 ;	-----------------------------------------
      000179                        375 __itoa:
      000179 C0*00            [24]  376 	push	_bp
      00017B 85 81*00         [24]  377 	mov	_bp,sp
      00017E AE 82            [24]  378 	mov	r6,dpl
                                    379 ;	_itoa.c:68: if (value < 0 && radix == 10) {
      000180 E5 83            [12]  380 	mov	a,dph
      000182 FF               [12]  381 	mov	r7,a
      000183 30 E7 37         [24]  382 	jnb	acc.7,00102$
      000186 E5*00            [12]  383 	mov	a,_bp
      000188 24 FA            [12]  384 	add	a,#0xfa
      00018A F8               [12]  385 	mov	r0,a
      00018B B6 0A 2F         [24]  386 	cjne	@r0,#0x0A,00102$
                                    387 ;	_itoa.c:69: *string++ = '-';
      00018E E5*00            [12]  388 	mov	a,_bp
      000190 24 FB            [12]  389 	add	a,#0xfb
      000192 F8               [12]  390 	mov	r0,a
      000193 86 03            [24]  391 	mov	ar3,@r0
      000195 08               [12]  392 	inc	r0
      000196 86 04            [24]  393 	mov	ar4,@r0
      000198 08               [12]  394 	inc	r0
      000199 86 05            [24]  395 	mov	ar5,@r0
      00019B 8B 82            [24]  396 	mov	dpl,r3
      00019D 8C 83            [24]  397 	mov	dph,r4
      00019F 8D F0            [24]  398 	mov	b,r5
      0001A1 74 2D            [12]  399 	mov	a,#0x2D
      0001A3 12r00r00         [24]  400 	lcall	__gptrput
      0001A6 E5*00            [12]  401 	mov	a,_bp
      0001A8 24 FB            [12]  402 	add	a,#0xfb
      0001AA F8               [12]  403 	mov	r0,a
      0001AB 74 01            [12]  404 	mov	a,#0x01
      0001AD 2B               [12]  405 	add	a,r3
      0001AE F6               [12]  406 	mov	@r0,a
      0001AF E4               [12]  407 	clr	a
      0001B0 3C               [12]  408 	addc	a,r4
      0001B1 08               [12]  409 	inc	r0
      0001B2 F6               [12]  410 	mov	@r0,a
      0001B3 08               [12]  411 	inc	r0
      0001B4 A6 05            [24]  412 	mov	@r0,ar5
                                    413 ;	_itoa.c:70: value = -value;
      0001B6 C3               [12]  414 	clr	c
      0001B7 E4               [12]  415 	clr	a
      0001B8 9E               [12]  416 	subb	a,r6
      0001B9 FE               [12]  417 	mov	r6,a
      0001BA E4               [12]  418 	clr	a
      0001BB 9F               [12]  419 	subb	a,r7
      0001BC FF               [12]  420 	mov	r7,a
      0001BD                        421 00102$:
                                    422 ;	_itoa.c:72: _uitoa(value, string, radix);
      0001BD E5*00            [12]  423 	mov	a,_bp
      0001BF 24 FA            [12]  424 	add	a,#0xfa
      0001C1 F8               [12]  425 	mov	r0,a
      0001C2 E6               [12]  426 	mov	a,@r0
      0001C3 C0 E0            [24]  427 	push	acc
      0001C5 E5*00            [12]  428 	mov	a,_bp
      0001C7 24 FB            [12]  429 	add	a,#0xfb
      0001C9 F8               [12]  430 	mov	r0,a
      0001CA E6               [12]  431 	mov	a,@r0
      0001CB C0 E0            [24]  432 	push	acc
      0001CD 08               [12]  433 	inc	r0
      0001CE E6               [12]  434 	mov	a,@r0
      0001CF C0 E0            [24]  435 	push	acc
      0001D1 08               [12]  436 	inc	r0
      0001D2 E6               [12]  437 	mov	a,@r0
      0001D3 C0 E0            [24]  438 	push	acc
      0001D5 8E 82            [24]  439 	mov	dpl,r6
      0001D7 8F 83            [24]  440 	mov	dph,r7
      0001D9 12r00r00         [24]  441 	lcall	__uitoa
      0001DC E5 81            [12]  442 	mov	a,sp
      0001DE 24 FC            [12]  443 	add	a,#0xfc
      0001E0 F5 81            [12]  444 	mov	sp,a
      0001E2 D0*00            [24]  445 	pop	_bp
      0001E4 22               [24]  446 	ret
                                    447 	.area CSEG    (CODE)
                                    448 	.area CONST   (CODE)
                                    449 	.area XINIT   (CODE)
                                    450 	.area CABS    (ABS,CODE)
