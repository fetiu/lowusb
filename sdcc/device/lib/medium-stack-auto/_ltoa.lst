                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:55 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _ltoa
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __ltoa
                                     13 	.globl __ultoa
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function '_ultoa'
                                     93 ;------------------------------------------------------------
                                     94 ;string                    Allocated to stack - _bp -5
                                     95 ;radix                     Allocated to stack - _bp -6
                                     96 ;value                     Allocated to stack - _bp +5
                                     97 ;buffer                    Allocated to stack - _bp +9
                                     98 ;index                     Allocated to registers r4 
                                     99 ;c                         Allocated to registers r6 
                                    100 ;sloc0                     Allocated to stack - _bp +1
                                    101 ;------------------------------------------------------------
                                    102 ;	_ltoa.c:56: void _ultoa(unsigned long value, char* string, unsigned char radix)
                                    103 ;	-----------------------------------------
                                    104 ;	 function _ultoa
                                    105 ;	-----------------------------------------
      000000                        106 __ultoa:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 85 81*00         [24]  116 	mov	_bp,sp
      000005 C8               [12]  117 	xch	a,r0
      000006 E5 81            [12]  118 	mov	a,sp
      000008 24 28            [12]  119 	add	a,#0x28
      00000A F5 81            [12]  120 	mov	sp,a
      00000C E5*00            [12]  121 	mov	a,_bp
      00000E 24 05            [12]  122 	add	a,#0x05
      000010 C8               [12]  123 	xch	a,r0
      000011 A6 82            [24]  124 	mov	@r0,dpl
      000013 08               [12]  125 	inc	r0
      000014 A6 83            [24]  126 	mov	@r0,dph
      000016 08               [12]  127 	inc	r0
      000017 A6 F0            [24]  128 	mov	@r0,b
      000019 08               [12]  129 	inc	r0
      00001A F6               [12]  130 	mov	@r0,a
                                    131 ;	_ltoa.c:61: do {
      00001B E5*00            [12]  132 	mov	a,_bp
      00001D 24 09            [12]  133 	add	a,#0x09
      00001F FB               [12]  134 	mov	r3,a
      000020 7C 20            [12]  135 	mov	r4,#0x20
      000022                        136 00103$:
                                    137 ;	_ltoa.c:62: unsigned char c = '0' + (value % radix);
      000022 C0 03            [24]  138 	push	ar3
      000024 E5*00            [12]  139 	mov	a,_bp
      000026 24 FA            [12]  140 	add	a,#0xfa
      000028 F8               [12]  141 	mov	r0,a
      000029 A9*00            [24]  142 	mov	r1,_bp
      00002B 09               [12]  143 	inc	r1
      00002C E6               [12]  144 	mov	a,@r0
      00002D F7               [12]  145 	mov	@r1,a
      00002E 09               [12]  146 	inc	r1
      00002F 77 00            [12]  147 	mov	@r1,#0x00
      000031 09               [12]  148 	inc	r1
      000032 77 00            [12]  149 	mov	@r1,#0x00
      000034 09               [12]  150 	inc	r1
      000035 77 00            [12]  151 	mov	@r1,#0x00
      000037 C0 04            [24]  152 	push	ar4
      000039 A8*00            [24]  153 	mov	r0,_bp
      00003B 08               [12]  154 	inc	r0
      00003C E6               [12]  155 	mov	a,@r0
      00003D C0 E0            [24]  156 	push	acc
      00003F 08               [12]  157 	inc	r0
      000040 E6               [12]  158 	mov	a,@r0
      000041 C0 E0            [24]  159 	push	acc
      000043 08               [12]  160 	inc	r0
      000044 E6               [12]  161 	mov	a,@r0
      000045 C0 E0            [24]  162 	push	acc
      000047 08               [12]  163 	inc	r0
      000048 E6               [12]  164 	mov	a,@r0
      000049 C0 E0            [24]  165 	push	acc
      00004B E5*00            [12]  166 	mov	a,_bp
      00004D 24 05            [12]  167 	add	a,#0x05
      00004F F8               [12]  168 	mov	r0,a
      000050 86 82            [24]  169 	mov	dpl,@r0
      000052 08               [12]  170 	inc	r0
      000053 86 83            [24]  171 	mov	dph,@r0
      000055 08               [12]  172 	inc	r0
      000056 86 F0            [24]  173 	mov	b,@r0
      000058 08               [12]  174 	inc	r0
      000059 E6               [12]  175 	mov	a,@r0
      00005A 12r00r00         [24]  176 	lcall	__modulong
      00005D AA 82            [24]  177 	mov	r2,dpl
      00005F FF               [12]  178 	mov	r7,a
      000060 E5 81            [12]  179 	mov	a,sp
      000062 24 FC            [12]  180 	add	a,#0xfc
      000064 F5 81            [12]  181 	mov	sp,a
      000066 D0 04            [24]  182 	pop	ar4
      000068 74 30            [12]  183 	mov	a,#0x30
      00006A 2A               [12]  184 	add	a,r2
      00006B FE               [12]  185 	mov	r6,a
                                    186 ;	_ltoa.c:63: if (c > (unsigned char)'9')
      00006C C3               [12]  187 	clr	c
      00006D 74 39            [12]  188 	mov	a,#0x39
      00006F 9E               [12]  189 	subb	a,r6
      000070 D0 03            [24]  190 	pop	ar3
      000072 50 06            [24]  191 	jnc	00102$
                                    192 ;	_ltoa.c:64: c += 'A' - '9' - 1;
      000074 8E 07            [24]  193 	mov	ar7,r6
      000076 74 07            [12]  194 	mov	a,#0x07
      000078 2F               [12]  195 	add	a,r7
      000079 FE               [12]  196 	mov	r6,a
      00007A                        197 00102$:
                                    198 ;	_ltoa.c:65: buffer[--index] = c;
      00007A 1C               [12]  199 	dec	r4
      00007B EC               [12]  200 	mov	a,r4
      00007C 2B               [12]  201 	add	a,r3
      00007D F8               [12]  202 	mov	r0,a
      00007E A6 06            [24]  203 	mov	@r0,ar6
                                    204 ;	_ltoa.c:66: value /= radix;
      000080 C0 04            [24]  205 	push	ar4
      000082 C0 03            [24]  206 	push	ar3
      000084 A8*00            [24]  207 	mov	r0,_bp
      000086 08               [12]  208 	inc	r0
      000087 E6               [12]  209 	mov	a,@r0
      000088 C0 E0            [24]  210 	push	acc
      00008A 08               [12]  211 	inc	r0
      00008B E6               [12]  212 	mov	a,@r0
      00008C C0 E0            [24]  213 	push	acc
      00008E 08               [12]  214 	inc	r0
      00008F E6               [12]  215 	mov	a,@r0
      000090 C0 E0            [24]  216 	push	acc
      000092 08               [12]  217 	inc	r0
      000093 E6               [12]  218 	mov	a,@r0
      000094 C0 E0            [24]  219 	push	acc
      000096 E5*00            [12]  220 	mov	a,_bp
      000098 24 05            [12]  221 	add	a,#0x05
      00009A F8               [12]  222 	mov	r0,a
      00009B 86 82            [24]  223 	mov	dpl,@r0
      00009D 08               [12]  224 	inc	r0
      00009E 86 83            [24]  225 	mov	dph,@r0
      0000A0 08               [12]  226 	inc	r0
      0000A1 86 F0            [24]  227 	mov	b,@r0
      0000A3 08               [12]  228 	inc	r0
      0000A4 E6               [12]  229 	mov	a,@r0
      0000A5 12r00r00         [24]  230 	lcall	__divulong
      0000A8 C8               [12]  231 	xch	a,r0
      0000A9 E5*00            [12]  232 	mov	a,_bp
      0000AB 24 05            [12]  233 	add	a,#0x05
      0000AD C8               [12]  234 	xch	a,r0
      0000AE A6 82            [24]  235 	mov	@r0,dpl
      0000B0 08               [12]  236 	inc	r0
      0000B1 A6 83            [24]  237 	mov	@r0,dph
      0000B3 08               [12]  238 	inc	r0
      0000B4 A6 F0            [24]  239 	mov	@r0,b
      0000B6 08               [12]  240 	inc	r0
      0000B7 F6               [12]  241 	mov	@r0,a
      0000B8 E5 81            [12]  242 	mov	a,sp
      0000BA 24 FC            [12]  243 	add	a,#0xfc
      0000BC F5 81            [12]  244 	mov	sp,a
      0000BE D0 03            [24]  245 	pop	ar3
      0000C0 D0 04            [24]  246 	pop	ar4
                                    247 ;	_ltoa.c:67: } while (value);
      0000C2 E5*00            [12]  248 	mov	a,_bp
      0000C4 24 05            [12]  249 	add	a,#0x05
      0000C6 F8               [12]  250 	mov	r0,a
      0000C7 E6               [12]  251 	mov	a,@r0
      0000C8 08               [12]  252 	inc	r0
      0000C9 46               [12]  253 	orl	a,@r0
      0000CA 08               [12]  254 	inc	r0
      0000CB 46               [12]  255 	orl	a,@r0
      0000CC 08               [12]  256 	inc	r0
      0000CD 46               [12]  257 	orl	a,@r0
      0000CE 60 03            [24]  258 	jz	00128$
      0000D0 02r00r22         [24]  259 	ljmp	00103$
      0000D3                        260 00128$:
                                    261 ;	_ltoa.c:69: do {
      0000D3 E5*00            [12]  262 	mov	a,_bp
      0000D5 24 FB            [12]  263 	add	a,#0xfb
      0000D7 F8               [12]  264 	mov	r0,a
      0000D8 86 05            [24]  265 	mov	ar5,@r0
      0000DA 08               [12]  266 	inc	r0
      0000DB 86 06            [24]  267 	mov	ar6,@r0
      0000DD 08               [12]  268 	inc	r0
      0000DE 86 07            [24]  269 	mov	ar7,@r0
      0000E0                        270 00106$:
                                    271 ;	_ltoa.c:70: *string++ = buffer[index];
      0000E0 EC               [12]  272 	mov	a,r4
      0000E1 2B               [12]  273 	add	a,r3
      0000E2 F9               [12]  274 	mov	r1,a
      0000E3 87 02            [24]  275 	mov	ar2,@r1
      0000E5 8D 82            [24]  276 	mov	dpl,r5
      0000E7 8E 83            [24]  277 	mov	dph,r6
      0000E9 8F F0            [24]  278 	mov	b,r7
      0000EB EA               [12]  279 	mov	a,r2
      0000EC 12r00r00         [24]  280 	lcall	__gptrput
      0000EF A3               [24]  281 	inc	dptr
      0000F0 AD 82            [24]  282 	mov	r5,dpl
      0000F2 AE 83            [24]  283 	mov	r6,dph
                                    284 ;	_ltoa.c:71: } while ( ++index != NUMBER_OF_DIGITS );
      0000F4 0C               [12]  285 	inc	r4
      0000F5 BC 20 E8         [24]  286 	cjne	r4,#0x20,00106$
                                    287 ;	_ltoa.c:73: *string = 0;  /* string terminator */
      0000F8 8D 82            [24]  288 	mov	dpl,r5
      0000FA 8E 83            [24]  289 	mov	dph,r6
      0000FC 8F F0            [24]  290 	mov	b,r7
      0000FE E4               [12]  291 	clr	a
      0000FF 12r00r00         [24]  292 	lcall	__gptrput
      000102 85*00 81         [24]  293 	mov	sp,_bp
      000105 D0*00            [24]  294 	pop	_bp
      000107 22               [24]  295 	ret
                                    296 ;------------------------------------------------------------
                                    297 ;Allocation info for local variables in function '_ltoa'
                                    298 ;------------------------------------------------------------
                                    299 ;string                    Allocated to stack - _bp -5
                                    300 ;radix                     Allocated to stack - _bp -6
                                    301 ;value                     Allocated to stack - _bp +1
                                    302 ;------------------------------------------------------------
                                    303 ;	_ltoa.c:76: void _ltoa(long value, char* string, unsigned char radix)
                                    304 ;	-----------------------------------------
                                    305 ;	 function _ltoa
                                    306 ;	-----------------------------------------
      000108                        307 __ltoa:
      000108 C0*00            [24]  308 	push	_bp
      00010A 85 81*00         [24]  309 	mov	_bp,sp
      00010D C0 82            [24]  310 	push	dpl
      00010F C0 83            [24]  311 	push	dph
      000111 C0 F0            [24]  312 	push	b
      000113 C0 E0            [24]  313 	push	acc
                                    314 ;	_ltoa.c:78: if (value < 0 && radix == 10) {
      000115 A8*00            [24]  315 	mov	r0,_bp
      000117 08               [12]  316 	inc	r0
      000118 08               [12]  317 	inc	r0
      000119 08               [12]  318 	inc	r0
      00011A 08               [12]  319 	inc	r0
      00011B E6               [12]  320 	mov	a,@r0
      00011C 30 E7 43         [24]  321 	jnb	acc.7,00102$
      00011F E5*00            [12]  322 	mov	a,_bp
      000121 24 FA            [12]  323 	add	a,#0xfa
      000123 F8               [12]  324 	mov	r0,a
      000124 B6 0A 3B         [24]  325 	cjne	@r0,#0x0A,00102$
                                    326 ;	_ltoa.c:79: *string++ = '-';
      000127 E5*00            [12]  327 	mov	a,_bp
      000129 24 FB            [12]  328 	add	a,#0xfb
      00012B F8               [12]  329 	mov	r0,a
      00012C 86 02            [24]  330 	mov	ar2,@r0
      00012E 08               [12]  331 	inc	r0
      00012F 86 03            [24]  332 	mov	ar3,@r0
      000131 08               [12]  333 	inc	r0
      000132 86 07            [24]  334 	mov	ar7,@r0
      000134 8A 82            [24]  335 	mov	dpl,r2
      000136 8B 83            [24]  336 	mov	dph,r3
      000138 8F F0            [24]  337 	mov	b,r7
      00013A 74 2D            [12]  338 	mov	a,#0x2D
      00013C 12r00r00         [24]  339 	lcall	__gptrput
      00013F E5*00            [12]  340 	mov	a,_bp
      000141 24 FB            [12]  341 	add	a,#0xfb
      000143 F8               [12]  342 	mov	r0,a
      000144 74 01            [12]  343 	mov	a,#0x01
      000146 2A               [12]  344 	add	a,r2
      000147 F6               [12]  345 	mov	@r0,a
      000148 E4               [12]  346 	clr	a
      000149 3B               [12]  347 	addc	a,r3
      00014A 08               [12]  348 	inc	r0
      00014B F6               [12]  349 	mov	@r0,a
      00014C 08               [12]  350 	inc	r0
      00014D A6 07            [24]  351 	mov	@r0,ar7
                                    352 ;	_ltoa.c:80: value = -value;
      00014F A8*00            [24]  353 	mov	r0,_bp
      000151 08               [12]  354 	inc	r0
      000152 C3               [12]  355 	clr	c
      000153 E4               [12]  356 	clr	a
      000154 96               [12]  357 	subb	a,@r0
      000155 F6               [12]  358 	mov	@r0,a
      000156 08               [12]  359 	inc	r0
      000157 E4               [12]  360 	clr	a
      000158 96               [12]  361 	subb	a,@r0
      000159 F6               [12]  362 	mov	@r0,a
      00015A 08               [12]  363 	inc	r0
      00015B E4               [12]  364 	clr	a
      00015C 96               [12]  365 	subb	a,@r0
      00015D F6               [12]  366 	mov	@r0,a
      00015E 08               [12]  367 	inc	r0
      00015F E4               [12]  368 	clr	a
      000160 96               [12]  369 	subb	a,@r0
      000161 F6               [12]  370 	mov	@r0,a
      000162                        371 00102$:
                                    372 ;	_ltoa.c:82: _ultoa(value, string, radix);
      000162 E5*00            [12]  373 	mov	a,_bp
      000164 24 FA            [12]  374 	add	a,#0xfa
      000166 F8               [12]  375 	mov	r0,a
      000167 E6               [12]  376 	mov	a,@r0
      000168 C0 E0            [24]  377 	push	acc
      00016A E5*00            [12]  378 	mov	a,_bp
      00016C 24 FB            [12]  379 	add	a,#0xfb
      00016E F8               [12]  380 	mov	r0,a
      00016F E6               [12]  381 	mov	a,@r0
      000170 C0 E0            [24]  382 	push	acc
      000172 08               [12]  383 	inc	r0
      000173 E6               [12]  384 	mov	a,@r0
      000174 C0 E0            [24]  385 	push	acc
      000176 08               [12]  386 	inc	r0
      000177 E6               [12]  387 	mov	a,@r0
      000178 C0 E0            [24]  388 	push	acc
      00017A A8*00            [24]  389 	mov	r0,_bp
      00017C 08               [12]  390 	inc	r0
      00017D 86 82            [24]  391 	mov	dpl,@r0
      00017F 08               [12]  392 	inc	r0
      000180 86 83            [24]  393 	mov	dph,@r0
      000182 08               [12]  394 	inc	r0
      000183 86 F0            [24]  395 	mov	b,@r0
      000185 08               [12]  396 	inc	r0
      000186 E6               [12]  397 	mov	a,@r0
      000187 12r00r00         [24]  398 	lcall	__ultoa
      00018A E5 81            [12]  399 	mov	a,sp
      00018C 24 FC            [12]  400 	add	a,#0xfc
      00018E F5 81            [12]  401 	mov	sp,a
      000190 85*00 81         [24]  402 	mov	sp,_bp
      000193 D0*00            [24]  403 	pop	_bp
      000195 22               [24]  404 	ret
                                    405 	.area CSEG    (CODE)
                                    406 	.area CONST   (CODE)
                                    407 	.area XINIT   (CODE)
                                    408 	.area CABS    (ABS,CODE)
