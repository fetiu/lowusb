                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:48 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +5
                                    110 ;y                         Allocated to registers r2 r3 r6 r7 
                                    111 ;w                         Allocated to registers r7 r6 r4 r3 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b1 
                                    114 ;sloc0                     Allocated to stack - _bp +1
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(float x, bool iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C8               [12]  131 	xch	a,r0
      000006 E5 81            [12]  132 	mov	a,sp
      000008 24 0C            [12]  133 	add	a,#0x0C
      00000A F5 81            [12]  134 	mov	sp,a
      00000C E5*00            [12]  135 	mov	a,_bp
      00000E 24 05            [12]  136 	add	a,#0x05
      000010 C8               [12]  137 	xch	a,r0
      000011 A6 82            [24]  138 	mov	@r0,dpl
      000013 08               [12]  139 	inc	r0
      000014 A6 83            [24]  140 	mov	@r0,dph
      000016 08               [12]  141 	inc	r0
      000017 A6 F0            [24]  142 	mov	@r0,b
      000019 08               [12]  143 	inc	r0
      00001A F6               [12]  144 	mov	@r0,a
                                    145 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      00001B C0*00            [24]  146 	push	bits
      00001D E4               [12]  147 	clr	a
      00001E C0 E0            [24]  148 	push	acc
      000020 C0 E0            [24]  149 	push	acc
      000022 C0 E0            [24]  150 	push	acc
      000024 C0 E0            [24]  151 	push	acc
      000026 E5*00            [12]  152 	mov	a,_bp
      000028 24 05            [12]  153 	add	a,#0x05
      00002A F8               [12]  154 	mov	r0,a
      00002B 86 82            [24]  155 	mov	dpl,@r0
      00002D 08               [12]  156 	inc	r0
      00002E 86 83            [24]  157 	mov	dph,@r0
      000030 08               [12]  158 	inc	r0
      000031 86 F0            [24]  159 	mov	b,@r0
      000033 08               [12]  160 	inc	r0
      000034 E6               [12]  161 	mov	a,@r0
      000035 12r00r00         [24]  162 	lcall	___fslt
      000038 AB 82            [24]  163 	mov	r3,dpl
      00003A E5 81            [12]  164 	mov	a,sp
      00003C 24 FC            [12]  165 	add	a,#0xfc
      00003E F5 81            [12]  166 	mov	sp,a
      000040 D0*00            [24]  167 	pop	bits
      000042 EB               [12]  168 	mov	a,r3
      000043 60 1A            [24]  169 	jz	00102$
      000045 E5*00            [12]  170 	mov	a,_bp
      000047 24 05            [12]  171 	add	a,#0x05
      000049 F8               [12]  172 	mov	r0,a
      00004A 86 04            [24]  173 	mov	ar4,@r0
      00004C 08               [12]  174 	inc	r0
      00004D 86 05            [24]  175 	mov	ar5,@r0
      00004F 08               [12]  176 	inc	r0
      000050 86 06            [24]  177 	mov	ar6,@r0
      000052 08               [12]  178 	inc	r0
      000053 E6               [12]  179 	mov	a,@r0
      000054 B2 E7            [12]  180 	cpl	acc.7
      000056 FF               [12]  181 	mov	r7,a
      000057 8C 02            [24]  182 	mov	ar2,r4
      000059 8D 03            [24]  183 	mov	ar3,r5
      00005B D2*00            [12]  184 	setb	b1
      00005D 80 12            [24]  185 	sjmp	00103$
      00005F                        186 00102$:
                                    187 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00005F E5*00            [12]  188 	mov	a,_bp
      000061 24 05            [12]  189 	add	a,#0x05
      000063 F8               [12]  190 	mov	r0,a
      000064 86 02            [24]  191 	mov	ar2,@r0
      000066 08               [12]  192 	inc	r0
      000067 86 03            [24]  193 	mov	ar3,@r0
      000069 08               [12]  194 	inc	r0
      00006A 86 06            [24]  195 	mov	ar6,@r0
      00006C 08               [12]  196 	inc	r0
      00006D 86 07            [24]  197 	mov	ar7,@r0
      00006F C2*00            [12]  198 	clr	b1
      000071                        199 00103$:
                                    200 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      000071 C0 07            [24]  201 	push	ar7
      000073 C0 06            [24]  202 	push	ar6
      000075 C0 03            [24]  203 	push	ar3
      000077 C0 02            [24]  204 	push	ar2
      000079 C0*00            [24]  205 	push	bits
      00007B E4               [12]  206 	clr	a
      00007C C0 E0            [24]  207 	push	acc
      00007E C0 E0            [24]  208 	push	acc
      000080 74 80            [12]  209 	mov	a,#0x80
      000082 C0 E0            [24]  210 	push	acc
      000084 74 3F            [12]  211 	mov	a,#0x3F
      000086 C0 E0            [24]  212 	push	acc
      000088 8A 82            [24]  213 	mov	dpl,r2
      00008A 8B 83            [24]  214 	mov	dph,r3
      00008C 8E F0            [24]  215 	mov	b,r6
      00008E EF               [12]  216 	mov	a,r7
      00008F 12r00r00         [24]  217 	lcall	___fsgt
      000092 AD 82            [24]  218 	mov	r5,dpl
      000094 E5 81            [12]  219 	mov	a,sp
      000096 24 FC            [12]  220 	add	a,#0xfc
      000098 F5 81            [12]  221 	mov	sp,a
      00009A D0*00            [24]  222 	pop	bits
      00009C D0 02            [24]  223 	pop	ar2
      00009E D0 03            [24]  224 	pop	ar3
      0000A0 D0 06            [24]  225 	pop	ar6
      0000A2 D0 07            [24]  226 	pop	ar7
      0000A4 ED               [12]  227 	mov	a,r5
      0000A5 70 06            [24]  228 	jnz	00117$
      0000A7 20*00 03         [24]  229 	jb	b0,00146$
      0000AA 02r02rE3         [24]  230 	ljmp	00118$
      0000AD                        231 00146$:
      0000AD                        232 00117$:
                                    233 ;	sincoshf.c:66: if(y>YBAR)
      0000AD C0 07            [24]  234 	push	ar7
      0000AF C0 06            [24]  235 	push	ar6
      0000B1 C0 03            [24]  236 	push	ar3
      0000B3 C0 02            [24]  237 	push	ar2
      0000B5 C0*00            [24]  238 	push	bits
      0000B7 E4               [12]  239 	clr	a
      0000B8 C0 E0            [24]  240 	push	acc
      0000BA C0 E0            [24]  241 	push	acc
      0000BC 74 10            [12]  242 	mov	a,#0x10
      0000BE C0 E0            [24]  243 	push	acc
      0000C0 74 41            [12]  244 	mov	a,#0x41
      0000C2 C0 E0            [24]  245 	push	acc
      0000C4 8A 82            [24]  246 	mov	dpl,r2
      0000C6 8B 83            [24]  247 	mov	dph,r3
      0000C8 8E F0            [24]  248 	mov	b,r6
      0000CA EF               [12]  249 	mov	a,r7
      0000CB 12r00r00         [24]  250 	lcall	___fsgt
      0000CE AD 82            [24]  251 	mov	r5,dpl
      0000D0 E5 81            [12]  252 	mov	a,sp
      0000D2 24 FC            [12]  253 	add	a,#0xfc
      0000D4 F5 81            [12]  254 	mov	sp,a
      0000D6 D0*00            [24]  255 	pop	bits
      0000D8 D0 02            [24]  256 	pop	ar2
      0000DA D0 03            [24]  257 	pop	ar3
      0000DC D0 06            [24]  258 	pop	ar6
      0000DE D0 07            [24]  259 	pop	ar7
      0000E0 ED               [12]  260 	mov	a,r5
      0000E1 70 03            [24]  261 	jnz	00147$
      0000E3 02r01rF9         [24]  262 	ljmp	00110$
      0000E6                        263 00147$:
                                    264 ;	sincoshf.c:68: w=y-K1;
      0000E6 C0*00            [24]  265 	push	bits
      0000E8 E4               [12]  266 	clr	a
      0000E9 C0 E0            [24]  267 	push	acc
      0000EB 74 73            [12]  268 	mov	a,#0x73
      0000ED C0 E0            [24]  269 	push	acc
      0000EF 74 31            [12]  270 	mov	a,#0x31
      0000F1 C0 E0            [24]  271 	push	acc
      0000F3 74 3F            [12]  272 	mov	a,#0x3F
      0000F5 C0 E0            [24]  273 	push	acc
      0000F7 8A 82            [24]  274 	mov	dpl,r2
      0000F9 8B 83            [24]  275 	mov	dph,r3
      0000FB 8E F0            [24]  276 	mov	b,r6
      0000FD EF               [12]  277 	mov	a,r7
      0000FE 12r00r00         [24]  278 	lcall	___fssub
      000101 AF 82            [24]  279 	mov	r7,dpl
      000103 AE 83            [24]  280 	mov	r6,dph
      000105 AC F0            [24]  281 	mov	r4,b
      000107 FD               [12]  282 	mov	r5,a
      000108 E5 81            [12]  283 	mov	a,sp
      00010A 24 FC            [12]  284 	add	a,#0xfc
      00010C F5 81            [12]  285 	mov	sp,a
      00010E D0*00            [24]  286 	pop	bits
      000110 8D 03            [24]  287 	mov	ar3,r5
                                    288 ;	sincoshf.c:69: if (w>WMAX)
      000112 C0 07            [24]  289 	push	ar7
      000114 C0 06            [24]  290 	push	ar6
      000116 C0 04            [24]  291 	push	ar4
      000118 C0 03            [24]  292 	push	ar3
      00011A C0*00            [24]  293 	push	bits
      00011C 74 CF            [12]  294 	mov	a,#0xCF
      00011E C0 E0            [24]  295 	push	acc
      000120 74 BD            [12]  296 	mov	a,#0xBD
      000122 C0 E0            [24]  297 	push	acc
      000124 74 33            [12]  298 	mov	a,#0x33
      000126 C0 E0            [24]  299 	push	acc
      000128 74 42            [12]  300 	mov	a,#0x42
      00012A C0 E0            [24]  301 	push	acc
      00012C 8F 82            [24]  302 	mov	dpl,r7
      00012E 8E 83            [24]  303 	mov	dph,r6
      000130 8C F0            [24]  304 	mov	b,r4
      000132 EB               [12]  305 	mov	a,r3
      000133 12r00r00         [24]  306 	lcall	___fsgt
      000136 AD 82            [24]  307 	mov	r5,dpl
      000138 E5 81            [12]  308 	mov	a,sp
      00013A 24 FC            [12]  309 	add	a,#0xfc
      00013C F5 81            [12]  310 	mov	sp,a
      00013E D0*00            [24]  311 	pop	bits
      000140 D0 03            [24]  312 	pop	ar3
      000142 D0 04            [24]  313 	pop	ar4
      000144 D0 06            [24]  314 	pop	ar6
      000146 D0 07            [24]  315 	pop	ar7
      000148 ED               [12]  316 	mov	a,r5
      000149 60 1B            [24]  317 	jz	00105$
                                    318 ;	sincoshf.c:71: errno=ERANGE;
      00014B 78r00            [12]  319 	mov	r0,#_errno
      00014D 74 22            [12]  320 	mov	a,#0x22
      00014F F2               [24]  321 	movx	@r0,a
      000150 08               [12]  322 	inc	r0
      000151 E4               [12]  323 	clr	a
      000152 F2               [24]  324 	movx	@r0,a
                                    325 ;	sincoshf.c:72: z=HUGE_VALF;
      000153 E5*00            [12]  326 	mov	a,_bp
      000155 24 09            [12]  327 	add	a,#0x09
      000157 F8               [12]  328 	mov	r0,a
      000158 76 FF            [12]  329 	mov	@r0,#0xFF
      00015A 08               [12]  330 	inc	r0
      00015B 76 FF            [12]  331 	mov	@r0,#0xFF
      00015D 08               [12]  332 	inc	r0
      00015E 76 7F            [12]  333 	mov	@r0,#0x7F
      000160 08               [12]  334 	inc	r0
      000161 76 7F            [12]  335 	mov	@r0,#0x7F
      000163 02r02rC8         [24]  336 	ljmp	00111$
      000166                        337 00105$:
                                    338 ;	sincoshf.c:76: z=expf(w);
      000166 8F 82            [24]  339 	mov	dpl,r7
      000168 8E 83            [24]  340 	mov	dph,r6
      00016A 8C F0            [24]  341 	mov	b,r4
      00016C EB               [12]  342 	mov	a,r3
      00016D C0*00            [24]  343 	push	bits
      00016F 12r00r00         [24]  344 	lcall	_expf
      000172 AF 82            [24]  345 	mov	r7,dpl
      000174 AE 83            [24]  346 	mov	r6,dph
      000176 AD F0            [24]  347 	mov	r5,b
      000178 FC               [12]  348 	mov	r4,a
      000179 D0*00            [24]  349 	pop	bits
      00017B E5*00            [12]  350 	mov	a,_bp
      00017D 24 09            [12]  351 	add	a,#0x09
      00017F F8               [12]  352 	mov	r0,a
      000180 A6 07            [24]  353 	mov	@r0,ar7
      000182 08               [12]  354 	inc	r0
      000183 A6 06            [24]  355 	mov	@r0,ar6
      000185 08               [12]  356 	inc	r0
      000186 A6 05            [24]  357 	mov	@r0,ar5
      000188 08               [12]  358 	inc	r0
      000189 A6 04            [24]  359 	mov	@r0,ar4
                                    360 ;	sincoshf.c:77: z+=K3*z;
      00018B C0*00            [24]  361 	push	bits
      00018D E5*00            [12]  362 	mov	a,_bp
      00018F 24 09            [12]  363 	add	a,#0x09
      000191 F8               [12]  364 	mov	r0,a
      000192 E6               [12]  365 	mov	a,@r0
      000193 C0 E0            [24]  366 	push	acc
      000195 08               [12]  367 	inc	r0
      000196 E6               [12]  368 	mov	a,@r0
      000197 C0 E0            [24]  369 	push	acc
      000199 08               [12]  370 	inc	r0
      00019A E6               [12]  371 	mov	a,@r0
      00019B C0 E0            [24]  372 	push	acc
      00019D 08               [12]  373 	inc	r0
      00019E E6               [12]  374 	mov	a,@r0
      00019F C0 E0            [24]  375 	push	acc
      0001A1 90 08 97         [24]  376 	mov	dptr,#0x0897
      0001A4 75 F0 68         [24]  377 	mov	b,#0x68
      0001A7 74 37            [12]  378 	mov	a,#0x37
      0001A9 12r00r00         [24]  379 	lcall	___fsmul
      0001AC AF 82            [24]  380 	mov	r7,dpl
      0001AE AE 83            [24]  381 	mov	r6,dph
      0001B0 AD F0            [24]  382 	mov	r5,b
      0001B2 FC               [12]  383 	mov	r4,a
      0001B3 E5 81            [12]  384 	mov	a,sp
      0001B5 24 FC            [12]  385 	add	a,#0xfc
      0001B7 F5 81            [12]  386 	mov	sp,a
      0001B9 D0*00            [24]  387 	pop	bits
      0001BB C0*00            [24]  388 	push	bits
      0001BD C0 07            [24]  389 	push	ar7
      0001BF C0 06            [24]  390 	push	ar6
      0001C1 C0 05            [24]  391 	push	ar5
      0001C3 C0 04            [24]  392 	push	ar4
      0001C5 E5*00            [12]  393 	mov	a,_bp
      0001C7 24 09            [12]  394 	add	a,#0x09
      0001C9 F8               [12]  395 	mov	r0,a
      0001CA 86 82            [24]  396 	mov	dpl,@r0
      0001CC 08               [12]  397 	inc	r0
      0001CD 86 83            [24]  398 	mov	dph,@r0
      0001CF 08               [12]  399 	inc	r0
      0001D0 86 F0            [24]  400 	mov	b,@r0
      0001D2 08               [12]  401 	inc	r0
      0001D3 E6               [12]  402 	mov	a,@r0
      0001D4 12r00r00         [24]  403 	lcall	___fsadd
      0001D7 AF 82            [24]  404 	mov	r7,dpl
      0001D9 AE 83            [24]  405 	mov	r6,dph
      0001DB AD F0            [24]  406 	mov	r5,b
      0001DD FC               [12]  407 	mov	r4,a
      0001DE E5 81            [12]  408 	mov	a,sp
      0001E0 24 FC            [12]  409 	add	a,#0xfc
      0001E2 F5 81            [12]  410 	mov	sp,a
      0001E4 D0*00            [24]  411 	pop	bits
      0001E6 E5*00            [12]  412 	mov	a,_bp
      0001E8 24 09            [12]  413 	add	a,#0x09
      0001EA F8               [12]  414 	mov	r0,a
      0001EB A6 07            [24]  415 	mov	@r0,ar7
      0001ED 08               [12]  416 	inc	r0
      0001EE A6 06            [24]  417 	mov	@r0,ar6
      0001F0 08               [12]  418 	inc	r0
      0001F1 A6 05            [24]  419 	mov	@r0,ar5
      0001F3 08               [12]  420 	inc	r0
      0001F4 A6 04            [24]  421 	mov	@r0,ar4
      0001F6 02r02rC8         [24]  422 	ljmp	00111$
      0001F9                        423 00110$:
                                    424 ;	sincoshf.c:82: z=expf(y);
      0001F9 8A 82            [24]  425 	mov	dpl,r2
      0001FB 8B 83            [24]  426 	mov	dph,r3
      0001FD 8E F0            [24]  427 	mov	b,r6
      0001FF EF               [12]  428 	mov	a,r7
      000200 C0*00            [24]  429 	push	bits
      000202 12r00r00         [24]  430 	lcall	_expf
      000205 AF 82            [24]  431 	mov	r7,dpl
      000207 AE 83            [24]  432 	mov	r6,dph
      000209 AD F0            [24]  433 	mov	r5,b
      00020B FC               [12]  434 	mov	r4,a
      00020C D0*00            [24]  435 	pop	bits
      00020E E5*00            [12]  436 	mov	a,_bp
      000210 24 09            [12]  437 	add	a,#0x09
      000212 F8               [12]  438 	mov	r0,a
      000213 A6 07            [24]  439 	mov	@r0,ar7
      000215 08               [12]  440 	inc	r0
      000216 A6 06            [24]  441 	mov	@r0,ar6
      000218 08               [12]  442 	inc	r0
      000219 A6 05            [24]  443 	mov	@r0,ar5
      00021B 08               [12]  444 	inc	r0
      00021C A6 04            [24]  445 	mov	@r0,ar4
                                    446 ;	sincoshf.c:83: w=1.0/z;
      00021E C0*00            [24]  447 	push	bits
      000220 E5*00            [12]  448 	mov	a,_bp
      000222 24 09            [12]  449 	add	a,#0x09
      000224 F8               [12]  450 	mov	r0,a
      000225 E6               [12]  451 	mov	a,@r0
      000226 C0 E0            [24]  452 	push	acc
      000228 08               [12]  453 	inc	r0
      000229 E6               [12]  454 	mov	a,@r0
      00022A C0 E0            [24]  455 	push	acc
      00022C 08               [12]  456 	inc	r0
      00022D E6               [12]  457 	mov	a,@r0
      00022E C0 E0            [24]  458 	push	acc
      000230 08               [12]  459 	inc	r0
      000231 E6               [12]  460 	mov	a,@r0
      000232 C0 E0            [24]  461 	push	acc
      000234 90 00 00         [24]  462 	mov	dptr,#0x0000
      000237 75 F0 80         [24]  463 	mov	b,#0x80
      00023A 74 3F            [12]  464 	mov	a,#0x3F
      00023C 12r00r00         [24]  465 	lcall	___fsdiv
      00023F A8*00            [24]  466 	mov	r0,_bp
      000241 08               [12]  467 	inc	r0
      000242 A6 82            [24]  468 	mov	@r0,dpl
      000244 08               [12]  469 	inc	r0
      000245 A6 83            [24]  470 	mov	@r0,dph
      000247 08               [12]  471 	inc	r0
      000248 A6 F0            [24]  472 	mov	@r0,b
      00024A 08               [12]  473 	inc	r0
      00024B F6               [12]  474 	mov	@r0,a
      00024C E5 81            [12]  475 	mov	a,sp
      00024E 24 FC            [12]  476 	add	a,#0xfc
      000250 F5 81            [12]  477 	mov	sp,a
      000252 D0*00            [24]  478 	pop	bits
      000254 A8*00            [24]  479 	mov	r0,_bp
      000256 08               [12]  480 	inc	r0
      000257 86 07            [24]  481 	mov	ar7,@r0
      000259 08               [12]  482 	inc	r0
      00025A 86 06            [24]  483 	mov	ar6,@r0
      00025C 08               [12]  484 	inc	r0
      00025D 86 04            [24]  485 	mov	ar4,@r0
      00025F 08               [12]  486 	inc	r0
      000260 86 03            [24]  487 	mov	ar3,@r0
                                    488 ;	sincoshf.c:84: if(!iscosh) w=-w;
      000262 20*00 04         [24]  489 	jb	b0,00108$
      000265 EB               [12]  490 	mov	a,r3
      000266 B2 E7            [12]  491 	cpl	acc.7
      000268 FB               [12]  492 	mov	r3,a
      000269                        493 00108$:
                                    494 ;	sincoshf.c:85: z=(z+w)*0.5;
      000269 C0*00            [24]  495 	push	bits
      00026B C0 07            [24]  496 	push	ar7
      00026D C0 06            [24]  497 	push	ar6
      00026F C0 04            [24]  498 	push	ar4
      000271 C0 03            [24]  499 	push	ar3
      000273 E5*00            [12]  500 	mov	a,_bp
      000275 24 09            [12]  501 	add	a,#0x09
      000277 F8               [12]  502 	mov	r0,a
      000278 86 82            [24]  503 	mov	dpl,@r0
      00027A 08               [12]  504 	inc	r0
      00027B 86 83            [24]  505 	mov	dph,@r0
      00027D 08               [12]  506 	inc	r0
      00027E 86 F0            [24]  507 	mov	b,@r0
      000280 08               [12]  508 	inc	r0
      000281 E6               [12]  509 	mov	a,@r0
      000282 12r00r00         [24]  510 	lcall	___fsadd
      000285 AF 82            [24]  511 	mov	r7,dpl
      000287 AE 83            [24]  512 	mov	r6,dph
      000289 AD F0            [24]  513 	mov	r5,b
      00028B FC               [12]  514 	mov	r4,a
      00028C E5 81            [12]  515 	mov	a,sp
      00028E 24 FC            [12]  516 	add	a,#0xfc
      000290 F5 81            [12]  517 	mov	sp,a
      000292 D0*00            [24]  518 	pop	bits
      000294 C0*00            [24]  519 	push	bits
      000296 C0 07            [24]  520 	push	ar7
      000298 C0 06            [24]  521 	push	ar6
      00029A C0 05            [24]  522 	push	ar5
      00029C C0 04            [24]  523 	push	ar4
      00029E 90 00 00         [24]  524 	mov	dptr,#(0x00&0x00ff)
      0002A1 E4               [12]  525 	clr	a
      0002A2 F5 F0            [12]  526 	mov	b,a
      0002A4 74 3F            [12]  527 	mov	a,#0x3F
      0002A6 12r00r00         [24]  528 	lcall	___fsmul
      0002A9 AF 82            [24]  529 	mov	r7,dpl
      0002AB AE 83            [24]  530 	mov	r6,dph
      0002AD AD F0            [24]  531 	mov	r5,b
      0002AF FC               [12]  532 	mov	r4,a
      0002B0 E5 81            [12]  533 	mov	a,sp
      0002B2 24 FC            [12]  534 	add	a,#0xfc
      0002B4 F5 81            [12]  535 	mov	sp,a
      0002B6 D0*00            [24]  536 	pop	bits
      0002B8 E5*00            [12]  537 	mov	a,_bp
      0002BA 24 09            [12]  538 	add	a,#0x09
      0002BC F8               [12]  539 	mov	r0,a
      0002BD A6 07            [24]  540 	mov	@r0,ar7
      0002BF 08               [12]  541 	inc	r0
      0002C0 A6 06            [24]  542 	mov	@r0,ar6
      0002C2 08               [12]  543 	inc	r0
      0002C3 A6 05            [24]  544 	mov	@r0,ar5
      0002C5 08               [12]  545 	inc	r0
      0002C6 A6 04            [24]  546 	mov	@r0,ar4
      0002C8                        547 00111$:
                                    548 ;	sincoshf.c:87: if(sign) z=-z;
      0002C8 20*00 03         [24]  549 	jb	b1,00150$
      0002CB 02r04rA5         [24]  550 	ljmp	00119$
      0002CE                        551 00150$:
      0002CE E5*00            [12]  552 	mov	a,_bp
      0002D0 24 09            [12]  553 	add	a,#0x09
      0002D2 F8               [12]  554 	mov	r0,a
      0002D3 E6               [12]  555 	mov	a,@r0
      0002D4 F6               [12]  556 	mov	@r0,a
      0002D5 08               [12]  557 	inc	r0
      0002D6 E6               [12]  558 	mov	a,@r0
      0002D7 F6               [12]  559 	mov	@r0,a
      0002D8 08               [12]  560 	inc	r0
      0002D9 E6               [12]  561 	mov	a,@r0
      0002DA F6               [12]  562 	mov	@r0,a
      0002DB 08               [12]  563 	inc	r0
      0002DC E6               [12]  564 	mov	a,@r0
      0002DD B2 E7            [12]  565 	cpl	acc.7
      0002DF F6               [12]  566 	mov	@r0,a
      0002E0 02r04rA5         [24]  567 	ljmp	00119$
      0002E3                        568 00118$:
                                    569 ;	sincoshf.c:91: if (y<EPS)
      0002E3 E4               [12]  570 	clr	a
      0002E4 C0 E0            [24]  571 	push	acc
      0002E6 C0 E0            [24]  572 	push	acc
      0002E8 74 80            [12]  573 	mov	a,#0x80
      0002EA C0 E0            [24]  574 	push	acc
      0002EC 74 39            [12]  575 	mov	a,#0x39
      0002EE C0 E0            [24]  576 	push	acc
      0002F0 8A 82            [24]  577 	mov	dpl,r2
      0002F2 8B 83            [24]  578 	mov	dph,r3
      0002F4 8E F0            [24]  579 	mov	b,r6
      0002F6 EF               [12]  580 	mov	a,r7
      0002F7 12r00r00         [24]  581 	lcall	___fslt
      0002FA AF 82            [24]  582 	mov	r7,dpl
      0002FC E5 81            [12]  583 	mov	a,sp
      0002FE 24 FC            [12]  584 	add	a,#0xfc
      000300 F5 81            [12]  585 	mov	sp,a
      000302 EF               [12]  586 	mov	a,r7
      000303 60 1B            [24]  587 	jz	00115$
                                    588 ;	sincoshf.c:92: z=x;
      000305 E5*00            [12]  589 	mov	a,_bp
      000307 24 05            [12]  590 	add	a,#0x05
      000309 F8               [12]  591 	mov	r0,a
      00030A E5*00            [12]  592 	mov	a,_bp
      00030C 24 09            [12]  593 	add	a,#0x09
      00030E F9               [12]  594 	mov	r1,a
      00030F E6               [12]  595 	mov	a,@r0
      000310 F7               [12]  596 	mov	@r1,a
      000311 08               [12]  597 	inc	r0
      000312 09               [12]  598 	inc	r1
      000313 E6               [12]  599 	mov	a,@r0
      000314 F7               [12]  600 	mov	@r1,a
      000315 08               [12]  601 	inc	r0
      000316 09               [12]  602 	inc	r1
      000317 E6               [12]  603 	mov	a,@r0
      000318 F7               [12]  604 	mov	@r1,a
      000319 08               [12]  605 	inc	r0
      00031A 09               [12]  606 	inc	r1
      00031B E6               [12]  607 	mov	a,@r0
      00031C F7               [12]  608 	mov	@r1,a
      00031D 02r04rA5         [24]  609 	ljmp	00119$
      000320                        610 00115$:
                                    611 ;	sincoshf.c:95: z=x*x;
      000320 E5*00            [12]  612 	mov	a,_bp
      000322 24 05            [12]  613 	add	a,#0x05
      000324 F8               [12]  614 	mov	r0,a
      000325 E6               [12]  615 	mov	a,@r0
      000326 C0 E0            [24]  616 	push	acc
      000328 08               [12]  617 	inc	r0
      000329 E6               [12]  618 	mov	a,@r0
      00032A C0 E0            [24]  619 	push	acc
      00032C 08               [12]  620 	inc	r0
      00032D E6               [12]  621 	mov	a,@r0
      00032E C0 E0            [24]  622 	push	acc
      000330 08               [12]  623 	inc	r0
      000331 E6               [12]  624 	mov	a,@r0
      000332 C0 E0            [24]  625 	push	acc
      000334 E5*00            [12]  626 	mov	a,_bp
      000336 24 05            [12]  627 	add	a,#0x05
      000338 F8               [12]  628 	mov	r0,a
      000339 86 82            [24]  629 	mov	dpl,@r0
      00033B 08               [12]  630 	inc	r0
      00033C 86 83            [24]  631 	mov	dph,@r0
      00033E 08               [12]  632 	inc	r0
      00033F 86 F0            [24]  633 	mov	b,@r0
      000341 08               [12]  634 	inc	r0
      000342 E6               [12]  635 	mov	a,@r0
      000343 12r00r00         [24]  636 	lcall	___fsmul
      000346 AC 82            [24]  637 	mov	r4,dpl
      000348 AD 83            [24]  638 	mov	r5,dph
      00034A AE F0            [24]  639 	mov	r6,b
      00034C FF               [12]  640 	mov	r7,a
      00034D E5 81            [12]  641 	mov	a,sp
      00034F 24 FC            [12]  642 	add	a,#0xfc
      000351 F5 81            [12]  643 	mov	sp,a
      000353 E5*00            [12]  644 	mov	a,_bp
      000355 24 09            [12]  645 	add	a,#0x09
      000357 F8               [12]  646 	mov	r0,a
      000358 A6 04            [24]  647 	mov	@r0,ar4
      00035A 08               [12]  648 	inc	r0
      00035B A6 05            [24]  649 	mov	@r0,ar5
      00035D 08               [12]  650 	inc	r0
      00035E A6 06            [24]  651 	mov	@r0,ar6
      000360 08               [12]  652 	inc	r0
      000361 A6 07            [24]  653 	mov	@r0,ar7
                                    654 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000363 E5*00            [12]  655 	mov	a,_bp
      000365 24 09            [12]  656 	add	a,#0x09
      000367 F8               [12]  657 	mov	r0,a
      000368 E6               [12]  658 	mov	a,@r0
      000369 C0 E0            [24]  659 	push	acc
      00036B 08               [12]  660 	inc	r0
      00036C E6               [12]  661 	mov	a,@r0
      00036D C0 E0            [24]  662 	push	acc
      00036F 08               [12]  663 	inc	r0
      000370 E6               [12]  664 	mov	a,@r0
      000371 C0 E0            [24]  665 	push	acc
      000373 08               [12]  666 	inc	r0
      000374 E6               [12]  667 	mov	a,@r0
      000375 C0 E0            [24]  668 	push	acc
      000377 E5*00            [12]  669 	mov	a,_bp
      000379 24 05            [12]  670 	add	a,#0x05
      00037B F8               [12]  671 	mov	r0,a
      00037C 86 82            [24]  672 	mov	dpl,@r0
      00037E 08               [12]  673 	inc	r0
      00037F 86 83            [24]  674 	mov	dph,@r0
      000381 08               [12]  675 	inc	r0
      000382 86 F0            [24]  676 	mov	b,@r0
      000384 08               [12]  677 	inc	r0
      000385 E6               [12]  678 	mov	a,@r0
      000386 12r00r00         [24]  679 	lcall	___fsmul
      000389 A8*00            [24]  680 	mov	r0,_bp
      00038B 08               [12]  681 	inc	r0
      00038C A6 82            [24]  682 	mov	@r0,dpl
      00038E 08               [12]  683 	inc	r0
      00038F A6 83            [24]  684 	mov	@r0,dph
      000391 08               [12]  685 	inc	r0
      000392 A6 F0            [24]  686 	mov	@r0,b
      000394 08               [12]  687 	inc	r0
      000395 F6               [12]  688 	mov	@r0,a
      000396 E5 81            [12]  689 	mov	a,sp
      000398 24 FC            [12]  690 	add	a,#0xfc
      00039A F5 81            [12]  691 	mov	sp,a
      00039C E5*00            [12]  692 	mov	a,_bp
      00039E 24 09            [12]  693 	add	a,#0x09
      0003A0 F8               [12]  694 	mov	r0,a
      0003A1 E6               [12]  695 	mov	a,@r0
      0003A2 C0 E0            [24]  696 	push	acc
      0003A4 08               [12]  697 	inc	r0
      0003A5 E6               [12]  698 	mov	a,@r0
      0003A6 C0 E0            [24]  699 	push	acc
      0003A8 08               [12]  700 	inc	r0
      0003A9 E6               [12]  701 	mov	a,@r0
      0003AA C0 E0            [24]  702 	push	acc
      0003AC 08               [12]  703 	inc	r0
      0003AD E6               [12]  704 	mov	a,@r0
      0003AE C0 E0            [24]  705 	push	acc
      0003B0 90 E6 EA         [24]  706 	mov	dptr,#0xE6EA
      0003B3 75 F0 42         [24]  707 	mov	b,#0x42
      0003B6 74 BE            [12]  708 	mov	a,#0xBE
      0003B8 12r00r00         [24]  709 	lcall	___fsmul
      0003BB AA 82            [24]  710 	mov	r2,dpl
      0003BD AB 83            [24]  711 	mov	r3,dph
      0003BF AE F0            [24]  712 	mov	r6,b
      0003C1 FF               [12]  713 	mov	r7,a
      0003C2 E5 81            [12]  714 	mov	a,sp
      0003C4 24 FC            [12]  715 	add	a,#0xfc
      0003C6 F5 81            [12]  716 	mov	sp,a
      0003C8 74 F0            [12]  717 	mov	a,#0xF0
      0003CA C0 E0            [24]  718 	push	acc
      0003CC 74 69            [12]  719 	mov	a,#0x69
      0003CE C0 E0            [24]  720 	push	acc
      0003D0 74 E4            [12]  721 	mov	a,#0xE4
      0003D2 C0 E0            [24]  722 	push	acc
      0003D4 74 C0            [12]  723 	mov	a,#0xC0
      0003D6 C0 E0            [24]  724 	push	acc
      0003D8 8A 82            [24]  725 	mov	dpl,r2
      0003DA 8B 83            [24]  726 	mov	dph,r3
      0003DC 8E F0            [24]  727 	mov	b,r6
      0003DE EF               [12]  728 	mov	a,r7
      0003DF 12r00r00         [24]  729 	lcall	___fsadd
      0003E2 AC 82            [24]  730 	mov	r4,dpl
      0003E4 AD 83            [24]  731 	mov	r5,dph
      0003E6 AE F0            [24]  732 	mov	r6,b
      0003E8 FF               [12]  733 	mov	r7,a
      0003E9 E5 81            [12]  734 	mov	a,sp
      0003EB 24 FC            [12]  735 	add	a,#0xfc
      0003ED F5 81            [12]  736 	mov	sp,a
      0003EF C0 04            [24]  737 	push	ar4
      0003F1 C0 05            [24]  738 	push	ar5
      0003F3 C0 06            [24]  739 	push	ar6
      0003F5 C0 07            [24]  740 	push	ar7
      0003F7 A8*00            [24]  741 	mov	r0,_bp
      0003F9 08               [12]  742 	inc	r0
      0003FA 86 82            [24]  743 	mov	dpl,@r0
      0003FC 08               [12]  744 	inc	r0
      0003FD 86 83            [24]  745 	mov	dph,@r0
      0003FF 08               [12]  746 	inc	r0
      000400 86 F0            [24]  747 	mov	b,@r0
      000402 08               [12]  748 	inc	r0
      000403 E6               [12]  749 	mov	a,@r0
      000404 12r00r00         [24]  750 	lcall	___fsmul
      000407 A8*00            [24]  751 	mov	r0,_bp
      000409 08               [12]  752 	inc	r0
      00040A A6 82            [24]  753 	mov	@r0,dpl
      00040C 08               [12]  754 	inc	r0
      00040D A6 83            [24]  755 	mov	@r0,dph
      00040F 08               [12]  756 	inc	r0
      000410 A6 F0            [24]  757 	mov	@r0,b
      000412 08               [12]  758 	inc	r0
      000413 F6               [12]  759 	mov	@r0,a
      000414 E5 81            [12]  760 	mov	a,sp
      000416 24 FC            [12]  761 	add	a,#0xfc
      000418 F5 81            [12]  762 	mov	sp,a
      00041A 74 93            [12]  763 	mov	a,#0x93
      00041C C0 E0            [24]  764 	push	acc
      00041E 74 4F            [12]  765 	mov	a,#0x4F
      000420 C0 E0            [24]  766 	push	acc
      000422 74 2B            [12]  767 	mov	a,#0x2B
      000424 C0 E0            [24]  768 	push	acc
      000426 74 C2            [12]  769 	mov	a,#0xC2
      000428 C0 E0            [24]  770 	push	acc
      00042A E5*00            [12]  771 	mov	a,_bp
      00042C 24 09            [12]  772 	add	a,#0x09
      00042E F8               [12]  773 	mov	r0,a
      00042F 86 82            [24]  774 	mov	dpl,@r0
      000431 08               [12]  775 	inc	r0
      000432 86 83            [24]  776 	mov	dph,@r0
      000434 08               [12]  777 	inc	r0
      000435 86 F0            [24]  778 	mov	b,@r0
      000437 08               [12]  779 	inc	r0
      000438 E6               [12]  780 	mov	a,@r0
      000439 12r00r00         [24]  781 	lcall	___fsadd
      00043C AA 82            [24]  782 	mov	r2,dpl
      00043E AB 83            [24]  783 	mov	r3,dph
      000440 AE F0            [24]  784 	mov	r6,b
      000442 FF               [12]  785 	mov	r7,a
      000443 E5 81            [12]  786 	mov	a,sp
      000445 24 FC            [12]  787 	add	a,#0xfc
      000447 F5 81            [12]  788 	mov	sp,a
      000449 C0 02            [24]  789 	push	ar2
      00044B C0 03            [24]  790 	push	ar3
      00044D C0 06            [24]  791 	push	ar6
      00044F C0 07            [24]  792 	push	ar7
      000451 A8*00            [24]  793 	mov	r0,_bp
      000453 08               [12]  794 	inc	r0
      000454 86 82            [24]  795 	mov	dpl,@r0
      000456 08               [12]  796 	inc	r0
      000457 86 83            [24]  797 	mov	dph,@r0
      000459 08               [12]  798 	inc	r0
      00045A 86 F0            [24]  799 	mov	b,@r0
      00045C 08               [12]  800 	inc	r0
      00045D E6               [12]  801 	mov	a,@r0
      00045E 12r00r00         [24]  802 	lcall	___fsdiv
      000461 AC 82            [24]  803 	mov	r4,dpl
      000463 AD 83            [24]  804 	mov	r5,dph
      000465 AE F0            [24]  805 	mov	r6,b
      000467 FF               [12]  806 	mov	r7,a
      000468 E5 81            [12]  807 	mov	a,sp
      00046A 24 FC            [12]  808 	add	a,#0xfc
      00046C F5 81            [12]  809 	mov	sp,a
      00046E C0 04            [24]  810 	push	ar4
      000470 C0 05            [24]  811 	push	ar5
      000472 C0 06            [24]  812 	push	ar6
      000474 C0 07            [24]  813 	push	ar7
      000476 E5*00            [12]  814 	mov	a,_bp
      000478 24 05            [12]  815 	add	a,#0x05
      00047A F8               [12]  816 	mov	r0,a
      00047B 86 82            [24]  817 	mov	dpl,@r0
      00047D 08               [12]  818 	inc	r0
      00047E 86 83            [24]  819 	mov	dph,@r0
      000480 08               [12]  820 	inc	r0
      000481 86 F0            [24]  821 	mov	b,@r0
      000483 08               [12]  822 	inc	r0
      000484 E6               [12]  823 	mov	a,@r0
      000485 12r00r00         [24]  824 	lcall	___fsadd
      000488 AC 82            [24]  825 	mov	r4,dpl
      00048A AD 83            [24]  826 	mov	r5,dph
      00048C AE F0            [24]  827 	mov	r6,b
      00048E FF               [12]  828 	mov	r7,a
      00048F E5 81            [12]  829 	mov	a,sp
      000491 24 FC            [12]  830 	add	a,#0xfc
      000493 F5 81            [12]  831 	mov	sp,a
      000495 E5*00            [12]  832 	mov	a,_bp
      000497 24 09            [12]  833 	add	a,#0x09
      000499 F8               [12]  834 	mov	r0,a
      00049A A6 04            [24]  835 	mov	@r0,ar4
      00049C 08               [12]  836 	inc	r0
      00049D A6 05            [24]  837 	mov	@r0,ar5
      00049F 08               [12]  838 	inc	r0
      0004A0 A6 06            [24]  839 	mov	@r0,ar6
      0004A2 08               [12]  840 	inc	r0
      0004A3 A6 07            [24]  841 	mov	@r0,ar7
      0004A5                        842 00119$:
                                    843 ;	sincoshf.c:99: return z;
      0004A5 E5*00            [12]  844 	mov	a,_bp
      0004A7 24 09            [12]  845 	add	a,#0x09
      0004A9 F8               [12]  846 	mov	r0,a
      0004AA 86 82            [24]  847 	mov	dpl,@r0
      0004AC 08               [12]  848 	inc	r0
      0004AD 86 83            [24]  849 	mov	dph,@r0
      0004AF 08               [12]  850 	inc	r0
      0004B0 86 F0            [24]  851 	mov	b,@r0
      0004B2 08               [12]  852 	inc	r0
      0004B3 E6               [12]  853 	mov	a,@r0
      0004B4 85*00 81         [24]  854 	mov	sp,_bp
      0004B7 D0*00            [24]  855 	pop	_bp
      0004B9 22               [24]  856 	ret
                                    857 	.area CSEG    (CODE)
                                    858 	.area CONST   (CODE)
                                    859 	.area XINIT   (CODE)
                                    860 	.area CABS    (ABS,CODE)
