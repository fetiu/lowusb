                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:46 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module sincosf
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincosf
                                     13 	.globl _fabsf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincosf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscos                     Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +5
                                    110 ;y                         Allocated to registers r4 r5 r6 r7 
                                    111 ;f                         Allocated to stack - _bp +9
                                    112 ;r                         Allocated to stack - _bp +13
                                    113 ;g                         Allocated to stack - _bp +17
                                    114 ;XN                        Allocated to stack - _bp +21
                                    115 ;N                         Allocated to registers r2 r3 
                                    116 ;sign                      Allocated to registers b1 
                                    117 ;sloc0                     Allocated to stack - _bp +1
                                    118 ;------------------------------------------------------------
                                    119 ;	sincosf.c:50: float sincosf(float x, bool iscos)
                                    120 ;	-----------------------------------------
                                    121 ;	 function sincosf
                                    122 ;	-----------------------------------------
      000000                        123 _sincosf:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 C0*00            [24]  132 	push	_bp
      000002 85 81*00         [24]  133 	mov	_bp,sp
      000005 C8               [12]  134 	xch	a,r0
      000006 E5 81            [12]  135 	mov	a,sp
      000008 24 18            [12]  136 	add	a,#0x18
      00000A F5 81            [12]  137 	mov	sp,a
      00000C E5*00            [12]  138 	mov	a,_bp
      00000E 24 05            [12]  139 	add	a,#0x05
      000010 C8               [12]  140 	xch	a,r0
      000011 A6 82            [24]  141 	mov	@r0,dpl
      000013 08               [12]  142 	inc	r0
      000014 A6 83            [24]  143 	mov	@r0,dph
      000016 08               [12]  144 	inc	r0
      000017 A6 F0            [24]  145 	mov	@r0,b
      000019 08               [12]  146 	inc	r0
      00001A F6               [12]  147 	mov	@r0,a
                                    148 ;	sincosf.c:56: if(iscos)
      00001B 30*00 4C         [24]  149 	jnb	b0,00105$
                                    150 ;	sincosf.c:58: y=fabsf(x)+HALF_PI;
      00001E E5*00            [12]  151 	mov	a,_bp
      000020 24 05            [12]  152 	add	a,#0x05
      000022 F8               [12]  153 	mov	r0,a
      000023 86 82            [24]  154 	mov	dpl,@r0
      000025 08               [12]  155 	inc	r0
      000026 86 83            [24]  156 	mov	dph,@r0
      000028 08               [12]  157 	inc	r0
      000029 86 F0            [24]  158 	mov	b,@r0
      00002B 08               [12]  159 	inc	r0
      00002C E6               [12]  160 	mov	a,@r0
      00002D C0*00            [24]  161 	push	bits
      00002F 12r00r00         [24]  162 	lcall	_fabsf
      000032 AA 82            [24]  163 	mov	r2,dpl
      000034 AB 83            [24]  164 	mov	r3,dph
      000036 AE F0            [24]  165 	mov	r6,b
      000038 FF               [12]  166 	mov	r7,a
      000039 D0*00            [24]  167 	pop	bits
      00003B C0*00            [24]  168 	push	bits
      00003D 74 DB            [12]  169 	mov	a,#0xDB
      00003F C0 E0            [24]  170 	push	acc
      000041 74 0F            [12]  171 	mov	a,#0x0F
      000043 C0 E0            [24]  172 	push	acc
      000045 74 C9            [12]  173 	mov	a,#0xC9
      000047 C0 E0            [24]  174 	push	acc
      000049 74 3F            [12]  175 	mov	a,#0x3F
      00004B C0 E0            [24]  176 	push	acc
      00004D 8A 82            [24]  177 	mov	dpl,r2
      00004F 8B 83            [24]  178 	mov	dph,r3
      000051 8E F0            [24]  179 	mov	b,r6
      000053 EF               [12]  180 	mov	a,r7
      000054 12r00r00         [24]  181 	lcall	___fsadd
      000057 AC 82            [24]  182 	mov	r4,dpl
      000059 AD 83            [24]  183 	mov	r5,dph
      00005B AE F0            [24]  184 	mov	r6,b
      00005D FF               [12]  185 	mov	r7,a
      00005E E5 81            [12]  186 	mov	a,sp
      000060 24 FC            [12]  187 	add	a,#0xfc
      000062 F5 81            [12]  188 	mov	sp,a
      000064 D0*00            [24]  189 	pop	bits
                                    190 ;	sincosf.c:59: sign=0;
      000066 C2*00            [12]  191 	clr	b1
      000068 80 66            [24]  192 	sjmp	00106$
      00006A                        193 00105$:
                                    194 ;	sincosf.c:63: if(x<0.0)
      00006A C0*00            [24]  195 	push	bits
      00006C E4               [12]  196 	clr	a
      00006D C0 E0            [24]  197 	push	acc
      00006F C0 E0            [24]  198 	push	acc
      000071 C0 E0            [24]  199 	push	acc
      000073 C0 E0            [24]  200 	push	acc
      000075 E5*00            [12]  201 	mov	a,_bp
      000077 24 05            [12]  202 	add	a,#0x05
      000079 F8               [12]  203 	mov	r0,a
      00007A 86 82            [24]  204 	mov	dpl,@r0
      00007C 08               [12]  205 	inc	r0
      00007D 86 83            [24]  206 	mov	dph,@r0
      00007F 08               [12]  207 	inc	r0
      000080 86 F0            [24]  208 	mov	b,@r0
      000082 08               [12]  209 	inc	r0
      000083 E6               [12]  210 	mov	a,@r0
      000084 12r00r00         [24]  211 	lcall	___fslt
      000087 AB 82            [24]  212 	mov	r3,dpl
      000089 E5 81            [12]  213 	mov	a,sp
      00008B 24 FC            [12]  214 	add	a,#0xfc
      00008D F5 81            [12]  215 	mov	sp,a
      00008F D0*00            [24]  216 	pop	bits
      000091 EB               [12]  217 	mov	a,r3
      000092 60 2A            [24]  218 	jz	00102$
                                    219 ;	sincosf.c:64: { y=-x; sign=1; }
      000094 E5*00            [12]  220 	mov	a,_bp
      000096 24 05            [12]  221 	add	a,#0x05
      000098 F8               [12]  222 	mov	r0,a
      000099 A9*00            [24]  223 	mov	r1,_bp
      00009B 09               [12]  224 	inc	r1
      00009C E6               [12]  225 	mov	a,@r0
      00009D F7               [12]  226 	mov	@r1,a
      00009E 08               [12]  227 	inc	r0
      00009F 09               [12]  228 	inc	r1
      0000A0 E6               [12]  229 	mov	a,@r0
      0000A1 F7               [12]  230 	mov	@r1,a
      0000A2 08               [12]  231 	inc	r0
      0000A3 09               [12]  232 	inc	r1
      0000A4 E6               [12]  233 	mov	a,@r0
      0000A5 F7               [12]  234 	mov	@r1,a
      0000A6 08               [12]  235 	inc	r0
      0000A7 E6               [12]  236 	mov	a,@r0
      0000A8 B2 E7            [12]  237 	cpl	acc.7
      0000AA 09               [12]  238 	inc	r1
      0000AB F7               [12]  239 	mov	@r1,a
      0000AC A8*00            [24]  240 	mov	r0,_bp
      0000AE 08               [12]  241 	inc	r0
      0000AF 86 04            [24]  242 	mov	ar4,@r0
      0000B1 08               [12]  243 	inc	r0
      0000B2 86 05            [24]  244 	mov	ar5,@r0
      0000B4 08               [12]  245 	inc	r0
      0000B5 86 06            [24]  246 	mov	ar6,@r0
      0000B7 08               [12]  247 	inc	r0
      0000B8 86 07            [24]  248 	mov	ar7,@r0
      0000BA D2*00            [12]  249 	setb	b1
      0000BC 80 12            [24]  250 	sjmp	00106$
      0000BE                        251 00102$:
                                    252 ;	sincosf.c:66: { y=x; sign=0; }
      0000BE E5*00            [12]  253 	mov	a,_bp
      0000C0 24 05            [12]  254 	add	a,#0x05
      0000C2 F8               [12]  255 	mov	r0,a
      0000C3 86 04            [24]  256 	mov	ar4,@r0
      0000C5 08               [12]  257 	inc	r0
      0000C6 86 05            [24]  258 	mov	ar5,@r0
      0000C8 08               [12]  259 	inc	r0
      0000C9 86 06            [24]  260 	mov	ar6,@r0
      0000CB 08               [12]  261 	inc	r0
      0000CC 86 07            [24]  262 	mov	ar7,@r0
      0000CE C2*00            [12]  263 	clr	b1
      0000D0                        264 00106$:
                                    265 ;	sincosf.c:69: if(y>YMAX)
      0000D0 C0 07            [24]  266 	push	ar7
      0000D2 C0 06            [24]  267 	push	ar6
      0000D4 C0 05            [24]  268 	push	ar5
      0000D6 C0 04            [24]  269 	push	ar4
      0000D8 C0*00            [24]  270 	push	bits
      0000DA E4               [12]  271 	clr	a
      0000DB C0 E0            [24]  272 	push	acc
      0000DD 74 0C            [12]  273 	mov	a,#0x0C
      0000DF C0 E0            [24]  274 	push	acc
      0000E1 74 49            [12]  275 	mov	a,#0x49
      0000E3 C0 E0            [24]  276 	push	acc
      0000E5 74 46            [12]  277 	mov	a,#0x46
      0000E7 C0 E0            [24]  278 	push	acc
      0000E9 8C 82            [24]  279 	mov	dpl,r4
      0000EB 8D 83            [24]  280 	mov	dph,r5
      0000ED 8E F0            [24]  281 	mov	b,r6
      0000EF EF               [12]  282 	mov	a,r7
      0000F0 12r00r00         [24]  283 	lcall	___fsgt
      0000F3 AB 82            [24]  284 	mov	r3,dpl
      0000F5 E5 81            [12]  285 	mov	a,sp
      0000F7 24 FC            [12]  286 	add	a,#0xfc
      0000F9 F5 81            [12]  287 	mov	sp,a
      0000FB D0*00            [24]  288 	pop	bits
      0000FD D0 04            [24]  289 	pop	ar4
      0000FF D0 05            [24]  290 	pop	ar5
      000101 D0 06            [24]  291 	pop	ar6
      000103 D0 07            [24]  292 	pop	ar7
      000105 EB               [12]  293 	mov	a,r3
      000106 60 11            [24]  294 	jz	00108$
                                    295 ;	sincosf.c:71: errno=ERANGE;
      000108 78r00            [12]  296 	mov	r0,#_errno
      00010A 74 22            [12]  297 	mov	a,#0x22
      00010C F2               [24]  298 	movx	@r0,a
      00010D 08               [12]  299 	inc	r0
      00010E E4               [12]  300 	clr	a
      00010F F2               [24]  301 	movx	@r0,a
                                    302 ;	sincosf.c:72: return 0.0;
      000110 90 00 00         [24]  303 	mov	dptr,#(0x00&0x00ff)
      000113 E4               [12]  304 	clr	a
      000114 F5 F0            [12]  305 	mov	b,a
      000116 02r05rE9         [24]  306 	ljmp	00115$
      000119                        307 00108$:
                                    308 ;	sincosf.c:76: N=((y*iPI)+0.5); /*y is positive*/
      000119 C0*00            [24]  309 	push	bits
      00011B C0 04            [24]  310 	push	ar4
      00011D C0 05            [24]  311 	push	ar5
      00011F C0 06            [24]  312 	push	ar6
      000121 C0 07            [24]  313 	push	ar7
      000123 90 F9 83         [24]  314 	mov	dptr,#0xF983
      000126 75 F0 A2         [24]  315 	mov	b,#0xA2
      000129 74 3E            [12]  316 	mov	a,#0x3E
      00012B 12r00r00         [24]  317 	lcall	___fsmul
      00012E AF 82            [24]  318 	mov	r7,dpl
      000130 AE 83            [24]  319 	mov	r6,dph
      000132 AD F0            [24]  320 	mov	r5,b
      000134 FC               [12]  321 	mov	r4,a
      000135 E5 81            [12]  322 	mov	a,sp
      000137 24 FC            [12]  323 	add	a,#0xfc
      000139 F5 81            [12]  324 	mov	sp,a
      00013B D0*00            [24]  325 	pop	bits
      00013D C0*00            [24]  326 	push	bits
      00013F E4               [12]  327 	clr	a
      000140 C0 E0            [24]  328 	push	acc
      000142 C0 E0            [24]  329 	push	acc
      000144 C0 E0            [24]  330 	push	acc
      000146 74 3F            [12]  331 	mov	a,#0x3F
      000148 C0 E0            [24]  332 	push	acc
      00014A 8F 82            [24]  333 	mov	dpl,r7
      00014C 8E 83            [24]  334 	mov	dph,r6
      00014E 8D F0            [24]  335 	mov	b,r5
      000150 EC               [12]  336 	mov	a,r4
      000151 12r00r00         [24]  337 	lcall	___fsadd
      000154 AF 82            [24]  338 	mov	r7,dpl
      000156 AE 83            [24]  339 	mov	r6,dph
      000158 AD F0            [24]  340 	mov	r5,b
      00015A FC               [12]  341 	mov	r4,a
      00015B E5 81            [12]  342 	mov	a,sp
      00015D 24 FC            [12]  343 	add	a,#0xfc
      00015F F5 81            [12]  344 	mov	sp,a
      000161 D0*00            [24]  345 	pop	bits
      000163 8F 82            [24]  346 	mov	dpl,r7
      000165 8E 83            [24]  347 	mov	dph,r6
      000167 8D F0            [24]  348 	mov	b,r5
      000169 EC               [12]  349 	mov	a,r4
      00016A C0*00            [24]  350 	push	bits
      00016C 12r00r00         [24]  351 	lcall	___fs2sint
      00016F AA 82            [24]  352 	mov	r2,dpl
      000171 AB 83            [24]  353 	mov	r3,dph
      000173 D0*00            [24]  354 	pop	bits
                                    355 ;	sincosf.c:79: if(N&1) sign=!sign;
      000175 EA               [12]  356 	mov	a,r2
      000176 30 E0 02         [24]  357 	jnb	acc.0,00110$
      000179 B2*00            [12]  358 	cpl	b1
      00017B                        359 00110$:
                                    360 ;	sincosf.c:81: XN=N;
      00017B 8A 82            [24]  361 	mov	dpl,r2
      00017D 8B 83            [24]  362 	mov	dph,r3
      00017F C0*00            [24]  363 	push	bits
      000181 12r00r00         [24]  364 	lcall	___sint2fs
      000184 AF 82            [24]  365 	mov	r7,dpl
      000186 AE 83            [24]  366 	mov	r6,dph
      000188 AD F0            [24]  367 	mov	r5,b
      00018A FC               [12]  368 	mov	r4,a
      00018B D0*00            [24]  369 	pop	bits
      00018D E5*00            [12]  370 	mov	a,_bp
      00018F 24 15            [12]  371 	add	a,#0x15
      000191 F8               [12]  372 	mov	r0,a
      000192 A6 07            [24]  373 	mov	@r0,ar7
      000194 08               [12]  374 	inc	r0
      000195 A6 06            [24]  375 	mov	@r0,ar6
      000197 08               [12]  376 	inc	r0
      000198 A6 05            [24]  377 	mov	@r0,ar5
      00019A 08               [12]  378 	inc	r0
      00019B A6 04            [24]  379 	mov	@r0,ar4
                                    380 ;	sincosf.c:83: if(iscos) XN-=0.5;
      00019D 30*00 3E         [24]  381 	jnb	b0,00112$
      0001A0 C0*00            [24]  382 	push	bits
      0001A2 E4               [12]  383 	clr	a
      0001A3 C0 E0            [24]  384 	push	acc
      0001A5 C0 E0            [24]  385 	push	acc
      0001A7 C0 E0            [24]  386 	push	acc
      0001A9 74 3F            [12]  387 	mov	a,#0x3F
      0001AB C0 E0            [24]  388 	push	acc
      0001AD E5*00            [12]  389 	mov	a,_bp
      0001AF 24 15            [12]  390 	add	a,#0x15
      0001B1 F8               [12]  391 	mov	r0,a
      0001B2 86 82            [24]  392 	mov	dpl,@r0
      0001B4 08               [12]  393 	inc	r0
      0001B5 86 83            [24]  394 	mov	dph,@r0
      0001B7 08               [12]  395 	inc	r0
      0001B8 86 F0            [24]  396 	mov	b,@r0
      0001BA 08               [12]  397 	inc	r0
      0001BB E6               [12]  398 	mov	a,@r0
      0001BC 12r00r00         [24]  399 	lcall	___fssub
      0001BF AF 82            [24]  400 	mov	r7,dpl
      0001C1 AE 83            [24]  401 	mov	r6,dph
      0001C3 AD F0            [24]  402 	mov	r5,b
      0001C5 FC               [12]  403 	mov	r4,a
      0001C6 E5 81            [12]  404 	mov	a,sp
      0001C8 24 FC            [12]  405 	add	a,#0xfc
      0001CA F5 81            [12]  406 	mov	sp,a
      0001CC D0*00            [24]  407 	pop	bits
      0001CE E5*00            [12]  408 	mov	a,_bp
      0001D0 24 15            [12]  409 	add	a,#0x15
      0001D2 F8               [12]  410 	mov	r0,a
      0001D3 A6 07            [24]  411 	mov	@r0,ar7
      0001D5 08               [12]  412 	inc	r0
      0001D6 A6 06            [24]  413 	mov	@r0,ar6
      0001D8 08               [12]  414 	inc	r0
      0001D9 A6 05            [24]  415 	mov	@r0,ar5
      0001DB 08               [12]  416 	inc	r0
      0001DC A6 04            [24]  417 	mov	@r0,ar4
      0001DE                        418 00112$:
                                    419 ;	sincosf.c:85: y=fabsf(x);
      0001DE E5*00            [12]  420 	mov	a,_bp
      0001E0 24 05            [12]  421 	add	a,#0x05
      0001E2 F8               [12]  422 	mov	r0,a
      0001E3 86 82            [24]  423 	mov	dpl,@r0
      0001E5 08               [12]  424 	inc	r0
      0001E6 86 83            [24]  425 	mov	dph,@r0
      0001E8 08               [12]  426 	inc	r0
      0001E9 86 F0            [24]  427 	mov	b,@r0
      0001EB 08               [12]  428 	inc	r0
      0001EC E6               [12]  429 	mov	a,@r0
      0001ED C0*00            [24]  430 	push	bits
      0001EF 12r00r00         [24]  431 	lcall	_fabsf
      0001F2 A8*00            [24]  432 	mov	r0,_bp
      0001F4 08               [12]  433 	inc	r0
      0001F5 A6 82            [24]  434 	mov	@r0,dpl
      0001F7 08               [12]  435 	inc	r0
      0001F8 A6 83            [24]  436 	mov	@r0,dph
      0001FA 08               [12]  437 	inc	r0
      0001FB A6 F0            [24]  438 	mov	@r0,b
      0001FD 08               [12]  439 	inc	r0
      0001FE F6               [12]  440 	mov	@r0,a
      0001FF D0*00            [24]  441 	pop	bits
      000201 A8*00            [24]  442 	mov	r0,_bp
      000203 08               [12]  443 	inc	r0
      000204 86 04            [24]  444 	mov	ar4,@r0
      000206 08               [12]  445 	inc	r0
      000207 86 05            [24]  446 	mov	ar5,@r0
      000209 08               [12]  447 	inc	r0
      00020A 86 06            [24]  448 	mov	ar6,@r0
      00020C 08               [12]  449 	inc	r0
      00020D 86 07            [24]  450 	mov	ar7,@r0
                                    451 ;	sincosf.c:86: r=(int)y;
      00020F 8C 82            [24]  452 	mov	dpl,r4
      000211 8D 83            [24]  453 	mov	dph,r5
      000213 8E F0            [24]  454 	mov	b,r6
      000215 EF               [12]  455 	mov	a,r7
      000216 C0 07            [24]  456 	push	ar7
      000218 C0 06            [24]  457 	push	ar6
      00021A C0 05            [24]  458 	push	ar5
      00021C C0 04            [24]  459 	push	ar4
      00021E C0*00            [24]  460 	push	bits
      000220 12r00r00         [24]  461 	lcall	___fs2sint
      000223 D0*00            [24]  462 	pop	bits
      000225 C0*00            [24]  463 	push	bits
      000227 12r00r00         [24]  464 	lcall	___sint2fs
      00022A C8               [12]  465 	xch	a,r0
      00022B E5*00            [12]  466 	mov	a,_bp
      00022D 24 0D            [12]  467 	add	a,#0x0d
      00022F C8               [12]  468 	xch	a,r0
      000230 A6 82            [24]  469 	mov	@r0,dpl
      000232 08               [12]  470 	inc	r0
      000233 A6 83            [24]  471 	mov	@r0,dph
      000235 08               [12]  472 	inc	r0
      000236 A6 F0            [24]  473 	mov	@r0,b
      000238 08               [12]  474 	inc	r0
      000239 F6               [12]  475 	mov	@r0,a
      00023A D0*00            [24]  476 	pop	bits
      00023C D0 04            [24]  477 	pop	ar4
      00023E D0 05            [24]  478 	pop	ar5
      000240 D0 06            [24]  479 	pop	ar6
      000242 D0 07            [24]  480 	pop	ar7
      000244 E5*00            [12]  481 	mov	a,_bp
      000246 24 0D            [12]  482 	add	a,#0x0d
                                    483 ;	sincosf.c:87: g=y-r;
      000248 C0*00            [24]  484 	push	bits
      00024A E5*00            [12]  485 	mov	a,_bp
      00024C 24 0D            [12]  486 	add	a,#0x0d
      00024E F8               [12]  487 	mov	r0,a
      00024F E6               [12]  488 	mov	a,@r0
      000250 C0 E0            [24]  489 	push	acc
      000252 08               [12]  490 	inc	r0
      000253 E6               [12]  491 	mov	a,@r0
      000254 C0 E0            [24]  492 	push	acc
      000256 08               [12]  493 	inc	r0
      000257 E6               [12]  494 	mov	a,@r0
      000258 C0 E0            [24]  495 	push	acc
      00025A 08               [12]  496 	inc	r0
      00025B E6               [12]  497 	mov	a,@r0
      00025C C0 E0            [24]  498 	push	acc
      00025E 8C 82            [24]  499 	mov	dpl,r4
      000260 8D 83            [24]  500 	mov	dph,r5
      000262 8E F0            [24]  501 	mov	b,r6
      000264 EF               [12]  502 	mov	a,r7
      000265 12r00r00         [24]  503 	lcall	___fssub
      000268 AF 82            [24]  504 	mov	r7,dpl
      00026A AE 83            [24]  505 	mov	r6,dph
      00026C AD F0            [24]  506 	mov	r5,b
      00026E FC               [12]  507 	mov	r4,a
      00026F E5 81            [12]  508 	mov	a,sp
      000271 24 FC            [12]  509 	add	a,#0xfc
      000273 F5 81            [12]  510 	mov	sp,a
      000275 D0*00            [24]  511 	pop	bits
      000277 E5*00            [12]  512 	mov	a,_bp
      000279 24 11            [12]  513 	add	a,#0x11
      00027B F8               [12]  514 	mov	r0,a
      00027C A6 07            [24]  515 	mov	@r0,ar7
      00027E 08               [12]  516 	inc	r0
      00027F A6 06            [24]  517 	mov	@r0,ar6
      000281 08               [12]  518 	inc	r0
      000282 A6 05            [24]  519 	mov	@r0,ar5
      000284 08               [12]  520 	inc	r0
      000285 A6 04            [24]  521 	mov	@r0,ar4
                                    522 ;	sincosf.c:88: f=((r-XN*C1)+g)-XN*C2;
      000287 C0*00            [24]  523 	push	bits
      000289 E5*00            [12]  524 	mov	a,_bp
      00028B 24 15            [12]  525 	add	a,#0x15
      00028D F8               [12]  526 	mov	r0,a
      00028E E6               [12]  527 	mov	a,@r0
      00028F C0 E0            [24]  528 	push	acc
      000291 08               [12]  529 	inc	r0
      000292 E6               [12]  530 	mov	a,@r0
      000293 C0 E0            [24]  531 	push	acc
      000295 08               [12]  532 	inc	r0
      000296 E6               [12]  533 	mov	a,@r0
      000297 C0 E0            [24]  534 	push	acc
      000299 08               [12]  535 	inc	r0
      00029A E6               [12]  536 	mov	a,@r0
      00029B C0 E0            [24]  537 	push	acc
      00029D 90 00 00         [24]  538 	mov	dptr,#0x0000
      0002A0 75 F0 49         [24]  539 	mov	b,#0x49
      0002A3 74 40            [12]  540 	mov	a,#0x40
      0002A5 12r00r00         [24]  541 	lcall	___fsmul
      0002A8 AA 82            [24]  542 	mov	r2,dpl
      0002AA AB 83            [24]  543 	mov	r3,dph
      0002AC AE F0            [24]  544 	mov	r6,b
      0002AE FF               [12]  545 	mov	r7,a
      0002AF E5 81            [12]  546 	mov	a,sp
      0002B1 24 FC            [12]  547 	add	a,#0xfc
      0002B3 F5 81            [12]  548 	mov	sp,a
      0002B5 D0*00            [24]  549 	pop	bits
      0002B7 C0*00            [24]  550 	push	bits
      0002B9 C0 02            [24]  551 	push	ar2
      0002BB C0 03            [24]  552 	push	ar3
      0002BD C0 06            [24]  553 	push	ar6
      0002BF C0 07            [24]  554 	push	ar7
      0002C1 E5*00            [12]  555 	mov	a,_bp
      0002C3 24 0D            [12]  556 	add	a,#0x0d
      0002C5 F8               [12]  557 	mov	r0,a
      0002C6 86 82            [24]  558 	mov	dpl,@r0
      0002C8 08               [12]  559 	inc	r0
      0002C9 86 83            [24]  560 	mov	dph,@r0
      0002CB 08               [12]  561 	inc	r0
      0002CC 86 F0            [24]  562 	mov	b,@r0
      0002CE 08               [12]  563 	inc	r0
      0002CF E6               [12]  564 	mov	a,@r0
      0002D0 12r00r00         [24]  565 	lcall	___fssub
      0002D3 AC 82            [24]  566 	mov	r4,dpl
      0002D5 AD 83            [24]  567 	mov	r5,dph
      0002D7 AE F0            [24]  568 	mov	r6,b
      0002D9 FF               [12]  569 	mov	r7,a
      0002DA E5 81            [12]  570 	mov	a,sp
      0002DC 24 FC            [12]  571 	add	a,#0xfc
      0002DE F5 81            [12]  572 	mov	sp,a
      0002E0 D0*00            [24]  573 	pop	bits
      0002E2 C0*00            [24]  574 	push	bits
      0002E4 E5*00            [12]  575 	mov	a,_bp
      0002E6 24 11            [12]  576 	add	a,#0x11
      0002E8 F8               [12]  577 	mov	r0,a
      0002E9 E6               [12]  578 	mov	a,@r0
      0002EA C0 E0            [24]  579 	push	acc
      0002EC 08               [12]  580 	inc	r0
      0002ED E6               [12]  581 	mov	a,@r0
      0002EE C0 E0            [24]  582 	push	acc
      0002F0 08               [12]  583 	inc	r0
      0002F1 E6               [12]  584 	mov	a,@r0
      0002F2 C0 E0            [24]  585 	push	acc
      0002F4 08               [12]  586 	inc	r0
      0002F5 E6               [12]  587 	mov	a,@r0
      0002F6 C0 E0            [24]  588 	push	acc
      0002F8 8C 82            [24]  589 	mov	dpl,r4
      0002FA 8D 83            [24]  590 	mov	dph,r5
      0002FC 8E F0            [24]  591 	mov	b,r6
      0002FE EF               [12]  592 	mov	a,r7
      0002FF 12r00r00         [24]  593 	lcall	___fsadd
      000302 A8*00            [24]  594 	mov	r0,_bp
      000304 08               [12]  595 	inc	r0
      000305 A6 82            [24]  596 	mov	@r0,dpl
      000307 08               [12]  597 	inc	r0
      000308 A6 83            [24]  598 	mov	@r0,dph
      00030A 08               [12]  599 	inc	r0
      00030B A6 F0            [24]  600 	mov	@r0,b
      00030D 08               [12]  601 	inc	r0
      00030E F6               [12]  602 	mov	@r0,a
      00030F E5 81            [12]  603 	mov	a,sp
      000311 24 FC            [12]  604 	add	a,#0xfc
      000313 F5 81            [12]  605 	mov	sp,a
      000315 D0*00            [24]  606 	pop	bits
      000317 C0*00            [24]  607 	push	bits
      000319 E5*00            [12]  608 	mov	a,_bp
      00031B 24 15            [12]  609 	add	a,#0x15
      00031D F8               [12]  610 	mov	r0,a
      00031E E6               [12]  611 	mov	a,@r0
      00031F C0 E0            [24]  612 	push	acc
      000321 08               [12]  613 	inc	r0
      000322 E6               [12]  614 	mov	a,@r0
      000323 C0 E0            [24]  615 	push	acc
      000325 08               [12]  616 	inc	r0
      000326 E6               [12]  617 	mov	a,@r0
      000327 C0 E0            [24]  618 	push	acc
      000329 08               [12]  619 	inc	r0
      00032A E6               [12]  620 	mov	a,@r0
      00032B C0 E0            [24]  621 	push	acc
      00032D 90 AA 22         [24]  622 	mov	dptr,#0xAA22
      000330 75 F0 7D         [24]  623 	mov	b,#0x7D
      000333 74 3A            [12]  624 	mov	a,#0x3A
      000335 12r00r00         [24]  625 	lcall	___fsmul
      000338 AA 82            [24]  626 	mov	r2,dpl
      00033A AB 83            [24]  627 	mov	r3,dph
      00033C AE F0            [24]  628 	mov	r6,b
      00033E FF               [12]  629 	mov	r7,a
      00033F E5 81            [12]  630 	mov	a,sp
      000341 24 FC            [12]  631 	add	a,#0xfc
      000343 F5 81            [12]  632 	mov	sp,a
      000345 D0*00            [24]  633 	pop	bits
      000347 C0*00            [24]  634 	push	bits
      000349 C0 02            [24]  635 	push	ar2
      00034B C0 03            [24]  636 	push	ar3
      00034D C0 06            [24]  637 	push	ar6
      00034F C0 07            [24]  638 	push	ar7
      000351 A8*00            [24]  639 	mov	r0,_bp
      000353 08               [12]  640 	inc	r0
      000354 86 82            [24]  641 	mov	dpl,@r0
      000356 08               [12]  642 	inc	r0
      000357 86 83            [24]  643 	mov	dph,@r0
      000359 08               [12]  644 	inc	r0
      00035A 86 F0            [24]  645 	mov	b,@r0
      00035C 08               [12]  646 	inc	r0
      00035D E6               [12]  647 	mov	a,@r0
      00035E 12r00r00         [24]  648 	lcall	___fssub
      000361 AC 82            [24]  649 	mov	r4,dpl
      000363 AD 83            [24]  650 	mov	r5,dph
      000365 AE F0            [24]  651 	mov	r6,b
      000367 FF               [12]  652 	mov	r7,a
      000368 E5 81            [12]  653 	mov	a,sp
      00036A 24 FC            [12]  654 	add	a,#0xfc
      00036C F5 81            [12]  655 	mov	sp,a
      00036E D0*00            [24]  656 	pop	bits
      000370 E5*00            [12]  657 	mov	a,_bp
      000372 24 09            [12]  658 	add	a,#0x09
      000374 F8               [12]  659 	mov	r0,a
      000375 A6 04            [24]  660 	mov	@r0,ar4
      000377 08               [12]  661 	inc	r0
      000378 A6 05            [24]  662 	mov	@r0,ar5
      00037A 08               [12]  663 	inc	r0
      00037B A6 06            [24]  664 	mov	@r0,ar6
      00037D 08               [12]  665 	inc	r0
      00037E A6 07            [24]  666 	mov	@r0,ar7
                                    667 ;	sincosf.c:90: g=f*f;
      000380 C0*00            [24]  668 	push	bits
      000382 E5*00            [12]  669 	mov	a,_bp
      000384 24 09            [12]  670 	add	a,#0x09
      000386 F8               [12]  671 	mov	r0,a
      000387 E6               [12]  672 	mov	a,@r0
      000388 C0 E0            [24]  673 	push	acc
      00038A 08               [12]  674 	inc	r0
      00038B E6               [12]  675 	mov	a,@r0
      00038C C0 E0            [24]  676 	push	acc
      00038E 08               [12]  677 	inc	r0
      00038F E6               [12]  678 	mov	a,@r0
      000390 C0 E0            [24]  679 	push	acc
      000392 08               [12]  680 	inc	r0
      000393 E6               [12]  681 	mov	a,@r0
      000394 C0 E0            [24]  682 	push	acc
      000396 E5*00            [12]  683 	mov	a,_bp
      000398 24 09            [12]  684 	add	a,#0x09
      00039A F8               [12]  685 	mov	r0,a
      00039B 86 82            [24]  686 	mov	dpl,@r0
      00039D 08               [12]  687 	inc	r0
      00039E 86 83            [24]  688 	mov	dph,@r0
      0003A0 08               [12]  689 	inc	r0
      0003A1 86 F0            [24]  690 	mov	b,@r0
      0003A3 08               [12]  691 	inc	r0
      0003A4 E6               [12]  692 	mov	a,@r0
      0003A5 12r00r00         [24]  693 	lcall	___fsmul
      0003A8 AA 82            [24]  694 	mov	r2,dpl
      0003AA AB 83            [24]  695 	mov	r3,dph
      0003AC AE F0            [24]  696 	mov	r6,b
      0003AE FF               [12]  697 	mov	r7,a
      0003AF E5 81            [12]  698 	mov	a,sp
      0003B1 24 FC            [12]  699 	add	a,#0xfc
      0003B3 F5 81            [12]  700 	mov	sp,a
      0003B5 D0*00            [24]  701 	pop	bits
      0003B7 E5*00            [12]  702 	mov	a,_bp
      0003B9 24 11            [12]  703 	add	a,#0x11
      0003BB F8               [12]  704 	mov	r0,a
      0003BC A6 02            [24]  705 	mov	@r0,ar2
      0003BE 08               [12]  706 	inc	r0
      0003BF A6 03            [24]  707 	mov	@r0,ar3
      0003C1 08               [12]  708 	inc	r0
      0003C2 A6 06            [24]  709 	mov	@r0,ar6
      0003C4 08               [12]  710 	inc	r0
      0003C5 A6 07            [24]  711 	mov	@r0,ar7
                                    712 ;	sincosf.c:91: if(g>EPS2) //Used to be if(fabsf(f)>EPS)
      0003C7 C0*00            [24]  713 	push	bits
      0003C9 74 F3            [12]  714 	mov	a,#0xF3
      0003CB C0 E0            [24]  715 	push	acc
      0003CD 74 FF            [12]  716 	mov	a,#0xFF
      0003CF C0 E0            [24]  717 	push	acc
      0003D1 74 7F            [12]  718 	mov	a,#0x7F
      0003D3 C0 E0            [24]  719 	push	acc
      0003D5 74 33            [12]  720 	mov	a,#0x33
      0003D7 C0 E0            [24]  721 	push	acc
      0003D9 E5*00            [12]  722 	mov	a,_bp
      0003DB 24 11            [12]  723 	add	a,#0x11
      0003DD F8               [12]  724 	mov	r0,a
      0003DE 86 82            [24]  725 	mov	dpl,@r0
      0003E0 08               [12]  726 	inc	r0
      0003E1 86 83            [24]  727 	mov	dph,@r0
      0003E3 08               [12]  728 	inc	r0
      0003E4 86 F0            [24]  729 	mov	b,@r0
      0003E6 08               [12]  730 	inc	r0
      0003E7 E6               [12]  731 	mov	a,@r0
      0003E8 12r00r00         [24]  732 	lcall	___fsgt
      0003EB AF 82            [24]  733 	mov	r7,dpl
      0003ED E5 81            [12]  734 	mov	a,sp
      0003EF 24 FC            [12]  735 	add	a,#0xfc
      0003F1 F5 81            [12]  736 	mov	sp,a
      0003F3 D0*00            [24]  737 	pop	bits
      0003F5 EF               [12]  738 	mov	a,r7
      0003F6 70 03            [24]  739 	jnz	00145$
      0003F8 02r05rBB         [24]  740 	ljmp	00114$
      0003FB                        741 00145$:
                                    742 ;	sincosf.c:93: r=(((r4*g+r3)*g+r2)*g+r1)*g;
      0003FB C0*00            [24]  743 	push	bits
      0003FD E5*00            [12]  744 	mov	a,_bp
      0003FF 24 11            [12]  745 	add	a,#0x11
      000401 F8               [12]  746 	mov	r0,a
      000402 E6               [12]  747 	mov	a,@r0
      000403 C0 E0            [24]  748 	push	acc
      000405 08               [12]  749 	inc	r0
      000406 E6               [12]  750 	mov	a,@r0
      000407 C0 E0            [24]  751 	push	acc
      000409 08               [12]  752 	inc	r0
      00040A E6               [12]  753 	mov	a,@r0
      00040B C0 E0            [24]  754 	push	acc
      00040D 08               [12]  755 	inc	r0
      00040E E6               [12]  756 	mov	a,@r0
      00040F C0 E0            [24]  757 	push	acc
      000411 90 9C 5B         [24]  758 	mov	dptr,#0x9C5B
      000414 75 F0 2E         [24]  759 	mov	b,#0x2E
      000417 74 36            [12]  760 	mov	a,#0x36
      000419 12r00r00         [24]  761 	lcall	___fsmul
      00041C AC 82            [24]  762 	mov	r4,dpl
      00041E AD 83            [24]  763 	mov	r5,dph
      000420 AE F0            [24]  764 	mov	r6,b
      000422 FF               [12]  765 	mov	r7,a
      000423 E5 81            [12]  766 	mov	a,sp
      000425 24 FC            [12]  767 	add	a,#0xfc
      000427 F5 81            [12]  768 	mov	sp,a
      000429 D0*00            [24]  769 	pop	bits
      00042B C0*00            [24]  770 	push	bits
      00042D 74 22            [12]  771 	mov	a,#0x22
      00042F C0 E0            [24]  772 	push	acc
      000431 74 B2            [12]  773 	mov	a,#0xB2
      000433 C0 E0            [24]  774 	push	acc
      000435 74 4F            [12]  775 	mov	a,#0x4F
      000437 C0 E0            [24]  776 	push	acc
      000439 74 B9            [12]  777 	mov	a,#0xB9
      00043B C0 E0            [24]  778 	push	acc
      00043D 8C 82            [24]  779 	mov	dpl,r4
      00043F 8D 83            [24]  780 	mov	dph,r5
      000441 8E F0            [24]  781 	mov	b,r6
      000443 EF               [12]  782 	mov	a,r7
      000444 12r00r00         [24]  783 	lcall	___fsadd
      000447 AC 82            [24]  784 	mov	r4,dpl
      000449 AD 83            [24]  785 	mov	r5,dph
      00044B AE F0            [24]  786 	mov	r6,b
      00044D FF               [12]  787 	mov	r7,a
      00044E E5 81            [12]  788 	mov	a,sp
      000450 24 FC            [12]  789 	add	a,#0xfc
      000452 F5 81            [12]  790 	mov	sp,a
      000454 D0*00            [24]  791 	pop	bits
      000456 C0*00            [24]  792 	push	bits
      000458 E5*00            [12]  793 	mov	a,_bp
      00045A 24 11            [12]  794 	add	a,#0x11
      00045C F8               [12]  795 	mov	r0,a
      00045D E6               [12]  796 	mov	a,@r0
      00045E C0 E0            [24]  797 	push	acc
      000460 08               [12]  798 	inc	r0
      000461 E6               [12]  799 	mov	a,@r0
      000462 C0 E0            [24]  800 	push	acc
      000464 08               [12]  801 	inc	r0
      000465 E6               [12]  802 	mov	a,@r0
      000466 C0 E0            [24]  803 	push	acc
      000468 08               [12]  804 	inc	r0
      000469 E6               [12]  805 	mov	a,@r0
      00046A C0 E0            [24]  806 	push	acc
      00046C 8C 82            [24]  807 	mov	dpl,r4
      00046E 8D 83            [24]  808 	mov	dph,r5
      000470 8E F0            [24]  809 	mov	b,r6
      000472 EF               [12]  810 	mov	a,r7
      000473 12r00r00         [24]  811 	lcall	___fsmul
      000476 AC 82            [24]  812 	mov	r4,dpl
      000478 AD 83            [24]  813 	mov	r5,dph
      00047A AE F0            [24]  814 	mov	r6,b
      00047C FF               [12]  815 	mov	r7,a
      00047D E5 81            [12]  816 	mov	a,sp
      00047F 24 FC            [12]  817 	add	a,#0xfc
      000481 F5 81            [12]  818 	mov	sp,a
      000483 D0*00            [24]  819 	pop	bits
      000485 C0*00            [24]  820 	push	bits
      000487 74 3E            [12]  821 	mov	a,#0x3E
      000489 C0 E0            [24]  822 	push	acc
      00048B 74 87            [12]  823 	mov	a,#0x87
      00048D C0 E0            [24]  824 	push	acc
      00048F 74 08            [12]  825 	mov	a,#0x08
      000491 C0 E0            [24]  826 	push	acc
      000493 74 3C            [12]  827 	mov	a,#0x3C
      000495 C0 E0            [24]  828 	push	acc
      000497 8C 82            [24]  829 	mov	dpl,r4
      000499 8D 83            [24]  830 	mov	dph,r5
      00049B 8E F0            [24]  831 	mov	b,r6
      00049D EF               [12]  832 	mov	a,r7
      00049E 12r00r00         [24]  833 	lcall	___fsadd
      0004A1 AC 82            [24]  834 	mov	r4,dpl
      0004A3 AD 83            [24]  835 	mov	r5,dph
      0004A5 AE F0            [24]  836 	mov	r6,b
      0004A7 FF               [12]  837 	mov	r7,a
      0004A8 E5 81            [12]  838 	mov	a,sp
      0004AA 24 FC            [12]  839 	add	a,#0xfc
      0004AC F5 81            [12]  840 	mov	sp,a
      0004AE D0*00            [24]  841 	pop	bits
      0004B0 C0*00            [24]  842 	push	bits
      0004B2 E5*00            [12]  843 	mov	a,_bp
      0004B4 24 11            [12]  844 	add	a,#0x11
      0004B6 F8               [12]  845 	mov	r0,a
      0004B7 E6               [12]  846 	mov	a,@r0
      0004B8 C0 E0            [24]  847 	push	acc
      0004BA 08               [12]  848 	inc	r0
      0004BB E6               [12]  849 	mov	a,@r0
      0004BC C0 E0            [24]  850 	push	acc
      0004BE 08               [12]  851 	inc	r0
      0004BF E6               [12]  852 	mov	a,@r0
      0004C0 C0 E0            [24]  853 	push	acc
      0004C2 08               [12]  854 	inc	r0
      0004C3 E6               [12]  855 	mov	a,@r0
      0004C4 C0 E0            [24]  856 	push	acc
      0004C6 8C 82            [24]  857 	mov	dpl,r4
      0004C8 8D 83            [24]  858 	mov	dph,r5
      0004CA 8E F0            [24]  859 	mov	b,r6
      0004CC EF               [12]  860 	mov	a,r7
      0004CD 12r00r00         [24]  861 	lcall	___fsmul
      0004D0 AC 82            [24]  862 	mov	r4,dpl
      0004D2 AD 83            [24]  863 	mov	r5,dph
      0004D4 AE F0            [24]  864 	mov	r6,b
      0004D6 FF               [12]  865 	mov	r7,a
      0004D7 E5 81            [12]  866 	mov	a,sp
      0004D9 24 FC            [12]  867 	add	a,#0xfc
      0004DB F5 81            [12]  868 	mov	sp,a
      0004DD D0*00            [24]  869 	pop	bits
      0004DF C0*00            [24]  870 	push	bits
      0004E1 74 A4            [12]  871 	mov	a,#0xA4
      0004E3 C0 E0            [24]  872 	push	acc
      0004E5 74 AA            [12]  873 	mov	a,#0xAA
      0004E7 C0 E0            [24]  874 	push	acc
      0004E9 74 2A            [12]  875 	mov	a,#0x2A
      0004EB C0 E0            [24]  876 	push	acc
      0004ED 74 BE            [12]  877 	mov	a,#0xBE
      0004EF C0 E0            [24]  878 	push	acc
      0004F1 8C 82            [24]  879 	mov	dpl,r4
      0004F3 8D 83            [24]  880 	mov	dph,r5
      0004F5 8E F0            [24]  881 	mov	b,r6
      0004F7 EF               [12]  882 	mov	a,r7
      0004F8 12r00r00         [24]  883 	lcall	___fsadd
      0004FB AC 82            [24]  884 	mov	r4,dpl
      0004FD AD 83            [24]  885 	mov	r5,dph
      0004FF AE F0            [24]  886 	mov	r6,b
      000501 FF               [12]  887 	mov	r7,a
      000502 E5 81            [12]  888 	mov	a,sp
      000504 24 FC            [12]  889 	add	a,#0xfc
      000506 F5 81            [12]  890 	mov	sp,a
      000508 D0*00            [24]  891 	pop	bits
      00050A C0*00            [24]  892 	push	bits
      00050C E5*00            [12]  893 	mov	a,_bp
      00050E 24 11            [12]  894 	add	a,#0x11
      000510 F8               [12]  895 	mov	r0,a
      000511 E6               [12]  896 	mov	a,@r0
      000512 C0 E0            [24]  897 	push	acc
      000514 08               [12]  898 	inc	r0
      000515 E6               [12]  899 	mov	a,@r0
      000516 C0 E0            [24]  900 	push	acc
      000518 08               [12]  901 	inc	r0
      000519 E6               [12]  902 	mov	a,@r0
      00051A C0 E0            [24]  903 	push	acc
      00051C 08               [12]  904 	inc	r0
      00051D E6               [12]  905 	mov	a,@r0
      00051E C0 E0            [24]  906 	push	acc
      000520 8C 82            [24]  907 	mov	dpl,r4
      000522 8D 83            [24]  908 	mov	dph,r5
      000524 8E F0            [24]  909 	mov	b,r6
      000526 EF               [12]  910 	mov	a,r7
      000527 12r00r00         [24]  911 	lcall	___fsmul
      00052A AC 82            [24]  912 	mov	r4,dpl
      00052C AD 83            [24]  913 	mov	r5,dph
      00052E AE F0            [24]  914 	mov	r6,b
      000530 FF               [12]  915 	mov	r7,a
      000531 E5 81            [12]  916 	mov	a,sp
      000533 24 FC            [12]  917 	add	a,#0xfc
      000535 F5 81            [12]  918 	mov	sp,a
      000537 D0*00            [24]  919 	pop	bits
      000539 E5*00            [12]  920 	mov	a,_bp
      00053B 24 0D            [12]  921 	add	a,#0x0d
      00053D F8               [12]  922 	mov	r0,a
      00053E A6 04            [24]  923 	mov	@r0,ar4
      000540 08               [12]  924 	inc	r0
      000541 A6 05            [24]  925 	mov	@r0,ar5
      000543 08               [12]  926 	inc	r0
      000544 A6 06            [24]  927 	mov	@r0,ar6
      000546 08               [12]  928 	inc	r0
      000547 A6 07            [24]  929 	mov	@r0,ar7
                                    930 ;	sincosf.c:94: f+=f*r;
      000549 C0*00            [24]  931 	push	bits
      00054B E5*00            [12]  932 	mov	a,_bp
      00054D 24 0D            [12]  933 	add	a,#0x0d
      00054F F8               [12]  934 	mov	r0,a
      000550 E6               [12]  935 	mov	a,@r0
      000551 C0 E0            [24]  936 	push	acc
      000553 08               [12]  937 	inc	r0
      000554 E6               [12]  938 	mov	a,@r0
      000555 C0 E0            [24]  939 	push	acc
      000557 08               [12]  940 	inc	r0
      000558 E6               [12]  941 	mov	a,@r0
      000559 C0 E0            [24]  942 	push	acc
      00055B 08               [12]  943 	inc	r0
      00055C E6               [12]  944 	mov	a,@r0
      00055D C0 E0            [24]  945 	push	acc
      00055F E5*00            [12]  946 	mov	a,_bp
      000561 24 09            [12]  947 	add	a,#0x09
      000563 F8               [12]  948 	mov	r0,a
      000564 86 82            [24]  949 	mov	dpl,@r0
      000566 08               [12]  950 	inc	r0
      000567 86 83            [24]  951 	mov	dph,@r0
      000569 08               [12]  952 	inc	r0
      00056A 86 F0            [24]  953 	mov	b,@r0
      00056C 08               [12]  954 	inc	r0
      00056D E6               [12]  955 	mov	a,@r0
      00056E 12r00r00         [24]  956 	lcall	___fsmul
      000571 AC 82            [24]  957 	mov	r4,dpl
      000573 AD 83            [24]  958 	mov	r5,dph
      000575 AE F0            [24]  959 	mov	r6,b
      000577 FF               [12]  960 	mov	r7,a
      000578 E5 81            [12]  961 	mov	a,sp
      00057A 24 FC            [12]  962 	add	a,#0xfc
      00057C F5 81            [12]  963 	mov	sp,a
      00057E D0*00            [24]  964 	pop	bits
      000580 C0*00            [24]  965 	push	bits
      000582 C0 04            [24]  966 	push	ar4
      000584 C0 05            [24]  967 	push	ar5
      000586 C0 06            [24]  968 	push	ar6
      000588 C0 07            [24]  969 	push	ar7
      00058A E5*00            [12]  970 	mov	a,_bp
      00058C 24 09            [12]  971 	add	a,#0x09
      00058E F8               [12]  972 	mov	r0,a
      00058F 86 82            [24]  973 	mov	dpl,@r0
      000591 08               [12]  974 	inc	r0
      000592 86 83            [24]  975 	mov	dph,@r0
      000594 08               [12]  976 	inc	r0
      000595 86 F0            [24]  977 	mov	b,@r0
      000597 08               [12]  978 	inc	r0
      000598 E6               [12]  979 	mov	a,@r0
      000599 12r00r00         [24]  980 	lcall	___fsadd
      00059C AC 82            [24]  981 	mov	r4,dpl
      00059E AD 83            [24]  982 	mov	r5,dph
      0005A0 AE F0            [24]  983 	mov	r6,b
      0005A2 FF               [12]  984 	mov	r7,a
      0005A3 E5 81            [12]  985 	mov	a,sp
      0005A5 24 FC            [12]  986 	add	a,#0xfc
      0005A7 F5 81            [12]  987 	mov	sp,a
      0005A9 D0*00            [24]  988 	pop	bits
      0005AB E5*00            [12]  989 	mov	a,_bp
      0005AD 24 09            [12]  990 	add	a,#0x09
      0005AF F8               [12]  991 	mov	r0,a
      0005B0 A6 04            [24]  992 	mov	@r0,ar4
      0005B2 08               [12]  993 	inc	r0
      0005B3 A6 05            [24]  994 	mov	@r0,ar5
      0005B5 08               [12]  995 	inc	r0
      0005B6 A6 06            [24]  996 	mov	@r0,ar6
      0005B8 08               [12]  997 	inc	r0
      0005B9 A6 07            [24]  998 	mov	@r0,ar7
      0005BB                        999 00114$:
                                   1000 ;	sincosf.c:96: return (sign?-f:f);
      0005BB 30*00 14         [24] 1001 	jnb	b1,00117$
      0005BE E5*00            [12] 1002 	mov	a,_bp
      0005C0 24 09            [12] 1003 	add	a,#0x09
      0005C2 F8               [12] 1004 	mov	r0,a
      0005C3 86 04            [24] 1005 	mov	ar4,@r0
      0005C5 08               [12] 1006 	inc	r0
      0005C6 86 05            [24] 1007 	mov	ar5,@r0
      0005C8 08               [12] 1008 	inc	r0
      0005C9 86 06            [24] 1009 	mov	ar6,@r0
      0005CB 08               [12] 1010 	inc	r0
      0005CC E6               [12] 1011 	mov	a,@r0
      0005CD B2 E7            [12] 1012 	cpl	acc.7
      0005CF FF               [12] 1013 	mov	r7,a
      0005D0 80 10            [24] 1014 	sjmp	00118$
      0005D2                       1015 00117$:
      0005D2 E5*00            [12] 1016 	mov	a,_bp
      0005D4 24 09            [12] 1017 	add	a,#0x09
      0005D6 F8               [12] 1018 	mov	r0,a
      0005D7 86 04            [24] 1019 	mov	ar4,@r0
      0005D9 08               [12] 1020 	inc	r0
      0005DA 86 05            [24] 1021 	mov	ar5,@r0
      0005DC 08               [12] 1022 	inc	r0
      0005DD 86 06            [24] 1023 	mov	ar6,@r0
      0005DF 08               [12] 1024 	inc	r0
      0005E0 86 07            [24] 1025 	mov	ar7,@r0
      0005E2                       1026 00118$:
      0005E2 8C 82            [24] 1027 	mov	dpl,r4
      0005E4 8D 83            [24] 1028 	mov	dph,r5
      0005E6 8E F0            [24] 1029 	mov	b,r6
      0005E8 EF               [12] 1030 	mov	a,r7
      0005E9                       1031 00115$:
      0005E9 85*00 81         [24] 1032 	mov	sp,_bp
      0005EC D0*00            [24] 1033 	pop	_bp
      0005EE 22               [24] 1034 	ret
                                   1035 	.area CSEG    (CODE)
                                   1036 	.area CONST   (CODE)
                                   1037 	.area XINIT   (CODE)
                                   1038 	.area CABS    (ABS,CODE)
