                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:54 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl ___day
                                     13 	.globl ___month
                                     14 	.globl _RtcRead
                                     15 	.globl _sprintf
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; special function bits
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable register banks
                                     34 ;--------------------------------------------------------
                                     35 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         36 	.ds 8
                                     37 ;--------------------------------------------------------
                                     38 ; internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DSEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable items in internal ram 
                                     43 ;--------------------------------------------------------
                                     44 ;--------------------------------------------------------
                                     45 ; indirectly addressable internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area ISEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; absolute internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area IABS    (ABS,DATA)
                                     52 	.area IABS    (ABS,DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; bit data
                                     55 ;--------------------------------------------------------
                                     56 	.area BSEG    (BIT)
                                     57 ;--------------------------------------------------------
                                     58 ; paged external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area PSEG    (PAG,XDATA)
      000000                         61 _ascTimeBuffer:
      000000                         62 	.ds 32
      000020                         63 _lastTime:
      000020                         64 	.ds 12
                                     65 ;--------------------------------------------------------
                                     66 ; external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XSEG    (XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; external initialized ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT0 (CODE)
                                     79 	.area GSINIT1 (CODE)
                                     80 	.area GSINIT2 (CODE)
                                     81 	.area GSINIT3 (CODE)
                                     82 	.area GSINIT4 (CODE)
                                     83 	.area GSINIT5 (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area CSEG    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'RtcRead'
                                    105 ;------------------------------------------------------------
                                    106 ;timeptr                   Allocated to registers 
                                    107 ;------------------------------------------------------------
                                    108 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                                    109 ;	-----------------------------------------
                                    110 ;	 function RtcRead
                                    111 ;	-----------------------------------------
      000000                        112 _RtcRead:
                           000007   113 	ar7 = 0x07
                           000006   114 	ar6 = 0x06
                           000005   115 	ar5 = 0x05
                           000004   116 	ar4 = 0x04
                           000003   117 	ar3 = 0x03
                           000002   118 	ar2 = 0x02
                           000001   119 	ar1 = 0x01
                           000000   120 	ar0 = 0x00
                                    121 ;	time.c:45: return 0;
      000000 75 82 00         [24]  122 	mov	dpl,#0x00
      000003 22               [24]  123 	ret
                                    124 ;------------------------------------------------------------
                                    125 ;Allocation info for local variables in function 'time'
                                    126 ;------------------------------------------------------------
                                    127 ;timeptr                   Allocated to stack - _bp +1
                                    128 ;now                       Allocated to stack - _bp +4
                                    129 ;t                         Allocated to stack - _bp +16
                                    130 ;------------------------------------------------------------
                                    131 ;	time.c:50: time_t time(time_t *timeptr) {
                                    132 ;	-----------------------------------------
                                    133 ;	 function time
                                    134 ;	-----------------------------------------
      000004                        135 _time:
      000004 C0*00            [24]  136 	push	_bp
      000006 85 81*00         [24]  137 	mov	_bp,sp
      000009 C0 82            [24]  138 	push	dpl
      00000B C0 83            [24]  139 	push	dph
      00000D C0 F0            [24]  140 	push	b
      00000F E5 81            [12]  141 	mov	a,sp
      000011 24 10            [12]  142 	add	a,#0x10
      000013 F5 81            [12]  143 	mov	sp,a
                                    144 ;	time.c:52: time_t t=-1;
      000015 E5*00            [12]  145 	mov	a,_bp
      000017 24 10            [12]  146 	add	a,#0x10
      000019 F8               [12]  147 	mov	r0,a
      00001A 74 FF            [12]  148 	mov	a,#0xFF
      00001C F6               [12]  149 	mov	@r0,a
      00001D 08               [12]  150 	inc	r0
      00001E F6               [12]  151 	mov	@r0,a
      00001F 08               [12]  152 	inc	r0
      000020 F6               [12]  153 	mov	@r0,a
      000021 08               [12]  154 	inc	r0
      000022 F6               [12]  155 	mov	@r0,a
                                    156 ;	time.c:54: if (RtcRead(&now)) {
      000023 E5*00            [12]  157 	mov	a,_bp
      000025 24 04            [12]  158 	add	a,#0x04
      000027 FE               [12]  159 	mov	r6,a
      000028 FC               [12]  160 	mov	r4,a
      000029 7D 00            [12]  161 	mov	r5,#0x00
      00002B 7F 40            [12]  162 	mov	r7,#0x40
      00002D 8C 82            [24]  163 	mov	dpl,r4
      00002F 8D 83            [24]  164 	mov	dph,r5
      000031 8F F0            [24]  165 	mov	b,r7
      000033 C0 06            [24]  166 	push	ar6
      000035 12r00r00         [24]  167 	lcall	_RtcRead
      000038 E5 82            [12]  168 	mov	a,dpl
      00003A D0 06            [24]  169 	pop	ar6
      00003C 60 24            [24]  170 	jz	00102$
                                    171 ;	time.c:55: t=mktime(&now);
      00003E 7F 00            [12]  172 	mov	r7,#0x00
      000040 7D 40            [12]  173 	mov	r5,#0x40
      000042 8E 82            [24]  174 	mov	dpl,r6
      000044 8F 83            [24]  175 	mov	dph,r7
      000046 8D F0            [24]  176 	mov	b,r5
      000048 12r06r20         [24]  177 	lcall	_mktime
      00004B AC 82            [24]  178 	mov	r4,dpl
      00004D AD 83            [24]  179 	mov	r5,dph
      00004F AE F0            [24]  180 	mov	r6,b
      000051 FF               [12]  181 	mov	r7,a
      000052 E5*00            [12]  182 	mov	a,_bp
      000054 24 10            [12]  183 	add	a,#0x10
      000056 F8               [12]  184 	mov	r0,a
      000057 A6 04            [24]  185 	mov	@r0,ar4
      000059 08               [12]  186 	inc	r0
      00005A A6 05            [24]  187 	mov	@r0,ar5
      00005C 08               [12]  188 	inc	r0
      00005D A6 06            [24]  189 	mov	@r0,ar6
      00005F 08               [12]  190 	inc	r0
      000060 A6 07            [24]  191 	mov	@r0,ar7
      000062                        192 00102$:
                                    193 ;	time.c:57: if (timeptr) {
      000062 A8*00            [24]  194 	mov	r0,_bp
      000064 08               [12]  195 	inc	r0
      000065 E6               [12]  196 	mov	a,@r0
      000066 08               [12]  197 	inc	r0
      000067 46               [12]  198 	orl	a,@r0
      000068 60 26            [24]  199 	jz	00104$
                                    200 ;	time.c:58: *timeptr=t;
      00006A A8*00            [24]  201 	mov	r0,_bp
      00006C 08               [12]  202 	inc	r0
      00006D 86 82            [24]  203 	mov	dpl,@r0
      00006F 08               [12]  204 	inc	r0
      000070 86 83            [24]  205 	mov	dph,@r0
      000072 08               [12]  206 	inc	r0
      000073 86 F0            [24]  207 	mov	b,@r0
      000075 E5*00            [12]  208 	mov	a,_bp
      000077 24 10            [12]  209 	add	a,#0x10
      000079 F9               [12]  210 	mov	r1,a
      00007A E7               [12]  211 	mov	a,@r1
      00007B 12r00r00         [24]  212 	lcall	__gptrput
      00007E A3               [24]  213 	inc	dptr
      00007F 09               [12]  214 	inc	r1
      000080 E7               [12]  215 	mov	a,@r1
      000081 12r00r00         [24]  216 	lcall	__gptrput
      000084 A3               [24]  217 	inc	dptr
      000085 09               [12]  218 	inc	r1
      000086 E7               [12]  219 	mov	a,@r1
      000087 12r00r00         [24]  220 	lcall	__gptrput
      00008A A3               [24]  221 	inc	dptr
      00008B 09               [12]  222 	inc	r1
      00008C E7               [12]  223 	mov	a,@r1
      00008D 12r00r00         [24]  224 	lcall	__gptrput
      000090                        225 00104$:
                                    226 ;	time.c:60: return t;
      000090 E5*00            [12]  227 	mov	a,_bp
      000092 24 10            [12]  228 	add	a,#0x10
      000094 F8               [12]  229 	mov	r0,a
      000095 86 82            [24]  230 	mov	dpl,@r0
      000097 08               [12]  231 	inc	r0
      000098 86 83            [24]  232 	mov	dph,@r0
      00009A 08               [12]  233 	inc	r0
      00009B 86 F0            [24]  234 	mov	b,@r0
      00009D 08               [12]  235 	inc	r0
      00009E E6               [12]  236 	mov	a,@r0
      00009F 85*00 81         [24]  237 	mov	sp,_bp
      0000A2 D0*00            [24]  238 	pop	_bp
      0000A4 22               [24]  239 	ret
                                    240 ;------------------------------------------------------------
                                    241 ;Allocation info for local variables in function 'CheckTime'
                                    242 ;------------------------------------------------------------
                                    243 ;timeptr                   Allocated to registers r5 r6 r7 
                                    244 ;------------------------------------------------------------
                                    245 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                                    246 ;	-----------------------------------------
                                    247 ;	 function CheckTime
                                    248 ;	-----------------------------------------
      0000A5                        249 _CheckTime:
                                    250 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      0000A5 AD 82            [24]  251 	mov	r5,dpl
      0000A7 AE 83            [24]  252 	mov	r6,dph
      0000A9 AF F0            [24]  253 	mov	r7,b
      0000AB 12r00r00         [24]  254 	lcall	__gptrget
      0000AE FC               [12]  255 	mov  r4,a
      0000AF 24 C4            [12]  256 	add	a,#0xff - 0x3B
      0000B1 50 0B            [24]  257 	jnc	00102$
      0000B3 8D 82            [24]  258 	mov	dpl,r5
      0000B5 8E 83            [24]  259 	mov	dph,r6
      0000B7 8F F0            [24]  260 	mov	b,r7
      0000B9 74 3B            [12]  261 	mov	a,#0x3B
      0000BB 12r00r00         [24]  262 	lcall	__gptrput
      0000BE                        263 00102$:
                                    264 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      0000BE 74 01            [12]  265 	mov	a,#0x01
      0000C0 2D               [12]  266 	add	a,r5
      0000C1 FA               [12]  267 	mov	r2,a
      0000C2 E4               [12]  268 	clr	a
      0000C3 3E               [12]  269 	addc	a,r6
      0000C4 FB               [12]  270 	mov	r3,a
      0000C5 8F 04            [24]  271 	mov	ar4,r7
      0000C7 8A 82            [24]  272 	mov	dpl,r2
      0000C9 8B 83            [24]  273 	mov	dph,r3
      0000CB 8C F0            [24]  274 	mov	b,r4
      0000CD 12r00r00         [24]  275 	lcall	__gptrget
      0000D0 F9               [12]  276 	mov  r1,a
      0000D1 24 C4            [12]  277 	add	a,#0xff - 0x3B
      0000D3 50 0B            [24]  278 	jnc	00104$
      0000D5 8A 82            [24]  279 	mov	dpl,r2
      0000D7 8B 83            [24]  280 	mov	dph,r3
      0000D9 8C F0            [24]  281 	mov	b,r4
      0000DB 74 3B            [12]  282 	mov	a,#0x3B
      0000DD 12r00r00         [24]  283 	lcall	__gptrput
      0000E0                        284 00104$:
                                    285 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      0000E0 74 02            [12]  286 	mov	a,#0x02
      0000E2 2D               [12]  287 	add	a,r5
      0000E3 FA               [12]  288 	mov	r2,a
      0000E4 E4               [12]  289 	clr	a
      0000E5 3E               [12]  290 	addc	a,r6
      0000E6 FB               [12]  291 	mov	r3,a
      0000E7 8F 04            [24]  292 	mov	ar4,r7
      0000E9 8A 82            [24]  293 	mov	dpl,r2
      0000EB 8B 83            [24]  294 	mov	dph,r3
      0000ED 8C F0            [24]  295 	mov	b,r4
      0000EF 12r00r00         [24]  296 	lcall	__gptrget
      0000F2 F9               [12]  297 	mov  r1,a
      0000F3 24 E8            [12]  298 	add	a,#0xff - 0x17
      0000F5 50 0B            [24]  299 	jnc	00106$
      0000F7 8A 82            [24]  300 	mov	dpl,r2
      0000F9 8B 83            [24]  301 	mov	dph,r3
      0000FB 8C F0            [24]  302 	mov	b,r4
      0000FD 74 17            [12]  303 	mov	a,#0x17
      0000FF 12r00r00         [24]  304 	lcall	__gptrput
      000102                        305 00106$:
                                    306 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      000102 74 07            [12]  307 	mov	a,#0x07
      000104 2D               [12]  308 	add	a,r5
      000105 FA               [12]  309 	mov	r2,a
      000106 E4               [12]  310 	clr	a
      000107 3E               [12]  311 	addc	a,r6
      000108 FB               [12]  312 	mov	r3,a
      000109 8F 04            [24]  313 	mov	ar4,r7
      00010B 8A 82            [24]  314 	mov	dpl,r2
      00010D 8B 83            [24]  315 	mov	dph,r3
      00010F 8C F0            [24]  316 	mov	b,r4
      000111 12r00r00         [24]  317 	lcall	__gptrget
      000114 F9               [12]  318 	mov  r1,a
      000115 24 F9            [12]  319 	add	a,#0xff - 0x06
      000117 50 0B            [24]  320 	jnc	00108$
      000119 8A 82            [24]  321 	mov	dpl,r2
      00011B 8B 83            [24]  322 	mov	dph,r3
      00011D 8C F0            [24]  323 	mov	b,r4
      00011F 74 06            [12]  324 	mov	a,#0x06
      000121 12r00r00         [24]  325 	lcall	__gptrput
      000124                        326 00108$:
                                    327 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      000124 74 03            [12]  328 	mov	a,#0x03
      000126 2D               [12]  329 	add	a,r5
      000127 FA               [12]  330 	mov	r2,a
      000128 E4               [12]  331 	clr	a
      000129 3E               [12]  332 	addc	a,r6
      00012A FB               [12]  333 	mov	r3,a
      00012B 8F 04            [24]  334 	mov	ar4,r7
      00012D 8A 82            [24]  335 	mov	dpl,r2
      00012F 8B 83            [24]  336 	mov	dph,r3
      000131 8C F0            [24]  337 	mov	b,r4
      000133 12r00r00         [24]  338 	lcall	__gptrget
      000136 F9               [12]  339 	mov	r1,a
      000137 B9 01 00         [24]  340 	cjne	r1,#0x01,00148$
      00013A                        341 00148$:
      00013A 50 0D            [24]  342 	jnc	00112$
      00013C 8A 82            [24]  343 	mov	dpl,r2
      00013E 8B 83            [24]  344 	mov	dph,r3
      000140 8C F0            [24]  345 	mov	b,r4
      000142 74 01            [12]  346 	mov	a,#0x01
      000144 12r00r00         [24]  347 	lcall	__gptrput
      000147 80 10            [24]  348 	sjmp	00113$
      000149                        349 00112$:
                                    350 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000149 E9               [12]  351 	mov	a,r1
      00014A 24 E0            [12]  352 	add	a,#0xff - 0x1F
      00014C 50 0B            [24]  353 	jnc	00113$
      00014E 8A 82            [24]  354 	mov	dpl,r2
      000150 8B 83            [24]  355 	mov	dph,r3
      000152 8C F0            [24]  356 	mov	b,r4
      000154 74 1F            [12]  357 	mov	a,#0x1F
      000156 12r00r00         [24]  358 	lcall	__gptrput
      000159                        359 00113$:
                                    360 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000159 74 04            [12]  361 	mov	a,#0x04
      00015B 2D               [12]  362 	add	a,r5
      00015C FA               [12]  363 	mov	r2,a
      00015D E4               [12]  364 	clr	a
      00015E 3E               [12]  365 	addc	a,r6
      00015F FB               [12]  366 	mov	r3,a
      000160 8F 04            [24]  367 	mov	ar4,r7
      000162 8A 82            [24]  368 	mov	dpl,r2
      000164 8B 83            [24]  369 	mov	dph,r3
      000166 8C F0            [24]  370 	mov	b,r4
      000168 12r00r00         [24]  371 	lcall	__gptrget
      00016B F9               [12]  372 	mov  r1,a
      00016C 24 F4            [12]  373 	add	a,#0xff - 0x0B
      00016E 50 0B            [24]  374 	jnc	00115$
      000170 8A 82            [24]  375 	mov	dpl,r2
      000172 8B 83            [24]  376 	mov	dph,r3
      000174 8C F0            [24]  377 	mov	b,r4
      000176 74 0B            [12]  378 	mov	a,#0x0B
      000178 12r00r00         [24]  379 	lcall	__gptrput
      00017B                        380 00115$:
                                    381 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      00017B 74 05            [12]  382 	mov	a,#0x05
      00017D 2D               [12]  383 	add	a,r5
      00017E FD               [12]  384 	mov	r5,a
      00017F E4               [12]  385 	clr	a
      000180 3E               [12]  386 	addc	a,r6
      000181 FE               [12]  387 	mov	r6,a
      000182 8D 82            [24]  388 	mov	dpl,r5
      000184 8E 83            [24]  389 	mov	dph,r6
      000186 8F F0            [24]  390 	mov	b,r7
      000188 12r00r00         [24]  391 	lcall	__gptrget
      00018B FB               [12]  392 	mov	r3,a
      00018C A3               [24]  393 	inc	dptr
      00018D 12r00r00         [24]  394 	lcall	__gptrget
      000190 FC               [12]  395 	mov	r4,a
      000191 30 E7 0E         [24]  396 	jnb	acc.7,00118$
      000194 8D 82            [24]  397 	mov	dpl,r5
      000196 8E 83            [24]  398 	mov	dph,r6
      000198 8F F0            [24]  399 	mov	b,r7
      00019A E4               [12]  400 	clr	a
      00019B 12r00r00         [24]  401 	lcall	__gptrput
      00019E A3               [24]  402 	inc	dptr
      00019F 02r00r00         [24]  403 	ljmp	__gptrput
      0001A2                        404 00118$:
      0001A2 22               [24]  405 	ret
                                    406 ;------------------------------------------------------------
                                    407 ;Allocation info for local variables in function 'asctime'
                                    408 ;------------------------------------------------------------
                                    409 ;timeptr                   Allocated to stack - _bp +1
                                    410 ;sloc0                     Allocated to stack - _bp +4
                                    411 ;sloc1                     Allocated to stack - _bp +6
                                    412 ;sloc2                     Allocated to stack - _bp +8
                                    413 ;sloc3                     Allocated to stack - _bp +10
                                    414 ;sloc4                     Allocated to stack - _bp +12
                                    415 ;------------------------------------------------------------
                                    416 ;	time.c:95: char *asctime(struct tm *timeptr) {
                                    417 ;	-----------------------------------------
                                    418 ;	 function asctime
                                    419 ;	-----------------------------------------
      0001A3                        420 _asctime:
      0001A3 C0*00            [24]  421 	push	_bp
      0001A5 85 81*00         [24]  422 	mov	_bp,sp
      0001A8 C0 82            [24]  423 	push	dpl
      0001AA C0 83            [24]  424 	push	dph
      0001AC C0 F0            [24]  425 	push	b
      0001AE E5 81            [12]  426 	mov	a,sp
      0001B0 24 0A            [12]  427 	add	a,#0x0A
      0001B2 F5 81            [12]  428 	mov	sp,a
                                    429 ;	time.c:96: CheckTime(timeptr);
      0001B4 A8*00            [24]  430 	mov	r0,_bp
      0001B6 08               [12]  431 	inc	r0
      0001B7 86 82            [24]  432 	mov	dpl,@r0
      0001B9 08               [12]  433 	inc	r0
      0001BA 86 83            [24]  434 	mov	dph,@r0
      0001BC 08               [12]  435 	inc	r0
      0001BD 86 F0            [24]  436 	mov	b,@r0
      0001BF 12r00rA5         [24]  437 	lcall	_CheckTime
                                    438 ;	time.c:100: timeptr->tm_year+1900);
      0001C2 A8*00            [24]  439 	mov	r0,_bp
      0001C4 08               [12]  440 	inc	r0
      0001C5 74 05            [12]  441 	mov	a,#0x05
      0001C7 26               [12]  442 	add	a,@r0
      0001C8 FA               [12]  443 	mov	r2,a
      0001C9 E4               [12]  444 	clr	a
      0001CA 08               [12]  445 	inc	r0
      0001CB 36               [12]  446 	addc	a,@r0
      0001CC FB               [12]  447 	mov	r3,a
      0001CD 08               [12]  448 	inc	r0
      0001CE 86 04            [24]  449 	mov	ar4,@r0
      0001D0 8A 82            [24]  450 	mov	dpl,r2
      0001D2 8B 83            [24]  451 	mov	dph,r3
      0001D4 8C F0            [24]  452 	mov	b,r4
      0001D6 12r00r00         [24]  453 	lcall	__gptrget
      0001D9 FA               [12]  454 	mov	r2,a
      0001DA A3               [24]  455 	inc	dptr
      0001DB 12r00r00         [24]  456 	lcall	__gptrget
      0001DE FB               [12]  457 	mov	r3,a
      0001DF E5*00            [12]  458 	mov	a,_bp
      0001E1 24 0C            [12]  459 	add	a,#0x0c
      0001E3 F8               [12]  460 	mov	r0,a
      0001E4 74 6C            [12]  461 	mov	a,#0x6C
      0001E6 2A               [12]  462 	add	a,r2
      0001E7 F6               [12]  463 	mov	@r0,a
      0001E8 74 07            [12]  464 	mov	a,#0x07
      0001EA 3B               [12]  465 	addc	a,r3
      0001EB 08               [12]  466 	inc	r0
      0001EC F6               [12]  467 	mov	@r0,a
                                    468 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0001ED A8*00            [24]  469 	mov	r0,_bp
      0001EF 08               [12]  470 	inc	r0
      0001F0 86 82            [24]  471 	mov	dpl,@r0
      0001F2 08               [12]  472 	inc	r0
      0001F3 86 83            [24]  473 	mov	dph,@r0
      0001F5 08               [12]  474 	inc	r0
      0001F6 86 F0            [24]  475 	mov	b,@r0
      0001F8 12r00r00         [24]  476 	lcall	__gptrget
      0001FB FC               [12]  477 	mov	r4,a
      0001FC E5*00            [12]  478 	mov	a,_bp
      0001FE 24 04            [12]  479 	add	a,#0x04
      000200 F8               [12]  480 	mov	r0,a
      000201 A6 04            [24]  481 	mov	@r0,ar4
      000203 08               [12]  482 	inc	r0
      000204 76 00            [12]  483 	mov	@r0,#0x00
      000206 A8*00            [24]  484 	mov	r0,_bp
      000208 08               [12]  485 	inc	r0
      000209 74 01            [12]  486 	mov	a,#0x01
      00020B 26               [12]  487 	add	a,@r0
      00020C FD               [12]  488 	mov	r5,a
      00020D E4               [12]  489 	clr	a
      00020E 08               [12]  490 	inc	r0
      00020F 36               [12]  491 	addc	a,@r0
      000210 FE               [12]  492 	mov	r6,a
      000211 08               [12]  493 	inc	r0
      000212 86 07            [24]  494 	mov	ar7,@r0
      000214 8D 82            [24]  495 	mov	dpl,r5
      000216 8E 83            [24]  496 	mov	dph,r6
      000218 8F F0            [24]  497 	mov	b,r7
      00021A 12r00r00         [24]  498 	lcall	__gptrget
      00021D FD               [12]  499 	mov	r5,a
      00021E E5*00            [12]  500 	mov	a,_bp
      000220 24 06            [12]  501 	add	a,#0x06
      000222 F8               [12]  502 	mov	r0,a
      000223 A6 05            [24]  503 	mov	@r0,ar5
      000225 08               [12]  504 	inc	r0
      000226 76 00            [12]  505 	mov	@r0,#0x00
      000228 A8*00            [24]  506 	mov	r0,_bp
      00022A 08               [12]  507 	inc	r0
      00022B 74 02            [12]  508 	mov	a,#0x02
      00022D 26               [12]  509 	add	a,@r0
      00022E FC               [12]  510 	mov	r4,a
      00022F E4               [12]  511 	clr	a
      000230 08               [12]  512 	inc	r0
      000231 36               [12]  513 	addc	a,@r0
      000232 FE               [12]  514 	mov	r6,a
      000233 08               [12]  515 	inc	r0
      000234 86 07            [24]  516 	mov	ar7,@r0
      000236 8C 82            [24]  517 	mov	dpl,r4
      000238 8E 83            [24]  518 	mov	dph,r6
      00023A 8F F0            [24]  519 	mov	b,r7
      00023C 12r00r00         [24]  520 	lcall	__gptrget
      00023F FC               [12]  521 	mov	r4,a
      000240 E5*00            [12]  522 	mov	a,_bp
      000242 24 08            [12]  523 	add	a,#0x08
      000244 F8               [12]  524 	mov	r0,a
      000245 A6 04            [24]  525 	mov	@r0,ar4
      000247 08               [12]  526 	inc	r0
      000248 76 00            [12]  527 	mov	@r0,#0x00
                                    528 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      00024A A8*00            [24]  529 	mov	r0,_bp
      00024C 08               [12]  530 	inc	r0
      00024D 74 03            [12]  531 	mov	a,#0x03
      00024F 26               [12]  532 	add	a,@r0
      000250 FD               [12]  533 	mov	r5,a
      000251 E4               [12]  534 	clr	a
      000252 08               [12]  535 	inc	r0
      000253 36               [12]  536 	addc	a,@r0
      000254 FE               [12]  537 	mov	r6,a
      000255 08               [12]  538 	inc	r0
      000256 86 07            [24]  539 	mov	ar7,@r0
      000258 8D 82            [24]  540 	mov	dpl,r5
      00025A 8E 83            [24]  541 	mov	dph,r6
      00025C 8F F0            [24]  542 	mov	b,r7
      00025E 12r00r00         [24]  543 	lcall	__gptrget
      000261 FD               [12]  544 	mov	r5,a
      000262 E5*00            [12]  545 	mov	a,_bp
      000264 24 0A            [12]  546 	add	a,#0x0a
      000266 F8               [12]  547 	mov	r0,a
      000267 A6 05            [24]  548 	mov	@r0,ar5
      000269 08               [12]  549 	inc	r0
      00026A 76 00            [12]  550 	mov	@r0,#0x00
      00026C A8*00            [24]  551 	mov	r0,_bp
      00026E 08               [12]  552 	inc	r0
      00026F 74 04            [12]  553 	mov	a,#0x04
      000271 26               [12]  554 	add	a,@r0
      000272 FC               [12]  555 	mov	r4,a
      000273 E4               [12]  556 	clr	a
      000274 08               [12]  557 	inc	r0
      000275 36               [12]  558 	addc	a,@r0
      000276 FE               [12]  559 	mov	r6,a
      000277 08               [12]  560 	inc	r0
      000278 86 07            [24]  561 	mov	ar7,@r0
      00027A 8C 82            [24]  562 	mov	dpl,r4
      00027C 8E 83            [24]  563 	mov	dph,r6
      00027E 8F F0            [24]  564 	mov	b,r7
      000280 12r00r00         [24]  565 	lcall	__gptrget
      000283 75 F0 02         [24]  566 	mov	b,#0x02
      000286 A4               [48]  567 	mul	ab
      000287 24r0C            [12]  568 	add	a,#___month
      000289 F5 82            [12]  569 	mov	dpl,a
      00028B 74s00            [12]  570 	mov	a,#(___month >> 8)
      00028D 35 F0            [12]  571 	addc	a,b
      00028F F5 83            [12]  572 	mov	dph,a
      000291 E4               [12]  573 	clr	a
      000292 93               [24]  574 	movc	a,@a+dptr
      000293 FE               [12]  575 	mov	r6,a
      000294 A3               [24]  576 	inc	dptr
      000295 E4               [12]  577 	clr	a
      000296 93               [24]  578 	movc	a,@a+dptr
      000297 FF               [12]  579 	mov	r7,a
      000298 7D 80            [12]  580 	mov	r5,#0x80
      00029A A8*00            [24]  581 	mov	r0,_bp
      00029C 08               [12]  582 	inc	r0
      00029D 74 07            [12]  583 	mov	a,#0x07
      00029F 26               [12]  584 	add	a,@r0
      0002A0 FA               [12]  585 	mov	r2,a
      0002A1 E4               [12]  586 	clr	a
      0002A2 08               [12]  587 	inc	r0
      0002A3 36               [12]  588 	addc	a,@r0
      0002A4 FB               [12]  589 	mov	r3,a
      0002A5 08               [12]  590 	inc	r0
      0002A6 86 04            [24]  591 	mov	ar4,@r0
      0002A8 8A 82            [24]  592 	mov	dpl,r2
      0002AA 8B 83            [24]  593 	mov	dph,r3
      0002AC 8C F0            [24]  594 	mov	b,r4
      0002AE 12r00r00         [24]  595 	lcall	__gptrget
      0002B1 75 F0 02         [24]  596 	mov	b,#0x02
      0002B4 A4               [48]  597 	mul	ab
      0002B5 24r24            [12]  598 	add	a,#___day
      0002B7 F5 82            [12]  599 	mov	dpl,a
      0002B9 74s00            [12]  600 	mov	a,#(___day >> 8)
      0002BB 35 F0            [12]  601 	addc	a,b
      0002BD F5 83            [12]  602 	mov	dph,a
      0002BF E4               [12]  603 	clr	a
      0002C0 93               [24]  604 	movc	a,@a+dptr
      0002C1 FB               [12]  605 	mov	r3,a
      0002C2 A3               [24]  606 	inc	dptr
      0002C3 E4               [12]  607 	clr	a
      0002C4 93               [24]  608 	movc	a,@a+dptr
      0002C5 FC               [12]  609 	mov	r4,a
      0002C6 7A 80            [12]  610 	mov	r2,#0x80
                                    611 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      0002C8 E5*00            [12]  612 	mov	a,_bp
      0002CA 24 0C            [12]  613 	add	a,#0x0c
      0002CC F8               [12]  614 	mov	r0,a
      0002CD E6               [12]  615 	mov	a,@r0
      0002CE C0 E0            [24]  616 	push	acc
      0002D0 08               [12]  617 	inc	r0
      0002D1 E6               [12]  618 	mov	a,@r0
      0002D2 C0 E0            [24]  619 	push	acc
      0002D4 E5*00            [12]  620 	mov	a,_bp
      0002D6 24 04            [12]  621 	add	a,#0x04
      0002D8 F8               [12]  622 	mov	r0,a
      0002D9 E6               [12]  623 	mov	a,@r0
      0002DA C0 E0            [24]  624 	push	acc
      0002DC 08               [12]  625 	inc	r0
      0002DD E6               [12]  626 	mov	a,@r0
      0002DE C0 E0            [24]  627 	push	acc
      0002E0 E5*00            [12]  628 	mov	a,_bp
      0002E2 24 06            [12]  629 	add	a,#0x06
      0002E4 F8               [12]  630 	mov	r0,a
      0002E5 E6               [12]  631 	mov	a,@r0
      0002E6 C0 E0            [24]  632 	push	acc
      0002E8 08               [12]  633 	inc	r0
      0002E9 E6               [12]  634 	mov	a,@r0
      0002EA C0 E0            [24]  635 	push	acc
      0002EC E5*00            [12]  636 	mov	a,_bp
      0002EE 24 08            [12]  637 	add	a,#0x08
      0002F0 F8               [12]  638 	mov	r0,a
      0002F1 E6               [12]  639 	mov	a,@r0
      0002F2 C0 E0            [24]  640 	push	acc
      0002F4 08               [12]  641 	inc	r0
      0002F5 E6               [12]  642 	mov	a,@r0
      0002F6 C0 E0            [24]  643 	push	acc
      0002F8 E5*00            [12]  644 	mov	a,_bp
      0002FA 24 0A            [12]  645 	add	a,#0x0a
      0002FC F8               [12]  646 	mov	r0,a
      0002FD E6               [12]  647 	mov	a,@r0
      0002FE C0 E0            [24]  648 	push	acc
      000300 08               [12]  649 	inc	r0
      000301 E6               [12]  650 	mov	a,@r0
      000302 C0 E0            [24]  651 	push	acc
      000304 C0 06            [24]  652 	push	ar6
      000306 C0 07            [24]  653 	push	ar7
      000308 C0 05            [24]  654 	push	ar5
      00030A C0 03            [24]  655 	push	ar3
      00030C C0 04            [24]  656 	push	ar4
      00030E C0 02            [24]  657 	push	ar2
      000310 74r32            [12]  658 	mov	a,#___str_0
      000312 C0 E0            [24]  659 	push	acc
      000314 74s00            [12]  660 	mov	a,#(___str_0 >> 8)
      000316 C0 E0            [24]  661 	push	acc
      000318 ED               [12]  662 	mov	a,r5
      000319 C0 E0            [24]  663 	push	acc
      00031B 74r00            [12]  664 	mov	a,#_ascTimeBuffer
      00031D C0 E0            [24]  665 	push	acc
      00031F 74s00            [12]  666 	mov	a,#(_ascTimeBuffer >> 8)
      000321 C0 E0            [24]  667 	push	acc
      000323 74 60            [12]  668 	mov	a,#0x60
      000325 C0 E0            [24]  669 	push	acc
      000327 12r00r00         [24]  670 	lcall	_sprintf
      00032A E5 81            [12]  671 	mov	a,sp
      00032C 24 EA            [12]  672 	add	a,#0xea
      00032E F5 81            [12]  673 	mov	sp,a
                                    674 ;	time.c:101: return ascTimeBuffer;
      000330 90r00r00         [24]  675 	mov	dptr,#_ascTimeBuffer
      000333 75 F0 60         [24]  676 	mov	b,#0x60
      000336 85*00 81         [24]  677 	mov	sp,_bp
      000339 D0*00            [24]  678 	pop	_bp
      00033B 22               [24]  679 	ret
                                    680 ;------------------------------------------------------------
                                    681 ;Allocation info for local variables in function 'ctime'
                                    682 ;------------------------------------------------------------
                                    683 ;timep                     Allocated to registers r5 r6 r7 
                                    684 ;------------------------------------------------------------
                                    685 ;	time.c:104: char *ctime(time_t *timep) {
                                    686 ;	-----------------------------------------
                                    687 ;	 function ctime
                                    688 ;	-----------------------------------------
      00033C                        689 _ctime:
                                    690 ;	time.c:105: return asctime(localtime(timep));
      00033C 12r03r42         [24]  691 	lcall	_localtime
      00033F 02r01rA3         [24]  692 	ljmp	_asctime
                                    693 ;------------------------------------------------------------
                                    694 ;Allocation info for local variables in function 'localtime'
                                    695 ;------------------------------------------------------------
                                    696 ;timep                     Allocated to registers r5 r6 r7 
                                    697 ;------------------------------------------------------------
                                    698 ;	time.c:121: struct tm *localtime(time_t *timep) {
                                    699 ;	-----------------------------------------
                                    700 ;	 function localtime
                                    701 ;	-----------------------------------------
      000342                        702 _localtime:
                                    703 ;	time.c:122: return gmtime(timep);
      000342 02r03r45         [24]  704 	ljmp	_gmtime
                                    705 ;------------------------------------------------------------
                                    706 ;Allocation info for local variables in function 'gmtime'
                                    707 ;------------------------------------------------------------
                                    708 ;timep                     Allocated to registers r5 r6 r7 
                                    709 ;epoch                     Allocated to stack - _bp +5
                                    710 ;year                      Allocated to registers r2 r3 
                                    711 ;month                     Allocated to registers r5 
                                    712 ;monthLength               Allocated to registers r4 
                                    713 ;days                      Allocated to stack - _bp +9
                                    714 ;sloc0                     Allocated to stack - _bp +1
                                    715 ;------------------------------------------------------------
                                    716 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                                    717 ;	-----------------------------------------
                                    718 ;	 function gmtime
                                    719 ;	-----------------------------------------
      000345                        720 _gmtime:
      000345 C0*00            [24]  721 	push	_bp
      000347 E5 81            [12]  722 	mov	a,sp
      000349 F5*00            [12]  723 	mov	_bp,a
      00034B 24 0C            [12]  724 	add	a,#0x0C
      00034D F5 81            [12]  725 	mov	sp,a
                                    726 ;	time.c:126: unsigned long epoch=*timep;
      00034F E5*00            [12]  727 	mov	a,_bp
      000351 24 05            [12]  728 	add	a,#0x05
      000353 F8               [12]  729 	mov	r0,a
      000354 12r00r00         [24]  730 	lcall	__gptrget
      000357 F6               [12]  731 	mov	@r0,a
      000358 A3               [24]  732 	inc	dptr
      000359 12r00r00         [24]  733 	lcall	__gptrget
      00035C 08               [12]  734 	inc	r0
      00035D F6               [12]  735 	mov	@r0,a
      00035E A3               [24]  736 	inc	dptr
      00035F 12r00r00         [24]  737 	lcall	__gptrget
      000362 08               [12]  738 	inc	r0
      000363 F6               [12]  739 	mov	@r0,a
      000364 A3               [24]  740 	inc	dptr
      000365 12r00r00         [24]  741 	lcall	__gptrget
      000368 08               [12]  742 	inc	r0
      000369 F6               [12]  743 	mov	@r0,a
                                    744 ;	time.c:131: lastTime.tm_sec=epoch%60;
      00036A 74 3C            [12]  745 	mov	a,#0x3C
      00036C C0 E0            [24]  746 	push	acc
      00036E E4               [12]  747 	clr	a
      00036F C0 E0            [24]  748 	push	acc
      000371 C0 E0            [24]  749 	push	acc
      000373 C0 E0            [24]  750 	push	acc
      000375 E5*00            [12]  751 	mov	a,_bp
      000377 24 05            [12]  752 	add	a,#0x05
      000379 F8               [12]  753 	mov	r0,a
      00037A 86 82            [24]  754 	mov	dpl,@r0
      00037C 08               [12]  755 	inc	r0
      00037D 86 83            [24]  756 	mov	dph,@r0
      00037F 08               [12]  757 	inc	r0
      000380 86 F0            [24]  758 	mov	b,@r0
      000382 08               [12]  759 	inc	r0
      000383 E6               [12]  760 	mov	a,@r0
      000384 12r00r00         [24]  761 	lcall	__modulong
      000387 AA 82            [24]  762 	mov	r2,dpl
      000389 E5 81            [12]  763 	mov	a,sp
      00038B 24 FC            [12]  764 	add	a,#0xfc
      00038D F5 81            [12]  765 	mov	sp,a
      00038F 78r20            [12]  766 	mov	r0,#_lastTime
      000391 EA               [12]  767 	mov	a,r2
      000392 F2               [24]  768 	movx	@r0,a
                                    769 ;	time.c:132: epoch/=60; // now it is minutes
      000393 74 3C            [12]  770 	mov	a,#0x3C
      000395 C0 E0            [24]  771 	push	acc
      000397 E4               [12]  772 	clr	a
      000398 C0 E0            [24]  773 	push	acc
      00039A C0 E0            [24]  774 	push	acc
      00039C C0 E0            [24]  775 	push	acc
      00039E E5*00            [12]  776 	mov	a,_bp
      0003A0 24 05            [12]  777 	add	a,#0x05
      0003A2 F8               [12]  778 	mov	r0,a
      0003A3 86 82            [24]  779 	mov	dpl,@r0
      0003A5 08               [12]  780 	inc	r0
      0003A6 86 83            [24]  781 	mov	dph,@r0
      0003A8 08               [12]  782 	inc	r0
      0003A9 86 F0            [24]  783 	mov	b,@r0
      0003AB 08               [12]  784 	inc	r0
      0003AC E6               [12]  785 	mov	a,@r0
      0003AD 12r00r00         [24]  786 	lcall	__divulong
      0003B0 AC 82            [24]  787 	mov	r4,dpl
      0003B2 AD 83            [24]  788 	mov	r5,dph
      0003B4 AE F0            [24]  789 	mov	r6,b
      0003B6 FF               [12]  790 	mov	r7,a
      0003B7 E5 81            [12]  791 	mov	a,sp
      0003B9 24 FC            [12]  792 	add	a,#0xfc
      0003BB F5 81            [12]  793 	mov	sp,a
      0003BD E5*00            [12]  794 	mov	a,_bp
      0003BF 24 05            [12]  795 	add	a,#0x05
      0003C1 F8               [12]  796 	mov	r0,a
      0003C2 A6 04            [24]  797 	mov	@r0,ar4
      0003C4 08               [12]  798 	inc	r0
      0003C5 A6 05            [24]  799 	mov	@r0,ar5
      0003C7 08               [12]  800 	inc	r0
      0003C8 A6 06            [24]  801 	mov	@r0,ar6
      0003CA 08               [12]  802 	inc	r0
      0003CB A6 07            [24]  803 	mov	@r0,ar7
                                    804 ;	time.c:133: lastTime.tm_min=epoch%60;
      0003CD 74 3C            [12]  805 	mov	a,#0x3C
      0003CF C0 E0            [24]  806 	push	acc
      0003D1 E4               [12]  807 	clr	a
      0003D2 C0 E0            [24]  808 	push	acc
      0003D4 C0 E0            [24]  809 	push	acc
      0003D6 C0 E0            [24]  810 	push	acc
      0003D8 E5*00            [12]  811 	mov	a,_bp
      0003DA 24 05            [12]  812 	add	a,#0x05
      0003DC F8               [12]  813 	mov	r0,a
      0003DD 86 82            [24]  814 	mov	dpl,@r0
      0003DF 08               [12]  815 	inc	r0
      0003E0 86 83            [24]  816 	mov	dph,@r0
      0003E2 08               [12]  817 	inc	r0
      0003E3 86 F0            [24]  818 	mov	b,@r0
      0003E5 08               [12]  819 	inc	r0
      0003E6 E6               [12]  820 	mov	a,@r0
      0003E7 12r00r00         [24]  821 	lcall	__modulong
      0003EA AC 82            [24]  822 	mov	r4,dpl
      0003EC E5 81            [12]  823 	mov	a,sp
      0003EE 24 FC            [12]  824 	add	a,#0xfc
      0003F0 F5 81            [12]  825 	mov	sp,a
      0003F2 78r21            [12]  826 	mov	r0,#(_lastTime + 0x0001)
      0003F4 EC               [12]  827 	mov	a,r4
      0003F5 F2               [24]  828 	movx	@r0,a
                                    829 ;	time.c:134: epoch/=60; // now it is hours
      0003F6 74 3C            [12]  830 	mov	a,#0x3C
      0003F8 C0 E0            [24]  831 	push	acc
      0003FA E4               [12]  832 	clr	a
      0003FB C0 E0            [24]  833 	push	acc
      0003FD C0 E0            [24]  834 	push	acc
      0003FF C0 E0            [24]  835 	push	acc
      000401 E5*00            [12]  836 	mov	a,_bp
      000403 24 05            [12]  837 	add	a,#0x05
      000405 F8               [12]  838 	mov	r0,a
      000406 86 82            [24]  839 	mov	dpl,@r0
      000408 08               [12]  840 	inc	r0
      000409 86 83            [24]  841 	mov	dph,@r0
      00040B 08               [12]  842 	inc	r0
      00040C 86 F0            [24]  843 	mov	b,@r0
      00040E 08               [12]  844 	inc	r0
      00040F E6               [12]  845 	mov	a,@r0
      000410 12r00r00         [24]  846 	lcall	__divulong
      000413 AC 82            [24]  847 	mov	r4,dpl
      000415 AD 83            [24]  848 	mov	r5,dph
      000417 AE F0            [24]  849 	mov	r6,b
      000419 FF               [12]  850 	mov	r7,a
      00041A E5 81            [12]  851 	mov	a,sp
      00041C 24 FC            [12]  852 	add	a,#0xfc
      00041E F5 81            [12]  853 	mov	sp,a
      000420 E5*00            [12]  854 	mov	a,_bp
      000422 24 05            [12]  855 	add	a,#0x05
      000424 F8               [12]  856 	mov	r0,a
      000425 A6 04            [24]  857 	mov	@r0,ar4
      000427 08               [12]  858 	inc	r0
      000428 A6 05            [24]  859 	mov	@r0,ar5
      00042A 08               [12]  860 	inc	r0
      00042B A6 06            [24]  861 	mov	@r0,ar6
      00042D 08               [12]  862 	inc	r0
      00042E A6 07            [24]  863 	mov	@r0,ar7
                                    864 ;	time.c:135: lastTime.tm_hour=epoch%24;
      000430 74 18            [12]  865 	mov	a,#0x18
      000432 C0 E0            [24]  866 	push	acc
      000434 E4               [12]  867 	clr	a
      000435 C0 E0            [24]  868 	push	acc
      000437 C0 E0            [24]  869 	push	acc
      000439 C0 E0            [24]  870 	push	acc
      00043B E5*00            [12]  871 	mov	a,_bp
      00043D 24 05            [12]  872 	add	a,#0x05
      00043F F8               [12]  873 	mov	r0,a
      000440 86 82            [24]  874 	mov	dpl,@r0
      000442 08               [12]  875 	inc	r0
      000443 86 83            [24]  876 	mov	dph,@r0
      000445 08               [12]  877 	inc	r0
      000446 86 F0            [24]  878 	mov	b,@r0
      000448 08               [12]  879 	inc	r0
      000449 E6               [12]  880 	mov	a,@r0
      00044A 12r00r00         [24]  881 	lcall	__modulong
      00044D AC 82            [24]  882 	mov	r4,dpl
      00044F E5 81            [12]  883 	mov	a,sp
      000451 24 FC            [12]  884 	add	a,#0xfc
      000453 F5 81            [12]  885 	mov	sp,a
      000455 78r22            [12]  886 	mov	r0,#(_lastTime + 0x0002)
      000457 EC               [12]  887 	mov	a,r4
      000458 F2               [24]  888 	movx	@r0,a
                                    889 ;	time.c:136: epoch/=24; // now it is days
      000459 74 18            [12]  890 	mov	a,#0x18
      00045B C0 E0            [24]  891 	push	acc
      00045D E4               [12]  892 	clr	a
      00045E C0 E0            [24]  893 	push	acc
      000460 C0 E0            [24]  894 	push	acc
      000462 C0 E0            [24]  895 	push	acc
      000464 E5*00            [12]  896 	mov	a,_bp
      000466 24 05            [12]  897 	add	a,#0x05
      000468 F8               [12]  898 	mov	r0,a
      000469 86 82            [24]  899 	mov	dpl,@r0
      00046B 08               [12]  900 	inc	r0
      00046C 86 83            [24]  901 	mov	dph,@r0
      00046E 08               [12]  902 	inc	r0
      00046F 86 F0            [24]  903 	mov	b,@r0
      000471 08               [12]  904 	inc	r0
      000472 E6               [12]  905 	mov	a,@r0
      000473 12r00r00         [24]  906 	lcall	__divulong
      000476 AC 82            [24]  907 	mov	r4,dpl
      000478 AD 83            [24]  908 	mov	r5,dph
      00047A AE F0            [24]  909 	mov	r6,b
      00047C FF               [12]  910 	mov	r7,a
      00047D E5 81            [12]  911 	mov	a,sp
      00047F 24 FC            [12]  912 	add	a,#0xfc
      000481 F5 81            [12]  913 	mov	sp,a
      000483 E5*00            [12]  914 	mov	a,_bp
      000485 24 05            [12]  915 	add	a,#0x05
      000487 F8               [12]  916 	mov	r0,a
      000488 A6 04            [24]  917 	mov	@r0,ar4
      00048A 08               [12]  918 	inc	r0
      00048B A6 05            [24]  919 	mov	@r0,ar5
      00048D 08               [12]  920 	inc	r0
      00048E A6 06            [24]  921 	mov	@r0,ar6
      000490 08               [12]  922 	inc	r0
      000491 A6 07            [24]  923 	mov	@r0,ar7
                                    924 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
      000493 E5*00            [12]  925 	mov	a,_bp
      000495 24 05            [12]  926 	add	a,#0x05
      000497 F8               [12]  927 	mov	r0,a
      000498 74 04            [12]  928 	mov	a,#0x04
      00049A 26               [12]  929 	add	a,@r0
      00049B FC               [12]  930 	mov	r4,a
      00049C E4               [12]  931 	clr	a
      00049D 08               [12]  932 	inc	r0
      00049E 36               [12]  933 	addc	a,@r0
      00049F FD               [12]  934 	mov	r5,a
      0004A0 E4               [12]  935 	clr	a
      0004A1 08               [12]  936 	inc	r0
      0004A2 36               [12]  937 	addc	a,@r0
      0004A3 FE               [12]  938 	mov	r6,a
      0004A4 E4               [12]  939 	clr	a
      0004A5 08               [12]  940 	inc	r0
      0004A6 36               [12]  941 	addc	a,@r0
      0004A7 FF               [12]  942 	mov	r7,a
      0004A8 74 07            [12]  943 	mov	a,#0x07
      0004AA C0 E0            [24]  944 	push	acc
      0004AC E4               [12]  945 	clr	a
      0004AD C0 E0            [24]  946 	push	acc
      0004AF C0 E0            [24]  947 	push	acc
      0004B1 C0 E0            [24]  948 	push	acc
      0004B3 8C 82            [24]  949 	mov	dpl,r4
      0004B5 8D 83            [24]  950 	mov	dph,r5
      0004B7 8E F0            [24]  951 	mov	b,r6
      0004B9 EF               [12]  952 	mov	a,r7
      0004BA 12r00r00         [24]  953 	lcall	__modulong
      0004BD AC 82            [24]  954 	mov	r4,dpl
      0004BF AD 83            [24]  955 	mov	r5,dph
      0004C1 AE F0            [24]  956 	mov	r6,b
      0004C3 FF               [12]  957 	mov	r7,a
      0004C4 E5 81            [12]  958 	mov	a,sp
      0004C6 24 FC            [12]  959 	add	a,#0xfc
      0004C8 F5 81            [12]  960 	mov	sp,a
      0004CA 78r27            [12]  961 	mov	r0,#(_lastTime + 0x0007)
      0004CC EC               [12]  962 	mov	a,r4
      0004CD F2               [24]  963 	movx	@r0,a
                                    964 ;	time.c:140: days=0;
      0004CE E5*00            [12]  965 	mov	a,_bp
      0004D0 24 09            [12]  966 	add	a,#0x09
      0004D2 F8               [12]  967 	mov	r0,a
      0004D3 E4               [12]  968 	clr	a
      0004D4 F6               [12]  969 	mov	@r0,a
      0004D5 08               [12]  970 	inc	r0
      0004D6 F6               [12]  971 	mov	@r0,a
      0004D7 08               [12]  972 	inc	r0
      0004D8 F6               [12]  973 	mov	@r0,a
      0004D9 08               [12]  974 	inc	r0
      0004DA F6               [12]  975 	mov	@r0,a
                                    976 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      0004DB 7A B2            [12]  977 	mov	r2,#0xB2
      0004DD 7B 07            [12]  978 	mov	r3,#0x07
      0004DF                        979 00101$:
      0004DF 74 03            [12]  980 	mov	a,#0x03
      0004E1 5A               [12]  981 	anl	a,r2
      0004E2 FE               [12]  982 	mov	r6,a
      0004E3 7F 00            [12]  983 	mov	r7,#0x00
      0004E5 4F               [12]  984 	orl	a,r7
      0004E6 70 06            [24]  985 	jnz	00118$
      0004E8 7E 6E            [12]  986 	mov	r6,#0x6E
      0004EA 7F 01            [12]  987 	mov	r7,#0x01
      0004EC 80 04            [24]  988 	sjmp	00119$
      0004EE                        989 00118$:
      0004EE 7E 6D            [12]  990 	mov	r6,#0x6D
      0004F0 7F 01            [12]  991 	mov	r7,#0x01
      0004F2                        992 00119$:
      0004F2 EF               [12]  993 	mov	a,r7
      0004F3 33               [12]  994 	rlc	a
      0004F4 95 E0            [12]  995 	subb	a,acc
      0004F6 FD               [12]  996 	mov	r5,a
      0004F7 FC               [12]  997 	mov	r4,a
      0004F8 E5*00            [12]  998 	mov	a,_bp
      0004FA 24 09            [12]  999 	add	a,#0x09
      0004FC F8               [12] 1000 	mov	r0,a
      0004FD EE               [12] 1001 	mov	a,r6
      0004FE 26               [12] 1002 	add	a,@r0
      0004FF FE               [12] 1003 	mov	r6,a
      000500 EF               [12] 1004 	mov	a,r7
      000501 08               [12] 1005 	inc	r0
      000502 36               [12] 1006 	addc	a,@r0
      000503 FF               [12] 1007 	mov	r7,a
      000504 ED               [12] 1008 	mov	a,r5
      000505 08               [12] 1009 	inc	r0
      000506 36               [12] 1010 	addc	a,@r0
      000507 FD               [12] 1011 	mov	r5,a
      000508 EC               [12] 1012 	mov	a,r4
      000509 08               [12] 1013 	inc	r0
      00050A 36               [12] 1014 	addc	a,@r0
      00050B FC               [12] 1015 	mov	r4,a
      00050C E5*00            [12] 1016 	mov	a,_bp
      00050E 24 09            [12] 1017 	add	a,#0x09
      000510 F8               [12] 1018 	mov	r0,a
      000511 A6 06            [24] 1019 	mov	@r0,ar6
      000513 08               [12] 1020 	inc	r0
      000514 A6 07            [24] 1021 	mov	@r0,ar7
      000516 08               [12] 1022 	inc	r0
      000517 A6 05            [24] 1023 	mov	@r0,ar5
      000519 08               [12] 1024 	inc	r0
      00051A A6 04            [24] 1025 	mov	@r0,ar4
      00051C E5*00            [12] 1026 	mov	a,_bp
      00051E 24 05            [12] 1027 	add	a,#0x05
      000520 F8               [12] 1028 	mov	r0,a
      000521 C3               [12] 1029 	clr	c
      000522 E6               [12] 1030 	mov	a,@r0
      000523 9E               [12] 1031 	subb	a,r6
      000524 08               [12] 1032 	inc	r0
      000525 E6               [12] 1033 	mov	a,@r0
      000526 9F               [12] 1034 	subb	a,r7
      000527 08               [12] 1035 	inc	r0
      000528 E6               [12] 1036 	mov	a,@r0
      000529 9D               [12] 1037 	subb	a,r5
      00052A 08               [12] 1038 	inc	r0
      00052B E6               [12] 1039 	mov	a,@r0
      00052C 9C               [12] 1040 	subb	a,r4
      00052D 40 07            [24] 1041 	jc	00103$
                                   1042 ;	time.c:142: year++;
      00052F 0A               [12] 1043 	inc	r2
      000530 BA 00 AC         [24] 1044 	cjne	r2,#0x00,00101$
      000533 0B               [12] 1045 	inc	r3
      000534 80 A9            [24] 1046 	sjmp	00101$
      000536                       1047 00103$:
                                   1048 ;	time.c:144: lastTime.tm_year=year-1900;
      000536 EA               [12] 1049 	mov	a,r2
      000537 24 94            [12] 1050 	add	a,#0x94
      000539 FE               [12] 1051 	mov	r6,a
      00053A EB               [12] 1052 	mov	a,r3
      00053B 34 F8            [12] 1053 	addc	a,#0xF8
      00053D FF               [12] 1054 	mov	r7,a
      00053E 78r25            [12] 1055 	mov	r0,#(_lastTime + 0x0005)
      000540 EE               [12] 1056 	mov	a,r6
      000541 F2               [24] 1057 	movx	@r0,a
      000542 08               [12] 1058 	inc	r0
      000543 EF               [12] 1059 	mov	a,r7
      000544 F2               [24] 1060 	movx	@r0,a
                                   1061 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
      000545 74 03            [12] 1062 	mov	a,#0x03
      000547 5A               [12] 1063 	anl	a,r2
      000548 FE               [12] 1064 	mov	r6,a
      000549 7F 00            [12] 1065 	mov	r7,#0x00
      00054B 4F               [12] 1066 	orl	a,r7
      00054C 70 06            [24] 1067 	jnz	00120$
      00054E 7C 6E            [12] 1068 	mov	r4,#0x6E
      000550 7D 01            [12] 1069 	mov	r5,#0x01
      000552 80 04            [24] 1070 	sjmp	00121$
      000554                       1071 00120$:
      000554 7C 6D            [12] 1072 	mov	r4,#0x6D
      000556 7D 01            [12] 1073 	mov	r5,#0x01
      000558                       1074 00121$:
      000558 ED               [12] 1075 	mov	a,r5
      000559 33               [12] 1076 	rlc	a
      00055A 95 E0            [12] 1077 	subb	a,acc
      00055C FB               [12] 1078 	mov	r3,a
      00055D FA               [12] 1079 	mov	r2,a
      00055E E5*00            [12] 1080 	mov	a,_bp
      000560 24 09            [12] 1081 	add	a,#0x09
      000562 F8               [12] 1082 	mov	r0,a
      000563 E6               [12] 1083 	mov	a,@r0
      000564 C3               [12] 1084 	clr	c
      000565 9C               [12] 1085 	subb	a,r4
      000566 F6               [12] 1086 	mov	@r0,a
      000567 08               [12] 1087 	inc	r0
      000568 E6               [12] 1088 	mov	a,@r0
      000569 9D               [12] 1089 	subb	a,r5
      00056A F6               [12] 1090 	mov	@r0,a
      00056B 08               [12] 1091 	inc	r0
      00056C E6               [12] 1092 	mov	a,@r0
      00056D 9B               [12] 1093 	subb	a,r3
      00056E F6               [12] 1094 	mov	@r0,a
      00056F 08               [12] 1095 	inc	r0
      000570 E6               [12] 1096 	mov	a,@r0
      000571 9A               [12] 1097 	subb	a,r2
      000572 F6               [12] 1098 	mov	@r0,a
                                   1099 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
      000573 E5*00            [12] 1100 	mov	a,_bp
      000575 24 05            [12] 1101 	add	a,#0x05
      000577 F8               [12] 1102 	mov	r0,a
      000578 E5*00            [12] 1103 	mov	a,_bp
      00057A 24 09            [12] 1104 	add	a,#0x09
      00057C F9               [12] 1105 	mov	r1,a
      00057D E6               [12] 1106 	mov	a,@r0
      00057E C3               [12] 1107 	clr	c
      00057F 97               [12] 1108 	subb	a,@r1
      000580 F6               [12] 1109 	mov	@r0,a
      000581 08               [12] 1110 	inc	r0
      000582 E6               [12] 1111 	mov	a,@r0
      000583 09               [12] 1112 	inc	r1
      000584 97               [12] 1113 	subb	a,@r1
      000585 F6               [12] 1114 	mov	@r0,a
      000586 08               [12] 1115 	inc	r0
      000587 E6               [12] 1116 	mov	a,@r0
      000588 09               [12] 1117 	inc	r1
      000589 97               [12] 1118 	subb	a,@r1
      00058A F6               [12] 1119 	mov	@r0,a
      00058B 08               [12] 1120 	inc	r0
      00058C E6               [12] 1121 	mov	a,@r0
      00058D 09               [12] 1122 	inc	r1
      00058E 97               [12] 1123 	subb	a,@r1
      00058F F6               [12] 1124 	mov	@r0,a
                                   1125 ;	time.c:148: lastTime.tm_yday=epoch;
      000590 E5*00            [12] 1126 	mov	a,_bp
      000592 24 05            [12] 1127 	add	a,#0x05
      000594 F8               [12] 1128 	mov	r0,a
      000595 86 04            [24] 1129 	mov	ar4,@r0
      000597 08               [12] 1130 	inc	r0
      000598 86 05            [24] 1131 	mov	ar5,@r0
      00059A 78r28            [12] 1132 	mov	r0,#(_lastTime + 0x0008)
      00059C EC               [12] 1133 	mov	a,r4
      00059D F2               [24] 1134 	movx	@r0,a
      00059E 08               [12] 1135 	inc	r0
      00059F ED               [12] 1136 	mov	a,r5
      0005A0 F2               [24] 1137 	movx	@r0,a
                                   1138 ;	time.c:153: for (month=0; month<12; month++) {
      0005A1 7D 00            [12] 1139 	mov	r5,#0x00
      0005A3                       1140 00114$:
                                   1141 ;	time.c:154: if (month==1) { // februari
      0005A3 BD 01 0C         [24] 1142 	cjne	r5,#0x01,00108$
                                   1143 ;	time.c:155: if (LEAP_YEAR(year)) {
      0005A6 EE               [12] 1144 	mov	a,r6
      0005A7 4F               [12] 1145 	orl	a,r7
      0005A8 70 04            [24] 1146 	jnz	00105$
                                   1147 ;	time.c:156: monthLength=29;
      0005AA 7C 1D            [12] 1148 	mov	r4,#0x1D
      0005AC 80 0A            [24] 1149 	sjmp	00109$
      0005AE                       1150 00105$:
                                   1151 ;	time.c:158: monthLength=28;
      0005AE 7C 1C            [12] 1152 	mov	r4,#0x1C
      0005B0 80 06            [24] 1153 	sjmp	00109$
      0005B2                       1154 00108$:
                                   1155 ;	time.c:161: monthLength = monthDays[month];
      0005B2 ED               [12] 1156 	mov	a,r5
      0005B3 90r00r00         [24] 1157 	mov	dptr,#_monthDays
      0005B6 93               [24] 1158 	movc	a,@a+dptr
      0005B7 FC               [12] 1159 	mov	r4,a
      0005B8                       1160 00109$:
                                   1161 ;	time.c:164: if (epoch>=monthLength) {
      0005B8 A8*00            [24] 1162 	mov	r0,_bp
      0005BA 08               [12] 1163 	inc	r0
      0005BB A6 04            [24] 1164 	mov	@r0,ar4
      0005BD 08               [12] 1165 	inc	r0
      0005BE 76 00            [12] 1166 	mov	@r0,#0x00
      0005C0 08               [12] 1167 	inc	r0
      0005C1 76 00            [12] 1168 	mov	@r0,#0x00
      0005C3 08               [12] 1169 	inc	r0
      0005C4 76 00            [12] 1170 	mov	@r0,#0x00
      0005C6 E5*00            [12] 1171 	mov	a,_bp
      0005C8 24 05            [12] 1172 	add	a,#0x05
      0005CA F8               [12] 1173 	mov	r0,a
      0005CB A9*00            [24] 1174 	mov	r1,_bp
      0005CD 09               [12] 1175 	inc	r1
      0005CE C3               [12] 1176 	clr	c
      0005CF E6               [12] 1177 	mov	a,@r0
      0005D0 97               [12] 1178 	subb	a,@r1
      0005D1 08               [12] 1179 	inc	r0
      0005D2 E6               [12] 1180 	mov	a,@r0
      0005D3 09               [12] 1181 	inc	r1
      0005D4 97               [12] 1182 	subb	a,@r1
      0005D5 08               [12] 1183 	inc	r0
      0005D6 E6               [12] 1184 	mov	a,@r0
      0005D7 09               [12] 1185 	inc	r1
      0005D8 97               [12] 1186 	subb	a,@r1
      0005D9 08               [12] 1187 	inc	r0
      0005DA E6               [12] 1188 	mov	a,@r0
      0005DB 09               [12] 1189 	inc	r1
      0005DC 97               [12] 1190 	subb	a,@r1
      0005DD 40 21            [24] 1191 	jc	00113$
                                   1192 ;	time.c:165: epoch-=monthLength;
      0005DF E5*00            [12] 1193 	mov	a,_bp
      0005E1 24 05            [12] 1194 	add	a,#0x05
      0005E3 F8               [12] 1195 	mov	r0,a
      0005E4 A9*00            [24] 1196 	mov	r1,_bp
      0005E6 09               [12] 1197 	inc	r1
      0005E7 E6               [12] 1198 	mov	a,@r0
      0005E8 C3               [12] 1199 	clr	c
      0005E9 97               [12] 1200 	subb	a,@r1
      0005EA F6               [12] 1201 	mov	@r0,a
      0005EB 08               [12] 1202 	inc	r0
      0005EC E6               [12] 1203 	mov	a,@r0
      0005ED 09               [12] 1204 	inc	r1
      0005EE 97               [12] 1205 	subb	a,@r1
      0005EF F6               [12] 1206 	mov	@r0,a
      0005F0 08               [12] 1207 	inc	r0
      0005F1 E6               [12] 1208 	mov	a,@r0
      0005F2 09               [12] 1209 	inc	r1
      0005F3 97               [12] 1210 	subb	a,@r1
      0005F4 F6               [12] 1211 	mov	@r0,a
      0005F5 08               [12] 1212 	inc	r0
      0005F6 E6               [12] 1213 	mov	a,@r0
      0005F7 09               [12] 1214 	inc	r1
      0005F8 97               [12] 1215 	subb	a,@r1
      0005F9 F6               [12] 1216 	mov	@r0,a
                                   1217 ;	time.c:153: for (month=0; month<12; month++) {
      0005FA 0D               [12] 1218 	inc	r5
      0005FB BD 0C 00         [24] 1219 	cjne	r5,#0x0C,00156$
      0005FE                       1220 00156$:
      0005FE 40 A3            [24] 1221 	jc	00114$
      000600                       1222 00113$:
                                   1223 ;	time.c:170: lastTime.tm_mon=month;
      000600 78r24            [12] 1224 	mov	r0,#(_lastTime + 0x0004)
      000602 ED               [12] 1225 	mov	a,r5
      000603 F2               [24] 1226 	movx	@r0,a
                                   1227 ;	time.c:171: lastTime.tm_mday=epoch+1;
      000604 E5*00            [12] 1228 	mov	a,_bp
      000606 24 05            [12] 1229 	add	a,#0x05
      000608 F8               [12] 1230 	mov	r0,a
      000609 86 04            [24] 1231 	mov	ar4,@r0
      00060B 0C               [12] 1232 	inc	r4
      00060C 78r23            [12] 1233 	mov	r0,#(_lastTime + 0x0003)
      00060E EC               [12] 1234 	mov	a,r4
      00060F F2               [24] 1235 	movx	@r0,a
                                   1236 ;	time.c:173: lastTime.tm_isdst=0;
      000610 78r2A            [12] 1237 	mov	r0,#(_lastTime + 0x000a)
      000612 E4               [12] 1238 	clr	a
      000613 F2               [24] 1239 	movx	@r0,a
                                   1240 ;	time.c:175: return &lastTime;
      000614 90r00r20         [24] 1241 	mov	dptr,#_lastTime
      000617 75 F0 60         [24] 1242 	mov	b,#0x60
      00061A 85*00 81         [24] 1243 	mov	sp,_bp
      00061D D0*00            [24] 1244 	pop	_bp
      00061F 22               [24] 1245 	ret
                                   1246 ;------------------------------------------------------------
                                   1247 ;Allocation info for local variables in function 'mktime'
                                   1248 ;------------------------------------------------------------
                                   1249 ;timeptr                   Allocated to stack - _bp +1
                                   1250 ;year                      Allocated to stack - _bp +4
                                   1251 ;month                     Allocated to stack - _bp +6
                                   1252 ;i                         Allocated to stack - _bp +8
                                   1253 ;seconds                   Allocated to stack - _bp +10
                                   1254 ;------------------------------------------------------------
                                   1255 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                                   1256 ;	-----------------------------------------
                                   1257 ;	 function mktime
                                   1258 ;	-----------------------------------------
      000620                       1259 _mktime:
      000620 C0*00            [24] 1260 	push	_bp
      000622 85 81*00         [24] 1261 	mov	_bp,sp
      000625 C0 82            [24] 1262 	push	dpl
      000627 C0 83            [24] 1263 	push	dph
      000629 C0 F0            [24] 1264 	push	b
      00062B E5 81            [12] 1265 	mov	a,sp
      00062D 24 0A            [12] 1266 	add	a,#0x0A
      00062F F5 81            [12] 1267 	mov	sp,a
                                   1268 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      000631 A8*00            [24] 1269 	mov	r0,_bp
      000633 08               [12] 1270 	inc	r0
      000634 74 05            [12] 1271 	mov	a,#0x05
      000636 26               [12] 1272 	add	a,@r0
      000637 FA               [12] 1273 	mov	r2,a
      000638 E4               [12] 1274 	clr	a
      000639 08               [12] 1275 	inc	r0
      00063A 36               [12] 1276 	addc	a,@r0
      00063B FB               [12] 1277 	mov	r3,a
      00063C 08               [12] 1278 	inc	r0
      00063D 86 04            [24] 1279 	mov	ar4,@r0
      00063F 8A 82            [24] 1280 	mov	dpl,r2
      000641 8B 83            [24] 1281 	mov	dph,r3
      000643 8C F0            [24] 1282 	mov	b,r4
      000645 12r00r00         [24] 1283 	lcall	__gptrget
      000648 FA               [12] 1284 	mov	r2,a
      000649 A3               [24] 1285 	inc	dptr
      00064A 12r00r00         [24] 1286 	lcall	__gptrget
      00064D FB               [12] 1287 	mov	r3,a
      00064E E5*00            [12] 1288 	mov	a,_bp
      000650 24 04            [12] 1289 	add	a,#0x04
      000652 F8               [12] 1290 	mov	r0,a
      000653 74 6C            [12] 1291 	mov	a,#0x6C
      000655 2A               [12] 1292 	add	a,r2
      000656 F6               [12] 1293 	mov	@r0,a
      000657 74 07            [12] 1294 	mov	a,#0x07
      000659 3B               [12] 1295 	addc	a,r3
      00065A 08               [12] 1296 	inc	r0
      00065B F6               [12] 1297 	mov	@r0,a
      00065C A8*00            [24] 1298 	mov	r0,_bp
      00065E 08               [12] 1299 	inc	r0
      00065F 74 04            [12] 1300 	mov	a,#0x04
      000661 26               [12] 1301 	add	a,@r0
      000662 FA               [12] 1302 	mov	r2,a
      000663 E4               [12] 1303 	clr	a
      000664 08               [12] 1304 	inc	r0
      000665 36               [12] 1305 	addc	a,@r0
      000666 FB               [12] 1306 	mov	r3,a
      000667 08               [12] 1307 	inc	r0
      000668 86 04            [24] 1308 	mov	ar4,@r0
      00066A 8A 82            [24] 1309 	mov	dpl,r2
      00066C 8B 83            [24] 1310 	mov	dph,r3
      00066E 8C F0            [24] 1311 	mov	b,r4
      000670 12r00r00         [24] 1312 	lcall	__gptrget
      000673 FA               [12] 1313 	mov	r2,a
      000674 E5*00            [12] 1314 	mov	a,_bp
      000676 24 06            [12] 1315 	add	a,#0x06
      000678 F8               [12] 1316 	mov	r0,a
      000679 A6 02            [24] 1317 	mov	@r0,ar2
      00067B 08               [12] 1318 	inc	r0
      00067C 76 00            [12] 1319 	mov	@r0,#0x00
                                   1320 ;	time.c:183: CheckTime(timeptr);
      00067E A8*00            [24] 1321 	mov	r0,_bp
      000680 08               [12] 1322 	inc	r0
      000681 86 82            [24] 1323 	mov	dpl,@r0
      000683 08               [12] 1324 	inc	r0
      000684 86 83            [24] 1325 	mov	dph,@r0
      000686 08               [12] 1326 	inc	r0
      000687 86 F0            [24] 1327 	mov	b,@r0
      000689 12r00rA5         [24] 1328 	lcall	_CheckTime
                                   1329 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
      00068C E5*00            [12] 1330 	mov	a,_bp
      00068E 24 04            [12] 1331 	add	a,#0x04
      000690 F8               [12] 1332 	mov	r0,a
      000691 E6               [12] 1333 	mov	a,@r0
      000692 24 4E            [12] 1334 	add	a,#0x4E
      000694 FB               [12] 1335 	mov	r3,a
      000695 08               [12] 1336 	inc	r0
      000696 E6               [12] 1337 	mov	a,@r0
      000697 34 F8            [12] 1338 	addc	a,#0xF8
      000699 FA               [12] 1339 	mov	r2,a
      00069A 33               [12] 1340 	rlc	a
      00069B 95 E0            [12] 1341 	subb	a,acc
      00069D FC               [12] 1342 	mov	r4,a
      00069E FF               [12] 1343 	mov	r7,a
      00069F C0 03            [24] 1344 	push	ar3
      0006A1 C0 02            [24] 1345 	push	ar2
      0006A3 C0 04            [24] 1346 	push	ar4
      0006A5 C0 07            [24] 1347 	push	ar7
      0006A7 90 33 80         [24] 1348 	mov	dptr,#0x3380
      0006AA 75 F0 E1         [24] 1349 	mov	b,#0xE1
      0006AD 74 01            [12] 1350 	mov	a,#0x01
      0006AF 12r00r00         [24] 1351 	lcall	__mullong
      0006B2 AC 82            [24] 1352 	mov	r4,dpl
      0006B4 AD 83            [24] 1353 	mov	r5,dph
      0006B6 AE F0            [24] 1354 	mov	r6,b
      0006B8 FF               [12] 1355 	mov	r7,a
      0006B9 E5 81            [12] 1356 	mov	a,sp
      0006BB 24 FC            [12] 1357 	add	a,#0xfc
      0006BD F5 81            [12] 1358 	mov	sp,a
      0006BF E5*00            [12] 1359 	mov	a,_bp
      0006C1 24 0A            [12] 1360 	add	a,#0x0a
      0006C3 F8               [12] 1361 	mov	r0,a
      0006C4 A6 04            [24] 1362 	mov	@r0,ar4
      0006C6 08               [12] 1363 	inc	r0
      0006C7 A6 05            [24] 1364 	mov	@r0,ar5
      0006C9 08               [12] 1365 	inc	r0
      0006CA A6 06            [24] 1366 	mov	@r0,ar6
      0006CC 08               [12] 1367 	inc	r0
      0006CD A6 07            [24] 1368 	mov	@r0,ar7
                                   1369 ;	time.c:189: for (i=1970; i<year; i++) {
      0006CF E5*00            [12] 1370 	mov	a,_bp
      0006D1 24 0A            [12] 1371 	add	a,#0x0a
      0006D3 F8               [12] 1372 	mov	r0,a
      0006D4 86 02            [24] 1373 	mov	ar2,@r0
      0006D6 08               [12] 1374 	inc	r0
      0006D7 86 03            [24] 1375 	mov	ar3,@r0
      0006D9 08               [12] 1376 	inc	r0
      0006DA 86 06            [24] 1377 	mov	ar6,@r0
      0006DC 08               [12] 1378 	inc	r0
      0006DD 86 07            [24] 1379 	mov	ar7,@r0
      0006DF E5*00            [12] 1380 	mov	a,_bp
      0006E1 24 08            [12] 1381 	add	a,#0x08
      0006E3 F8               [12] 1382 	mov	r0,a
      0006E4 76 B2            [12] 1383 	mov	@r0,#0xB2
      0006E6 08               [12] 1384 	inc	r0
      0006E7 76 07            [12] 1385 	mov	@r0,#0x07
      0006E9                       1386 00110$:
      0006E9 E5*00            [12] 1387 	mov	a,_bp
      0006EB 24 08            [12] 1388 	add	a,#0x08
      0006ED F8               [12] 1389 	mov	r0,a
      0006EE E5*00            [12] 1390 	mov	a,_bp
      0006F0 24 04            [12] 1391 	add	a,#0x04
      0006F2 F9               [12] 1392 	mov	r1,a
      0006F3 C3               [12] 1393 	clr	c
      0006F4 E6               [12] 1394 	mov	a,@r0
      0006F5 97               [12] 1395 	subb	a,@r1
      0006F6 08               [12] 1396 	inc	r0
      0006F7 E6               [12] 1397 	mov	a,@r0
      0006F8 64 80            [12] 1398 	xrl	a,#0x80
      0006FA 09               [12] 1399 	inc	r1
      0006FB 87 F0            [24] 1400 	mov	b,@r1
      0006FD 63 F0 80         [24] 1401 	xrl	b,#0x80
      000700 95 F0            [12] 1402 	subb	a,b
      000702 50 4C            [24] 1403 	jnc	00124$
                                   1404 ;	time.c:190: if (LEAP_YEAR(i)) {
      000704 C0 07            [24] 1405 	push	ar7
      000706 C0 06            [24] 1406 	push	ar6
      000708 C0 03            [24] 1407 	push	ar3
      00070A C0 02            [24] 1408 	push	ar2
      00070C 74 04            [12] 1409 	mov	a,#0x04
      00070E C0 E0            [24] 1410 	push	acc
      000710 E4               [12] 1411 	clr	a
      000711 C0 E0            [24] 1412 	push	acc
      000713 E5*00            [12] 1413 	mov	a,_bp
      000715 24 08            [12] 1414 	add	a,#0x08
      000717 F8               [12] 1415 	mov	r0,a
      000718 86 82            [24] 1416 	mov	dpl,@r0
      00071A 08               [12] 1417 	inc	r0
      00071B 86 83            [24] 1418 	mov	dph,@r0
      00071D 12r00r00         [24] 1419 	lcall	__modsint
      000720 AC 82            [24] 1420 	mov	r4,dpl
      000722 AD 83            [24] 1421 	mov	r5,dph
      000724 15 81            [12] 1422 	dec	sp
      000726 15 81            [12] 1423 	dec	sp
      000728 D0 02            [24] 1424 	pop	ar2
      00072A D0 03            [24] 1425 	pop	ar3
      00072C D0 06            [24] 1426 	pop	ar6
      00072E D0 07            [24] 1427 	pop	ar7
      000730 EC               [12] 1428 	mov	a,r4
      000731 4D               [12] 1429 	orl	a,r5
      000732 70 0F            [24] 1430 	jnz	00111$
                                   1431 ;	time.c:191: seconds+= 60*60*24L;
      000734 74 80            [12] 1432 	mov	a,#0x80
      000736 2A               [12] 1433 	add	a,r2
      000737 FA               [12] 1434 	mov	r2,a
      000738 74 51            [12] 1435 	mov	a,#0x51
      00073A 3B               [12] 1436 	addc	a,r3
      00073B FB               [12] 1437 	mov	r3,a
      00073C 74 01            [12] 1438 	mov	a,#0x01
      00073E 3E               [12] 1439 	addc	a,r6
      00073F FE               [12] 1440 	mov	r6,a
      000740 E4               [12] 1441 	clr	a
      000741 3F               [12] 1442 	addc	a,r7
      000742 FF               [12] 1443 	mov	r7,a
      000743                       1444 00111$:
                                   1445 ;	time.c:189: for (i=1970; i<year; i++) {
      000743 E5*00            [12] 1446 	mov	a,_bp
      000745 24 08            [12] 1447 	add	a,#0x08
      000747 F8               [12] 1448 	mov	r0,a
      000748 06               [12] 1449 	inc	@r0
      000749 B6 00 02         [24] 1450 	cjne	@r0,#0x00,00142$
      00074C 08               [12] 1451 	inc	r0
      00074D 06               [12] 1452 	inc	@r0
      00074E                       1453 00142$:
      00074E 80 99            [24] 1454 	sjmp	00110$
      000750                       1455 00124$:
      000750 E5*00            [12] 1456 	mov	a,_bp
      000752 24 0A            [12] 1457 	add	a,#0x0a
      000754 F8               [12] 1458 	mov	r0,a
      000755 A6 02            [24] 1459 	mov	@r0,ar2
      000757 08               [12] 1460 	inc	r0
      000758 A6 03            [24] 1461 	mov	@r0,ar3
      00075A 08               [12] 1462 	inc	r0
      00075B A6 06            [24] 1463 	mov	@r0,ar6
      00075D 08               [12] 1464 	inc	r0
      00075E A6 07            [24] 1465 	mov	@r0,ar7
                                   1466 ;	time.c:196: for (i=0; i<month; i++) {
      000760 74 04            [12] 1467 	mov	a,#0x04
      000762 C0 E0            [24] 1468 	push	acc
      000764 E4               [12] 1469 	clr	a
      000765 C0 E0            [24] 1470 	push	acc
      000767 E5*00            [12] 1471 	mov	a,_bp
      000769 24 04            [12] 1472 	add	a,#0x04
      00076B F8               [12] 1473 	mov	r0,a
      00076C 86 82            [24] 1474 	mov	dpl,@r0
      00076E 08               [12] 1475 	inc	r0
      00076F 86 83            [24] 1476 	mov	dph,@r0
      000771 12r00r00         [24] 1477 	lcall	__modsint
      000774 AE 82            [24] 1478 	mov	r6,dpl
      000776 AF 83            [24] 1479 	mov	r7,dph
      000778 15 81            [12] 1480 	dec	sp
      00077A 15 81            [12] 1481 	dec	sp
      00077C 7C 00            [12] 1482 	mov	r4,#0x00
      00077E 7D 00            [12] 1483 	mov	r5,#0x00
      000780                       1484 00113$:
      000780 E5*00            [12] 1485 	mov	a,_bp
      000782 24 06            [12] 1486 	add	a,#0x06
      000784 F8               [12] 1487 	mov	r0,a
      000785 C3               [12] 1488 	clr	c
      000786 EC               [12] 1489 	mov	a,r4
      000787 96               [12] 1490 	subb	a,@r0
      000788 ED               [12] 1491 	mov	a,r5
      000789 64 80            [12] 1492 	xrl	a,#0x80
      00078B 08               [12] 1493 	inc	r0
      00078C 86 F0            [24] 1494 	mov	b,@r0
      00078E 63 F0 80         [24] 1495 	xrl	b,#0x80
      000791 95 F0            [12] 1496 	subb	a,b
      000793 40 03            [24] 1497 	jc	00143$
      000795 02r08r19         [24] 1498 	ljmp	00108$
      000798                       1499 00143$:
                                   1500 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
      000798 BC 01 20         [24] 1501 	cjne	r4,#0x01,00105$
      00079B BD 00 1D         [24] 1502 	cjne	r5,#0x00,00105$
      00079E EE               [12] 1503 	mov	a,r6
      00079F 4F               [12] 1504 	orl	a,r7
      0007A0 70 19            [24] 1505 	jnz	00105$
                                   1506 ;	time.c:198: seconds+= 60*60*24L*29;
      0007A2 E5*00            [12] 1507 	mov	a,_bp
      0007A4 24 0A            [12] 1508 	add	a,#0x0a
      0007A6 F8               [12] 1509 	mov	r0,a
      0007A7 74 80            [12] 1510 	mov	a,#0x80
      0007A9 26               [12] 1511 	add	a,@r0
      0007AA F6               [12] 1512 	mov	@r0,a
      0007AB 74 3B            [12] 1513 	mov	a,#0x3B
      0007AD 08               [12] 1514 	inc	r0
      0007AE 36               [12] 1515 	addc	a,@r0
      0007AF F6               [12] 1516 	mov	@r0,a
      0007B0 74 26            [12] 1517 	mov	a,#0x26
      0007B2 08               [12] 1518 	inc	r0
      0007B3 36               [12] 1519 	addc	a,@r0
      0007B4 F6               [12] 1520 	mov	@r0,a
      0007B5 E4               [12] 1521 	clr	a
      0007B6 08               [12] 1522 	inc	r0
      0007B7 36               [12] 1523 	addc	a,@r0
      0007B8 F6               [12] 1524 	mov	@r0,a
      0007B9 80 56            [24] 1525 	sjmp	00114$
      0007BB                       1526 00105$:
                                   1527 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      0007BB C0 06            [24] 1528 	push	ar6
      0007BD C0 07            [24] 1529 	push	ar7
      0007BF EC               [12] 1530 	mov	a,r4
      0007C0 24r00            [12] 1531 	add	a,#_monthDays
      0007C2 F5 82            [12] 1532 	mov	dpl,a
      0007C4 ED               [12] 1533 	mov	a,r5
      0007C5 34s00            [12] 1534 	addc	a,#(_monthDays >> 8)
      0007C7 F5 83            [12] 1535 	mov	dph,a
      0007C9 E4               [12] 1536 	clr	a
      0007CA 93               [24] 1537 	movc	a,@a+dptr
      0007CB FA               [12] 1538 	mov	r2,a
      0007CC 33               [12] 1539 	rlc	a
      0007CD 95 E0            [12] 1540 	subb	a,acc
      0007CF FB               [12] 1541 	mov	r3,a
      0007D0 FE               [12] 1542 	mov	r6,a
      0007D1 FF               [12] 1543 	mov	r7,a
      0007D2 C0 05            [24] 1544 	push	ar5
      0007D4 C0 04            [24] 1545 	push	ar4
      0007D6 C0 02            [24] 1546 	push	ar2
      0007D8 C0 03            [24] 1547 	push	ar3
      0007DA C0 06            [24] 1548 	push	ar6
      0007DC C0 07            [24] 1549 	push	ar7
      0007DE 90 51 80         [24] 1550 	mov	dptr,#0x5180
      0007E1 75 F0 01         [24] 1551 	mov	b,#0x01
      0007E4 E4               [12] 1552 	clr	a
      0007E5 12r00r00         [24] 1553 	lcall	__mullong
      0007E8 AA 82            [24] 1554 	mov	r2,dpl
      0007EA AB 83            [24] 1555 	mov	r3,dph
      0007EC AE F0            [24] 1556 	mov	r6,b
      0007EE FF               [12] 1557 	mov	r7,a
      0007EF E5 81            [12] 1558 	mov	a,sp
      0007F1 24 FC            [12] 1559 	add	a,#0xfc
      0007F3 F5 81            [12] 1560 	mov	sp,a
      0007F5 D0 04            [24] 1561 	pop	ar4
      0007F7 D0 05            [24] 1562 	pop	ar5
      0007F9 E5*00            [12] 1563 	mov	a,_bp
      0007FB 24 0A            [12] 1564 	add	a,#0x0a
      0007FD F8               [12] 1565 	mov	r0,a
      0007FE EA               [12] 1566 	mov	a,r2
      0007FF 26               [12] 1567 	add	a,@r0
      000800 F6               [12] 1568 	mov	@r0,a
      000801 EB               [12] 1569 	mov	a,r3
      000802 08               [12] 1570 	inc	r0
      000803 36               [12] 1571 	addc	a,@r0
      000804 F6               [12] 1572 	mov	@r0,a
      000805 EE               [12] 1573 	mov	a,r6
      000806 08               [12] 1574 	inc	r0
      000807 36               [12] 1575 	addc	a,@r0
      000808 F6               [12] 1576 	mov	@r0,a
      000809 EF               [12] 1577 	mov	a,r7
      00080A 08               [12] 1578 	inc	r0
      00080B 36               [12] 1579 	addc	a,@r0
      00080C F6               [12] 1580 	mov	@r0,a
                                   1581 ;	time.c:208: return seconds;
      00080D D0 07            [24] 1582 	pop	ar7
      00080F D0 06            [24] 1583 	pop	ar6
                                   1584 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000811                       1585 00114$:
                                   1586 ;	time.c:196: for (i=0; i<month; i++) {
      000811 0C               [12] 1587 	inc	r4
      000812 BC 00 01         [24] 1588 	cjne	r4,#0x00,00147$
      000815 0D               [12] 1589 	inc	r5
      000816                       1590 00147$:
      000816 02r07r80         [24] 1591 	ljmp	00113$
      000819                       1592 00108$:
                                   1593 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      000819 A8*00            [24] 1594 	mov	r0,_bp
      00081B 08               [12] 1595 	inc	r0
      00081C 74 03            [12] 1596 	mov	a,#0x03
      00081E 26               [12] 1597 	add	a,@r0
      00081F FD               [12] 1598 	mov	r5,a
      000820 E4               [12] 1599 	clr	a
      000821 08               [12] 1600 	inc	r0
      000822 36               [12] 1601 	addc	a,@r0
      000823 FE               [12] 1602 	mov	r6,a
      000824 08               [12] 1603 	inc	r0
      000825 86 07            [24] 1604 	mov	ar7,@r0
      000827 8D 82            [24] 1605 	mov	dpl,r5
      000829 8E 83            [24] 1606 	mov	dph,r6
      00082B 8F F0            [24] 1607 	mov	b,r7
      00082D 12r00r00         [24] 1608 	lcall	__gptrget
      000830 FD               [12] 1609 	mov	r5,a
      000831 7F 00            [12] 1610 	mov	r7,#0x00
      000833 1D               [12] 1611 	dec	r5
      000834 BD FF 01         [24] 1612 	cjne	r5,#0xFF,00148$
      000837 1F               [12] 1613 	dec	r7
      000838                       1614 00148$:
      000838 EF               [12] 1615 	mov	a,r7
      000839 33               [12] 1616 	rlc	a
      00083A 95 E0            [12] 1617 	subb	a,acc
      00083C FE               [12] 1618 	mov	r6,a
      00083D FC               [12] 1619 	mov	r4,a
      00083E C0 05            [24] 1620 	push	ar5
      000840 C0 07            [24] 1621 	push	ar7
      000842 C0 06            [24] 1622 	push	ar6
      000844 C0 04            [24] 1623 	push	ar4
      000846 90 51 80         [24] 1624 	mov	dptr,#0x5180
      000849 75 F0 01         [24] 1625 	mov	b,#0x01
      00084C E4               [12] 1626 	clr	a
      00084D 12r00r00         [24] 1627 	lcall	__mullong
      000850 AC 82            [24] 1628 	mov	r4,dpl
      000852 AD 83            [24] 1629 	mov	r5,dph
      000854 AE F0            [24] 1630 	mov	r6,b
      000856 FF               [12] 1631 	mov	r7,a
      000857 E5 81            [12] 1632 	mov	a,sp
      000859 24 FC            [12] 1633 	add	a,#0xfc
      00085B F5 81            [12] 1634 	mov	sp,a
      00085D E5*00            [12] 1635 	mov	a,_bp
      00085F 24 0A            [12] 1636 	add	a,#0x0a
      000861 F8               [12] 1637 	mov	r0,a
      000862 EC               [12] 1638 	mov	a,r4
      000863 26               [12] 1639 	add	a,@r0
      000864 F6               [12] 1640 	mov	@r0,a
      000865 ED               [12] 1641 	mov	a,r5
      000866 08               [12] 1642 	inc	r0
      000867 36               [12] 1643 	addc	a,@r0
      000868 F6               [12] 1644 	mov	@r0,a
      000869 EE               [12] 1645 	mov	a,r6
      00086A 08               [12] 1646 	inc	r0
      00086B 36               [12] 1647 	addc	a,@r0
      00086C F6               [12] 1648 	mov	@r0,a
      00086D EF               [12] 1649 	mov	a,r7
      00086E 08               [12] 1650 	inc	r0
      00086F 36               [12] 1651 	addc	a,@r0
      000870 F6               [12] 1652 	mov	@r0,a
                                   1653 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
      000871 A8*00            [24] 1654 	mov	r0,_bp
      000873 08               [12] 1655 	inc	r0
      000874 74 02            [12] 1656 	mov	a,#0x02
      000876 26               [12] 1657 	add	a,@r0
      000877 FD               [12] 1658 	mov	r5,a
      000878 E4               [12] 1659 	clr	a
      000879 08               [12] 1660 	inc	r0
      00087A 36               [12] 1661 	addc	a,@r0
      00087B FE               [12] 1662 	mov	r6,a
      00087C 08               [12] 1663 	inc	r0
      00087D 86 07            [24] 1664 	mov	ar7,@r0
      00087F 8D 82            [24] 1665 	mov	dpl,r5
      000881 8E 83            [24] 1666 	mov	dph,r6
      000883 8F F0            [24] 1667 	mov	b,r7
      000885 12r00r00         [24] 1668 	lcall	__gptrget
      000888 FD               [12] 1669 	mov	r5,a
      000889 7F 00            [12] 1670 	mov	r7,#0x00
      00088B 7E 00            [12] 1671 	mov	r6,#0x00
      00088D 7C 00            [12] 1672 	mov	r4,#0x00
      00088F C0 05            [24] 1673 	push	ar5
      000891 C0 07            [24] 1674 	push	ar7
      000893 C0 06            [24] 1675 	push	ar6
      000895 C0 04            [24] 1676 	push	ar4
      000897 90 0E 10         [24] 1677 	mov	dptr,#0x0E10
      00089A E4               [12] 1678 	clr	a
      00089B F5 F0            [12] 1679 	mov	b,a
      00089D 12r00r00         [24] 1680 	lcall	__mullong
      0008A0 AC 82            [24] 1681 	mov	r4,dpl
      0008A2 AD 83            [24] 1682 	mov	r5,dph
      0008A4 AE F0            [24] 1683 	mov	r6,b
      0008A6 FF               [12] 1684 	mov	r7,a
      0008A7 E5 81            [12] 1685 	mov	a,sp
      0008A9 24 FC            [12] 1686 	add	a,#0xfc
      0008AB F5 81            [12] 1687 	mov	sp,a
      0008AD E5*00            [12] 1688 	mov	a,_bp
      0008AF 24 0A            [12] 1689 	add	a,#0x0a
      0008B1 F8               [12] 1690 	mov	r0,a
      0008B2 EC               [12] 1691 	mov	a,r4
      0008B3 26               [12] 1692 	add	a,@r0
      0008B4 F6               [12] 1693 	mov	@r0,a
      0008B5 ED               [12] 1694 	mov	a,r5
      0008B6 08               [12] 1695 	inc	r0
      0008B7 36               [12] 1696 	addc	a,@r0
      0008B8 F6               [12] 1697 	mov	@r0,a
      0008B9 EE               [12] 1698 	mov	a,r6
      0008BA 08               [12] 1699 	inc	r0
      0008BB 36               [12] 1700 	addc	a,@r0
      0008BC F6               [12] 1701 	mov	@r0,a
      0008BD EF               [12] 1702 	mov	a,r7
      0008BE 08               [12] 1703 	inc	r0
      0008BF 36               [12] 1704 	addc	a,@r0
      0008C0 F6               [12] 1705 	mov	@r0,a
                                   1706 ;	time.c:206: seconds+= timeptr->tm_min*60;
      0008C1 A8*00            [24] 1707 	mov	r0,_bp
      0008C3 08               [12] 1708 	inc	r0
      0008C4 74 01            [12] 1709 	mov	a,#0x01
      0008C6 26               [12] 1710 	add	a,@r0
      0008C7 FD               [12] 1711 	mov	r5,a
      0008C8 E4               [12] 1712 	clr	a
      0008C9 08               [12] 1713 	inc	r0
      0008CA 36               [12] 1714 	addc	a,@r0
      0008CB FE               [12] 1715 	mov	r6,a
      0008CC 08               [12] 1716 	inc	r0
      0008CD 86 07            [24] 1717 	mov	ar7,@r0
      0008CF 8D 82            [24] 1718 	mov	dpl,r5
      0008D1 8E 83            [24] 1719 	mov	dph,r6
      0008D3 8F F0            [24] 1720 	mov	b,r7
      0008D5 12r00r00         [24] 1721 	lcall	__gptrget
      0008D8 75 F0 3C         [24] 1722 	mov	b,#0x3C
      0008DB A4               [48] 1723 	mul	ab
      0008DC FD               [12] 1724 	mov	r5,a
      0008DD E5 F0            [12] 1725 	mov	a,b
      0008DF FF               [12] 1726 	mov	r7,a
      0008E0 33               [12] 1727 	rlc	a
      0008E1 95 E0            [12] 1728 	subb	a,acc
      0008E3 FE               [12] 1729 	mov	r6,a
      0008E4 FC               [12] 1730 	mov	r4,a
      0008E5 E5*00            [12] 1731 	mov	a,_bp
      0008E7 24 0A            [12] 1732 	add	a,#0x0a
      0008E9 F8               [12] 1733 	mov	r0,a
      0008EA ED               [12] 1734 	mov	a,r5
      0008EB 26               [12] 1735 	add	a,@r0
      0008EC F6               [12] 1736 	mov	@r0,a
      0008ED EF               [12] 1737 	mov	a,r7
      0008EE 08               [12] 1738 	inc	r0
      0008EF 36               [12] 1739 	addc	a,@r0
      0008F0 F6               [12] 1740 	mov	@r0,a
      0008F1 EE               [12] 1741 	mov	a,r6
      0008F2 08               [12] 1742 	inc	r0
      0008F3 36               [12] 1743 	addc	a,@r0
      0008F4 F6               [12] 1744 	mov	@r0,a
      0008F5 EC               [12] 1745 	mov	a,r4
      0008F6 08               [12] 1746 	inc	r0
      0008F7 36               [12] 1747 	addc	a,@r0
      0008F8 F6               [12] 1748 	mov	@r0,a
                                   1749 ;	time.c:207: seconds+= timeptr->tm_sec;
      0008F9 A8*00            [24] 1750 	mov	r0,_bp
      0008FB 08               [12] 1751 	inc	r0
      0008FC 86 82            [24] 1752 	mov	dpl,@r0
      0008FE 08               [12] 1753 	inc	r0
      0008FF 86 83            [24] 1754 	mov	dph,@r0
      000901 08               [12] 1755 	inc	r0
      000902 86 F0            [24] 1756 	mov	b,@r0
      000904 12r00r00         [24] 1757 	lcall	__gptrget
      000907 FF               [12] 1758 	mov	r7,a
      000908 E4               [12] 1759 	clr	a
      000909 FE               [12] 1760 	mov	r6,a
      00090A 33               [12] 1761 	rlc	a
      00090B 95 E0            [12] 1762 	subb	a,acc
      00090D FD               [12] 1763 	mov	r5,a
      00090E FC               [12] 1764 	mov	r4,a
      00090F E5*00            [12] 1765 	mov	a,_bp
      000911 24 0A            [12] 1766 	add	a,#0x0a
      000913 F8               [12] 1767 	mov	r0,a
      000914 EF               [12] 1768 	mov	a,r7
      000915 26               [12] 1769 	add	a,@r0
      000916 F6               [12] 1770 	mov	@r0,a
      000917 EE               [12] 1771 	mov	a,r6
      000918 08               [12] 1772 	inc	r0
      000919 36               [12] 1773 	addc	a,@r0
      00091A F6               [12] 1774 	mov	@r0,a
      00091B ED               [12] 1775 	mov	a,r5
      00091C 08               [12] 1776 	inc	r0
      00091D 36               [12] 1777 	addc	a,@r0
      00091E F6               [12] 1778 	mov	@r0,a
      00091F EC               [12] 1779 	mov	a,r4
      000920 08               [12] 1780 	inc	r0
      000921 36               [12] 1781 	addc	a,@r0
      000922 F6               [12] 1782 	mov	@r0,a
                                   1783 ;	time.c:208: return seconds;
      000923 E5*00            [12] 1784 	mov	a,_bp
      000925 24 0A            [12] 1785 	add	a,#0x0a
      000927 F8               [12] 1786 	mov	r0,a
      000928 86 82            [24] 1787 	mov	dpl,@r0
      00092A 08               [12] 1788 	inc	r0
      00092B 86 83            [24] 1789 	mov	dph,@r0
      00092D 08               [12] 1790 	inc	r0
      00092E 86 F0            [24] 1791 	mov	b,@r0
      000930 08               [12] 1792 	inc	r0
      000931 E6               [12] 1793 	mov	a,@r0
      000932 85*00 81         [24] 1794 	mov	sp,_bp
      000935 D0*00            [24] 1795 	pop	_bp
      000937 22               [24] 1796 	ret
                                   1797 	.area CSEG    (CODE)
                                   1798 	.area CONST   (CODE)
      000000                       1799 _monthDays:
      000000 1F                    1800 	.db #0x1F	;  31
      000001 1C                    1801 	.db #0x1C	;  28
      000002 1F                    1802 	.db #0x1F	;  31
      000003 1E                    1803 	.db #0x1E	;  30
      000004 1F                    1804 	.db #0x1F	;  31
      000005 1E                    1805 	.db #0x1E	;  30
      000006 1F                    1806 	.db #0x1F	;  31
      000007 1F                    1807 	.db #0x1F	;  31
      000008 1E                    1808 	.db #0x1E	;  30
      000009 1F                    1809 	.db #0x1F	;  31
      00000A 1E                    1810 	.db #0x1E	;  30
      00000B 1F                    1811 	.db #0x1F	;  31
      00000C                       1812 ___month:
      00000Cr51s00                 1813 	.byte __str_1,(__str_1 >> 8)
      00000Er55s00                 1814 	.byte __str_2,(__str_2 >> 8)
      000010r59s00                 1815 	.byte __str_3,(__str_3 >> 8)
      000012r5Ds00                 1816 	.byte __str_4,(__str_4 >> 8)
      000014r61s00                 1817 	.byte __str_5,(__str_5 >> 8)
      000016r65s00                 1818 	.byte __str_6,(__str_6 >> 8)
      000018r69s00                 1819 	.byte __str_7,(__str_7 >> 8)
      00001Ar6Ds00                 1820 	.byte __str_8,(__str_8 >> 8)
      00001Cr71s00                 1821 	.byte __str_9,(__str_9 >> 8)
      00001Er75s00                 1822 	.byte __str_10,(__str_10 >> 8)
      000020r79s00                 1823 	.byte __str_11,(__str_11 >> 8)
      000022r7Ds00                 1824 	.byte __str_12,(__str_12 >> 8)
      000024                       1825 ___day:
      000024r81s00                 1826 	.byte __str_13,(__str_13 >> 8)
      000026r85s00                 1827 	.byte __str_14,(__str_14 >> 8)
      000028r89s00                 1828 	.byte __str_15,(__str_15 >> 8)
      00002Ar8Ds00                 1829 	.byte __str_16,(__str_16 >> 8)
      00002Cr91s00                 1830 	.byte __str_17,(__str_17 >> 8)
      00002Er95s00                 1831 	.byte __str_18,(__str_18 >> 8)
      000030r99s00                 1832 	.byte __str_19,(__str_19 >> 8)
      000032                       1833 ___str_0:
      000032 25 73 20 25 73 20 25  1834 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                    1835 	.db 0x0A
      000050 00                    1836 	.db 0x00
      000051                       1837 __str_1:
      000051 4A 61 6E              1838 	.ascii "Jan"
      000054 00                    1839 	.db 0x00
      000055                       1840 __str_2:
      000055 46 65 62              1841 	.ascii "Feb"
      000058 00                    1842 	.db 0x00
      000059                       1843 __str_3:
      000059 4D 61 72              1844 	.ascii "Mar"
      00005C 00                    1845 	.db 0x00
      00005D                       1846 __str_4:
      00005D 41 70 72              1847 	.ascii "Apr"
      000060 00                    1848 	.db 0x00
      000061                       1849 __str_5:
      000061 4D 61 79              1850 	.ascii "May"
      000064 00                    1851 	.db 0x00
      000065                       1852 __str_6:
      000065 4A 75 6E              1853 	.ascii "Jun"
      000068 00                    1854 	.db 0x00
      000069                       1855 __str_7:
      000069 4A 75 6C              1856 	.ascii "Jul"
      00006C 00                    1857 	.db 0x00
      00006D                       1858 __str_8:
      00006D 41 75 67              1859 	.ascii "Aug"
      000070 00                    1860 	.db 0x00
      000071                       1861 __str_9:
      000071 53 65 70              1862 	.ascii "Sep"
      000074 00                    1863 	.db 0x00
      000075                       1864 __str_10:
      000075 4F 63 74              1865 	.ascii "Oct"
      000078 00                    1866 	.db 0x00
      000079                       1867 __str_11:
      000079 4E 6F 76              1868 	.ascii "Nov"
      00007C 00                    1869 	.db 0x00
      00007D                       1870 __str_12:
      00007D 44 65 63              1871 	.ascii "Dec"
      000080 00                    1872 	.db 0x00
      000081                       1873 __str_13:
      000081 53 75 6E              1874 	.ascii "Sun"
      000084 00                    1875 	.db 0x00
      000085                       1876 __str_14:
      000085 4D 6F 6E              1877 	.ascii "Mon"
      000088 00                    1878 	.db 0x00
      000089                       1879 __str_15:
      000089 54 75 65              1880 	.ascii "Tue"
      00008C 00                    1881 	.db 0x00
      00008D                       1882 __str_16:
      00008D 57 65 64              1883 	.ascii "Wed"
      000090 00                    1884 	.db 0x00
      000091                       1885 __str_17:
      000091 54 68 75              1886 	.ascii "Thu"
      000094 00                    1887 	.db 0x00
      000095                       1888 __str_18:
      000095 46 72 69              1889 	.ascii "Fri"
      000098 00                    1890 	.db 0x00
      000099                       1891 __str_19:
      000099 53 61 74              1892 	.ascii "Sat"
      00009C 00                    1893 	.db 0x00
                                   1894 	.area XINIT   (CODE)
                                   1895 	.area CABS    (ABS,CODE)
