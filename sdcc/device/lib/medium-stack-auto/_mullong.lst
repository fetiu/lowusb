                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.1 #9092 (Oct 23 2022) (Mac OS X x86_64)
                                      4 ; This file was generated Sun Oct 23 01:38:49 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _mullong
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __mullong
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function '_mullong'
                                     92 ;------------------------------------------------------------
                                     93 ;b                         Allocated to stack - _bp -6
                                     94 ;a                         Allocated to stack - _bp +5
                                     95 ;t                         Allocated to stack - _bp +9
                                     96 ;sloc0                     Allocated to stack - _bp +1
                                     97 ;------------------------------------------------------------
                                     98 ;	_mullong.c:734: _mullong (long a, long b)
                                     99 ;	-----------------------------------------
                                    100 ;	 function _mullong
                                    101 ;	-----------------------------------------
      000000                        102 __mullong:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 85 81*00         [24]  112 	mov	_bp,sp
      000005 C8               [12]  113 	xch	a,r0
      000006 E5 81            [12]  114 	mov	a,sp
      000008 24 0C            [12]  115 	add	a,#0x0C
      00000A F5 81            [12]  116 	mov	sp,a
      00000C E5*00            [12]  117 	mov	a,_bp
      00000E 24 05            [12]  118 	add	a,#0x05
      000010 C8               [12]  119 	xch	a,r0
      000011 A6 82            [24]  120 	mov	@r0,dpl
      000013 08               [12]  121 	inc	r0
      000014 A6 83            [24]  122 	mov	@r0,dph
      000016 08               [12]  123 	inc	r0
      000017 A6 F0            [24]  124 	mov	@r0,b
      000019 08               [12]  125 	inc	r0
      00001A F6               [12]  126 	mov	@r0,a
                                    127 ;	_mullong.c:738: t.i.hi = bcast(a)->b.b0 * bcast(b)->b.b2;           // A
      00001B E5*00            [12]  128 	mov	a,_bp
      00001D 24 09            [12]  129 	add	a,#0x09
      00001F F9               [12]  130 	mov	r1,a
      000020 24 02            [12]  131 	add	a,#0x02
      000022 F8               [12]  132 	mov	r0,a
      000023 E5*00            [12]  133 	mov	a,_bp
      000025 24 05            [12]  134 	add	a,#0x05
      000027 FF               [12]  135 	mov	r7,a
      000028 FE               [12]  136 	mov	r6,a
      000029 C0 00            [24]  137 	push	ar0
      00002B A8 06            [24]  138 	mov	r0,ar6
      00002D 86 06            [24]  139 	mov	ar6,@r0
      00002F E5*00            [12]  140 	mov	a,_bp
      000031 24 FA            [12]  141 	add	a,#0xFA
      000033 FD               [12]  142 	mov	r5,a
      000034 FC               [12]  143 	mov	r4,a
      000035 0C               [12]  144 	inc	r4
      000036 0C               [12]  145 	inc	r4
      000037 A8 04            [24]  146 	mov	r0,ar4
      000039 86 04            [24]  147 	mov	ar4,@r0
      00003B D0 00            [24]  148 	pop	ar0
      00003D 8E F0            [24]  149 	mov	b,r6
      00003F EC               [12]  150 	mov	a,r4
      000040 A4               [48]  151 	mul	ab
      000041 F6               [12]  152 	mov	@r0,a
      000042 08               [12]  153 	inc	r0
      000043 A6 F0            [24]  154 	mov	@r0,b
                                    155 ;	_mullong.c:739: t.i.lo = bcast(a)->b.b0 * bcast(b)->b.b0;           // A
      000045 8F 06            [24]  156 	mov	ar6,r7
      000047 8E 00            [24]  157 	mov	ar0,r6
      000049 86 06            [24]  158 	mov	ar6,@r0
      00004B 8D 04            [24]  159 	mov	ar4,r5
      00004D 8C 00            [24]  160 	mov	ar0,r4
      00004F 86 04            [24]  161 	mov	ar4,@r0
      000051 8E F0            [24]  162 	mov	b,r6
      000053 EC               [12]  163 	mov	a,r4
      000054 A4               [48]  164 	mul	ab
      000055 F7               [12]  165 	mov	@r1,a
      000056 09               [12]  166 	inc	r1
      000057 A7 F0            [24]  167 	mov	@r1,b
                                    168 ;	_mullong.c:740: t.b.b3 += bcast(a)->b.b3 * bcast(b)->b.b0;          // G
      000059 E5*00            [12]  169 	mov	a,_bp
      00005B 24 09            [12]  170 	add	a,#0x09
      00005D 24 03            [12]  171 	add	a,#0x03
      00005F F9               [12]  172 	mov	r1,a
      000060 87 06            [24]  173 	mov	ar6,@r1
      000062 8F 04            [24]  174 	mov	ar4,r7
      000064 74 03            [12]  175 	mov	a,#0x03
      000066 2C               [12]  176 	add	a,r4
      000067 F8               [12]  177 	mov	r0,a
      000068 86 04            [24]  178 	mov	ar4,@r0
      00006A 8D 03            [24]  179 	mov	ar3,r5
      00006C 8B 00            [24]  180 	mov	ar0,r3
      00006E 86 03            [24]  181 	mov	ar3,@r0
      000070 8C F0            [24]  182 	mov	b,r4
      000072 EB               [12]  183 	mov	a,r3
      000073 A4               [48]  184 	mul	ab
      000074 2E               [12]  185 	add	a,r6
      000075 F7               [12]  186 	mov	@r1,a
                                    187 ;	_mullong.c:741: t.b.b3 += bcast(a)->b.b2 * bcast(b)->b.b1;          // F
      000076 87 06            [24]  188 	mov	ar6,@r1
      000078 8F 04            [24]  189 	mov	ar4,r7
      00007A 74 02            [12]  190 	mov	a,#0x02
      00007C 2C               [12]  191 	add	a,r4
      00007D F8               [12]  192 	mov	r0,a
      00007E 86 04            [24]  193 	mov	ar4,@r0
      000080 8D 03            [24]  194 	mov	ar3,r5
      000082 EB               [12]  195 	mov	a,r3
      000083 04               [12]  196 	inc	a
      000084 F8               [12]  197 	mov	r0,a
      000085 86 03            [24]  198 	mov	ar3,@r0
      000087 8C F0            [24]  199 	mov	b,r4
      000089 EB               [12]  200 	mov	a,r3
      00008A A4               [48]  201 	mul	ab
      00008B 2E               [12]  202 	add	a,r6
      00008C F7               [12]  203 	mov	@r1,a
                                    204 ;	_mullong.c:742: t.i.hi += bcast(a)->b.b2 * bcast(b)->b.b0;          // E <- b lost in .lst
      00008D E5*00            [12]  205 	mov	a,_bp
      00008F 24 09            [12]  206 	add	a,#0x09
      000091 24 02            [12]  207 	add	a,#0x02
      000093 F9               [12]  208 	mov	r1,a
      000094 87 04            [24]  209 	mov	ar4,@r1
      000096 09               [12]  210 	inc	r1
      000097 87 06            [24]  211 	mov	ar6,@r1
      000099 19               [12]  212 	dec	r1
      00009A 8F 03            [24]  213 	mov	ar3,r7
      00009C 74 02            [12]  214 	mov	a,#0x02
      00009E 2B               [12]  215 	add	a,r3
      00009F F8               [12]  216 	mov	r0,a
      0000A0 86 03            [24]  217 	mov	ar3,@r0
      0000A2 8D 02            [24]  218 	mov	ar2,r5
      0000A4 8A 00            [24]  219 	mov	ar0,r2
      0000A6 86 02            [24]  220 	mov	ar2,@r0
      0000A8 8B F0            [24]  221 	mov	b,r3
      0000AA EA               [12]  222 	mov	a,r2
      0000AB A4               [48]  223 	mul	ab
      0000AC AB F0            [24]  224 	mov	r3,b
      0000AE 2C               [12]  225 	add	a,r4
      0000AF FC               [12]  226 	mov	r4,a
      0000B0 EB               [12]  227 	mov	a,r3
      0000B1 3E               [12]  228 	addc	a,r6
      0000B2 FE               [12]  229 	mov	r6,a
      0000B3 A7 04            [24]  230 	mov	@r1,ar4
      0000B5 09               [12]  231 	inc	r1
      0000B6 A7 06            [24]  232 	mov	@r1,ar6
      0000B8 19               [12]  233 	dec	r1
                                    234 ;	_mullong.c:744: t.i.hi += bcast(a)->b.b1 * bcast(b)->b.b1;          // D <- b lost in .lst
      0000B9 87 04            [24]  235 	mov	ar4,@r1
      0000BB 09               [12]  236 	inc	r1
      0000BC 87 06            [24]  237 	mov	ar6,@r1
      0000BE 19               [12]  238 	dec	r1
      0000BF 8F 03            [24]  239 	mov	ar3,r7
      0000C1 EB               [12]  240 	mov	a,r3
      0000C2 04               [12]  241 	inc	a
      0000C3 F8               [12]  242 	mov	r0,a
      0000C4 86 03            [24]  243 	mov	ar3,@r0
      0000C6 8D 02            [24]  244 	mov	ar2,r5
      0000C8 EA               [12]  245 	mov	a,r2
      0000C9 04               [12]  246 	inc	a
      0000CA F8               [12]  247 	mov	r0,a
      0000CB 86 02            [24]  248 	mov	ar2,@r0
      0000CD 8B F0            [24]  249 	mov	b,r3
      0000CF EA               [12]  250 	mov	a,r2
      0000D0 A4               [48]  251 	mul	ab
      0000D1 AB F0            [24]  252 	mov	r3,b
      0000D3 2C               [12]  253 	add	a,r4
      0000D4 FC               [12]  254 	mov	r4,a
      0000D5 EB               [12]  255 	mov	a,r3
      0000D6 3E               [12]  256 	addc	a,r6
      0000D7 FE               [12]  257 	mov	r6,a
      0000D8 A7 04            [24]  258 	mov	@r1,ar4
      0000DA 09               [12]  259 	inc	r1
      0000DB A7 06            [24]  260 	mov	@r1,ar6
                                    261 ;	_mullong.c:746: bcast(a)->bi.b3 = bcast(a)->b.b1 * bcast(b)->b.b2;  // C
      0000DD 8F 06            [24]  262 	mov	ar6,r7
      0000DF 74 03            [12]  263 	mov	a,#0x03
      0000E1 2E               [12]  264 	add	a,r6
      0000E2 F9               [12]  265 	mov	r1,a
      0000E3 8F 06            [24]  266 	mov	ar6,r7
      0000E5 EE               [12]  267 	mov	a,r6
      0000E6 04               [12]  268 	inc	a
      0000E7 F8               [12]  269 	mov	r0,a
      0000E8 86 06            [24]  270 	mov	ar6,@r0
      0000EA 8D 04            [24]  271 	mov	ar4,r5
      0000EC 74 02            [12]  272 	mov	a,#0x02
      0000EE 2C               [12]  273 	add	a,r4
      0000EF F8               [12]  274 	mov	r0,a
      0000F0 86 04            [24]  275 	mov	ar4,@r0
      0000F2 8E F0            [24]  276 	mov	b,r6
      0000F4 EC               [12]  277 	mov	a,r4
      0000F5 A4               [48]  278 	mul	ab
      0000F6 F7               [12]  279 	mov	@r1,a
                                    280 ;	_mullong.c:747: bcast(a)->bi.i12 = bcast(a)->b.b1 * bcast(b)->b.b0; // C
      0000F7 8F 06            [24]  281 	mov	ar6,r7
      0000F9 EE               [12]  282 	mov	a,r6
      0000FA 04               [12]  283 	inc	a
      0000FB F9               [12]  284 	mov	r1,a
      0000FC 8F 06            [24]  285 	mov	ar6,r7
      0000FE EE               [12]  286 	mov	a,r6
      0000FF 04               [12]  287 	inc	a
      000100 F8               [12]  288 	mov	r0,a
      000101 86 06            [24]  289 	mov	ar6,@r0
      000103 8D 04            [24]  290 	mov	ar4,r5
      000105 8C 00            [24]  291 	mov	ar0,r4
      000107 86 04            [24]  292 	mov	ar4,@r0
      000109 8E F0            [24]  293 	mov	b,r6
      00010B EC               [12]  294 	mov	a,r4
      00010C A4               [48]  295 	mul	ab
      00010D F7               [12]  296 	mov	@r1,a
      00010E 09               [12]  297 	inc	r1
      00010F A7 F0            [24]  298 	mov	@r1,b
                                    299 ;	_mullong.c:749: bcast(b)->bi.b3 = bcast(a)->b.b0 * bcast(b)->b.b3;  // B
      000111 8D 06            [24]  300 	mov	ar6,r5
      000113 74 03            [12]  301 	mov	a,#0x03
      000115 2E               [12]  302 	add	a,r6
      000116 F9               [12]  303 	mov	r1,a
      000117 8F 06            [24]  304 	mov	ar6,r7
      000119 8E 00            [24]  305 	mov	ar0,r6
      00011B 86 06            [24]  306 	mov	ar6,@r0
      00011D 8D 04            [24]  307 	mov	ar4,r5
      00011F 74 03            [12]  308 	mov	a,#0x03
      000121 2C               [12]  309 	add	a,r4
      000122 F8               [12]  310 	mov	r0,a
      000123 86 04            [24]  311 	mov	ar4,@r0
      000125 8E F0            [24]  312 	mov	b,r6
      000127 EC               [12]  313 	mov	a,r4
      000128 A4               [48]  314 	mul	ab
      000129 F7               [12]  315 	mov	@r1,a
                                    316 ;	_mullong.c:750: bcast(b)->bi.i12 = bcast(a)->b.b0 * bcast(b)->b.b1; // B
      00012A 8D 06            [24]  317 	mov	ar6,r5
      00012C EE               [12]  318 	mov	a,r6
      00012D 04               [12]  319 	inc	a
      00012E F9               [12]  320 	mov	r1,a
      00012F 8F 06            [24]  321 	mov	ar6,r7
      000131 8E 00            [24]  322 	mov	ar0,r6
      000133 86 06            [24]  323 	mov	ar6,@r0
      000135 8D 04            [24]  324 	mov	ar4,r5
      000137 EC               [12]  325 	mov	a,r4
      000138 04               [12]  326 	inc	a
      000139 F8               [12]  327 	mov	r0,a
      00013A 86 04            [24]  328 	mov	ar4,@r0
      00013C 8E F0            [24]  329 	mov	b,r6
      00013E EC               [12]  330 	mov	a,r4
      00013F A4               [48]  331 	mul	ab
      000140 F7               [12]  332 	mov	@r1,a
      000141 09               [12]  333 	inc	r1
      000142 A7 F0            [24]  334 	mov	@r1,b
                                    335 ;	_mullong.c:752: bcast(b)->bi.b0 = 0;                                // B
      000144 8D 01            [24]  336 	mov	ar1,r5
      000146 77 00            [12]  337 	mov	@r1,#0x00
                                    338 ;	_mullong.c:753: bcast(a)->bi.b0 = 0;                                // C
      000148 8F 01            [24]  339 	mov	ar1,r7
      00014A 77 00            [12]  340 	mov	@r1,#0x00
                                    341 ;	_mullong.c:754: t.l += a;
      00014C E5*00            [12]  342 	mov	a,_bp
      00014E 24 09            [12]  343 	add	a,#0x09
      000150 F9               [12]  344 	mov	r1,a
      000151 A8*00            [24]  345 	mov	r0,_bp
      000153 08               [12]  346 	inc	r0
      000154 E7               [12]  347 	mov	a,@r1
      000155 F6               [12]  348 	mov	@r0,a
      000156 09               [12]  349 	inc	r1
      000157 E7               [12]  350 	mov	a,@r1
      000158 08               [12]  351 	inc	r0
      000159 F6               [12]  352 	mov	@r0,a
      00015A 09               [12]  353 	inc	r1
      00015B E7               [12]  354 	mov	a,@r1
      00015C 08               [12]  355 	inc	r0
      00015D F6               [12]  356 	mov	@r0,a
      00015E 09               [12]  357 	inc	r1
      00015F E7               [12]  358 	mov	a,@r1
      000160 08               [12]  359 	inc	r0
      000161 F6               [12]  360 	mov	@r0,a
      000162 19               [12]  361 	dec	r1
      000163 19               [12]  362 	dec	r1
      000164 19               [12]  363 	dec	r1
      000165 E5*00            [12]  364 	mov	a,_bp
      000167 24 05            [12]  365 	add	a,#0x05
      000169 F8               [12]  366 	mov	r0,a
      00016A 86 02            [24]  367 	mov	ar2,@r0
      00016C 08               [12]  368 	inc	r0
      00016D 86 03            [24]  369 	mov	ar3,@r0
      00016F 08               [12]  370 	inc	r0
      000170 86 06            [24]  371 	mov	ar6,@r0
      000172 08               [12]  372 	inc	r0
      000173 86 07            [24]  373 	mov	ar7,@r0
      000175 A8*00            [24]  374 	mov	r0,_bp
      000177 08               [12]  375 	inc	r0
      000178 EA               [12]  376 	mov	a,r2
      000179 26               [12]  377 	add	a,@r0
      00017A F6               [12]  378 	mov	@r0,a
      00017B EB               [12]  379 	mov	a,r3
      00017C 08               [12]  380 	inc	r0
      00017D 36               [12]  381 	addc	a,@r0
      00017E F6               [12]  382 	mov	@r0,a
      00017F EE               [12]  383 	mov	a,r6
      000180 08               [12]  384 	inc	r0
      000181 36               [12]  385 	addc	a,@r0
      000182 F6               [12]  386 	mov	@r0,a
      000183 EF               [12]  387 	mov	a,r7
      000184 08               [12]  388 	inc	r0
      000185 36               [12]  389 	addc	a,@r0
      000186 F6               [12]  390 	mov	@r0,a
      000187 A8*00            [24]  391 	mov	r0,_bp
      000189 08               [12]  392 	inc	r0
      00018A E6               [12]  393 	mov	a,@r0
      00018B F7               [12]  394 	mov	@r1,a
      00018C 09               [12]  395 	inc	r1
      00018D 08               [12]  396 	inc	r0
      00018E E6               [12]  397 	mov	a,@r0
      00018F F7               [12]  398 	mov	@r1,a
      000190 09               [12]  399 	inc	r1
      000191 08               [12]  400 	inc	r0
      000192 E6               [12]  401 	mov	a,@r0
      000193 F7               [12]  402 	mov	@r1,a
      000194 09               [12]  403 	inc	r1
      000195 08               [12]  404 	inc	r0
      000196 E6               [12]  405 	mov	a,@r0
      000197 F7               [12]  406 	mov	@r1,a
      000198 19               [12]  407 	dec	r1
      000199 19               [12]  408 	dec	r1
      00019A 19               [12]  409 	dec	r1
                                    410 ;	_mullong.c:756: return t.l + b;
      00019B E7               [12]  411 	mov	a,@r1
      00019C 09               [12]  412 	inc	r1
      00019D E7               [12]  413 	mov	a,@r1
      00019E 09               [12]  414 	inc	r1
      00019F E7               [12]  415 	mov	a,@r1
      0001A0 09               [12]  416 	inc	r1
      0001A1 E7               [12]  417 	mov	a,@r1
      0001A2 E5*00            [12]  418 	mov	a,_bp
      0001A4 24 FA            [12]  419 	add	a,#0xfa
      0001A6 F8               [12]  420 	mov	r0,a
      0001A7 86 04            [24]  421 	mov	ar4,@r0
      0001A9 08               [12]  422 	inc	r0
      0001AA 86 05            [24]  423 	mov	ar5,@r0
      0001AC 08               [12]  424 	inc	r0
      0001AD 86 06            [24]  425 	mov	ar6,@r0
      0001AF 08               [12]  426 	inc	r0
      0001B0 86 07            [24]  427 	mov	ar7,@r0
      0001B2 A8*00            [24]  428 	mov	r0,_bp
      0001B4 08               [12]  429 	inc	r0
      0001B5 EC               [12]  430 	mov	a,r4
      0001B6 26               [12]  431 	add	a,@r0
      0001B7 FC               [12]  432 	mov	r4,a
      0001B8 ED               [12]  433 	mov	a,r5
      0001B9 08               [12]  434 	inc	r0
      0001BA 36               [12]  435 	addc	a,@r0
      0001BB FD               [12]  436 	mov	r5,a
      0001BC EE               [12]  437 	mov	a,r6
      0001BD 08               [12]  438 	inc	r0
      0001BE 36               [12]  439 	addc	a,@r0
      0001BF FE               [12]  440 	mov	r6,a
      0001C0 EF               [12]  441 	mov	a,r7
      0001C1 08               [12]  442 	inc	r0
      0001C2 36               [12]  443 	addc	a,@r0
      0001C3 8C 82            [24]  444 	mov	dpl,r4
      0001C5 8D 83            [24]  445 	mov	dph,r5
      0001C7 8E F0            [24]  446 	mov	b,r6
      0001C9 85*00 81         [24]  447 	mov	sp,_bp
      0001CC D0*00            [24]  448 	pop	_bp
      0001CE 22               [24]  449 	ret
                                    450 	.area CSEG    (CODE)
                                    451 	.area CONST   (CODE)
                                    452 	.area XINIT   (CODE)
                                    453 	.area CABS    (ABS,CODE)
